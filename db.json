{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/Staticfile","path":"Staticfile","modified":0,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"themes/yelee/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/AcFun.png","path":"img/AcFun.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/CSDN.png","path":"img/CSDN.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/CodePen.png","path":"img/CodePen.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Coding.png","path":"img/Coding.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Github.png","path":"img/Github.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/LOFTER.png","path":"img/LOFTER.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Plunker.png","path":"img/Plunker.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Quora.png","path":"img/Quora.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/SegmentFault.png","path":"img/SegmentFault.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/TiddlyWiki.png","path":"img/TiddlyWiki.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/V2EX.png","path":"img/V2EX.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/bilibili.png","path":"img/bilibili.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/niconico.png","path":"img/niconico.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/博客园.png","path":"img/博客园.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/新浪微博.png","path":"img/新浪微博.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/知乎.png","path":"img/知乎.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/简书.png","path":"img/简书.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/网易云音乐.png","path":"img/网易云音乐.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/虾米音乐.png","path":"img/虾米音乐.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/豆瓣.png","path":"img/豆瓣.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","path":"js/GithubRepoWidget.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/mobile.js","path":"js/mobile.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/pc.js","path":"js/pc.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/embed.js","path":"js/embed.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","path":"background/backup/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","path":"background/backup/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","path":"background/backup/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","path":"background/backup/bg-4.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/Staticfile","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1482876836000},{"_id":"source/robots.txt","hash":"de692ddfc81d51c770dc32eeea80fc3cc2690d87","modified":1482876836000},{"_id":"themes/yelee/.gitignore","hash":"237760b38ce80bcc3a8b556566bef0295c145393","modified":1481892692000},{"_id":"themes/yelee/README.md","hash":"034155f3c0a9ac4a30bbdcfd549f151960f5ef8d","modified":1481892692000},{"_id":"themes/yelee/_config.yml","hash":"e3a22110c66294b29efd28c7bc6f269f7297c4c5","modified":1488975949623},{"_id":"themes/yelee/package.json","hash":"00357ef6f24eb049074da81809e98f973f528cca","modified":1481892692000},{"_id":"source/_posts/algorithm_divide.md","hash":"fd9cd7396d4a33548070809b9f37beb15d42dd02","modified":1488974132197},{"_id":"source/_posts/algorithm_greedy.md","hash":"ccd27d3edbec718843c717ac0cff5f0973a7ed4f","modified":1482876836000},{"_id":"source/_posts/collection.md","hash":"f92e20bab7ad3f110cd8517e178d74472391d350","modified":1488973481663},{"_id":"source/_posts/collection_arraylist.md","hash":"718e0acac106d603306e597405af0bb4cf9ebe6b","modified":1488973489655},{"_id":"source/_posts/collection_freamwork.md","hash":"1ee25db39435f2a2fda6e0b555364b01b572d91e","modified":1488973472477},{"_id":"source/_posts/collection_hashmap.md","hash":"dccc2f62303166da657cadffc960f44a912a715a","modified":1488973574424},{"_id":"source/_posts/collection_linkedlist.md","hash":"2c9aa43ed1474dc785017736498e1147c4fe55ef","modified":1488973844367},{"_id":"source/_posts/collection_list-set.md","hash":"70ff40eb88931e5453a7f8fdb0d085021a871eff","modified":1488973535186},{"_id":"source/_posts/collection_map.md","hash":"e7f473c58b3aae74a49a5b4dd599982020e76fd4","modified":1488973860134},{"_id":"source/_posts/collection_queue-deque.md","hash":"e417b06aad4fd34e44afc2162dad3a33db935de8","modified":1488973567062},{"_id":"source/_posts/collection_vector-stack.md","hash":"c6501df79b280081d623a3aff26665b11c2d06e3","modified":1488973849383},{"_id":"source/_posts/essay_bugle-sounded.md","hash":"002b2873d7a1f7b76a2cdce87587a30705d335e4","modified":1487594041528},{"_id":"source/_posts/essay_letter-to-me.md","hash":"6b0e9cc71bcd6e149653ea2121a3f29e0e1e2532","modified":1488970335251},{"_id":"source/_posts/essay_millenary-second.md","hash":"4e9a6a68316506e4d05a48818c9ad8200753798f","modified":1482876836000},{"_id":"source/_posts/essay_nocry.md","hash":"c53df9fdee35b6b291afe6119cdf65fa18a83c8d","modified":1482876836000},{"_id":"source/_posts/essay_what-happen-to-world.md","hash":"d248a830a31077513dd26e6902585430b26f94ba","modified":1488970374272},{"_id":"source/_posts/freamwork_ssh.md","hash":"2daf2ef7c52dd71649df4373002da3c928de7d89","modified":1488973179169},{"_id":"source/_posts/freamwork_ssm.md","hash":"fe1a5254971d3404bece991835c21c31a48b0456","modified":1488973187713},{"_id":"source/_posts/intercurrent_bug_arrayList-hashmap.md","hash":"528938e24c5882b6f32333896356a5a6693e6f8e","modified":1488970791737},{"_id":"source/_posts/intercurrent_collection.md","hash":"ba4093ab456560b5d59e45449074506b6ebd52cb","modified":1488971092965},{"_id":"source/_posts/intercurrent_condition-readwritelock.md","hash":"a318e3eb727ca7f32b7551a651d4dd4085677425","modified":1488970800815},{"_id":"source/_posts/intercurrent_cyclicbarrier-locksupport.md","hash":"f7df691c53e8659cc8f28d9bc39beef3cd6805ae","modified":1488971040017},{"_id":"source/_posts/intercurrent_lock_majorizing.md","hash":"cbc350330cb7b3c1581d395dfb71be8c792ce2f9","modified":1488971097388},{"_id":"source/_posts/intercurrent_lock_none.md","hash":"91c271d77fed7d4af34af2747106517f65e98e71","modified":1482876836000},{"_id":"source/_posts/intercurrent_operator_parallel.md","hash":"c6a05cfddcb602437b269290b0c872e00e9e31a6","modified":1488971209014},{"_id":"source/_posts/intercurrent_pattern_constant.md","hash":"0b10e77e7365541eb16473640909e35634f75619","modified":1482876836000},{"_id":"source/_posts/intercurrent_pattern_future.md","hash":"b742fe37af12981378e9e95dfdd2fb9abe6fde13","modified":1488971181520},{"_id":"source/_posts/intercurrent_pattern_producter-consumer.md","hash":"956734058cf6aa6a48f63e96d86ee6b891dc6171","modified":1488971176460},{"_id":"source/_posts/intercurrent_reentrantlock.md","hash":"6aaab40601fc875a63715239543ffb3778642500","modified":1488970910603},{"_id":"source/_posts/intercurrent_semaphore-countdownlatch.md","hash":"fdfcb3ac07b13ff0be596db2a20419f5be1e4cf6","modified":1488970961665},{"_id":"source/_posts/intercurrent_thread_create-stop.md","hash":"173f9dc399cc9159ef812ec9e02815a58d79f3d3","modified":1488970685541},{"_id":"source/_posts/intercurrent_thread_interrupt-sleep.md","hash":"7267d53bd7493dd0eff8ebdc77d568112782fb6e","modified":1488970674545},{"_id":"source/_posts/intercurrent_thread_priority-daemon.md","hash":"d9469f8c54ebec3b9b9d3fa9dd65d0aadbe0a40e","modified":1488970592452},{"_id":"source/_posts/intercurrent_thread_suspend-resune.md","hash":"ff78e777ba1d7c9518d1585b68f0bea04e856958","modified":1488970582721},{"_id":"source/_posts/intercurrent_thread_wait-notify.md","hash":"2919fb1b8c91183f9cef6da90258169a2fb42250","modified":1488970505231},{"_id":"source/_posts/intercurrent_threadgroup.md","hash":"45a579a16a2f629bf726c9c07cca366bf9dfebde","modified":1488970599271},{"_id":"source/_posts/intercurrent_threadlocal.md","hash":"0eb41af62ff5a01d7d7ad194aa83d5f7f99e0cf9","modified":1488971135229},{"_id":"source/_posts/intercurrent_threadpool_1.md","hash":"179e07b7c79f680b95936ac5c88fe8d44f0da55a","modified":1488970986902},{"_id":"source/_posts/intercurrent_threadpool_2.md","hash":"4298b74634feae188a4d8909650f0b4d5269150c","modified":1488970976595},{"_id":"source/_posts/intercurrent_tread_join.md","hash":"1d5aea5cf457f684b678226e0bfdce0875f8bdd8","modified":1488970492592},{"_id":"source/_posts/intercurrent_volatile-synchronized.md","hash":"9157016004432fd459cf2f046d4cfc589417c480","modified":1488970743710},{"_id":"source/_posts/java_arrays.md","hash":"af70a7d34237ed56135453780c83221a3e0c393d","modified":1482876836000},{"_id":"source/_posts/java_date.md","hash":"98cf1df0fdec3b914fafb2f33845b6a8bf98cc09","modified":1488972892118},{"_id":"source/_posts/java_jdk5.0.md","hash":"058def7a39e53b116250e5d52f594bbcdf96d4b8","modified":1482876836000},{"_id":"source/_posts/java_object.md","hash":"fad2d08691863472cd65a646fc500915f1ece04c","modified":1488972777860},{"_id":"source/_posts/java_objects.md","hash":"2319d83dd790674531a69f369163f2ca9878dd3f","modified":1488972766619},{"_id":"source/_posts/java_oject.md","hash":"3f880940a31b248edbd5bf11b825da02c8d299d0","modified":1488972762270},{"_id":"source/_posts/java_operator.md","hash":"0358988f6caec75f9938a510cd98f544a45de70b","modified":1488972753400},{"_id":"source/_posts/java_serializable.md","hash":"8a2986596da5ebfe92d9b84be94eb289aa515323","modified":1488972746216},{"_id":"source/_posts/java_string.md","hash":"c316629b76b15a8299cdb66d6b0e9deea45ac6f4","modified":1488972734834},{"_id":"source/_posts/java_stringbuilder.md","hash":"7bf26731d8c8152394e1d595dd7a6804428d119c","modified":1488972718072},{"_id":"source/_posts/jvm_bytecode.md","hash":"939c8a322e8620eaa6dc3a3bf1de80befb277c01","modified":1488973264461},{"_id":"source/_posts/jvm_compiler.md","hash":"1488a07b0493aeff9168c24262ced55d5522505a","modified":1488973260233},{"_id":"source/_posts/jvm_memory.md","hash":"5eb7127acf1568664e424646c074788c5036e553","modified":1488973272642},{"_id":"source/_posts/oracle_constraint-index.md","hash":"4426c2962503330a145609814ee2d3b10344f17c","modified":1488971996671},{"_id":"source/_posts/oracle_istall.md","hash":"615bb8900b936262d5051a862e089d02afe8c03b","modified":1488971638975},{"_id":"source/_posts/oracle_sql_ddl.md","hash":"831db34845abdc1e21a29b7f0a4fd10f2d1b3bdc","modified":1488971746297},{"_id":"source/_posts/oracle_sql_dml.md","hash":"75663bb9357dd767e5a336c684fd3d46ddd36056","modified":1488971798868},{"_id":"source/_posts/oracle_sql_method-select_child.md","hash":"e8bd1a93760975c61fd9a3f5ad96796dda23299c","modified":1488972207729},{"_id":"source/_posts/oracle_sql_select_complex.md","hash":"5371a95ad821f99ea2a28ea908cd2c7b0bb20117","modified":1488972182719},{"_id":"source/_posts/oracle_sql_select_multable.md","hash":"a189af07634737230259e630c3f0b28a8680e6a4","modified":1488971838879},{"_id":"source/_posts/oracle_tablespace.md","hash":"541caa76c01caa32c3e1d80e285ff691f4490b02","modified":1488971704728},{"_id":"source/_posts/oracle_user.md","hash":"192b76f747d84c5b398fd184e318cd5a0c0f45bd","modified":1488971723465},{"_id":"source/_posts/pattern_adapter.md","hash":"9c0054c5cf6a1fb96f74a5c4151793363c56c570","modified":1488976466004},{"_id":"source/_posts/pattern_chain.md","hash":"7502fabd45b9cc68be6af3412383314ac8ef9d84","modified":1488976622455},{"_id":"source/_posts/pattern_decorator.md","hash":"3db4f7c077f3f18b05353b6f9bcdeff682f98bba","modified":1488976414011},{"_id":"source/_posts/pattern_factory.md","hash":"c91a296e840896ce5f359a1f4ea4b0f6caa4cd48","modified":1488976610114},{"_id":"source/_posts/pattern_flyweight.md","hash":"c60c548887f61fcf49e6e35eb3b5407277d5d76e","modified":1488976600690},{"_id":"source/_posts/pattern_iterator.md","hash":"1e01db60123712ca94124588730299e007605704","modified":1488976672777},{"_id":"source/_posts/pattern_observer.md","hash":"fbc5bbb4a61404f71c4191621ddaa934b45e7349","modified":1488969891506},{"_id":"source/_posts/pattern_prototype.md","hash":"24e0933ec5ec83035e608e1b04b09798d68bbb7a","modified":1488976583770},{"_id":"source/_posts/pattern_proxy.md","hash":"6d8856bebc1c4034782fc70b88dce9262cc47afa","modified":1482876836000},{"_id":"source/_posts/pattern_singleton.md","hash":"c4916b1b4efb4a25dc2d15afa54be163d875cd3a","modified":1488976681780},{"_id":"source/about/index.md","hash":"152d18a0590eca6402dc977646c5cd79c69b383a","modified":1482876836000},{"_id":"source/essay/index.md","hash":"48e5fa808937ef3f2f32422204a5cdcca1f0ca79","modified":1482876836000},{"_id":"source/project/index.md","hash":"7cb41aa28082407c09f2e556d7a903beb0df027e","modified":1482876836000},{"_id":"themes/yelee/languages/default.yml","hash":"39a7374dd6c06ede675c744048faa29649cca222","modified":1481892692000},{"_id":"themes/yelee/languages/en.yml","hash":"a89197ef7cdbe47441bc95e9939139cd1a7409cf","modified":1481892692000},{"_id":"themes/yelee/languages/zh-Hans.yml","hash":"6741d87c088f1149fe3dae6a1557ff14595dc8f2","modified":1481892692000},{"_id":"themes/yelee/languages/zh-Hant-HK.yml","hash":"f7bd8c1f1cd7703c07d4f16daebbf5da2d057220","modified":1481892692000},{"_id":"themes/yelee/languages/zh-Hant-TW.yml","hash":"cc00d902dcea99a983a2b4b9fe8ecf15137c9210","modified":1481892692000},{"_id":"themes/yelee/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1481892692000},{"_id":"themes/yelee/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1481892692000},{"_id":"themes/yelee/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1481892692000},{"_id":"themes/yelee/layout/layout.ejs","hash":"4a5566f704f3246f5ef77badddf18d2e16750328","modified":1481892692000},{"_id":"themes/yelee/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1481892692000},{"_id":"themes/yelee/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1481892692000},{"_id":"themes/yelee/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1481892692000},{"_id":"themes/yelee/source/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1481892692000},{"_id":"themes/yelee/layout/_partial/after-footer.ejs","hash":"4024557da5cd7925084eb0bdf045ef438a0b5754","modified":1481892692000},{"_id":"themes/yelee/layout/_partial/archive-post.ejs","hash":"8af583c5f60c69ffdc97bee4e8fdac1ba34ebecd","modified":1481892692000},{"_id":"themes/yelee/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1481892692000},{"_id":"themes/yelee/layout/_partial/article.ejs","hash":"d781737389f408a5dd57a0f9430d2704b7fe192c","modified":1481892692000},{"_id":"themes/yelee/layout/_partial/background.ejs","hash":"a439ebf7c4798ad3830e66ccf226a60b05ffea0a","modified":1481892692000},{"_id":"themes/yelee/layout/_partial/footer.ejs","hash":"2ea24319611a8fceeed4491c710920ab72b3e165","modified":1481892692000},{"_id":"themes/yelee/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1481892692000},{"_id":"themes/yelee/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1481892692000},{"_id":"themes/yelee/layout/_partial/head.ejs","hash":"7417a87bf53566c4861f9e5f88771c6e8358713d","modified":1481892692000},{"_id":"themes/yelee/layout/_partial/ie-updater.ejs","hash":"3e5f2e41bbb1a5b93a8a7a6cb9ccd191ced54408","modified":1481892692000},{"_id":"themes/yelee/layout/_partial/left-col.ejs","hash":"6ea8bacacc8370ccf5af4e6f66da3bc743b88342","modified":1481892692000},{"_id":"themes/yelee/layout/_partial/mathjax.ejs","hash":"252f3757edea31d55a7e5624e2214f268bf07283","modified":1481892692000},{"_id":"themes/yelee/layout/_partial/mobile-nav.ejs","hash":"48696ded8e57def05d7ea58e74730f49d66ea6b5","modified":1481892692000},{"_id":"themes/yelee/layout/_partial/open-in-new-tab.ejs","hash":"a6046bc322ce9194faa9559c70e1618a7e1e4cbc","modified":1481892692000},{"_id":"themes/yelee/layout/_partial/page.ejs","hash":"9e504a0ec060ac3c6622855734ebea6eca2b78e9","modified":1481892692000},{"_id":"themes/yelee/layout/_partial/post-nav-button.ejs","hash":"190efc2e8ee037387685ff7dd24ae6db8bc77c60","modified":1481892692000},{"_id":"themes/yelee/layout/_partial/scrolling-button.ejs","hash":"6da102cd4a05bc6b4807b937862a7332f6845e5f","modified":1481892692000},{"_id":"themes/yelee/layout/_partial/tab-title-change.ejs","hash":"1bebab6eb7a849319cd48fe051f3c71b9349a723","modified":1481892692000},{"_id":"themes/yelee/layout/_partial/tag-cloud-page.ejs","hash":"432ded02bcc1f0d52cd833e8eeac688ee886169a","modified":1481892692000},{"_id":"themes/yelee/layout/_partial/toc.ejs","hash":"a0c6362e0f0161bbb7e70d50a4d9e39f2ff8ca48","modified":1481892692000},{"_id":"themes/yelee/source/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1481892692000},{"_id":"themes/yelee/source/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1481892692000},{"_id":"themes/yelee/source/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1481892692000},{"_id":"themes/yelee/source/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1481892692000},{"_id":"themes/yelee/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1481892692000},{"_id":"themes/yelee/source/css/_variables.styl","hash":"bca217a64e422ea7a4a1748b8fc980b408e8c836","modified":1481892692000},{"_id":"themes/yelee/source/css/style.styl","hash":"33519d7a6be12193795382840810e9ab1a5eae8e","modified":1481892692000},{"_id":"themes/yelee/source/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1481892692000},{"_id":"themes/yelee/source/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1481892692000},{"_id":"themes/yelee/source/img/CodePen.png","hash":"d4de978764de408e233c018c050d4a4539294d4f","modified":1481892692000},{"_id":"themes/yelee/source/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1481892692000},{"_id":"themes/yelee/source/img/Github.png","hash":"ea129c7ab81a5db6ba3875440198e5a67b4e8201","modified":1481892692000},{"_id":"themes/yelee/source/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1481892692000},{"_id":"themes/yelee/source/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1481892692000},{"_id":"themes/yelee/source/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1481892692000},{"_id":"themes/yelee/source/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1481892692000},{"_id":"themes/yelee/source/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1481892692000},{"_id":"themes/yelee/source/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1481892692000},{"_id":"themes/yelee/source/img/avatar.png","hash":"e4bca3d60087cd6e775d8e2aa2bf0d35e3859592","modified":1481892692000},{"_id":"themes/yelee/source/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1481892692000},{"_id":"themes/yelee/source/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1481892692000},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1481892692000},{"_id":"themes/yelee/source/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1481892692000},{"_id":"themes/yelee/source/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1481892692000},{"_id":"themes/yelee/source/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1481892692000},{"_id":"themes/yelee/source/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1481892692000},{"_id":"themes/yelee/source/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1481892692000},{"_id":"themes/yelee/source/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1481892692000},{"_id":"themes/yelee/source/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1481892692000},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1481892692000},{"_id":"themes/yelee/source/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1481892692000},{"_id":"themes/yelee/source/js/main.js","hash":"d58bbc593d94d48e85d4ebfb002910444080cb06","modified":1481892692000},{"_id":"themes/yelee/source/js/mobile.js","hash":"0f4c1fcd6df47a196ed9495c225173402aa7d769","modified":1481892692000},{"_id":"themes/yelee/source/js/pc.js","hash":"19a1660b10358046e7a1f398284491519b2ffd47","modified":1481892692000},{"_id":"themes/yelee/source/js/search.js","hash":"b456aaab98bbc3b0906f8a16d1e6e4f74dfcffda","modified":1481892692000},{"_id":"themes/yelee/source/js/toc.js","hash":"72ba1228fc1a44df45b8f4b562eba78594f13016","modified":1481892692000},{"_id":"themes/yelee/source/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1481892692000},{"_id":"themes/yelee/source/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1481892692000},{"_id":"themes/yelee/source/js/embed.js","hash":"aa8628fd20b83096d0e5b641a3e1f92fb7360eed","modified":1481892692000},{"_id":"themes/yelee/layout/_partial/comments/click2show.ejs","hash":"678f3aec2980d378ea44be60eec3eb504c8ba668","modified":1481892692000},{"_id":"themes/yelee/layout/_partial/comments/count-comment.ejs","hash":"d3c1b0b31db9d80e857f3054d010ea49c0f88134","modified":1481892692000},{"_id":"themes/yelee/layout/_partial/comments/disqus.ejs","hash":"b0b73b4629983b4de447418f30bf744cdf7ed044","modified":1481892692000},{"_id":"themes/yelee/layout/_partial/comments/duoshuo.ejs","hash":"0bb8d06484c696c2bd345a372d7038b90b9ddee6","modified":1481892692000},{"_id":"themes/yelee/layout/_partial/comments/youyan.ejs","hash":"bcf2070587645afd20a4eb046b9c8bb9c44d1cf5","modified":1481892692000},{"_id":"themes/yelee/layout/_partial/post/category.ejs","hash":"265bb12f7cfa5e0bcbb74fdd409ba13a6d9d2e22","modified":1481892692000},{"_id":"themes/yelee/layout/_partial/post/date.ejs","hash":"357a8de8a7ed8194efc16f55f97f7e2551b31bf9","modified":1481892692000},{"_id":"themes/yelee/layout/_partial/post/nav.ejs","hash":"90a085fc49e922bd2ee8f3056de0ad812f608bb3","modified":1481892692000},{"_id":"themes/yelee/layout/_partial/post/share.ejs","hash":"60cb646f3bc22c46d6ff4b95bb36dad577ed76c0","modified":1481892692000},{"_id":"themes/yelee/layout/_partial/post/tag.ejs","hash":"9dad471e27de9e066666f3082137eccaede2e67b","modified":1481892692000},{"_id":"themes/yelee/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1481892692000},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1481892692000},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1481892692000},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1481892692000},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1481892692000},{"_id":"themes/yelee/source/css/_partial/archive.styl","hash":"416786f566582fe697a12bb03a9eb2d1c604e2c7","modified":1481892692000},{"_id":"themes/yelee/source/css/_partial/article.styl","hash":"33ad2a3915f882d8b488442f8e2c8bb899c0b91f","modified":1481892692000},{"_id":"themes/yelee/source/css/_partial/footer.styl","hash":"384f9a9c017400b12f52ac33759380075e527998","modified":1481892692000},{"_id":"themes/yelee/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1481892692000},{"_id":"themes/yelee/source/css/_partial/highlight.styl","hash":"fd5362d9c6563a2b17bce7bba5d6c99f5c1638e9","modified":1481892692000},{"_id":"themes/yelee/source/css/_partial/instagram.styl","hash":"db9cc156c7df27f7f54b0e7ff34b5949f55f99eb","modified":1481892692000},{"_id":"themes/yelee/source/css/_partial/main.styl","hash":"d82129844528ae1a5c9547bc6d3f5bd37b0fb801","modified":1481892692000},{"_id":"themes/yelee/source/css/_partial/mobile-slider.styl","hash":"034eb9605e006a0d0098bd963e9cdc11a1eaf6c3","modified":1481892692000},{"_id":"themes/yelee/source/css/_partial/mobile.styl","hash":"4681032f51fd0df6451051ba35efa1f9f745c302","modified":1481892692000},{"_id":"themes/yelee/source/css/_partial/page.styl","hash":"d05287b44c64576b8560461bc6c3b7e8ceda5539","modified":1481892692000},{"_id":"themes/yelee/source/css/_partial/scroll.styl","hash":"1932774d30b8706919342f9cf36ea2d99987ce14","modified":1481892692000},{"_id":"themes/yelee/source/css/_partial/search.styl","hash":"fcaa5deaa654aaec69e267e23b49df07f84f633a","modified":1481892692000},{"_id":"themes/yelee/source/css/_partial/share.styl","hash":"24ff28457b5e1519a8b4561284f6159bdd827ad4","modified":1481892692000},{"_id":"themes/yelee/source/css/_partial/tagcloud.styl","hash":"9d7847cc899970a19d288c9eec9f24691c053ef3","modified":1481892692000},{"_id":"themes/yelee/source/css/_partial/toc.styl","hash":"eb19bbd37fc2c1abd238e2ed96b22cb1aae41ab7","modified":1481892692000},{"_id":"themes/yelee/source/css/_partial/wheelmenu.styl","hash":"74630c56944e27bef53ef0c0e391611a2eec2ed0","modified":1481892692000},{"_id":"themes/yelee/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1481892692000},{"_id":"themes/yelee/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1481892692000},{"_id":"themes/yelee/source/css/_partial/customise/color-scheme.styl","hash":"816044b7680514626981e945ee6be943a5de60a7","modified":1481892692000},{"_id":"themes/yelee/source/css/_partial/customise/code-block.styl","hash":"ebf7ca8598d93235479460ea7d1be97d44224b05","modified":1481892692000},{"_id":"themes/yelee/source/css/_partial/customise/blockquote.styl","hash":"9b96dd1c51b43a1130b3bb6eedb293b77eef8b1d","modified":1481892692000},{"_id":"themes/yelee/source/css/_partial/customise/heading.styl","hash":"f309241c1daa9b6c04aa04063307537c219fdd59","modified":1481892692000},{"_id":"themes/yelee/source/css/_partial/customise/inline-code.styl","hash":"2014a25ec300910b8a093ec8010f6703a2142021","modified":1481892692000},{"_id":"themes/yelee/source/css/_partial/customise/list.styl","hash":"b1e564ed76d6e892556b61b4278270fc9eeea961","modified":1481892692000},{"_id":"themes/yelee/source/css/_partial/customise/social-icon.styl","hash":"cd0772aa7142a51aeb0560b209d595f21e90e131","modified":1481892692000},{"_id":"public/archives/page/10/index.html","hash":"097dc26f501619ede8836a54ff7198d4733a39db","modified":1488976889429},{"_id":"public/archives/2017/01/index.html","hash":"f0155cd3f16783cb737a8f1b3c9184aab81400eb","modified":1488976889429},{"_id":"public/archives/2017/02/index.html","hash":"31f1f0c75cbe897ecdbc5074c23e56242b822c34","modified":1488976889429},{"_id":"public/archives/2017/03/index.html","hash":"f6dd0695ab17f1aed28b8443fdf6433c95a23c2e","modified":1488976889429},{"_id":"public/tags/算法/index.html","hash":"07a0da64cb3fa66298798dd5e07f1326fb77fdfb","modified":1488976889429},{"_id":"public/tags/Collection/page/2/index.html","hash":"47f16404dbca898d2d745d895022ccc32cef0b29","modified":1488976889429},{"_id":"public/tags/freamwork/index.html","hash":"8f411de9df46de440043427f17c1ccdebd183020","modified":1488976889429},{"_id":"public/tags/Java/page/2/index.html","hash":"c71bf75114b09383b49d202dfe2aeafed2b8cc8a","modified":1488976889430},{"_id":"public/tags/java/index.html","hash":"ee1249e2a18b22be42c06702b5397eed033f26da","modified":1488976889430},{"_id":"public/tags/Oracle/page/2/index.html","hash":"ac09177ce161426f70c93b7a941ab41d8f631851","modified":1488976889430},{"_id":"public/about/index.html","hash":"61d2330b41e422e057609f8a0de65f6c2ab477f9","modified":1488976889430},{"_id":"public/essay/index.html","hash":"6ce6b4a7116410e247fefb487439c53a4b04c360","modified":1488976889430},{"_id":"public/project/index.html","hash":"8177cf03ba676f977735b5609c8181aa880e8fa1","modified":1488976889430},{"_id":"public/pattern_observer/index.html","hash":"f3d33de7d7b9240b00db5aae369a420fdb2dcb6c","modified":1488976889430},{"_id":"public/pattern_adapter/index.html","hash":"0ddac33e394afee3a60311ae111d6a5678c23c5a","modified":1488976889430},{"_id":"public/essay_what-happen-to-world/index.html","hash":"4754c0eb2ced9bc6a79417bb68f192dcbc4e3148","modified":1488976889430},{"_id":"public/pattern_decorator/index.html","hash":"4c7234f3a633ef88ae765a5d35e204f74b029241","modified":1488976889430},{"_id":"public/essay_letter-to-me/index.html","hash":"d691648030d235716fd6eb75bd9fde26bf7615a8","modified":1488976889430},{"_id":"public/algorithm_divide/index.html","hash":"c3ce172a5f2698218ad268bea207ca4cccfd2e3a","modified":1488976889430},{"_id":"public/essay_bugle-sounded/index.html","hash":"402dab8bfb0dd0a002edcb4f1b14b2fdb1120942","modified":1488976889430},{"_id":"public/pattern_flyweight/index.html","hash":"99221f5020d1d9de998f1400bb537033925775f7","modified":1488976889430},{"_id":"public/algorithm_greedy/index.html","hash":"82b4dfaf4e9cef6c23b6ab66a06f4862d561137c","modified":1488976889430},{"_id":"public/pattern_proxy/index.html","hash":"93861a205a1452db0adfbca622c1cf64662952cf","modified":1488976889430},{"_id":"public/essay_nocry/index.html","hash":"6497abf85f198a6532213612fbf9996fb673df8d","modified":1488976889430},{"_id":"public/pattern_chain/index.html","hash":"869c92d53ebedbc78338fb09b187727ac0b3c755","modified":1488976889431},{"_id":"public/pattern_factory/index.html","hash":"ac7bcd86182fdb81ee475461ea507703eaaf7eea","modified":1488976889431},{"_id":"public/pattern_prototype/index.html","hash":"b58773174a04de5b1bdca206785f207ff0666e49","modified":1488976889431},{"_id":"public/pattern_iterator/index.html","hash":"13aa2a8d6bcab20059c543ad4c16c533ecb9f7ab","modified":1488976889431},{"_id":"public/collection_hashmap/index.html","hash":"f492adaf2ff06b5f6ebb03576210c1bb92e2830c","modified":1488976889431},{"_id":"public/collection_map/index.html","hash":"9a80ce32c7b88b46365a2a8d035458930cab1113","modified":1488976889431},{"_id":"public/pattern_singleton/index.html","hash":"4c489fda7f08b11fd815ccbbc97ef570f4226d02","modified":1488976889431},{"_id":"public/collection_vector-stack/index.html","hash":"2fd14033da83bacdd31b1eea3fcf77a76b608f28","modified":1488976889432},{"_id":"public/collection_linkedlist/index.html","hash":"629c484b7d7f6a6faa669762cda676a4e6d484b1","modified":1488976889432},{"_id":"public/collection_queue-deque/index.html","hash":"de9ed07c0bf49ef79616d849e86da5b36c59bb67","modified":1488976889432},{"_id":"public/collection_arraylist/index.html","hash":"ea72fecd3cf72b0af5c87923cfa7777f05908199","modified":1488976889432},{"_id":"public/collection_list-set/index.html","hash":"a1a318d5421d29d1bf802f3ad2ecf24b90bd8ec1","modified":1488976889432},{"_id":"public/collection/index.html","hash":"cf1f34bf7441ea35faa5cd48dda68db206ecf9f6","modified":1488976889432},{"_id":"public/collection_freamwork/index.html","hash":"33cfff5242e7634a1daf19a4d42253656a8027f3","modified":1488976889432},{"_id":"public/freamwork_ssm/index.html","hash":"5167628f9366536ac20853127ac1fe320cec6af6","modified":1488976889432},{"_id":"public/freamwork_ssh/index.html","hash":"9875d58b7ed3eff80b16dad5ca6fa11533eba4a8","modified":1488976889432},{"_id":"public/java_jdk5.0/index.html","hash":"a11f985604fda9ab23303322c67b31a808d8e4b3","modified":1488976889433},{"_id":"public/java_oject/index.html","hash":"fbd03dc612d1f189e8830ffd909fc0ceec8b5143","modified":1488976889433},{"_id":"public/java_object/index.html","hash":"5f99326baeda034f8e465ee4491c56a09c8f08f6","modified":1488976889433},{"_id":"public/jvm_memory/index.html","hash":"cda8fa8e25f8a57e3bc26fcee1e4d4bb13c95d9a","modified":1488976889433},{"_id":"public/java_objects/index.html","hash":"d650b0ea12c0a2e4e789aaf03dc5f1702204e179","modified":1488976889433},{"_id":"public/jvm_compiler/index.html","hash":"3dcd7c39f7c582a1bff62d61ff24ccf9a5972b18","modified":1488976889433},{"_id":"public/java_date/index.html","hash":"4b5b2efd8a3ac3473932a9f474a25b06f1e7b33a","modified":1488976889433},{"_id":"public/jvm_bytecode/index.html","hash":"be9c676ca32118059f1417b64659fe4d5b76bcc1","modified":1488976889433},{"_id":"public/java_operator/index.html","hash":"3b797e1cb555f27507356c6923b35d8ce49e4840","modified":1488976889433},{"_id":"public/java_arrays/index.html","hash":"84dc30db9220635167ecf70b0214f12d798afe49","modified":1488976889433},{"_id":"public/java_serializable/index.html","hash":"c9639826a5acfa6da9dabcb7c27b3001f5c6f6db","modified":1488976889434},{"_id":"public/java_stringbuilder/index.html","hash":"fef2a9ecfe541f1f5ee8ad83477cc7117091b373","modified":1488976889434},{"_id":"public/java_string/index.html","hash":"35f4c20a45b18da44b46a272f154ff25fcabc46f","modified":1488976889434},{"_id":"public/oracle_constraint-index/index.html","hash":"f56f1996d993d4d4825998da7af0a988ec31d724","modified":1488976889434},{"_id":"public/oracle_sql_select_complex/index.html","hash":"62b3375ade58a09faa2dd3b116aeb3c3330ad0f3","modified":1488976889434},{"_id":"public/oracle_sql_method-select_child/index.html","hash":"6919565857728eee9c18fa89ff74e02d7b86376d","modified":1488976889434},{"_id":"public/oracle_sql_select_multable/index.html","hash":"408f254dc63e900581d094cec5a605c9b9c1d7ef","modified":1488976889434},{"_id":"public/oracle_sql_dml/index.html","hash":"6b0f883c2317e2f3cccc470f3d6e52361e5f0cb5","modified":1488976889434},{"_id":"public/essay_millenary-second/index.html","hash":"1d178c1ff05c1f02f93d8f783be8e1bb38152ce0","modified":1488976889434},{"_id":"public/oracle_sql_ddl/index.html","hash":"46d852bb9d7cf083c7d9a9e74809d5409a23363d","modified":1488976889434},{"_id":"public/oracle_user/index.html","hash":"139ac2114edfc478de0479ebeec64f9e20fa8dc4","modified":1488976889434},{"_id":"public/oracle_tablespace/index.html","hash":"618be502b9adff35e6846fe6797a135a0edc413e","modified":1488976889434},{"_id":"public/oracle_istall/index.html","hash":"a945a397adb03a5db3d12d85dd9466f98091b9f2","modified":1488976889434},{"_id":"public/intercurrent_operator_parallel/index.html","hash":"a08c0235ae1f6f5db25c46c06b08a940f24b6b4f","modified":1488976889434},{"_id":"public/intercurrent_pattern_future/index.html","hash":"c2c5620aca29d883d36e90b2701ced16a7434d88","modified":1488976889434},{"_id":"public/intercurrent_pattern_producter-consumer/index.html","hash":"2169927d5ab86f04e879587626d8cdd11e01fb51","modified":1488976889434},{"_id":"public/intercurrent_pattern_constant/index.html","hash":"55a58a4f6a3b9bb2c37c68f3d0d2d5ce2f6f4a08","modified":1488976889435},{"_id":"public/intercurrent_lock_none/index.html","hash":"fe64baaa3f828486b011e7167f61478903aa3032","modified":1488976889435},{"_id":"public/intercurrent_threadlocal/index.html","hash":"df5d295ec32900568225a8ccf4905de720cec4f9","modified":1488976889435},{"_id":"public/intercurrent_lock_majorizing/index.html","hash":"a151c4b7c49cc9bc38f6852693d0f3291988bc58","modified":1488976889435},{"_id":"public/intercurrent_collection/index.html","hash":"4a0e6804ad56a2f0676c7a1903c210ac5d3b003b","modified":1488976889435},{"_id":"public/intercurrent_threadpool_2/index.html","hash":"4b2792dcbbc68849a4ebcaf869c3d3fd47e2e37e","modified":1488976889435},{"_id":"public/intercurrent_threadpool_1/index.html","hash":"03d498738e0e0c8c98acfc2356e7999744fc2af4","modified":1488976889435},{"_id":"public/intercurrent_cyclicbarrier-locksupport/index.html","hash":"f621baaacdcc3a1ec0043a914d9ddbf34060bb13","modified":1488976889435},{"_id":"public/intercurrent_semaphore-countdownlatch/index.html","hash":"9f0813a40319260ffe6b31ead2955a587a5b59df","modified":1488976889435},{"_id":"public/intercurrent_condition-readwritelock/index.html","hash":"2920bed7602c69d8f9d320a528ec40cbc969c099","modified":1488976889435},{"_id":"public/intercurrent_reentrantlock/index.html","hash":"d118e2917d4aff0b41ae0bff51c6d8683188dca9","modified":1488976889435},{"_id":"public/intercurrent_bug_arrayList-hashmap/index.html","hash":"cf18902396f0465a5dca294b33d35fea7ce0e5a2","modified":1488976889435},{"_id":"public/intercurrent_threadgroup/index.html","hash":"e598948a48569c3af520c6426fb72503917479c9","modified":1488976889435},{"_id":"public/intercurrent_thread_priority-daemon/index.html","hash":"d5fafab81f50616f2a29eee0b0b1a0ca6491c4cd","modified":1488976889435},{"_id":"public/intercurrent_volatile-synchronized/index.html","hash":"02a6df9c024770c89bfab9d6ce9ee685dfd084fd","modified":1488976889435},{"_id":"public/intercurrent_thread_suspend-resune/index.html","hash":"8ee2ea233b03216c819a6b60b1e086e5a9e699b5","modified":1488976889435},{"_id":"public/intercurrent_thread_interrupt-sleep/index.html","hash":"40a52b1f38839291e8bb73354837c215c3cb51ef","modified":1488976889436},{"_id":"public/intercurrent_thread_wait-notify/index.html","hash":"35246203ba03fbe6d13fa752151b2176a4ed703d","modified":1488976889436},{"_id":"public/intercurrent_tread_join/index.html","hash":"e2ebd90f5bfe3d5d3a8d973b9236d1c55e3db69f","modified":1488976889436},{"_id":"public/intercurrent_thread_create-stop/index.html","hash":"9cb7b5f795915e747493b59444447559203314bd","modified":1488976889436},{"_id":"public/archives/index.html","hash":"3419ebf23aea54790cfa6dbd11a88a5c4ac12039","modified":1488976889436},{"_id":"public/archives/page/2/index.html","hash":"dbaf3b3736663f4f7d7f27dfad7bce3dc2bf6973","modified":1488976889436},{"_id":"public/archives/page/3/index.html","hash":"4391c51076419fbe94537cfefd840bcae3f28957","modified":1488976889436},{"_id":"public/archives/page/4/index.html","hash":"b50b5439d73ec505110d55aa3f0cc09fce764980","modified":1488976889436},{"_id":"public/archives/page/5/index.html","hash":"c4fe0112f0157c7c48892077553398b9b3f50eeb","modified":1488976889436},{"_id":"public/archives/page/6/index.html","hash":"786acb12124c5e8827f3b6a036a3bc6d383260c6","modified":1488976889436},{"_id":"public/archives/page/7/index.html","hash":"030822ea376c72f28b2cf1965ee125f3bf05164e","modified":1488976889436},{"_id":"public/archives/page/8/index.html","hash":"7b4e46e546769109ca8bed5753f751237b5277ca","modified":1488976889436},{"_id":"public/archives/page/9/index.html","hash":"2cdd030bd435a6ffe6dcfb791f3c945f19c317d1","modified":1488976889436},{"_id":"public/archives/2016/index.html","hash":"8c1a17a85e4b340cfbeaca3c17acf0f0a5eb42c1","modified":1488976889436},{"_id":"public/archives/2016/page/2/index.html","hash":"d733b73d3623e74db9ec387554a872f0b00633a2","modified":1488976889436},{"_id":"public/archives/2016/page/3/index.html","hash":"3b8522b07851b19b2b4260ee07b0ee30cbce6093","modified":1488976889436},{"_id":"public/archives/2016/page/4/index.html","hash":"b4214117477e55740670a4643e6e308dbe8de004","modified":1488976889436},{"_id":"public/archives/2016/page/5/index.html","hash":"5f5dd861704df798e535915ec10156679a8173ab","modified":1488976889437},{"_id":"public/archives/2016/page/6/index.html","hash":"f37e84c2871419a72a74aa7fa6f372ff2244c108","modified":1488976889437},{"_id":"public/archives/2016/page/7/index.html","hash":"7b5d9bd7d96378df437206eb4f3c504f2cb988f0","modified":1488976889437},{"_id":"public/archives/2016/page/8/index.html","hash":"0eab2b0045e6d54a56f12133d29120ba9db9db75","modified":1488976889437},{"_id":"public/archives/2016/page/9/index.html","hash":"cb3acc86de5c581105fe127cbe045e7515bf049f","modified":1488976889437},{"_id":"public/archives/2016/06/index.html","hash":"856d19078f5d6e7fc53b9df2979f5ea0f9319c4f","modified":1488976889437},{"_id":"public/archives/2016/07/index.html","hash":"d8ef535718713fbab738aeface31d62f0dc2ef88","modified":1488976889437},{"_id":"public/archives/2016/07/page/2/index.html","hash":"c5bee4a2940002406e5b77522a4c7d8cf1cf2f04","modified":1488976889438},{"_id":"public/archives/2016/08/index.html","hash":"9694f663ca836b4b93783dee64de2d9877c7707c","modified":1488976889438},{"_id":"public/archives/2016/08/page/2/index.html","hash":"0b6774bf8d92e2c2c07e98dae6ec5c7906302706","modified":1488976889438},{"_id":"public/archives/2016/09/index.html","hash":"8905be2756e3d10e4a02ddbd984c975bc863b758","modified":1488976889438},{"_id":"public/archives/2016/09/page/2/index.html","hash":"65868a76008aaf4823cd58f6ecb126931739c5eb","modified":1488976889438},{"_id":"public/archives/2016/10/index.html","hash":"6deb9ad76ad00b34951cbad30e9dee3b426a95b1","modified":1488976889438},{"_id":"public/archives/2016/10/page/2/index.html","hash":"e4f1d57533aa49fd0ae7c606cead1ecdfa0ce2b5","modified":1488976889438},{"_id":"public/archives/2016/11/index.html","hash":"6dfa89af30b2f669fd3918c099f1a4c3c4e8afd1","modified":1488976889438},{"_id":"public/archives/2016/12/index.html","hash":"cbb0a8086759f18251a859704087fd95835ba06e","modified":1488976889438},{"_id":"public/archives/2017/index.html","hash":"f3b4481beb9a4ad1f34c6bc3eee5406f19ec0db1","modified":1488976889438},{"_id":"public/tags/Collection/index.html","hash":"82a73d785ce60971867a49a628bfc01973970d12","modified":1488976889438},{"_id":"public/tags/随笔/index.html","hash":"d5b1ed65320c2ed79b3f198a5300d36417ff97cf","modified":1488976889438},{"_id":"public/tags/并发编程/index.html","hash":"23a6a86f9acca162d948fe87481928916a660787","modified":1488976889438},{"_id":"public/tags/并发编程/page/2/index.html","hash":"d1bda8af35f28d4397d29dbfb9771bfafa5d393e","modified":1488976889438},{"_id":"public/tags/并发编程/page/3/index.html","hash":"c1a1f06a437d5d005acc0cfc53ad6373296fe412","modified":1488976889439},{"_id":"public/tags/Java/index.html","hash":"4edb62d5a1b9b099b30219590574c427f3405d56","modified":1488976889439},{"_id":"public/tags/JVM/index.html","hash":"b2bbf128f61c0c8ca5cbd35cee8a00a53f848108","modified":1488976889439},{"_id":"public/tags/Oracle/index.html","hash":"cdff0628f4be125f067e4e7efb8ed449268597ed","modified":1488976889439},{"_id":"public/tags/设计模式/index.html","hash":"3db7d07ea5460402d7d62aca09c1b633e9a48305","modified":1488976889439},{"_id":"public/tags/设计模式/page/2/index.html","hash":"71ca29772035bda95ce76a1fcd8cf9bef5e5aa8c","modified":1488976889439},{"_id":"public/index.html","hash":"7e8de789846ae51297b1e24282113deadd5559e0","modified":1488976889439},{"_id":"public/page/2/index.html","hash":"f703bc8686d1134c0a2cba5499a152939ce8fbc5","modified":1488976889439},{"_id":"public/page/3/index.html","hash":"508500fc293b50f6dfbb2e0d44ce413ca63dbec5","modified":1488976889439},{"_id":"public/page/4/index.html","hash":"e549c9825a7350a903947ba969a9e35f0202693a","modified":1488976889439},{"_id":"public/page/5/index.html","hash":"2a75c1230e460a038c946303145228c1a697fecb","modified":1488976889439},{"_id":"public/page/6/index.html","hash":"7d22542b5d2aee0f614129d5599a48bf907496b6","modified":1488976889439},{"_id":"public/page/7/index.html","hash":"def42d38d74ea01c4711e074ff0333e76043d2b8","modified":1488976889439},{"_id":"public/page/8/index.html","hash":"f0e986e06496b27e61fae1180abd9ec53ffbf2ca","modified":1488976889440},{"_id":"public/page/10/index.html","hash":"2dcce75ae661aa307530d93a3df4325a20a4cae0","modified":1488976889440},{"_id":"public/page/9/index.html","hash":"b84f08e027ef74e7c31b23a18c6bb8989b19eaf6","modified":1488976889440},{"_id":"public/Staticfile","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488976889472},{"_id":"public/robots.txt","hash":"de692ddfc81d51c770dc32eeea80fc3cc2690d87","modified":1488976889514},{"_id":"public/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1488976889514},{"_id":"public/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1488976889514},{"_id":"public/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1488976889514},{"_id":"public/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1488976889514},{"_id":"public/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1488976889514},{"_id":"public/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1488976889514},{"_id":"public/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1488976889514},{"_id":"public/img/CodePen.png","hash":"d4de978764de408e233c018c050d4a4539294d4f","modified":1488976889514},{"_id":"public/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1488976889514},{"_id":"public/img/Github.png","hash":"ea129c7ab81a5db6ba3875440198e5a67b4e8201","modified":1488976889514},{"_id":"public/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1488976889514},{"_id":"public/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1488976889514},{"_id":"public/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1488976889514},{"_id":"public/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1488976889515},{"_id":"public/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1488976889515},{"_id":"public/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1488976889515},{"_id":"public/img/avatar.png","hash":"e4bca3d60087cd6e775d8e2aa2bf0d35e3859592","modified":1488976889515},{"_id":"public/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1488976889515},{"_id":"public/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1488976889515},{"_id":"public/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1488976889515},{"_id":"public/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1488976889515},{"_id":"public/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1488976889515},{"_id":"public/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1488976889515},{"_id":"public/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1488976889515},{"_id":"public/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1488976889515},{"_id":"public/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1488976889515},{"_id":"public/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1488976889515},{"_id":"public/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1488976889515},{"_id":"public/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1488976889515},{"_id":"public/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1488976889515},{"_id":"public/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1488976889515},{"_id":"public/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1488976890566},{"_id":"public/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1488976890568},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1488976890579},{"_id":"public/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1488976890580},{"_id":"public/js/mobile.js","hash":"0f4c1fcd6df47a196ed9495c225173402aa7d769","modified":1488976890580},{"_id":"public/js/pc.js","hash":"19a1660b10358046e7a1f398284491519b2ffd47","modified":1488976890581},{"_id":"public/js/main.js","hash":"d58bbc593d94d48e85d4ebfb002910444080cb06","modified":1488976890581},{"_id":"public/js/search.js","hash":"b456aaab98bbc3b0906f8a16d1e6e4f74dfcffda","modified":1488976890581},{"_id":"public/js/toc.js","hash":"72ba1228fc1a44df45b8f4b562eba78594f13016","modified":1488976890581},{"_id":"public/css/style.css","hash":"3c2ed8e9e529eec49134af013776b6f5607be32f","modified":1488976890581},{"_id":"public/js/embed.js","hash":"790d89c35a988ff0d308629ada7b9a7b5e19e6dd","modified":1488976890581}],"Category":[],"Data":[],"Page":[{"title":"关于我 & 留言板","_content":"\n### About this blog\n\n- 使用Hexo和Github建造，基于yelee主题。\n\n\n### About sakuraffy\n\n- 本科在读，相信欲戴王冠，必承其重\n\n### About reading\n\n{% timemachine %}\n\n{% part http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/hysxm.jpg?imageView2/1/w/154/h/200 何以笙箫默 https://book.douban.com/subject/5686369/  我屈从于现实的温暖 2016-10-10 %}\n\n{% part http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/nhqa.jpg?imageView2/1/w/154/h/200 你好，乔安 https://movie.douban.com/subject/25911806/ 坏女孩也有春天 2016-10-18 %}\n\n{% part http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/ydjm.jpg?imageView2/1/w/154/h/200 一地鸡毛 https://book.douban.com/subject/6793573/ 鸡毛蒜皮中蕴含着人情世故 2016-10-28 %}\n\n{% part http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/sldss.jpg?imageView2/1/w/154/h/200 善良的死神 https://book.douban.com/subject/1817625/ 比馒头还重要的 2016-11-7 %}\n\n{% part http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/cyxdzy.jpg?imageView2/1/w/154/h/200 从优秀到卓越 https://book.douban.com/subject/1059769/  因为优秀，所以难以卓越 2016-11-17 %}\n\n{% part http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/qbbfbb.jpg?imageView2/1/w/154/h/200 穷爸爸富爸爸 https://book.douban.com/subject/3291111/ 财务自由==money？ 2016-11-26 %}\n\n{% part http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/chonggou.jpg?imageView2/1/w/154/h/200 重构-改善既有代码的设计 https://book.douban.com/subject/1229923/ 设计与重构，孰轻孰重 2016-12-7 %}\n\n{% part http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/mrwx.jpg?imageView2/1/w/154/h/200 美人为馅 https://book.douban.com/subject/26614086/ 是非黑白，怎能评说 2016-12-18 %}\n\n{% endtimemachine %}\n\n","source":"about/index.md","raw":"---\ntitle: 关于我 & 留言板\n---\n\n### About this blog\n\n- 使用Hexo和Github建造，基于yelee主题。\n\n\n### About sakuraffy\n\n- 本科在读，相信欲戴王冠，必承其重\n\n### About reading\n\n{% timemachine %}\n\n{% part http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/hysxm.jpg?imageView2/1/w/154/h/200 何以笙箫默 https://book.douban.com/subject/5686369/  我屈从于现实的温暖 2016-10-10 %}\n\n{% part http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/nhqa.jpg?imageView2/1/w/154/h/200 你好，乔安 https://movie.douban.com/subject/25911806/ 坏女孩也有春天 2016-10-18 %}\n\n{% part http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/ydjm.jpg?imageView2/1/w/154/h/200 一地鸡毛 https://book.douban.com/subject/6793573/ 鸡毛蒜皮中蕴含着人情世故 2016-10-28 %}\n\n{% part http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/sldss.jpg?imageView2/1/w/154/h/200 善良的死神 https://book.douban.com/subject/1817625/ 比馒头还重要的 2016-11-7 %}\n\n{% part http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/cyxdzy.jpg?imageView2/1/w/154/h/200 从优秀到卓越 https://book.douban.com/subject/1059769/  因为优秀，所以难以卓越 2016-11-17 %}\n\n{% part http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/qbbfbb.jpg?imageView2/1/w/154/h/200 穷爸爸富爸爸 https://book.douban.com/subject/3291111/ 财务自由==money？ 2016-11-26 %}\n\n{% part http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/chonggou.jpg?imageView2/1/w/154/h/200 重构-改善既有代码的设计 https://book.douban.com/subject/1229923/ 设计与重构，孰轻孰重 2016-12-7 %}\n\n{% part http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/mrwx.jpg?imageView2/1/w/154/h/200 美人为馅 https://book.douban.com/subject/26614086/ 是非黑白，怎能评说 2016-12-18 %}\n\n{% endtimemachine %}\n\n","date":"2017-02-20T09:56:17.626Z","updated":"2016-12-27T22:13:56.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj00ye5ba0001qoq1tk73oodc","content":"<h3 id=\"About-this-blog\"><a href=\"#About-this-blog\" class=\"headerlink\" title=\"About this blog\"></a>About this blog</h3><ul>\n<li>使用Hexo和Github建造，基于yelee主题。</li>\n</ul>\n<h3 id=\"About-sakuraffy\"><a href=\"#About-sakuraffy\" class=\"headerlink\" title=\"About sakuraffy\"></a>About sakuraffy</h3><ul>\n<li>本科在读，相信欲戴王冠，必承其重</li>\n</ul>\n<h3 id=\"About-reading\"><a href=\"#About-reading\" class=\"headerlink\" title=\"About reading\"></a>About reading</h3><script src=\"//cdnjs.cloudflare.com/ajax/libs/jquery/2.2.4/jquery.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery.lazyload/1.9.1/jquery.lazyload.min.js\"></script><div class=\"hexo-img-timemachine\"><style type=\"text/css\">.hexo-image-steam-lazy {display:block;}.hexo-img-timemachine{width:100%;max-width:1100px;margin:3% auto}div.hexo-img-timemachine part{background:#fefefe;box-shadow:0 1px 2px rgba(34, 25, 25, 0.2);margin:0 1% 3%;padding:2.5%;padding-bottom:10px;display:inline-block;max-width:25%}div.hexo-img-timemachine part img{padding-bottom:10px;margin-bottom:5px}div.hexo-img-timemachine part figcaption{font-size:.7rem;color:#999;line-height:1.5;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;}figcaption-t{font-size:.7rem;color:#c7c7c7;line-height:1.5;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;}div.hexo-img-timemachine small{font-size:1rem;float:right;text-transform:uppercase;color:#aaa}div.hexo-img-timemachine small a{color:#666;text-decoration:none;transition:.4s color}@media screen and (max-width:750px){.hexo-img-timemachine{column-gap:0}}</style>\n<part><div classs=\"img-click\" data=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/hysxm.jpg?imageView2/1/w/154/h/200\"><img class=\"hexo-image-steam-lazy nofancy\" alt=\"何以笙箫默\" src=\"https://ws4.sinaimg.cn/large/e724cbefgw1etyppy7bgwg2001001017.gif\" data-original=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/hysxm.jpg?imageView2/1/w/154/h/200\"></div><noscript><img src=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/hysxm.jpg?imageView2/1/w/154/h/200\"></noscript><a href=\"https://book.douban.com/subject/5686369/\" target=\"_blank\" rel=\"external\" style=\"text-decoration: none\"><figcaption>我屈从于现实的温暖</figcaption><figcaption-t>2016-10-10</figcaption-t></a></part>\n\n<part><div classs=\"img-click\" data=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/nhqa.jpg?imageView2/1/w/154/h/200\"><img class=\"hexo-image-steam-lazy nofancy\" alt=\"你好，乔安\" src=\"https://ws4.sinaimg.cn/large/e724cbefgw1etyppy7bgwg2001001017.gif\" data-original=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/nhqa.jpg?imageView2/1/w/154/h/200\"></div><noscript><img src=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/nhqa.jpg?imageView2/1/w/154/h/200\"></noscript><a href=\"https://movie.douban.com/subject/25911806/\" target=\"_blank\" rel=\"external\" style=\"text-decoration: none\"><figcaption>坏女孩也有春天</figcaption><figcaption-t>2016-10-18</figcaption-t></a></part>\n\n<part><div classs=\"img-click\" data=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/ydjm.jpg?imageView2/1/w/154/h/200\"><img class=\"hexo-image-steam-lazy nofancy\" alt=\"一地鸡毛\" src=\"https://ws4.sinaimg.cn/large/e724cbefgw1etyppy7bgwg2001001017.gif\" data-original=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/ydjm.jpg?imageView2/1/w/154/h/200\"></div><noscript><img src=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/ydjm.jpg?imageView2/1/w/154/h/200\"></noscript><a href=\"https://book.douban.com/subject/6793573/\" target=\"_blank\" rel=\"external\" style=\"text-decoration: none\"><figcaption>鸡毛蒜皮中蕴含着人情世故</figcaption><figcaption-t>2016-10-28</figcaption-t></a></part>\n\n<part><div classs=\"img-click\" data=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/sldss.jpg?imageView2/1/w/154/h/200\"><img class=\"hexo-image-steam-lazy nofancy\" alt=\"善良的死神\" src=\"https://ws4.sinaimg.cn/large/e724cbefgw1etyppy7bgwg2001001017.gif\" data-original=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/sldss.jpg?imageView2/1/w/154/h/200\"></div><noscript><img src=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/sldss.jpg?imageView2/1/w/154/h/200\"></noscript><a href=\"https://book.douban.com/subject/1817625/\" target=\"_blank\" rel=\"external\" style=\"text-decoration: none\"><figcaption>比馒头还重要的</figcaption><figcaption-t>2016-11-7</figcaption-t></a></part>\n\n<part><div classs=\"img-click\" data=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/cyxdzy.jpg?imageView2/1/w/154/h/200\"><img class=\"hexo-image-steam-lazy nofancy\" alt=\"从优秀到卓越\" src=\"https://ws4.sinaimg.cn/large/e724cbefgw1etyppy7bgwg2001001017.gif\" data-original=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/cyxdzy.jpg?imageView2/1/w/154/h/200\"></div><noscript><img src=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/cyxdzy.jpg?imageView2/1/w/154/h/200\"></noscript><a href=\"https://book.douban.com/subject/1059769/\" target=\"_blank\" rel=\"external\" style=\"text-decoration: none\"><figcaption>因为优秀，所以难以卓越</figcaption><figcaption-t>2016-11-17</figcaption-t></a></part>\n\n<part><div classs=\"img-click\" data=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/qbbfbb.jpg?imageView2/1/w/154/h/200\"><img class=\"hexo-image-steam-lazy nofancy\" alt=\"穷爸爸富爸爸\" src=\"https://ws4.sinaimg.cn/large/e724cbefgw1etyppy7bgwg2001001017.gif\" data-original=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/qbbfbb.jpg?imageView2/1/w/154/h/200\"></div><noscript><img src=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/qbbfbb.jpg?imageView2/1/w/154/h/200\"></noscript><a href=\"https://book.douban.com/subject/3291111/\" target=\"_blank\" rel=\"external\" style=\"text-decoration: none\"><figcaption>财务自由==money？</figcaption><figcaption-t>2016-11-26</figcaption-t></a></part>\n\n<part><div classs=\"img-click\" data=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/chonggou.jpg?imageView2/1/w/154/h/200\"><img class=\"hexo-image-steam-lazy nofancy\" alt=\"重构-改善既有代码的设计\" src=\"https://ws4.sinaimg.cn/large/e724cbefgw1etyppy7bgwg2001001017.gif\" data-original=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/chonggou.jpg?imageView2/1/w/154/h/200\"></div><noscript><img src=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/chonggou.jpg?imageView2/1/w/154/h/200\"></noscript><a href=\"https://book.douban.com/subject/1229923/\" target=\"_blank\" rel=\"external\" style=\"text-decoration: none\"><figcaption>设计与重构，孰轻孰重</figcaption><figcaption-t>2016-12-7</figcaption-t></a></part>\n\n<part><div classs=\"img-click\" data=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/mrwx.jpg?imageView2/1/w/154/h/200\"><img class=\"hexo-image-steam-lazy nofancy\" alt=\"美人为馅\" src=\"https://ws4.sinaimg.cn/large/e724cbefgw1etyppy7bgwg2001001017.gif\" data-original=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/mrwx.jpg?imageView2/1/w/154/h/200\"></div><noscript><img src=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/mrwx.jpg?imageView2/1/w/154/h/200\"></noscript><a href=\"https://book.douban.com/subject/26614086/\" target=\"_blank\" rel=\"external\" style=\"text-decoration: none\"><figcaption>是非黑白，怎能评说</figcaption><figcaption-t>2016-12-18</figcaption-t></a></part>\n</div><script type=\"text/javascript\">$('img.hexo-image-steam-lazy').lazyload({ effect:'fadeIn' });</script>\n","excerpt":"","more":"<h3 id=\"About-this-blog\"><a href=\"#About-this-blog\" class=\"headerlink\" title=\"About this blog\"></a>About this blog</h3><ul>\n<li>使用Hexo和Github建造，基于yelee主题。</li>\n</ul>\n<h3 id=\"About-sakuraffy\"><a href=\"#About-sakuraffy\" class=\"headerlink\" title=\"About sakuraffy\"></a>About sakuraffy</h3><ul>\n<li>本科在读，相信欲戴王冠，必承其重</li>\n</ul>\n<h3 id=\"About-reading\"><a href=\"#About-reading\" class=\"headerlink\" title=\"About reading\"></a>About reading</h3><script src=\"//cdnjs.cloudflare.com/ajax/libs/jquery/2.2.4/jquery.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery.lazyload/1.9.1/jquery.lazyload.min.js\"></script><div class=\"hexo-img-timemachine\"><style type=\"text/css\">.hexo-image-steam-lazy {display:block;}.hexo-img-timemachine{width:100%;max-width:1100px;margin:3% auto}div.hexo-img-timemachine part{background:#fefefe;box-shadow:0 1px 2px rgba(34, 25, 25, 0.2);margin:0 1% 3%;padding:2.5%;padding-bottom:10px;display:inline-block;max-width:25%}div.hexo-img-timemachine part img{padding-bottom:10px;margin-bottom:5px}div.hexo-img-timemachine part figcaption{font-size:.7rem;color:#999;line-height:1.5;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;}figcaption-t{font-size:.7rem;color:#c7c7c7;line-height:1.5;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;}div.hexo-img-timemachine small{font-size:1rem;float:right;text-transform:uppercase;color:#aaa}div.hexo-img-timemachine small a{color:#666;text-decoration:none;transition:.4s color}@media screen and (max-width:750px){.hexo-img-timemachine{column-gap:0}}</style>\n<part><div classs=\"img-click\" data=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/hysxm.jpg?imageView2/1/w/154/h/200\"><img class=\"hexo-image-steam-lazy nofancy\" alt=\"何以笙箫默\" src=\"https://ws4.sinaimg.cn/large/e724cbefgw1etyppy7bgwg2001001017.gif\" data-original=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/hysxm.jpg?imageView2/1/w/154/h/200\"/></div><noscript><img src=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/hysxm.jpg?imageView2/1/w/154/h/200\"/></noscript><a href=\"https://book.douban.com/subject/5686369/\" target=\"_blank\" rel=\"external\" style=\"text-decoration: none\"><figcaption>我屈从于现实的温暖</figcaption><figcaption-t>2016-10-10</figcaption-t></a></part>\n\n<part><div classs=\"img-click\" data=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/nhqa.jpg?imageView2/1/w/154/h/200\"><img class=\"hexo-image-steam-lazy nofancy\" alt=\"你好，乔安\" src=\"https://ws4.sinaimg.cn/large/e724cbefgw1etyppy7bgwg2001001017.gif\" data-original=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/nhqa.jpg?imageView2/1/w/154/h/200\"/></div><noscript><img src=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/nhqa.jpg?imageView2/1/w/154/h/200\"/></noscript><a href=\"https://movie.douban.com/subject/25911806/\" target=\"_blank\" rel=\"external\" style=\"text-decoration: none\"><figcaption>坏女孩也有春天</figcaption><figcaption-t>2016-10-18</figcaption-t></a></part>\n\n<part><div classs=\"img-click\" data=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/ydjm.jpg?imageView2/1/w/154/h/200\"><img class=\"hexo-image-steam-lazy nofancy\" alt=\"一地鸡毛\" src=\"https://ws4.sinaimg.cn/large/e724cbefgw1etyppy7bgwg2001001017.gif\" data-original=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/ydjm.jpg?imageView2/1/w/154/h/200\"/></div><noscript><img src=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/ydjm.jpg?imageView2/1/w/154/h/200\"/></noscript><a href=\"https://book.douban.com/subject/6793573/\" target=\"_blank\" rel=\"external\" style=\"text-decoration: none\"><figcaption>鸡毛蒜皮中蕴含着人情世故</figcaption><figcaption-t>2016-10-28</figcaption-t></a></part>\n\n<part><div classs=\"img-click\" data=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/sldss.jpg?imageView2/1/w/154/h/200\"><img class=\"hexo-image-steam-lazy nofancy\" alt=\"善良的死神\" src=\"https://ws4.sinaimg.cn/large/e724cbefgw1etyppy7bgwg2001001017.gif\" data-original=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/sldss.jpg?imageView2/1/w/154/h/200\"/></div><noscript><img src=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/sldss.jpg?imageView2/1/w/154/h/200\"/></noscript><a href=\"https://book.douban.com/subject/1817625/\" target=\"_blank\" rel=\"external\" style=\"text-decoration: none\"><figcaption>比馒头还重要的</figcaption><figcaption-t>2016-11-7</figcaption-t></a></part>\n\n<part><div classs=\"img-click\" data=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/cyxdzy.jpg?imageView2/1/w/154/h/200\"><img class=\"hexo-image-steam-lazy nofancy\" alt=\"从优秀到卓越\" src=\"https://ws4.sinaimg.cn/large/e724cbefgw1etyppy7bgwg2001001017.gif\" data-original=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/cyxdzy.jpg?imageView2/1/w/154/h/200\"/></div><noscript><img src=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/cyxdzy.jpg?imageView2/1/w/154/h/200\"/></noscript><a href=\"https://book.douban.com/subject/1059769/\" target=\"_blank\" rel=\"external\" style=\"text-decoration: none\"><figcaption>因为优秀，所以难以卓越</figcaption><figcaption-t>2016-11-17</figcaption-t></a></part>\n\n<part><div classs=\"img-click\" data=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/qbbfbb.jpg?imageView2/1/w/154/h/200\"><img class=\"hexo-image-steam-lazy nofancy\" alt=\"穷爸爸富爸爸\" src=\"https://ws4.sinaimg.cn/large/e724cbefgw1etyppy7bgwg2001001017.gif\" data-original=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/qbbfbb.jpg?imageView2/1/w/154/h/200\"/></div><noscript><img src=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/qbbfbb.jpg?imageView2/1/w/154/h/200\"/></noscript><a href=\"https://book.douban.com/subject/3291111/\" target=\"_blank\" rel=\"external\" style=\"text-decoration: none\"><figcaption>财务自由==money？</figcaption><figcaption-t>2016-11-26</figcaption-t></a></part>\n\n<part><div classs=\"img-click\" data=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/chonggou.jpg?imageView2/1/w/154/h/200\"><img class=\"hexo-image-steam-lazy nofancy\" alt=\"重构-改善既有代码的设计\" src=\"https://ws4.sinaimg.cn/large/e724cbefgw1etyppy7bgwg2001001017.gif\" data-original=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/chonggou.jpg?imageView2/1/w/154/h/200\"/></div><noscript><img src=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/chonggou.jpg?imageView2/1/w/154/h/200\"/></noscript><a href=\"https://book.douban.com/subject/1229923/\" target=\"_blank\" rel=\"external\" style=\"text-decoration: none\"><figcaption>设计与重构，孰轻孰重</figcaption><figcaption-t>2016-12-7</figcaption-t></a></part>\n\n<part><div classs=\"img-click\" data=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/mrwx.jpg?imageView2/1/w/154/h/200\"><img class=\"hexo-image-steam-lazy nofancy\" alt=\"美人为馅\" src=\"https://ws4.sinaimg.cn/large/e724cbefgw1etyppy7bgwg2001001017.gif\" data-original=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/mrwx.jpg?imageView2/1/w/154/h/200\"/></div><noscript><img src=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/reading/mrwx.jpg?imageView2/1/w/154/h/200\"/></noscript><a href=\"https://book.douban.com/subject/26614086/\" target=\"_blank\" rel=\"external\" style=\"text-decoration: none\"><figcaption>是非黑白，怎能评说</figcaption><figcaption-t>2016-12-18</figcaption-t></a></part>\n</div><script type=\"text/javascript\">$('img.hexo-image-steam-lazy').lazyload({ effect:'fadeIn' });</script>\n"},{"commmet":true,"_content":"  \n{% timemachine %}\n\n{% part http://oezif1gi7.bkt.clouddn.com/static/img/favorite/essay/millenary_second.jpg?imageView2/1/w/251/h/230 加油 https://sakuraffy.github.io/essay_millenary-second/ 千年老二 2016-10-12 %}\n\n{% part http://oezif1gi7.bkt.clouddn.com/static/img/favorite/essay/nocry.jpg?imageView2/1/w/251/h/230 加油 https://sakuraffy.github.io/essay_nocry/ 加油，别哭 2016-12-11 %}\n\n{% part http://oezif1gi7.bkt.clouddn.com/static/img/favorite/essay/bungle.jpg?imageView2/1/w/251/h/230 加油 https://sakuraffy.github.io/essay_bungle-sounded/ 号角已经吹响 2016-12-25 %}\n\n{% part http://oezif1gi7.bkt.clouddn.com/static/img/favorite/essay/letter.jpg?imageView2/1/w/251/h/230 加油 https://sakuraffy.github.io/essay_letter-to-me/ 信-写给22岁的自己 2016-12-26 %}\n\n{% part http://oezif1gi7.bkt.clouddn.com/static/img/favorite/essay/whtw.jpg?imageView2/1/w/251/h/230 加油 https://sakuraffy.github.io/essay_what-happen-to-world/ 这个世界怎么了 2016-12-28 %}\n\n{% endtimemachine %}\n\n","source":"essay/index.md","raw":"---\ncommmet: true\n---\n  \n{% timemachine %}\n\n{% part http://oezif1gi7.bkt.clouddn.com/static/img/favorite/essay/millenary_second.jpg?imageView2/1/w/251/h/230 加油 https://sakuraffy.github.io/essay_millenary-second/ 千年老二 2016-10-12 %}\n\n{% part http://oezif1gi7.bkt.clouddn.com/static/img/favorite/essay/nocry.jpg?imageView2/1/w/251/h/230 加油 https://sakuraffy.github.io/essay_nocry/ 加油，别哭 2016-12-11 %}\n\n{% part http://oezif1gi7.bkt.clouddn.com/static/img/favorite/essay/bungle.jpg?imageView2/1/w/251/h/230 加油 https://sakuraffy.github.io/essay_bungle-sounded/ 号角已经吹响 2016-12-25 %}\n\n{% part http://oezif1gi7.bkt.clouddn.com/static/img/favorite/essay/letter.jpg?imageView2/1/w/251/h/230 加油 https://sakuraffy.github.io/essay_letter-to-me/ 信-写给22岁的自己 2016-12-26 %}\n\n{% part http://oezif1gi7.bkt.clouddn.com/static/img/favorite/essay/whtw.jpg?imageView2/1/w/251/h/230 加油 https://sakuraffy.github.io/essay_what-happen-to-world/ 这个世界怎么了 2016-12-28 %}\n\n{% endtimemachine %}\n\n","date":"2017-02-20T09:56:17.627Z","updated":"2016-12-27T22:13:56.000Z","path":"essay/index.html","title":"","comments":1,"layout":"page","_id":"cj00ye5gd0055qoq119bj210g","content":"<script src=\"//cdnjs.cloudflare.com/ajax/libs/jquery/2.2.4/jquery.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery.lazyload/1.9.1/jquery.lazyload.min.js\"></script><div class=\"hexo-img-timemachine\"><style type=\"text/css\">.hexo-image-steam-lazy {display:block;}.hexo-img-timemachine{width:100%;max-width:1100px;margin:3% auto}div.hexo-img-timemachine part{background:#fefefe;box-shadow:0 1px 2px rgba(34, 25, 25, 0.2);margin:0 1% 3%;padding:2.5%;padding-bottom:10px;display:inline-block;max-width:25%}div.hexo-img-timemachine part img{padding-bottom:10px;margin-bottom:5px}div.hexo-img-timemachine part figcaption{font-size:.7rem;color:#999;line-height:1.5;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;}figcaption-t{font-size:.7rem;color:#c7c7c7;line-height:1.5;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;}div.hexo-img-timemachine small{font-size:1rem;float:right;text-transform:uppercase;color:#aaa}div.hexo-img-timemachine small a{color:#666;text-decoration:none;transition:.4s color}@media screen and (max-width:750px){.hexo-img-timemachine{column-gap:0}}</style>\n<part><div classs=\"img-click\" data=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/essay/millenary_second.jpg?imageView2/1/w/251/h/230\"><img class=\"hexo-image-steam-lazy nofancy\" alt=\"加油\" src=\"https://ws4.sinaimg.cn/large/e724cbefgw1etyppy7bgwg2001001017.gif\" data-original=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/essay/millenary_second.jpg?imageView2/1/w/251/h/230\"></div><noscript><img src=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/essay/millenary_second.jpg?imageView2/1/w/251/h/230\"></noscript><a href=\"https://sakuraffy.github.io/essay_millenary-second/\" target=\"_blank\" rel=\"external\" style=\"text-decoration: none\"><figcaption>千年老二</figcaption><figcaption-t>2016-10-12</figcaption-t></a></part>\n\n<part><div classs=\"img-click\" data=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/essay/nocry.jpg?imageView2/1/w/251/h/230\"><img class=\"hexo-image-steam-lazy nofancy\" alt=\"加油\" src=\"https://ws4.sinaimg.cn/large/e724cbefgw1etyppy7bgwg2001001017.gif\" data-original=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/essay/nocry.jpg?imageView2/1/w/251/h/230\"></div><noscript><img src=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/essay/nocry.jpg?imageView2/1/w/251/h/230\"></noscript><a href=\"https://sakuraffy.github.io/essay_nocry/\" target=\"_blank\" rel=\"external\" style=\"text-decoration: none\"><figcaption>加油，别哭</figcaption><figcaption-t>2016-12-11</figcaption-t></a></part>\n\n<part><div classs=\"img-click\" data=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/essay/bungle.jpg?imageView2/1/w/251/h/230\"><img class=\"hexo-image-steam-lazy nofancy\" alt=\"加油\" src=\"https://ws4.sinaimg.cn/large/e724cbefgw1etyppy7bgwg2001001017.gif\" data-original=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/essay/bungle.jpg?imageView2/1/w/251/h/230\"></div><noscript><img src=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/essay/bungle.jpg?imageView2/1/w/251/h/230\"></noscript><a href=\"https://sakuraffy.github.io/essay_bungle-sounded/\" target=\"_blank\" rel=\"external\" style=\"text-decoration: none\"><figcaption>号角已经吹响</figcaption><figcaption-t>2016-12-25</figcaption-t></a></part>\n\n<part><div classs=\"img-click\" data=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/essay/letter.jpg?imageView2/1/w/251/h/230\"><img class=\"hexo-image-steam-lazy nofancy\" alt=\"加油\" src=\"https://ws4.sinaimg.cn/large/e724cbefgw1etyppy7bgwg2001001017.gif\" data-original=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/essay/letter.jpg?imageView2/1/w/251/h/230\"></div><noscript><img src=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/essay/letter.jpg?imageView2/1/w/251/h/230\"></noscript><a href=\"https://sakuraffy.github.io/essay_letter-to-me/\" target=\"_blank\" rel=\"external\" style=\"text-decoration: none\"><figcaption>信-写给22岁的自己</figcaption><figcaption-t>2016-12-26</figcaption-t></a></part>\n\n<part><div classs=\"img-click\" data=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/essay/whtw.jpg?imageView2/1/w/251/h/230\"><img class=\"hexo-image-steam-lazy nofancy\" alt=\"加油\" src=\"https://ws4.sinaimg.cn/large/e724cbefgw1etyppy7bgwg2001001017.gif\" data-original=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/essay/whtw.jpg?imageView2/1/w/251/h/230\"></div><noscript><img src=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/essay/whtw.jpg?imageView2/1/w/251/h/230\"></noscript><a href=\"https://sakuraffy.github.io/essay_what-happen-to-world/\" target=\"_blank\" rel=\"external\" style=\"text-decoration: none\"><figcaption>这个世界怎么了</figcaption><figcaption-t>2016-12-28</figcaption-t></a></part>\n</div><script type=\"text/javascript\">$('img.hexo-image-steam-lazy').lazyload({ effect:'fadeIn' });</script>\n","excerpt":"","more":"<script src=\"//cdnjs.cloudflare.com/ajax/libs/jquery/2.2.4/jquery.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery.lazyload/1.9.1/jquery.lazyload.min.js\"></script><div class=\"hexo-img-timemachine\"><style type=\"text/css\">.hexo-image-steam-lazy {display:block;}.hexo-img-timemachine{width:100%;max-width:1100px;margin:3% auto}div.hexo-img-timemachine part{background:#fefefe;box-shadow:0 1px 2px rgba(34, 25, 25, 0.2);margin:0 1% 3%;padding:2.5%;padding-bottom:10px;display:inline-block;max-width:25%}div.hexo-img-timemachine part img{padding-bottom:10px;margin-bottom:5px}div.hexo-img-timemachine part figcaption{font-size:.7rem;color:#999;line-height:1.5;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;}figcaption-t{font-size:.7rem;color:#c7c7c7;line-height:1.5;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;}div.hexo-img-timemachine small{font-size:1rem;float:right;text-transform:uppercase;color:#aaa}div.hexo-img-timemachine small a{color:#666;text-decoration:none;transition:.4s color}@media screen and (max-width:750px){.hexo-img-timemachine{column-gap:0}}</style>\n<part><div classs=\"img-click\" data=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/essay/millenary_second.jpg?imageView2/1/w/251/h/230\"><img class=\"hexo-image-steam-lazy nofancy\" alt=\"加油\" src=\"https://ws4.sinaimg.cn/large/e724cbefgw1etyppy7bgwg2001001017.gif\" data-original=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/essay/millenary_second.jpg?imageView2/1/w/251/h/230\"/></div><noscript><img src=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/essay/millenary_second.jpg?imageView2/1/w/251/h/230\"/></noscript><a href=\"https://sakuraffy.github.io/essay_millenary-second/\" target=\"_blank\" rel=\"external\" style=\"text-decoration: none\"><figcaption>千年老二</figcaption><figcaption-t>2016-10-12</figcaption-t></a></part>\n\n<part><div classs=\"img-click\" data=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/essay/nocry.jpg?imageView2/1/w/251/h/230\"><img class=\"hexo-image-steam-lazy nofancy\" alt=\"加油\" src=\"https://ws4.sinaimg.cn/large/e724cbefgw1etyppy7bgwg2001001017.gif\" data-original=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/essay/nocry.jpg?imageView2/1/w/251/h/230\"/></div><noscript><img src=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/essay/nocry.jpg?imageView2/1/w/251/h/230\"/></noscript><a href=\"https://sakuraffy.github.io/essay_nocry/\" target=\"_blank\" rel=\"external\" style=\"text-decoration: none\"><figcaption>加油，别哭</figcaption><figcaption-t>2016-12-11</figcaption-t></a></part>\n\n<part><div classs=\"img-click\" data=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/essay/bungle.jpg?imageView2/1/w/251/h/230\"><img class=\"hexo-image-steam-lazy nofancy\" alt=\"加油\" src=\"https://ws4.sinaimg.cn/large/e724cbefgw1etyppy7bgwg2001001017.gif\" data-original=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/essay/bungle.jpg?imageView2/1/w/251/h/230\"/></div><noscript><img src=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/essay/bungle.jpg?imageView2/1/w/251/h/230\"/></noscript><a href=\"https://sakuraffy.github.io/essay_bungle-sounded/\" target=\"_blank\" rel=\"external\" style=\"text-decoration: none\"><figcaption>号角已经吹响</figcaption><figcaption-t>2016-12-25</figcaption-t></a></part>\n\n<part><div classs=\"img-click\" data=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/essay/letter.jpg?imageView2/1/w/251/h/230\"><img class=\"hexo-image-steam-lazy nofancy\" alt=\"加油\" src=\"https://ws4.sinaimg.cn/large/e724cbefgw1etyppy7bgwg2001001017.gif\" data-original=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/essay/letter.jpg?imageView2/1/w/251/h/230\"/></div><noscript><img src=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/essay/letter.jpg?imageView2/1/w/251/h/230\"/></noscript><a href=\"https://sakuraffy.github.io/essay_letter-to-me/\" target=\"_blank\" rel=\"external\" style=\"text-decoration: none\"><figcaption>信-写给22岁的自己</figcaption><figcaption-t>2016-12-26</figcaption-t></a></part>\n\n<part><div classs=\"img-click\" data=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/essay/whtw.jpg?imageView2/1/w/251/h/230\"><img class=\"hexo-image-steam-lazy nofancy\" alt=\"加油\" src=\"https://ws4.sinaimg.cn/large/e724cbefgw1etyppy7bgwg2001001017.gif\" data-original=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/essay/whtw.jpg?imageView2/1/w/251/h/230\"/></div><noscript><img src=\"http://oezif1gi7.bkt.clouddn.com/static/img/favorite/essay/whtw.jpg?imageView2/1/w/251/h/230\"/></noscript><a href=\"https://sakuraffy.github.io/essay_what-happen-to-world/\" target=\"_blank\" rel=\"external\" style=\"text-decoration: none\"><figcaption>这个世界怎么了</figcaption><figcaption-t>2016-12-28</figcaption-t></a></part>\n</div><script type=\"text/javascript\">$('img.hexo-image-steam-lazy').lazyload({ effect:'fadeIn' });</script>\n"},{"title":"我的项目","date":"2016-10-22T12:48:00.000Z","_content":"还没有什么项目呢","source":"project/index.md","raw":"---\ntitle: 我的项目\ndate: 2016-10-22 20:48\n---\n还没有什么项目呢","updated":"2016-12-27T22:13:56.000Z","path":"project/index.html","comments":1,"layout":"page","_id":"cj00ye5ge0056qoq1osak7jqo","content":"<p>还没有什么项目呢</p>\n","excerpt":"","more":"<p>还没有什么项目呢</p>\n"}],"Post":[{"title":"分治算法","date":"2016-12-26T16:28:34.000Z","_content":"我们先不说什么是分治算法，先来看个小问题，找出一个数组中的最小值和最大值\n``` java\n\tpackage cn.sakuraffy.divide;\n\n\tpublic class SimpleMaxAndMin {\n\t\tpublic static void main(String[] args) {\n\t\t\tint[] arr = new int[]{1,4,6,3,2,9,8,5,7};\n\t\t\tint max = arr[0];\n\t\t\tint min = arr[0];\n\t\t\t\n\t\t\tfor(int i = 1; i < arr.length; i++) {\n\t\t\t\tif(arr[i] > max) {\n\t\t\t\t\tmax = arr[i];\n\t\t\t\t}\n\t\t\t\tif(arr[i] < min) {\n\t\t\t\t\tmin = arr[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(\"min = \" + min);\n\t\t\tSystem.out.println(\"max = \" + max);\n\t\t}\n\t}\n```\n\n<!--more-->\n\n输出结果 ：\n``` java\nmin = 1\nmax = 9\n```\n\n我想绝大部分的人都可以写出以上代码，它也是对的。但在这里，我们提供一个更好的方法，那就是利用分治算法，先来展示一下用分治算法的解法，再来说分治算法\n``` java\n\tpackage cn.sakuraffy.divide;\n\n\tpublic class DivMaxAndMin {\n\t\tpublic static class Num {\n\t\t\tprivate int max;\n\t\t\tprivate int min;\n\t\t\t//...这里省略getter,setter方法\n\t\t}\n\n\t\tpublic Num getNum(int[] arr, int start, int end) {\n\t\t\tNum num = new Num();\n\t\t\tif(start == end) {\n\t\t\t\tnum.setMax(arr[start]);\n\t\t\t\tnum.setMin(arr[start]);\n\t\t\t}else if(start == end-1) {\n\t\t\t\tif(arr[start] < arr[end]) {\n\t\t\t\t\tnum.setMax(arr[end]);\n\t\t\t\t\tnum.setMin(arr[start]);\n\t\t\t\t}else {\n\t\t\t\t\tnum.setMin(arr[end]);\n\t\t\t\t\tnum.setMax(arr[start]);\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\tint mid = (start + end) / 2;\n\t\t\t\tNum num1 = getNum(arr, start, mid);\n\t\t\t\tNum num2 = getNum(arr, mid+1, end);\n\t\t\t\tint max = num1.getMax() > num2.getMax() ? num1.getMax() : num2.getMax();\n\t\t\t\tint min = num1.getMin() < num2.getMin() ? num1.getMin() : num2.getMin();\n\t\t\t\tnum.setMax(max);\n\t\t\t\tnum.setMin(min);\n\t\t\t}\n\t\t\treturn num;\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) {\n\t\t\tint[] arr = new int[]{1,4,6,3,2,9,8,5,7};\n\t\t\tDivMaxAndMin dmam = new DivMaxAndMin();\n\t\t\tNum num = dmam.getNum(arr,0,arr.length-1);\n\t\t\tSystem.out.println(\"min = \" + num.getMin());\n\t\t\tSystem.out.println(\"max = \" + num.getMax());\n\t\t}\n\t\t\n\t}\n```\n输出结果 ：\n``` java\nmin = 1\nmax = 9\n```\n\n### 分治算法\n\n天下分久必合，合久必分，以史为鉴，我们可以少走很多弯路，同样的分治算法也可帮我们有效的解决很多问题，下面就来揭示一下其庐山真面目\n\n#### 基本思想\n\n分治算法字面上的解释是“分而治之”，就是把一个复杂的问题分成两个或更多的相同或相似的可直接求解的子问题，原问题的解即子问题的解的合并。\n\n#### 使用情况\n\n分治法所能解决的问题一般具有以下几个特征：\n- 该问题的规模缩小到一定的程度就可以容易地解决\n- 该问题可以分解为若干个规模较小的相同问题，即该问题具有最优子结构性质\n- 利用该问题分解出的子问题的解可以合并为该问题的解\n\n#### 解决步骤\n\n分治法的三个步骤是：\n1. 分解（Divide）：将原问题分解为若干子问题，这些子问题都是原问题规模较小的实例。\n2. 解决（Conquer）：递归地求解各子问题。如果子问题规模足够小，则直接求解。\n3. 合并（Combine）：将所有子问题的解合并为原问题的解\n\n### 归并排序\n\n下面就看一下分治算法一个常用的实现-归并排序。同样的按照分治法的解决步骤一步一步来就行了\n{% qnimg algorithm/divide/p1.png 'class:class1 class2' normal:yes %}\n\n#### 代码实现\n \n``` java\n\tpackage cn.sakuraffy.divide;\n\n\tpublic class MergeSort {\n\t\tpublic void sort(int arr[], int start, int end) {\n\t\t\tif(start < end) {\n\t\t\t\tint mid = (start + end) / 2;\n\t\t\t\t//分解\n\t\t\t\tsort(arr,start,mid);\n\t\t\t\tsort(arr,mid+1,end);\n\t\t\t\t//合并\n\t\t\t\tmerge(arr,start,mid,end);\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic void merge(int arr[], int start, int mid, int end) {                           \n\t\t\t//接收参数，并定义两组起始点\n\t\t\tint start1 = start;\n\t\t\tint start2 = mid + 1;\n\t\t\tint end1 = mid;\n\t\t\tint end2 = end;\n\t\t\tint[] temp = new int[arr.length];\n\t\t\tint k = 0;\n\t\t\t//逐一比较 \n\t\t\twhile(start1 <= end1 && start2 <= end2) {\n\t\t\t\tif(arr[start1] < arr[start2]) {\n\t\t\t\t\ttemp[k++] = arr[start1++];\n\t\t\t\t}else {\n\t\t\t\t\ttemp[k++] = arr[start2++];\n\t\t\t\t}\n\t\t\t}\n\t\t\t//将多的一组直接落下来 \n\t\t\twhile(start1 <= end1) {\n\t\t\t\ttemp[k++] = arr[start1++];\n\t\t\t}\t\t\n\t\t\twhile(start2 <= end2) {\n\t\t\t\ttemp[k++] = arr[start2++];\n\t\t\t}\n\t\t\t//将当前排好序的数组合并到前面排好序的数组中\n\t\t\tfor(int i = 0; i < k; i++) {\n\t\t\t\tarr[i + start] = temp[i];\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) {\n\t\t\tint[] arr = new int[]{2,4,7,5,8,1,3,6};\n\t\t\tMergeSort ms = new MergeSort();\n\t\t\tms.sort(arr, 0, arr.length-1);\n\t\t\tSystem.out.println(Arrays.toString(arr));\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\n[1, 2, 3, 4, 5, 6, 7, 8]\n```\n\n","source":"_posts/algorithm_divide.md","raw":"---\ntitle: 分治算法\ndate: 2016-12-27 00:28:34\ntags:\t\n\t- 算法\n---\n我们先不说什么是分治算法，先来看个小问题，找出一个数组中的最小值和最大值\n``` java\n\tpackage cn.sakuraffy.divide;\n\n\tpublic class SimpleMaxAndMin {\n\t\tpublic static void main(String[] args) {\n\t\t\tint[] arr = new int[]{1,4,6,3,2,9,8,5,7};\n\t\t\tint max = arr[0];\n\t\t\tint min = arr[0];\n\t\t\t\n\t\t\tfor(int i = 1; i < arr.length; i++) {\n\t\t\t\tif(arr[i] > max) {\n\t\t\t\t\tmax = arr[i];\n\t\t\t\t}\n\t\t\t\tif(arr[i] < min) {\n\t\t\t\t\tmin = arr[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(\"min = \" + min);\n\t\t\tSystem.out.println(\"max = \" + max);\n\t\t}\n\t}\n```\n\n<!--more-->\n\n输出结果 ：\n``` java\nmin = 1\nmax = 9\n```\n\n我想绝大部分的人都可以写出以上代码，它也是对的。但在这里，我们提供一个更好的方法，那就是利用分治算法，先来展示一下用分治算法的解法，再来说分治算法\n``` java\n\tpackage cn.sakuraffy.divide;\n\n\tpublic class DivMaxAndMin {\n\t\tpublic static class Num {\n\t\t\tprivate int max;\n\t\t\tprivate int min;\n\t\t\t//...这里省略getter,setter方法\n\t\t}\n\n\t\tpublic Num getNum(int[] arr, int start, int end) {\n\t\t\tNum num = new Num();\n\t\t\tif(start == end) {\n\t\t\t\tnum.setMax(arr[start]);\n\t\t\t\tnum.setMin(arr[start]);\n\t\t\t}else if(start == end-1) {\n\t\t\t\tif(arr[start] < arr[end]) {\n\t\t\t\t\tnum.setMax(arr[end]);\n\t\t\t\t\tnum.setMin(arr[start]);\n\t\t\t\t}else {\n\t\t\t\t\tnum.setMin(arr[end]);\n\t\t\t\t\tnum.setMax(arr[start]);\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\tint mid = (start + end) / 2;\n\t\t\t\tNum num1 = getNum(arr, start, mid);\n\t\t\t\tNum num2 = getNum(arr, mid+1, end);\n\t\t\t\tint max = num1.getMax() > num2.getMax() ? num1.getMax() : num2.getMax();\n\t\t\t\tint min = num1.getMin() < num2.getMin() ? num1.getMin() : num2.getMin();\n\t\t\t\tnum.setMax(max);\n\t\t\t\tnum.setMin(min);\n\t\t\t}\n\t\t\treturn num;\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) {\n\t\t\tint[] arr = new int[]{1,4,6,3,2,9,8,5,7};\n\t\t\tDivMaxAndMin dmam = new DivMaxAndMin();\n\t\t\tNum num = dmam.getNum(arr,0,arr.length-1);\n\t\t\tSystem.out.println(\"min = \" + num.getMin());\n\t\t\tSystem.out.println(\"max = \" + num.getMax());\n\t\t}\n\t\t\n\t}\n```\n输出结果 ：\n``` java\nmin = 1\nmax = 9\n```\n\n### 分治算法\n\n天下分久必合，合久必分，以史为鉴，我们可以少走很多弯路，同样的分治算法也可帮我们有效的解决很多问题，下面就来揭示一下其庐山真面目\n\n#### 基本思想\n\n分治算法字面上的解释是“分而治之”，就是把一个复杂的问题分成两个或更多的相同或相似的可直接求解的子问题，原问题的解即子问题的解的合并。\n\n#### 使用情况\n\n分治法所能解决的问题一般具有以下几个特征：\n- 该问题的规模缩小到一定的程度就可以容易地解决\n- 该问题可以分解为若干个规模较小的相同问题，即该问题具有最优子结构性质\n- 利用该问题分解出的子问题的解可以合并为该问题的解\n\n#### 解决步骤\n\n分治法的三个步骤是：\n1. 分解（Divide）：将原问题分解为若干子问题，这些子问题都是原问题规模较小的实例。\n2. 解决（Conquer）：递归地求解各子问题。如果子问题规模足够小，则直接求解。\n3. 合并（Combine）：将所有子问题的解合并为原问题的解\n\n### 归并排序\n\n下面就看一下分治算法一个常用的实现-归并排序。同样的按照分治法的解决步骤一步一步来就行了\n{% qnimg algorithm/divide/p1.png 'class:class1 class2' normal:yes %}\n\n#### 代码实现\n \n``` java\n\tpackage cn.sakuraffy.divide;\n\n\tpublic class MergeSort {\n\t\tpublic void sort(int arr[], int start, int end) {\n\t\t\tif(start < end) {\n\t\t\t\tint mid = (start + end) / 2;\n\t\t\t\t//分解\n\t\t\t\tsort(arr,start,mid);\n\t\t\t\tsort(arr,mid+1,end);\n\t\t\t\t//合并\n\t\t\t\tmerge(arr,start,mid,end);\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic void merge(int arr[], int start, int mid, int end) {                           \n\t\t\t//接收参数，并定义两组起始点\n\t\t\tint start1 = start;\n\t\t\tint start2 = mid + 1;\n\t\t\tint end1 = mid;\n\t\t\tint end2 = end;\n\t\t\tint[] temp = new int[arr.length];\n\t\t\tint k = 0;\n\t\t\t//逐一比较 \n\t\t\twhile(start1 <= end1 && start2 <= end2) {\n\t\t\t\tif(arr[start1] < arr[start2]) {\n\t\t\t\t\ttemp[k++] = arr[start1++];\n\t\t\t\t}else {\n\t\t\t\t\ttemp[k++] = arr[start2++];\n\t\t\t\t}\n\t\t\t}\n\t\t\t//将多的一组直接落下来 \n\t\t\twhile(start1 <= end1) {\n\t\t\t\ttemp[k++] = arr[start1++];\n\t\t\t}\t\t\n\t\t\twhile(start2 <= end2) {\n\t\t\t\ttemp[k++] = arr[start2++];\n\t\t\t}\n\t\t\t//将当前排好序的数组合并到前面排好序的数组中\n\t\t\tfor(int i = 0; i < k; i++) {\n\t\t\t\tarr[i + start] = temp[i];\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) {\n\t\t\tint[] arr = new int[]{2,4,7,5,8,1,3,6};\n\t\t\tMergeSort ms = new MergeSort();\n\t\t\tms.sort(arr, 0, arr.length-1);\n\t\t\tSystem.out.println(Arrays.toString(arr));\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\n[1, 2, 3, 4, 5, 6, 7, 8]\n```\n\n","slug":"algorithm_divide","published":1,"updated":"2017-03-08T11:55:32.197Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5b50000qoq1hqcydsal","content":"<p>我们先不说什么是分治算法，先来看个小问题，找出一个数组中的最小值和最大值<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.divide;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleMaxAndMin</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">9</span>,<span class=\"number\">8</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>&#125;;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> max = arr[<span class=\"number\">0</span>];</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> min = arr[<span class=\"number\">0</span>];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(arr[i] &gt; max) &#123;</div><div class=\"line\">\t\t\t\tmax = arr[i];</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(arr[i] &lt; min) &#123;</div><div class=\"line\">\t\t\t\tmin = arr[i];</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"min = \"</span> + min);</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"max = \"</span> + max);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">min = <span class=\"number\">1</span></div><div class=\"line\">max = <span class=\"number\">9</span></div></pre></td></tr></table></figure></p>\n<p>我想绝大部分的人都可以写出以上代码，它也是对的。但在这里，我们提供一个更好的方法，那就是利用分治算法，先来展示一下用分治算法的解法，再来说分治算法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.divide;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DivMaxAndMin</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Num</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> max;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> min;</div><div class=\"line\">\t\t<span class=\"comment\">//...这里省略getter,setter方法</span></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Num <span class=\"title\">getNum</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</div><div class=\"line\">\t\tNum num = <span class=\"keyword\">new</span> Num();</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(start == end) &#123;</div><div class=\"line\">\t\t\tnum.setMax(arr[start]);</div><div class=\"line\">\t\t\tnum.setMin(arr[start]);</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(start == end-<span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(arr[start] &lt; arr[end]) &#123;</div><div class=\"line\">\t\t\t\tnum.setMax(arr[end]);</div><div class=\"line\">\t\t\t\tnum.setMin(arr[start]);</div><div class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\tnum.setMin(arr[end]);</div><div class=\"line\">\t\t\t\tnum.setMax(arr[start]);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> mid = (start + end) / <span class=\"number\">2</span>;</div><div class=\"line\">\t\t\tNum num1 = getNum(arr, start, mid);</div><div class=\"line\">\t\t\tNum num2 = getNum(arr, mid+<span class=\"number\">1</span>, end);</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> max = num1.getMax() &gt; num2.getMax() ? num1.getMax() : num2.getMax();</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> min = num1.getMin() &lt; num2.getMin() ? num1.getMin() : num2.getMin();</div><div class=\"line\">\t\t\tnum.setMax(max);</div><div class=\"line\">\t\t\tnum.setMin(min);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> num;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">9</span>,<span class=\"number\">8</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>&#125;;</div><div class=\"line\">\t\tDivMaxAndMin dmam = <span class=\"keyword\">new</span> DivMaxAndMin();</div><div class=\"line\">\t\tNum num = dmam.getNum(arr,<span class=\"number\">0</span>,arr.length-<span class=\"number\">1</span>);</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"min = \"</span> + num.getMin());</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"max = \"</span> + num.getMax());</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">min = <span class=\"number\">1</span></div><div class=\"line\">max = <span class=\"number\">9</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"分治算法\"><a href=\"#分治算法\" class=\"headerlink\" title=\"分治算法\"></a>分治算法</h3><p>天下分久必合，合久必分，以史为鉴，我们可以少走很多弯路，同样的分治算法也可帮我们有效的解决很多问题，下面就来揭示一下其庐山真面目</p>\n<h4 id=\"基本思想\"><a href=\"#基本思想\" class=\"headerlink\" title=\"基本思想\"></a>基本思想</h4><p>分治算法字面上的解释是“分而治之”，就是把一个复杂的问题分成两个或更多的相同或相似的可直接求解的子问题，原问题的解即子问题的解的合并。</p>\n<h4 id=\"使用情况\"><a href=\"#使用情况\" class=\"headerlink\" title=\"使用情况\"></a>使用情况</h4><p>分治法所能解决的问题一般具有以下几个特征：</p>\n<ul>\n<li>该问题的规模缩小到一定的程度就可以容易地解决</li>\n<li>该问题可以分解为若干个规模较小的相同问题，即该问题具有最优子结构性质</li>\n<li>利用该问题分解出的子问题的解可以合并为该问题的解</li>\n</ul>\n<h4 id=\"解决步骤\"><a href=\"#解决步骤\" class=\"headerlink\" title=\"解决步骤\"></a>解决步骤</h4><p>分治法的三个步骤是：</p>\n<ol>\n<li>分解（Divide）：将原问题分解为若干子问题，这些子问题都是原问题规模较小的实例。</li>\n<li>解决（Conquer）：递归地求解各子问题。如果子问题规模足够小，则直接求解。</li>\n<li>合并（Combine）：将所有子问题的解合并为原问题的解</li>\n</ol>\n<h3 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h3><p>下面就看一下分治算法一个常用的实现-归并排序。同样的按照分治法的解决步骤一步一步来就行了<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/algorithm/divide/p1.png\"></p>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.divide;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MergeSort</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(start &lt; end) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> mid = (start + end) / <span class=\"number\">2</span>;</div><div class=\"line\">\t\t\t<span class=\"comment\">//分解</span></div><div class=\"line\">\t\t\tsort(arr,start,mid);</div><div class=\"line\">\t\t\tsort(arr,mid+<span class=\"number\">1</span>,end);</div><div class=\"line\">\t\t\t<span class=\"comment\">//合并</span></div><div class=\"line\">\t\t\tmerge(arr,start,mid,end);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> mid, <span class=\"keyword\">int</span> end)</span> </span>&#123;                           </div><div class=\"line\">\t\t<span class=\"comment\">//接收参数，并定义两组起始点</span></div><div class=\"line\">\t\t<span class=\"keyword\">int</span> start1 = start;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> start2 = mid + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> end1 = mid;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> end2 = end;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[] temp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[arr.length];</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"comment\">//逐一比较 </span></div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(start1 &lt;= end1 &amp;&amp; start2 &lt;= end2) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(arr[start1] &lt; arr[start2]) &#123;</div><div class=\"line\">\t\t\t\ttemp[k++] = arr[start1++];</div><div class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\ttemp[k++] = arr[start2++];</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">//将多的一组直接落下来 </span></div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(start1 &lt;= end1) &#123;</div><div class=\"line\">\t\t\ttemp[k++] = arr[start1++];</div><div class=\"line\">\t\t&#125;\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(start2 &lt;= end2) &#123;</div><div class=\"line\">\t\t\ttemp[k++] = arr[start2++];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">//将当前排好序的数组合并到前面排好序的数组中</span></div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</div><div class=\"line\">\t\t\tarr[i + start] = temp[i];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">7</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>&#125;;</div><div class=\"line\">\t\tMergeSort ms = <span class=\"keyword\">new</span> MergeSort();</div><div class=\"line\">\t\tms.sort(arr, <span class=\"number\">0</span>, arr.length-<span class=\"number\">1</span>);</div><div class=\"line\">\t\tSystem.out.println(Arrays.toString(arr));</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>我们先不说什么是分治算法，先来看个小问题，找出一个数组中的最小值和最大值<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.divide;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleMaxAndMin</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">9</span>,<span class=\"number\">8</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>&#125;;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> max = arr[<span class=\"number\">0</span>];</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> min = arr[<span class=\"number\">0</span>];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(arr[i] &gt; max) &#123;</div><div class=\"line\">\t\t\t\tmax = arr[i];</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(arr[i] &lt; min) &#123;</div><div class=\"line\">\t\t\t\tmin = arr[i];</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"min = \"</span> + min);</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"max = \"</span> + max);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>","more":"<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">min = <span class=\"number\">1</span></div><div class=\"line\">max = <span class=\"number\">9</span></div></pre></td></tr></table></figure></p>\n<p>我想绝大部分的人都可以写出以上代码，它也是对的。但在这里，我们提供一个更好的方法，那就是利用分治算法，先来展示一下用分治算法的解法，再来说分治算法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.divide;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DivMaxAndMin</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Num</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> max;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> min;</div><div class=\"line\">\t\t<span class=\"comment\">//...这里省略getter,setter方法</span></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Num <span class=\"title\">getNum</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</div><div class=\"line\">\t\tNum num = <span class=\"keyword\">new</span> Num();</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(start == end) &#123;</div><div class=\"line\">\t\t\tnum.setMax(arr[start]);</div><div class=\"line\">\t\t\tnum.setMin(arr[start]);</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(start == end-<span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(arr[start] &lt; arr[end]) &#123;</div><div class=\"line\">\t\t\t\tnum.setMax(arr[end]);</div><div class=\"line\">\t\t\t\tnum.setMin(arr[start]);</div><div class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\tnum.setMin(arr[end]);</div><div class=\"line\">\t\t\t\tnum.setMax(arr[start]);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> mid = (start + end) / <span class=\"number\">2</span>;</div><div class=\"line\">\t\t\tNum num1 = getNum(arr, start, mid);</div><div class=\"line\">\t\t\tNum num2 = getNum(arr, mid+<span class=\"number\">1</span>, end);</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> max = num1.getMax() &gt; num2.getMax() ? num1.getMax() : num2.getMax();</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> min = num1.getMin() &lt; num2.getMin() ? num1.getMin() : num2.getMin();</div><div class=\"line\">\t\t\tnum.setMax(max);</div><div class=\"line\">\t\t\tnum.setMin(min);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> num;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">9</span>,<span class=\"number\">8</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>&#125;;</div><div class=\"line\">\t\tDivMaxAndMin dmam = <span class=\"keyword\">new</span> DivMaxAndMin();</div><div class=\"line\">\t\tNum num = dmam.getNum(arr,<span class=\"number\">0</span>,arr.length-<span class=\"number\">1</span>);</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"min = \"</span> + num.getMin());</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"max = \"</span> + num.getMax());</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">min = <span class=\"number\">1</span></div><div class=\"line\">max = <span class=\"number\">9</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"分治算法\"><a href=\"#分治算法\" class=\"headerlink\" title=\"分治算法\"></a>分治算法</h3><p>天下分久必合，合久必分，以史为鉴，我们可以少走很多弯路，同样的分治算法也可帮我们有效的解决很多问题，下面就来揭示一下其庐山真面目</p>\n<h4 id=\"基本思想\"><a href=\"#基本思想\" class=\"headerlink\" title=\"基本思想\"></a>基本思想</h4><p>分治算法字面上的解释是“分而治之”，就是把一个复杂的问题分成两个或更多的相同或相似的可直接求解的子问题，原问题的解即子问题的解的合并。</p>\n<h4 id=\"使用情况\"><a href=\"#使用情况\" class=\"headerlink\" title=\"使用情况\"></a>使用情况</h4><p>分治法所能解决的问题一般具有以下几个特征：</p>\n<ul>\n<li>该问题的规模缩小到一定的程度就可以容易地解决</li>\n<li>该问题可以分解为若干个规模较小的相同问题，即该问题具有最优子结构性质</li>\n<li>利用该问题分解出的子问题的解可以合并为该问题的解</li>\n</ul>\n<h4 id=\"解决步骤\"><a href=\"#解决步骤\" class=\"headerlink\" title=\"解决步骤\"></a>解决步骤</h4><p>分治法的三个步骤是：</p>\n<ol>\n<li>分解（Divide）：将原问题分解为若干子问题，这些子问题都是原问题规模较小的实例。</li>\n<li>解决（Conquer）：递归地求解各子问题。如果子问题规模足够小，则直接求解。</li>\n<li>合并（Combine）：将所有子问题的解合并为原问题的解</li>\n</ol>\n<h3 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h3><p>下面就看一下分治算法一个常用的实现-归并排序。同样的按照分治法的解决步骤一步一步来就行了<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/algorithm/divide/p1.png\"></p>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.divide;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MergeSort</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(start &lt; end) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> mid = (start + end) / <span class=\"number\">2</span>;</div><div class=\"line\">\t\t\t<span class=\"comment\">//分解</span></div><div class=\"line\">\t\t\tsort(arr,start,mid);</div><div class=\"line\">\t\t\tsort(arr,mid+<span class=\"number\">1</span>,end);</div><div class=\"line\">\t\t\t<span class=\"comment\">//合并</span></div><div class=\"line\">\t\t\tmerge(arr,start,mid,end);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> mid, <span class=\"keyword\">int</span> end)</span> </span>&#123;                           </div><div class=\"line\">\t\t<span class=\"comment\">//接收参数，并定义两组起始点</span></div><div class=\"line\">\t\t<span class=\"keyword\">int</span> start1 = start;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> start2 = mid + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> end1 = mid;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> end2 = end;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[] temp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[arr.length];</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"comment\">//逐一比较 </span></div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(start1 &lt;= end1 &amp;&amp; start2 &lt;= end2) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(arr[start1] &lt; arr[start2]) &#123;</div><div class=\"line\">\t\t\t\ttemp[k++] = arr[start1++];</div><div class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\ttemp[k++] = arr[start2++];</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">//将多的一组直接落下来 </span></div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(start1 &lt;= end1) &#123;</div><div class=\"line\">\t\t\ttemp[k++] = arr[start1++];</div><div class=\"line\">\t\t&#125;\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(start2 &lt;= end2) &#123;</div><div class=\"line\">\t\t\ttemp[k++] = arr[start2++];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">//将当前排好序的数组合并到前面排好序的数组中</span></div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</div><div class=\"line\">\t\t\tarr[i + start] = temp[i];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">7</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>&#125;;</div><div class=\"line\">\t\tMergeSort ms = <span class=\"keyword\">new</span> MergeSort();</div><div class=\"line\">\t\tms.sort(arr, <span class=\"number\">0</span>, arr.length-<span class=\"number\">1</span>);</div><div class=\"line\">\t\tSystem.out.println(Arrays.toString(arr));</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]</div></pre></td></tr></table></figure></p>"},{"title":"集合系列02-Collection和AbstractCollection","date":"2016-10-04T06:31:02.000Z","_content":"前面提到了Java集合的架构，接下来我们说说Collection接口和AbstractCollection抽象类\n\n<!--more-->\n\n### Collection\n\n``` java\n\tpublic interface Collection<E> extends Iterable<E> {\n\t\tpublic int size();\n\t\tpublic boolean isEmpty();\n\t\tpublic boolean contains(Object obj);\n\t\tpublic boolean add(E e);\n\t\tpublic boolean remove(Object obj);\n\t\tpublic boolean equals(Object obj);\n\t\tpublic int hashCode();\n\t\tpublic void clear();\n\t\t\n\t\tpublic boolean addAll(Collection<? extends E> c);\n\t\tpublic boolean containAll(Collection<? extends E> c);\n\t\tpublic boolean removeAll(Collection<? extends E> c);\n\t\tpublic boolean retainAll(Collection<? extends E> c);\n\t\t\n\t\tpublic Iterator<E> iterator();\n\t\t\n\t\tpublic E[] toArray(E[] e);\n\t\tpublic Object[] toArray();\n\t}\n```\n一些见名知意的方法就不说了，这里提一下的就是hashCode()和equals()是一起的，重写equals()方法就必须重写hashCode()方法。retainAll(Collection<? extends E> c)就是仅保留此 collection 中那些也包含在指定 collection 的元素。toArray(E[] e)是需要为数组分配内存空间的，而toArray()则不需要\n\n### AbstractCollection\n\nSAbstractCollection<E>是一个抽象类，它的主要作用是将Collection的一些方法进行实现，主要是利用iterator()、size()和一些单操作对多操作进行处理\n``` java\n\tpublic abstract class AbstractCollection<E> implements Collection<E> {\n\t\t//其中抽象方法\n\t\tpublic abstract Iterator<E> iterator();\n\t\tpublic abstract int size();\n\t\t\n\t\t//非抽象方法，但相当于抽象方法\n\t\tpublic boolean remove(Object o) {}\n\t\tpublic boolean add(E e) {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\t\t\n\t\t//非抽象方法\n\t\tpublic boolean isEmpty() {}\n\t\tpublic boolean contains(Object o) {}\n\t\tpublic boolean containsAll(Collection<?> c) {}\n\t\tpublic boolean addAll(Collection<? extends E> c) {}                                   \n\t\tpublic boolean removeAll(Collection<?> c) {}\n\t\tpublic boolean retainAll(Collection<?> c) {}\n\t\tpublic void clear() {}\n\t\tpublic Object[] toArray() {}\n\t\tpublic <T> T[] toArray(T[] a) {}\n\t\tpublic String toString() {\n\t\t\t// [a,b,c]这种格式\n\t\t}\n\t}\n```\n这里值得一提的就是removeAll()、retainAll()和addAll()这三个方法只要元素成功即返回true\n\n接下来就看一下 toArray()的具体实现\n``` java\n\tpublic <T> T[] toArray(T[] a) {\n        // Estimate size of array; be prepared to see more or fewer elements\n        int size = size();\n        T[] r = a.length >= size ? a :\n                  (T[])java.lang.reflect.Array\n                  .newInstance(a.getClass().getComponentType(), size);                         \n        Iterator<E> it = iterator();\n\n        for (int i = 0; i < r.length; i++) {\n            if (! it.hasNext()) { // fewer elements than expected\n                if (a == r) {\n                    r[i] = null; // null-terminate\n                } else if (a.length < i) {\n                    return Arrays.copyOf(r, i);\n                } else {\n                    System.arraycopy(r, 0, a, 0, i);\n                    if (a.length > i) {\n                        a[i] = null;\n                    }\n                }\n                return a;\n            }\n            r[i] = (T)it.next();\n        }\n        // more elements than expected\n        return it.hasNext() ? finishToArray(r, it) : r;\n    }\n\t\n\tprivate static <T> T[] finishToArray(T[] r, Iterator<?> it) {\n        int i = r.length;\n        while (it.hasNext()) {\n            int cap = r.length;\n            if (i == cap) {\n                int newCap = cap + (cap >> 1) + 1;\n                // overflow-conscious code\n                if (newCap - MAX_ARRAY_SIZE > 0)\n                    newCap = hugeCapacity(cap + 1);\n                r = Arrays.copyOf(r, newCap);\n            }\n            r[i++] = (T)it.next();\n        }\n        // trim if overallocated\n        return (i == r.length) ? r : Arrays.copyOf(r, i);\n    }\n```","source":"_posts/collection.md","raw":"---\ntitle: 集合系列02-Collection和AbstractCollection\ndate: 2016-10-04 14:31:02\ntags:\n\t- Collection\n---\n前面提到了Java集合的架构，接下来我们说说Collection接口和AbstractCollection抽象类\n\n<!--more-->\n\n### Collection\n\n``` java\n\tpublic interface Collection<E> extends Iterable<E> {\n\t\tpublic int size();\n\t\tpublic boolean isEmpty();\n\t\tpublic boolean contains(Object obj);\n\t\tpublic boolean add(E e);\n\t\tpublic boolean remove(Object obj);\n\t\tpublic boolean equals(Object obj);\n\t\tpublic int hashCode();\n\t\tpublic void clear();\n\t\t\n\t\tpublic boolean addAll(Collection<? extends E> c);\n\t\tpublic boolean containAll(Collection<? extends E> c);\n\t\tpublic boolean removeAll(Collection<? extends E> c);\n\t\tpublic boolean retainAll(Collection<? extends E> c);\n\t\t\n\t\tpublic Iterator<E> iterator();\n\t\t\n\t\tpublic E[] toArray(E[] e);\n\t\tpublic Object[] toArray();\n\t}\n```\n一些见名知意的方法就不说了，这里提一下的就是hashCode()和equals()是一起的，重写equals()方法就必须重写hashCode()方法。retainAll(Collection<? extends E> c)就是仅保留此 collection 中那些也包含在指定 collection 的元素。toArray(E[] e)是需要为数组分配内存空间的，而toArray()则不需要\n\n### AbstractCollection\n\nSAbstractCollection<E>是一个抽象类，它的主要作用是将Collection的一些方法进行实现，主要是利用iterator()、size()和一些单操作对多操作进行处理\n``` java\n\tpublic abstract class AbstractCollection<E> implements Collection<E> {\n\t\t//其中抽象方法\n\t\tpublic abstract Iterator<E> iterator();\n\t\tpublic abstract int size();\n\t\t\n\t\t//非抽象方法，但相当于抽象方法\n\t\tpublic boolean remove(Object o) {}\n\t\tpublic boolean add(E e) {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\t\t\n\t\t//非抽象方法\n\t\tpublic boolean isEmpty() {}\n\t\tpublic boolean contains(Object o) {}\n\t\tpublic boolean containsAll(Collection<?> c) {}\n\t\tpublic boolean addAll(Collection<? extends E> c) {}                                   \n\t\tpublic boolean removeAll(Collection<?> c) {}\n\t\tpublic boolean retainAll(Collection<?> c) {}\n\t\tpublic void clear() {}\n\t\tpublic Object[] toArray() {}\n\t\tpublic <T> T[] toArray(T[] a) {}\n\t\tpublic String toString() {\n\t\t\t// [a,b,c]这种格式\n\t\t}\n\t}\n```\n这里值得一提的就是removeAll()、retainAll()和addAll()这三个方法只要元素成功即返回true\n\n接下来就看一下 toArray()的具体实现\n``` java\n\tpublic <T> T[] toArray(T[] a) {\n        // Estimate size of array; be prepared to see more or fewer elements\n        int size = size();\n        T[] r = a.length >= size ? a :\n                  (T[])java.lang.reflect.Array\n                  .newInstance(a.getClass().getComponentType(), size);                         \n        Iterator<E> it = iterator();\n\n        for (int i = 0; i < r.length; i++) {\n            if (! it.hasNext()) { // fewer elements than expected\n                if (a == r) {\n                    r[i] = null; // null-terminate\n                } else if (a.length < i) {\n                    return Arrays.copyOf(r, i);\n                } else {\n                    System.arraycopy(r, 0, a, 0, i);\n                    if (a.length > i) {\n                        a[i] = null;\n                    }\n                }\n                return a;\n            }\n            r[i] = (T)it.next();\n        }\n        // more elements than expected\n        return it.hasNext() ? finishToArray(r, it) : r;\n    }\n\t\n\tprivate static <T> T[] finishToArray(T[] r, Iterator<?> it) {\n        int i = r.length;\n        while (it.hasNext()) {\n            int cap = r.length;\n            if (i == cap) {\n                int newCap = cap + (cap >> 1) + 1;\n                // overflow-conscious code\n                if (newCap - MAX_ARRAY_SIZE > 0)\n                    newCap = hugeCapacity(cap + 1);\n                r = Arrays.copyOf(r, newCap);\n            }\n            r[i++] = (T)it.next();\n        }\n        // trim if overallocated\n        return (i == r.length) ? r : Arrays.copyOf(r, i);\n    }\n```","slug":"collection","published":1,"updated":"2017-03-08T11:44:41.663Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5bc0002qoq1mwgnlzib","content":"<p>前面提到了Java集合的架构，接下来我们说说Collection接口和AbstractCollection抽象类</p>\n<a id=\"more\"></a>\n<h3 id=\"Collection\"><a href=\"#Collection\" class=\"headerlink\" title=\"Collection\"></a>Collection</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Collection</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Iterable</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Object obj)</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(Object obj)</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">addAll</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">containAll</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">removeAll</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">retainAll</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span></span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterator&lt;E&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> E[] toArray(E[] e);</div><div class=\"line\">\t<span class=\"keyword\">public</span> Object[] toArray();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>一些见名知意的方法就不说了，这里提一下的就是hashCode()和equals()是一起的，重写equals()方法就必须重写hashCode()方法。retainAll(Collection&lt;? extends E&gt; c)就是仅保留此 collection 中那些也包含在指定 collection 的元素。toArray(E[] e)是需要为数组分配内存空间的，而toArray()则不需要</p>\n<h3 id=\"AbstractCollection\"><a href=\"#AbstractCollection\" class=\"headerlink\" title=\"AbstractCollection\"></a>AbstractCollection</h3><p>SAbstractCollection<e>是一个抽象类，它的主要作用是将Collection的一些方法进行实现，主要是利用iterator()、size()和一些单操作对多操作进行处理<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractCollection</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Collection</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//其中抽象方法</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Iterator&lt;E&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//非抽象方法，但相当于抽象方法</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(Object o)</span> </span>&#123;&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//非抽象方法</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Object o)</span> </span>&#123;&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">containsAll</span><span class=\"params\">(Collection&lt;?&gt; c)</span> </span>&#123;&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">addAll</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span> </span>&#123;&#125;                                   </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">removeAll</span><span class=\"params\">(Collection&lt;?&gt; c)</span> </span>&#123;&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">retainAll</span><span class=\"params\">(Collection&lt;?&gt; c)</span> </span>&#123;&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\">\t<span class=\"keyword\">public</span> Object[] toArray() &#123;&#125;</div><div class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// [a,b,c]这种格式</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></e></p>\n<p>这里值得一提的就是removeAll()、retainAll()和addAll()这三个方法只要元素成功即返回true</p>\n<p>接下来就看一下 toArray()的具体实现<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</div><div class=\"line\">       <span class=\"comment\">// Estimate size of array; be prepared to see more or fewer elements</span></div><div class=\"line\">       <span class=\"keyword\">int</span> size = size();</div><div class=\"line\">       T[] r = a.length &gt;= size ? a :</div><div class=\"line\">                 (T[])java.lang.reflect.Array</div><div class=\"line\">                 .newInstance(a.getClass().getComponentType(), size);                         </div><div class=\"line\">       Iterator&lt;E&gt; it = iterator();</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; r.length; i++) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (! it.hasNext()) &#123; <span class=\"comment\">// fewer elements than expected</span></div><div class=\"line\">               <span class=\"keyword\">if</span> (a == r) &#123;</div><div class=\"line\">                   r[i] = <span class=\"keyword\">null</span>; <span class=\"comment\">// null-terminate</span></div><div class=\"line\">               &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a.length &lt; i) &#123;</div><div class=\"line\">                   <span class=\"keyword\">return</span> Arrays.copyOf(r, i);</div><div class=\"line\">               &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                   System.arraycopy(r, <span class=\"number\">0</span>, a, <span class=\"number\">0</span>, i);</div><div class=\"line\">                   <span class=\"keyword\">if</span> (a.length &gt; i) &#123;</div><div class=\"line\">                       a[i] = <span class=\"keyword\">null</span>;</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;</div><div class=\"line\">               <span class=\"keyword\">return</span> a;</div><div class=\"line\">           &#125;</div><div class=\"line\">           r[i] = (T)it.next();</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"comment\">// more elements than expected</span></div><div class=\"line\">       <span class=\"keyword\">return</span> it.hasNext() ? finishToArray(r, it) : r;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> &lt;T&gt; T[] finishToArray(T[] r, Iterator&lt;?&gt; it) &#123;</div><div class=\"line\">       <span class=\"keyword\">int</span> i = r.length;</div><div class=\"line\">       <span class=\"keyword\">while</span> (it.hasNext()) &#123;</div><div class=\"line\">           <span class=\"keyword\">int</span> cap = r.length;</div><div class=\"line\">           <span class=\"keyword\">if</span> (i == cap) &#123;</div><div class=\"line\">               <span class=\"keyword\">int</span> newCap = cap + (cap &gt;&gt; <span class=\"number\">1</span>) + <span class=\"number\">1</span>;</div><div class=\"line\">               <span class=\"comment\">// overflow-conscious code</span></div><div class=\"line\">               <span class=\"keyword\">if</span> (newCap - MAX_ARRAY_SIZE &gt; <span class=\"number\">0</span>)</div><div class=\"line\">                   newCap = hugeCapacity(cap + <span class=\"number\">1</span>);</div><div class=\"line\">               r = Arrays.copyOf(r, newCap);</div><div class=\"line\">           &#125;</div><div class=\"line\">           r[i++] = (T)it.next();</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"comment\">// trim if overallocated</span></div><div class=\"line\">       <span class=\"keyword\">return</span> (i == r.length) ? r : Arrays.copyOf(r, i);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>前面提到了Java集合的架构，接下来我们说说Collection接口和AbstractCollection抽象类</p>","more":"<h3 id=\"Collection\"><a href=\"#Collection\" class=\"headerlink\" title=\"Collection\"></a>Collection</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Collection</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Iterable</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Object obj)</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(Object obj)</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">addAll</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">containAll</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">removeAll</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">retainAll</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span></span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterator&lt;E&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> E[] toArray(E[] e);</div><div class=\"line\">\t<span class=\"keyword\">public</span> Object[] toArray();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>一些见名知意的方法就不说了，这里提一下的就是hashCode()和equals()是一起的，重写equals()方法就必须重写hashCode()方法。retainAll(Collection&lt;? extends E&gt; c)就是仅保留此 collection 中那些也包含在指定 collection 的元素。toArray(E[] e)是需要为数组分配内存空间的，而toArray()则不需要</p>\n<h3 id=\"AbstractCollection\"><a href=\"#AbstractCollection\" class=\"headerlink\" title=\"AbstractCollection\"></a>AbstractCollection</h3><p>SAbstractCollection<E>是一个抽象类，它的主要作用是将Collection的一些方法进行实现，主要是利用iterator()、size()和一些单操作对多操作进行处理<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractCollection</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Collection</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//其中抽象方法</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Iterator&lt;E&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//非抽象方法，但相当于抽象方法</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(Object o)</span> </span>&#123;&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//非抽象方法</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Object o)</span> </span>&#123;&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">containsAll</span><span class=\"params\">(Collection&lt;?&gt; c)</span> </span>&#123;&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">addAll</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span> </span>&#123;&#125;                                   </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">removeAll</span><span class=\"params\">(Collection&lt;?&gt; c)</span> </span>&#123;&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">retainAll</span><span class=\"params\">(Collection&lt;?&gt; c)</span> </span>&#123;&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\">\t<span class=\"keyword\">public</span> Object[] toArray() &#123;&#125;</div><div class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// [a,b,c]这种格式</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里值得一提的就是removeAll()、retainAll()和addAll()这三个方法只要元素成功即返回true</p>\n<p>接下来就看一下 toArray()的具体实现<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</div><div class=\"line\">       <span class=\"comment\">// Estimate size of array; be prepared to see more or fewer elements</span></div><div class=\"line\">       <span class=\"keyword\">int</span> size = size();</div><div class=\"line\">       T[] r = a.length &gt;= size ? a :</div><div class=\"line\">                 (T[])java.lang.reflect.Array</div><div class=\"line\">                 .newInstance(a.getClass().getComponentType(), size);                         </div><div class=\"line\">       Iterator&lt;E&gt; it = iterator();</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; r.length; i++) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (! it.hasNext()) &#123; <span class=\"comment\">// fewer elements than expected</span></div><div class=\"line\">               <span class=\"keyword\">if</span> (a == r) &#123;</div><div class=\"line\">                   r[i] = <span class=\"keyword\">null</span>; <span class=\"comment\">// null-terminate</span></div><div class=\"line\">               &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a.length &lt; i) &#123;</div><div class=\"line\">                   <span class=\"keyword\">return</span> Arrays.copyOf(r, i);</div><div class=\"line\">               &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                   System.arraycopy(r, <span class=\"number\">0</span>, a, <span class=\"number\">0</span>, i);</div><div class=\"line\">                   <span class=\"keyword\">if</span> (a.length &gt; i) &#123;</div><div class=\"line\">                       a[i] = <span class=\"keyword\">null</span>;</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;</div><div class=\"line\">               <span class=\"keyword\">return</span> a;</div><div class=\"line\">           &#125;</div><div class=\"line\">           r[i] = (T)it.next();</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"comment\">// more elements than expected</span></div><div class=\"line\">       <span class=\"keyword\">return</span> it.hasNext() ? finishToArray(r, it) : r;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> &lt;T&gt; T[] finishToArray(T[] r, Iterator&lt;?&gt; it) &#123;</div><div class=\"line\">       <span class=\"keyword\">int</span> i = r.length;</div><div class=\"line\">       <span class=\"keyword\">while</span> (it.hasNext()) &#123;</div><div class=\"line\">           <span class=\"keyword\">int</span> cap = r.length;</div><div class=\"line\">           <span class=\"keyword\">if</span> (i == cap) &#123;</div><div class=\"line\">               <span class=\"keyword\">int</span> newCap = cap + (cap &gt;&gt; <span class=\"number\">1</span>) + <span class=\"number\">1</span>;</div><div class=\"line\">               <span class=\"comment\">// overflow-conscious code</span></div><div class=\"line\">               <span class=\"keyword\">if</span> (newCap - MAX_ARRAY_SIZE &gt; <span class=\"number\">0</span>)</div><div class=\"line\">                   newCap = hugeCapacity(cap + <span class=\"number\">1</span>);</div><div class=\"line\">               r = Arrays.copyOf(r, newCap);</div><div class=\"line\">           &#125;</div><div class=\"line\">           r[i++] = (T)it.next();</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"comment\">// trim if overallocated</span></div><div class=\"line\">       <span class=\"keyword\">return</span> (i == r.length) ? r : Arrays.copyOf(r, i);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>"},{"title":"贪心算法","date":"2016-12-17T12:54:45.000Z","_content":"古人云：鱼与熊掌不可兼得，而现实中人们又往往想获取更多。通过程序设计和相应的算法，有时候我们又可以获取更多一点，而这就是贪心算法。其实贪心算法也并是特别复杂，在现实生活中，我们经常都能使用到，只是我们并没有意识到而已。\n\n<!-- more -->\n\n### 什么是贪心算法\n贪心算法是指在求解实际问题中，每一步都采取在当前状态下最好或最优（即最有利）的选择，从而希望导致结果是最好或最优的算法。也就是说，它不从全局加以考虑，而仅仅采用局部最优解\n\n贪心算法并没有固定的框架，其关键在于贪心策略到的选择，当然贪心算法也必须有一定的前提，那就是无后效性，即在当前做出的选择并不会因为后面的选择而改变，只与当前的状态有关\n\n### 贪心算法基本思路\n1. 建立数学模型来描述问题。\n2. 把求解的问题分成若干个子问题。\n3. 对每一子问题求解，得到子问题的局部最优解。\n4. 把子问题的解局部最优解合成原来解问题的一个解。\n\n### 案例分析\n已知，中华人民共和国的纸币面额分别为：100元、50元、20元、10元、5元、2元、1元，输入钱数，输出最小的货币方案\n\n### 代码实现\n``` java\npackage cn.sakuraffy.greedy;\n\nimport java.util.Arrays;\nimport java.util.Scanner;\n\n/**\n * \n * @author Sakuraffy\n * @date 2016-12-25 19:11\n * @desc 利用贪心算法，解决找零问题\n */\npublic class Change {\n\tpublic final static int[] change = new int[]{100,50,20,10,5,1};                       \n\t\n\tpublic int[] getChange(int num) {\n\t\tint len = change.length;\n\t\tint[] count = new int[len];\n\t\t// 记录每次遍历的开始\n\t\tint tmp = 0;\n\t\twhile(num > 0) {\n\t\t\tfor(int i = tmp; i < len; i++) {\n\t\t\t\tif(num >= change[i]) {\n\t\t\t\t\tnum -= change[i];\n\t\t\t\t\tcount[i]++;\n\t\t\t\t\ttmp = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint num = sc.nextInt();\n\t\tsc.close();\n\t\tint[] count = new Change().getChange(num);\n\t\tSystem.out.println(Arrays.toString(count));\n\t}\n}\n```\n输入数据：\n``` java\n345\n```\n输出结果：\n``` java\n[3, 0, 2, 0, 1, 0]\n```\n\n### 贪心算法适用场景\n- 生产调度问题\n- 0-1背包问题\n- 次数有限问题\n","source":"_posts/algorithm_greedy.md","raw":"---\ntitle: 贪心算法\ndate: 2016-12-17 20:54:45\ntags:\n\t- 算法\n---\n古人云：鱼与熊掌不可兼得，而现实中人们又往往想获取更多。通过程序设计和相应的算法，有时候我们又可以获取更多一点，而这就是贪心算法。其实贪心算法也并是特别复杂，在现实生活中，我们经常都能使用到，只是我们并没有意识到而已。\n\n<!-- more -->\n\n### 什么是贪心算法\n贪心算法是指在求解实际问题中，每一步都采取在当前状态下最好或最优（即最有利）的选择，从而希望导致结果是最好或最优的算法。也就是说，它不从全局加以考虑，而仅仅采用局部最优解\n\n贪心算法并没有固定的框架，其关键在于贪心策略到的选择，当然贪心算法也必须有一定的前提，那就是无后效性，即在当前做出的选择并不会因为后面的选择而改变，只与当前的状态有关\n\n### 贪心算法基本思路\n1. 建立数学模型来描述问题。\n2. 把求解的问题分成若干个子问题。\n3. 对每一子问题求解，得到子问题的局部最优解。\n4. 把子问题的解局部最优解合成原来解问题的一个解。\n\n### 案例分析\n已知，中华人民共和国的纸币面额分别为：100元、50元、20元、10元、5元、2元、1元，输入钱数，输出最小的货币方案\n\n### 代码实现\n``` java\npackage cn.sakuraffy.greedy;\n\nimport java.util.Arrays;\nimport java.util.Scanner;\n\n/**\n * \n * @author Sakuraffy\n * @date 2016-12-25 19:11\n * @desc 利用贪心算法，解决找零问题\n */\npublic class Change {\n\tpublic final static int[] change = new int[]{100,50,20,10,5,1};                       \n\t\n\tpublic int[] getChange(int num) {\n\t\tint len = change.length;\n\t\tint[] count = new int[len];\n\t\t// 记录每次遍历的开始\n\t\tint tmp = 0;\n\t\twhile(num > 0) {\n\t\t\tfor(int i = tmp; i < len; i++) {\n\t\t\t\tif(num >= change[i]) {\n\t\t\t\t\tnum -= change[i];\n\t\t\t\t\tcount[i]++;\n\t\t\t\t\ttmp = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint num = sc.nextInt();\n\t\tsc.close();\n\t\tint[] count = new Change().getChange(num);\n\t\tSystem.out.println(Arrays.toString(count));\n\t}\n}\n```\n输入数据：\n``` java\n345\n```\n输出结果：\n``` java\n[3, 0, 2, 0, 1, 0]\n```\n\n### 贪心算法适用场景\n- 生产调度问题\n- 0-1背包问题\n- 次数有限问题\n","slug":"algorithm_greedy","published":1,"updated":"2016-12-27T22:13:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5bh0004qoq15g6945vd","content":"<p>古人云：鱼与熊掌不可兼得，而现实中人们又往往想获取更多。通过程序设计和相应的算法，有时候我们又可以获取更多一点，而这就是贪心算法。其实贪心算法也并是特别复杂，在现实生活中，我们经常都能使用到，只是我们并没有意识到而已。</p>\n<a id=\"more\"></a>\n<h3 id=\"什么是贪心算法\"><a href=\"#什么是贪心算法\" class=\"headerlink\" title=\"什么是贪心算法\"></a>什么是贪心算法</h3><p>贪心算法是指在求解实际问题中，每一步都采取在当前状态下最好或最优（即最有利）的选择，从而希望导致结果是最好或最优的算法。也就是说，它不从全局加以考虑，而仅仅采用局部最优解</p>\n<p>贪心算法并没有固定的框架，其关键在于贪心策略到的选择，当然贪心算法也必须有一定的前提，那就是无后效性，即在当前做出的选择并不会因为后面的选择而改变，只与当前的状态有关</p>\n<h3 id=\"贪心算法基本思路\"><a href=\"#贪心算法基本思路\" class=\"headerlink\" title=\"贪心算法基本思路\"></a>贪心算法基本思路</h3><ol>\n<li>建立数学模型来描述问题。</li>\n<li>把求解的问题分成若干个子问题。</li>\n<li>对每一子问题求解，得到子问题的局部最优解。</li>\n<li>把子问题的解局部最优解合成原来解问题的一个解。</li>\n</ol>\n<h3 id=\"案例分析\"><a href=\"#案例分析\" class=\"headerlink\" title=\"案例分析\"></a>案例分析</h3><p>已知，中华人民共和国的纸币面额分别为：100元、50元、20元、10元、5元、2元、1元，输入钱数，输出最小的货币方案</p>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.greedy;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * </div><div class=\"line\"> * <span class=\"doctag\">@author</span> Sakuraffy</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2016-12-25 19:11</div><div class=\"line\"> * <span class=\"doctag\">@desc</span> 利用贪心算法，解决找零问题</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Change</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] change = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">100</span>,<span class=\"number\">50</span>,<span class=\"number\">20</span>,<span class=\"number\">10</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>&#125;;                       </div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] getChange(<span class=\"keyword\">int</span> num) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> len = change.length;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[] count = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[len];</div><div class=\"line\">\t\t<span class=\"comment\">// 记录每次遍历的开始</span></div><div class=\"line\">\t\t<span class=\"keyword\">int</span> tmp = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(num &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = tmp; i &lt; len; i++) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(num &gt;= change[i]) &#123;</div><div class=\"line\">\t\t\t\t\tnum -= change[i];</div><div class=\"line\">\t\t\t\t\tcount[i]++;</div><div class=\"line\">\t\t\t\t\ttmp = i;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> count;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> num = sc.nextInt();</div><div class=\"line\">\t\tsc.close();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[] count = <span class=\"keyword\">new</span> Change().getChange(num);</div><div class=\"line\">\t\tSystem.out.println(Arrays.toString(count));</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输入数据：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">345</span></div></pre></td></tr></table></figure></p>\n<p>输出结果：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>]</div></pre></td></tr></table></figure></p>\n<h3 id=\"贪心算法适用场景\"><a href=\"#贪心算法适用场景\" class=\"headerlink\" title=\"贪心算法适用场景\"></a>贪心算法适用场景</h3><ul>\n<li>生产调度问题</li>\n<li>0-1背包问题</li>\n<li>次数有限问题</li>\n</ul>\n","excerpt":"<p>古人云：鱼与熊掌不可兼得，而现实中人们又往往想获取更多。通过程序设计和相应的算法，有时候我们又可以获取更多一点，而这就是贪心算法。其实贪心算法也并是特别复杂，在现实生活中，我们经常都能使用到，只是我们并没有意识到而已。</p>","more":"<h3 id=\"什么是贪心算法\"><a href=\"#什么是贪心算法\" class=\"headerlink\" title=\"什么是贪心算法\"></a>什么是贪心算法</h3><p>贪心算法是指在求解实际问题中，每一步都采取在当前状态下最好或最优（即最有利）的选择，从而希望导致结果是最好或最优的算法。也就是说，它不从全局加以考虑，而仅仅采用局部最优解</p>\n<p>贪心算法并没有固定的框架，其关键在于贪心策略到的选择，当然贪心算法也必须有一定的前提，那就是无后效性，即在当前做出的选择并不会因为后面的选择而改变，只与当前的状态有关</p>\n<h3 id=\"贪心算法基本思路\"><a href=\"#贪心算法基本思路\" class=\"headerlink\" title=\"贪心算法基本思路\"></a>贪心算法基本思路</h3><ol>\n<li>建立数学模型来描述问题。</li>\n<li>把求解的问题分成若干个子问题。</li>\n<li>对每一子问题求解，得到子问题的局部最优解。</li>\n<li>把子问题的解局部最优解合成原来解问题的一个解。</li>\n</ol>\n<h3 id=\"案例分析\"><a href=\"#案例分析\" class=\"headerlink\" title=\"案例分析\"></a>案例分析</h3><p>已知，中华人民共和国的纸币面额分别为：100元、50元、20元、10元、5元、2元、1元，输入钱数，输出最小的货币方案</p>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.greedy;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * </div><div class=\"line\"> * <span class=\"doctag\">@author</span> Sakuraffy</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2016-12-25 19:11</div><div class=\"line\"> * <span class=\"doctag\">@desc</span> 利用贪心算法，解决找零问题</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Change</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] change = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">100</span>,<span class=\"number\">50</span>,<span class=\"number\">20</span>,<span class=\"number\">10</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>&#125;;                       </div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] getChange(<span class=\"keyword\">int</span> num) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> len = change.length;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[] count = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[len];</div><div class=\"line\">\t\t<span class=\"comment\">// 记录每次遍历的开始</span></div><div class=\"line\">\t\t<span class=\"keyword\">int</span> tmp = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(num &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = tmp; i &lt; len; i++) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(num &gt;= change[i]) &#123;</div><div class=\"line\">\t\t\t\t\tnum -= change[i];</div><div class=\"line\">\t\t\t\t\tcount[i]++;</div><div class=\"line\">\t\t\t\t\ttmp = i;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> count;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> num = sc.nextInt();</div><div class=\"line\">\t\tsc.close();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[] count = <span class=\"keyword\">new</span> Change().getChange(num);</div><div class=\"line\">\t\tSystem.out.println(Arrays.toString(count));</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输入数据：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">345</span></div></pre></td></tr></table></figure></p>\n<p>输出结果：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>]</div></pre></td></tr></table></figure></p>\n<h3 id=\"贪心算法适用场景\"><a href=\"#贪心算法适用场景\" class=\"headerlink\" title=\"贪心算法适用场景\"></a>贪心算法适用场景</h3><ul>\n<li>生产调度问题</li>\n<li>0-1背包问题</li>\n<li>次数有限问题</li>\n</ul>"},{"title":"集合系列04-ArrayList的原理与实现","date":"2016-10-07T14:48:41.000Z","_content":"前面提到List接口，那么它的一个完整实现就是ArrayList。array数组的意思，所以这个List是以动态数组为基础实现的\n### 基本属性\n``` java\n\tpublic class ArrayList<E> extends AbstractList<E>\n        implements List<E>, RandomAccess, Cloneable, java.io.Serializable {\n\t\tprivate int size;\n\t\ttransient Object[] elementData;\n\t}\n```\n这就是ArrayList的两个属性，elementData用来装数据，而size则所装元素的个数\n\n<!--more-->\n\n下面就说一下方法的实现吧。对于一些见名知意简单的函数，这里就不涉及了。\n``` java\n\t// 学会利用已有函数编程\n\tpublic boolean contains(Object o) {\n        return indexOf(o) >= 0;\n    }\n\t\n\t//注意null可以为任意类型，判空至关重要\n\tpublic boolean remove(Object o) {\n        if (o == null) {\n            for (int index = 0; index < size; index++)                                         \n                if (elementData[index] == null) {\n                    fastRemove(index);\n                    return true;\n                }\n        } else {\n            for (int index = 0; index < size; index++)\n                if (o.equals(elementData[index])) {\n                    fastRemove(index);\n                    return true;\n                }\n        }\n        return false;\n    }\n\t\n\tprivate void rangeCheck(int index) {\n        if (index >= size)\n            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));\n    }\n\t\n\t//与上个函数对别，add()是可以在size位置加入的\n\tprivate void rangeCheckForAdd(int index) {\n        if (index > size || index < 0)\n            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));\n    }\n\t\n\t//编程考虑垃圾回收(GC)\n\tpublic void clear() {\n        modCount++;\n\n        // clear to let GC do its work\n        for (int i = 0; i < size; i++)\n            elementData[i] = null;\n\n        size = 0;\n    }\n\t\n\t//remove()和set()都是返回oldValue\n\tpublic E set(int index, E element) {\n        rangeCheck(index);\n\n        E oldValue = elementData(index);\n        elementData[index] = element;\n        return oldValue;\n    }\n\t\n\t//类似的addAll(),reamoveAll(),retainAll()都是一个成功就返回true\n\tpublic boolean addAll(Collection<? extends E> c) {\n        Object[] a = c.toArray();\n        int numNew = a.length;\n        ensureCapacityInternal(size + numNew);  // Increments modCount\n        System.arraycopy(a, 0, elementData, size, numNew);\n        size += numNew;\n        return numNew != 0;\n    }\n```\n上面的方法其实也很简单，只是多了一些注意点而已。下面就重点讨论一下数组动态增长、toArray、clone、batchRemove、writeObject和readObject这几个方法\n\n### 数组动态增长\n\n我们知道数组是有固定长度的，ArrayList的关键之一就是数组的动态增长\n``` java\n\tprivate void ensureCapacityInternal(int minCapacity) {\n        if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n            minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);\n        }\n\n        ensureExplicitCapacity(minCapacity);\n    }\n\n    private void ensureExplicitCapacity(int minCapacity) {\n        modCount++;\n\n        // overflow-conscious code\n        if (minCapacity - elementData.length > 0)\n            grow(minCapacity);\n    }\n\t\n\tprivate void grow(int minCapacity) {\n        // overflow-conscious code\n        int oldCapacity = elementData.length;\n        int newCapacity = oldCapacity + (oldCapacity >> 1);\n        if (newCapacity - minCapacity < 0)\n            newCapacity = minCapacity;\n        if (newCapacity - MAX_ARRAY_SIZE > 0)\n            newCapacity = hugeCapacity(minCapacity);\n        // minCapacity is usually close to size, so this is a win:                             \n        elementData = Arrays.copyOf(elementData, newCapacity);\n    }\n\t\n\tprivate static int hugeCapacity(int minCapacity) {\n        if (minCapacity < 0) // overflow\n            throw new OutOfMemoryError();\n        return (minCapacity > MAX_ARRAY_SIZE) ?\n            Integer.MAX_VALUE :\n            MAX_ARRAY_SIZE;\n    }\n```\n它上面说的比较严谨，简而言之就是当所需要minCapacity > dataElement.length,就在dataElement数组长度的基础上加上其一半\n\n### ToArray\n\n先来看一下一个小Demo吧\n``` java\n\tpublic class Demo {\n\t\tpublic static void main(String[] args) {\n\t\t\tArrayList<String> al = new ArrayList<String>(3);\n\t\t\tfor(int i = 0; i < 3; i++) {\n\t\t\t\tal.add(\"Hello\" + i);\n\t\t\t}\n\t\t\tString[] str1 = new String[]{\"HH0\",\"HH1\",\"HH2\",\"HH3\",\"HH4\",\"HH5\"};\n\t\t\tString[] str2 = new String[1];\n\t\t\tstr1 = al.toArray(str1);\n\t\t\tstr2 = al.toArray(str2);\n\t\t\tSystem.out.println(Arrays.toString(str1));\n\t\t\tSystem.out.println(Arrays.toString(str2));\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\n[Hello0, Hello1, Hello2, null, HH4, HH5]\n[Hello0, Hello1, Hello2]\n```\n\n为什么str1会输出这个结果呢？看一下源码就一目了然了\n``` java\n\t@SuppressWarnings(\"unchecked\")\n    public <T> T[] toArray(T[] a) {\n        if (a.length < size)\n            // Make a new array of a's runtime type, but my contents:\n            return (T[]) Arrays.copyOf(elementData, size, a.getClass());\n        System.arraycopy(elementData, 0, a, 0, size);\n        if (a.length > size)\n            a[size] = null;\n        return a;\n    }\n```\n\n### Clone \n\nclone()是实现cloneable接口必须实现的一个方法，具体的可以看[原型模式](https://sakuraffy.github.io/pattern_prototype/)\n``` java\n\tpublic Object clone() {\n        try {\n            ArrayList<?> v = (ArrayList<?>) super.clone();\n            v.elementData = Arrays.copyOf(elementData, size);\n            v.modCount = 0;\n            return v;\n        } catch (CloneNotSupportedException e) {\n            // this shouldn't happen, since we are Cloneable\n            throw new InternalError(e);\n        }\n    }\n```\n\n### BatchRemove\n\n``` java\n\tprivate boolean batchRemove(Collection<?> c, boolean complement) {\n        final Object[] elementData = this.elementData;\n        int r = 0, w = 0;\n        boolean modified = false;\n        try {\n            for (; r < size; r++)\n                if (c.contains(elementData[r]) == complement)\n                    elementData[w++] = elementData[r];\n        } finally {\n            // Preserve behavioral compatibility with AbstractCollection,                      \n            // even if c.contains() throws.\n            if (r != size) {\n                System.arraycopy(elementData, r,\n                                 elementData, w,\n                                 size - r);\n                w += size - r;\n            }\n            if (w != size) {\n                // clear to let GC do its work\n                for (int i = w; i < size; i++)\n                    elementData[i] = null;\n                modCount += size - w;\n                size = w;\n                modified = true;\n            }\n        }\n        return modified;\n    }\n```\nbatchRemove()主要用于retainAll()和removeAll()这两个方法。其主要的思想就是 ： 把满足条件的元素还是用这个数组从0开始保存起来，如果满足条件的个数小于原来的长度就将其多余的设为null，并减小size\n\n### WriteObject和ReadObject\n\nwriteObject()和readObject()是实现序列化的。其中关于序列化请参考[序列化机制](https://sakuraffy.github.io/java_serializable/)\n``` java\n\tprivate void writeObject(java.io.ObjectOutputStream s)\n        throws java.io.IOException{\n        // Write out element count, and any hidden stuff\n        int expectedModCount = modCount;\n        s.defaultWriteObject();\n\n        // Write out size as capacity for behavioural compatibility with clone()               \n        s.writeInt(size);\n\n        // Write out all elements in the proper order.\n        for (int i=0; i<size; i++) {\n            s.writeObject(elementData[i]);\n        }\n\n        if (modCount != expectedModCount) {\n            throw new ConcurrentModificationException();\n        }\n    }\n\t\n\tprivate void readObject(java.io.ObjectInputStream s)\n        throws java.io.IOException, ClassNotFoundException {\n        elementData = EMPTY_ELEMENTDATA;\n\n        // Read in size, and any hidden stuff\n        s.defaultReadObject();\n\n        // Read in capacity\n        s.readInt(); // ignored\n\n        if (size > 0) {\n            // be like clone(), allocate array based upon size not capacity\n            ensureCapacityInternal(size);\n\n            Object[] a = elementData;\n            // Read in all elements in the proper order.\n            for (int i=0; i<size; i++) {\n                a[i] = s.readObject();\n            }\n        }\n    }\n```\n其中ArryList的序列化，无论是读还是写都是先将大小处理，然后才是各个元素\n\n上面讨论了ArrayList的方法，其实ArrayList中还有两个内部类Itr和ListItr\n``` java\n\tpublic class ArrayList<E> extends AbstractList<E> {\n\t\tprivate class Itr implements Iterator<E> {}\n\t\tprivate class ListItr extends Itr implements ListIterator<E> {}\n\t}\n```\n值得一提的是Itr和ListItr中有expectedModCount和modCount来确保安全性，其余的就没什么可说的，如果有不明白的可以看一下[迭代器模式](https://sakuraffy.github.io/pattern_iterator/)\n","source":"_posts/collection_arraylist.md","raw":"---\ntitle: 集合系列04-ArrayList的原理与实现\ndate: 2016-10-07 22:48:41\ntags:\n\t- Collection\n---\n前面提到List接口，那么它的一个完整实现就是ArrayList。array数组的意思，所以这个List是以动态数组为基础实现的\n### 基本属性\n``` java\n\tpublic class ArrayList<E> extends AbstractList<E>\n        implements List<E>, RandomAccess, Cloneable, java.io.Serializable {\n\t\tprivate int size;\n\t\ttransient Object[] elementData;\n\t}\n```\n这就是ArrayList的两个属性，elementData用来装数据，而size则所装元素的个数\n\n<!--more-->\n\n下面就说一下方法的实现吧。对于一些见名知意简单的函数，这里就不涉及了。\n``` java\n\t// 学会利用已有函数编程\n\tpublic boolean contains(Object o) {\n        return indexOf(o) >= 0;\n    }\n\t\n\t//注意null可以为任意类型，判空至关重要\n\tpublic boolean remove(Object o) {\n        if (o == null) {\n            for (int index = 0; index < size; index++)                                         \n                if (elementData[index] == null) {\n                    fastRemove(index);\n                    return true;\n                }\n        } else {\n            for (int index = 0; index < size; index++)\n                if (o.equals(elementData[index])) {\n                    fastRemove(index);\n                    return true;\n                }\n        }\n        return false;\n    }\n\t\n\tprivate void rangeCheck(int index) {\n        if (index >= size)\n            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));\n    }\n\t\n\t//与上个函数对别，add()是可以在size位置加入的\n\tprivate void rangeCheckForAdd(int index) {\n        if (index > size || index < 0)\n            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));\n    }\n\t\n\t//编程考虑垃圾回收(GC)\n\tpublic void clear() {\n        modCount++;\n\n        // clear to let GC do its work\n        for (int i = 0; i < size; i++)\n            elementData[i] = null;\n\n        size = 0;\n    }\n\t\n\t//remove()和set()都是返回oldValue\n\tpublic E set(int index, E element) {\n        rangeCheck(index);\n\n        E oldValue = elementData(index);\n        elementData[index] = element;\n        return oldValue;\n    }\n\t\n\t//类似的addAll(),reamoveAll(),retainAll()都是一个成功就返回true\n\tpublic boolean addAll(Collection<? extends E> c) {\n        Object[] a = c.toArray();\n        int numNew = a.length;\n        ensureCapacityInternal(size + numNew);  // Increments modCount\n        System.arraycopy(a, 0, elementData, size, numNew);\n        size += numNew;\n        return numNew != 0;\n    }\n```\n上面的方法其实也很简单，只是多了一些注意点而已。下面就重点讨论一下数组动态增长、toArray、clone、batchRemove、writeObject和readObject这几个方法\n\n### 数组动态增长\n\n我们知道数组是有固定长度的，ArrayList的关键之一就是数组的动态增长\n``` java\n\tprivate void ensureCapacityInternal(int minCapacity) {\n        if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n            minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);\n        }\n\n        ensureExplicitCapacity(minCapacity);\n    }\n\n    private void ensureExplicitCapacity(int minCapacity) {\n        modCount++;\n\n        // overflow-conscious code\n        if (minCapacity - elementData.length > 0)\n            grow(minCapacity);\n    }\n\t\n\tprivate void grow(int minCapacity) {\n        // overflow-conscious code\n        int oldCapacity = elementData.length;\n        int newCapacity = oldCapacity + (oldCapacity >> 1);\n        if (newCapacity - minCapacity < 0)\n            newCapacity = minCapacity;\n        if (newCapacity - MAX_ARRAY_SIZE > 0)\n            newCapacity = hugeCapacity(minCapacity);\n        // minCapacity is usually close to size, so this is a win:                             \n        elementData = Arrays.copyOf(elementData, newCapacity);\n    }\n\t\n\tprivate static int hugeCapacity(int minCapacity) {\n        if (minCapacity < 0) // overflow\n            throw new OutOfMemoryError();\n        return (minCapacity > MAX_ARRAY_SIZE) ?\n            Integer.MAX_VALUE :\n            MAX_ARRAY_SIZE;\n    }\n```\n它上面说的比较严谨，简而言之就是当所需要minCapacity > dataElement.length,就在dataElement数组长度的基础上加上其一半\n\n### ToArray\n\n先来看一下一个小Demo吧\n``` java\n\tpublic class Demo {\n\t\tpublic static void main(String[] args) {\n\t\t\tArrayList<String> al = new ArrayList<String>(3);\n\t\t\tfor(int i = 0; i < 3; i++) {\n\t\t\t\tal.add(\"Hello\" + i);\n\t\t\t}\n\t\t\tString[] str1 = new String[]{\"HH0\",\"HH1\",\"HH2\",\"HH3\",\"HH4\",\"HH5\"};\n\t\t\tString[] str2 = new String[1];\n\t\t\tstr1 = al.toArray(str1);\n\t\t\tstr2 = al.toArray(str2);\n\t\t\tSystem.out.println(Arrays.toString(str1));\n\t\t\tSystem.out.println(Arrays.toString(str2));\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\n[Hello0, Hello1, Hello2, null, HH4, HH5]\n[Hello0, Hello1, Hello2]\n```\n\n为什么str1会输出这个结果呢？看一下源码就一目了然了\n``` java\n\t@SuppressWarnings(\"unchecked\")\n    public <T> T[] toArray(T[] a) {\n        if (a.length < size)\n            // Make a new array of a's runtime type, but my contents:\n            return (T[]) Arrays.copyOf(elementData, size, a.getClass());\n        System.arraycopy(elementData, 0, a, 0, size);\n        if (a.length > size)\n            a[size] = null;\n        return a;\n    }\n```\n\n### Clone \n\nclone()是实现cloneable接口必须实现的一个方法，具体的可以看[原型模式](https://sakuraffy.github.io/pattern_prototype/)\n``` java\n\tpublic Object clone() {\n        try {\n            ArrayList<?> v = (ArrayList<?>) super.clone();\n            v.elementData = Arrays.copyOf(elementData, size);\n            v.modCount = 0;\n            return v;\n        } catch (CloneNotSupportedException e) {\n            // this shouldn't happen, since we are Cloneable\n            throw new InternalError(e);\n        }\n    }\n```\n\n### BatchRemove\n\n``` java\n\tprivate boolean batchRemove(Collection<?> c, boolean complement) {\n        final Object[] elementData = this.elementData;\n        int r = 0, w = 0;\n        boolean modified = false;\n        try {\n            for (; r < size; r++)\n                if (c.contains(elementData[r]) == complement)\n                    elementData[w++] = elementData[r];\n        } finally {\n            // Preserve behavioral compatibility with AbstractCollection,                      \n            // even if c.contains() throws.\n            if (r != size) {\n                System.arraycopy(elementData, r,\n                                 elementData, w,\n                                 size - r);\n                w += size - r;\n            }\n            if (w != size) {\n                // clear to let GC do its work\n                for (int i = w; i < size; i++)\n                    elementData[i] = null;\n                modCount += size - w;\n                size = w;\n                modified = true;\n            }\n        }\n        return modified;\n    }\n```\nbatchRemove()主要用于retainAll()和removeAll()这两个方法。其主要的思想就是 ： 把满足条件的元素还是用这个数组从0开始保存起来，如果满足条件的个数小于原来的长度就将其多余的设为null，并减小size\n\n### WriteObject和ReadObject\n\nwriteObject()和readObject()是实现序列化的。其中关于序列化请参考[序列化机制](https://sakuraffy.github.io/java_serializable/)\n``` java\n\tprivate void writeObject(java.io.ObjectOutputStream s)\n        throws java.io.IOException{\n        // Write out element count, and any hidden stuff\n        int expectedModCount = modCount;\n        s.defaultWriteObject();\n\n        // Write out size as capacity for behavioural compatibility with clone()               \n        s.writeInt(size);\n\n        // Write out all elements in the proper order.\n        for (int i=0; i<size; i++) {\n            s.writeObject(elementData[i]);\n        }\n\n        if (modCount != expectedModCount) {\n            throw new ConcurrentModificationException();\n        }\n    }\n\t\n\tprivate void readObject(java.io.ObjectInputStream s)\n        throws java.io.IOException, ClassNotFoundException {\n        elementData = EMPTY_ELEMENTDATA;\n\n        // Read in size, and any hidden stuff\n        s.defaultReadObject();\n\n        // Read in capacity\n        s.readInt(); // ignored\n\n        if (size > 0) {\n            // be like clone(), allocate array based upon size not capacity\n            ensureCapacityInternal(size);\n\n            Object[] a = elementData;\n            // Read in all elements in the proper order.\n            for (int i=0; i<size; i++) {\n                a[i] = s.readObject();\n            }\n        }\n    }\n```\n其中ArryList的序列化，无论是读还是写都是先将大小处理，然后才是各个元素\n\n上面讨论了ArrayList的方法，其实ArrayList中还有两个内部类Itr和ListItr\n``` java\n\tpublic class ArrayList<E> extends AbstractList<E> {\n\t\tprivate class Itr implements Iterator<E> {}\n\t\tprivate class ListItr extends Itr implements ListIterator<E> {}\n\t}\n```\n值得一提的是Itr和ListItr中有expectedModCount和modCount来确保安全性，其余的就没什么可说的，如果有不明白的可以看一下[迭代器模式](https://sakuraffy.github.io/pattern_iterator/)\n","slug":"collection_arraylist","published":1,"updated":"2017-03-08T11:44:49.655Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5bl0005qoq1xghtl4b2","content":"<p>前面提到List接口，那么它的一个完整实现就是ArrayList。array数组的意思，所以这个List是以动态数组为基础实现的</p>\n<h3 id=\"基本属性\"><a href=\"#基本属性\" class=\"headerlink\" title=\"基本属性\"></a>基本属性</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayList</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractList</span>&lt;<span class=\"title\">E</span>&gt;</span></div><div class=\"line\">       <span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">RandomAccess</span>, <span class=\"title\">Cloneable</span>, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</div><div class=\"line\">\t<span class=\"keyword\">transient</span> Object[] elementData;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这就是ArrayList的两个属性，elementData用来装数据，而size则所装元素的个数</p>\n<a id=\"more\"></a>\n<p>下面就说一下方法的实现吧。对于一些见名知意简单的函数，这里就不涉及了。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 学会利用已有函数编程</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Object o)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> indexOf(o) &gt;= <span class=\"number\">0</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//注意null可以为任意类型，判空至关重要</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(Object o)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (o == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>; index &lt; size; index++)                                         </div><div class=\"line\">               <span class=\"keyword\">if</span> (elementData[index] == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                   fastRemove(index);</div><div class=\"line\">                   <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">               &#125;</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>; index &lt; size; index++)</div><div class=\"line\">               <span class=\"keyword\">if</span> (o.equals(elementData[index])) &#123;</div><div class=\"line\">                   fastRemove(index);</div><div class=\"line\">                   <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">               &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">rangeCheck</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (index &gt;= size)</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//与上个函数对别，add()是可以在size位置加入的</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">rangeCheckForAdd</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (index &gt; size || index &lt; <span class=\"number\">0</span>)</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//编程考虑垃圾回收(GC)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       modCount++;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// clear to let GC do its work</span></div><div class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++)</div><div class=\"line\">           elementData[i] = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">       size = <span class=\"number\">0</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//remove()和set()都是返回oldValue</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span> </span>&#123;</div><div class=\"line\">       rangeCheck(index);</div><div class=\"line\"></div><div class=\"line\">       E oldValue = elementData(index);</div><div class=\"line\">       elementData[index] = element;</div><div class=\"line\">       <span class=\"keyword\">return</span> oldValue;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//类似的addAll(),reamoveAll(),retainAll()都是一个成功就返回true</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">addAll</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class=\"line\">       Object[] a = c.toArray();</div><div class=\"line\">       <span class=\"keyword\">int</span> numNew = a.length;</div><div class=\"line\">       ensureCapacityInternal(size + numNew);  <span class=\"comment\">// Increments modCount</span></div><div class=\"line\">       System.arraycopy(a, <span class=\"number\">0</span>, elementData, size, numNew);</div><div class=\"line\">       size += numNew;</div><div class=\"line\">       <span class=\"keyword\">return</span> numNew != <span class=\"number\">0</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>上面的方法其实也很简单，只是多了一些注意点而已。下面就重点讨论一下数组动态增长、toArray、clone、batchRemove、writeObject和readObject这几个方法</p>\n<h3 id=\"数组动态增长\"><a href=\"#数组动态增长\" class=\"headerlink\" title=\"数组动态增长\"></a>数组动态增长</h3><p>我们知道数组是有固定长度的，ArrayList的关键之一就是数组的动态增长<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureCapacityInternal</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</div><div class=\"line\">           minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       ensureExplicitCapacity(minCapacity);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureExplicitCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</div><div class=\"line\">       modCount++;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// overflow-conscious code</span></div><div class=\"line\">       <span class=\"keyword\">if</span> (minCapacity - elementData.length &gt; <span class=\"number\">0</span>)</div><div class=\"line\">           grow(minCapacity);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">grow</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</div><div class=\"line\">       <span class=\"comment\">// overflow-conscious code</span></div><div class=\"line\">       <span class=\"keyword\">int</span> oldCapacity = elementData.length;</div><div class=\"line\">       <span class=\"keyword\">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class=\"number\">1</span>);</div><div class=\"line\">       <span class=\"keyword\">if</span> (newCapacity - minCapacity &lt; <span class=\"number\">0</span>)</div><div class=\"line\">           newCapacity = minCapacity;</div><div class=\"line\">       <span class=\"keyword\">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class=\"number\">0</span>)</div><div class=\"line\">           newCapacity = hugeCapacity(minCapacity);</div><div class=\"line\">       <span class=\"comment\">// minCapacity is usually close to size, so this is a win:                             </span></div><div class=\"line\">       elementData = Arrays.copyOf(elementData, newCapacity);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">hugeCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (minCapacity &lt; <span class=\"number\">0</span>) <span class=\"comment\">// overflow</span></div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> OutOfMemoryError();</div><div class=\"line\">       <span class=\"keyword\">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</div><div class=\"line\">           Integer.MAX_VALUE :</div><div class=\"line\">           MAX_ARRAY_SIZE;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>它上面说的比较严谨，简而言之就是当所需要minCapacity &gt; dataElement.length,就在dataElement数组长度的基础上加上其一半</p>\n<h3 id=\"ToArray\"><a href=\"#ToArray\" class=\"headerlink\" title=\"ToArray\"></a>ToArray</h3><p>先来看一下一个小Demo吧<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tArrayList&lt;String&gt; al = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;(<span class=\"number\">3</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</div><div class=\"line\">\t\t\tal.add(<span class=\"string\">\"Hello\"</span> + i);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tString[] str1 = <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">\"HH0\"</span>,<span class=\"string\">\"HH1\"</span>,<span class=\"string\">\"HH2\"</span>,<span class=\"string\">\"HH3\"</span>,<span class=\"string\">\"HH4\"</span>,<span class=\"string\">\"HH5\"</span>&#125;;</div><div class=\"line\">\t\tString[] str2 = <span class=\"keyword\">new</span> String[<span class=\"number\">1</span>];</div><div class=\"line\">\t\tstr1 = al.toArray(str1);</div><div class=\"line\">\t\tstr2 = al.toArray(str2);</div><div class=\"line\">\t\tSystem.out.println(Arrays.toString(str1));</div><div class=\"line\">\t\tSystem.out.println(Arrays.toString(str2));</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[Hello0, Hello1, Hello2, <span class=\"keyword\">null</span>, HH4, HH5]</div><div class=\"line\">[Hello0, Hello1, Hello2]</div></pre></td></tr></table></figure></p>\n<p>为什么str1会输出这个结果呢？看一下源码就一目了然了<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">   <span class=\"keyword\">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (a.length &lt; size)</div><div class=\"line\">           <span class=\"comment\">// Make a new array of a's runtime type, but my contents:</span></div><div class=\"line\">           <span class=\"keyword\">return</span> (T[]) Arrays.copyOf(elementData, size, a.getClass());</div><div class=\"line\">       System.arraycopy(elementData, <span class=\"number\">0</span>, a, <span class=\"number\">0</span>, size);</div><div class=\"line\">       <span class=\"keyword\">if</span> (a.length &gt; size)</div><div class=\"line\">           a[size] = <span class=\"keyword\">null</span>;</div><div class=\"line\">       <span class=\"keyword\">return</span> a;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Clone\"><a href=\"#Clone\" class=\"headerlink\" title=\"Clone\"></a>Clone</h3><p>clone()是实现cloneable接口必须实现的一个方法，具体的可以看<a href=\"https://sakuraffy.github.io/pattern_prototype/\">原型模式</a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           ArrayList&lt;?&gt; v = (ArrayList&lt;?&gt;) <span class=\"keyword\">super</span>.clone();</div><div class=\"line\">           v.elementData = Arrays.copyOf(elementData, size);</div><div class=\"line\">           v.modCount = <span class=\"number\">0</span>;</div><div class=\"line\">           <span class=\"keyword\">return</span> v;</div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</div><div class=\"line\">           <span class=\"comment\">// this shouldn't happen, since we are Cloneable</span></div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InternalError(e);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"BatchRemove\"><a href=\"#BatchRemove\" class=\"headerlink\" title=\"BatchRemove\"></a>BatchRemove</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">batchRemove</span><span class=\"params\">(Collection&lt;?&gt; c, <span class=\"keyword\">boolean</span> complement)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">final</span> Object[] elementData = <span class=\"keyword\">this</span>.elementData;</div><div class=\"line\">       <span class=\"keyword\">int</span> r = <span class=\"number\">0</span>, w = <span class=\"number\">0</span>;</div><div class=\"line\">       <span class=\"keyword\">boolean</span> modified = <span class=\"keyword\">false</span>;</div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           <span class=\"keyword\">for</span> (; r &lt; size; r++)</div><div class=\"line\">               <span class=\"keyword\">if</span> (c.contains(elementData[r]) == complement)</div><div class=\"line\">                   elementData[w++] = elementData[r];</div><div class=\"line\">       &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">           <span class=\"comment\">// Preserve behavioral compatibility with AbstractCollection,                      </span></div><div class=\"line\">           <span class=\"comment\">// even if c.contains() throws.</span></div><div class=\"line\">           <span class=\"keyword\">if</span> (r != size) &#123;</div><div class=\"line\">               System.arraycopy(elementData, r,</div><div class=\"line\">                                elementData, w,</div><div class=\"line\">                                size - r);</div><div class=\"line\">               w += size - r;</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">if</span> (w != size) &#123;</div><div class=\"line\">               <span class=\"comment\">// clear to let GC do its work</span></div><div class=\"line\">               <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = w; i &lt; size; i++)</div><div class=\"line\">                   elementData[i] = <span class=\"keyword\">null</span>;</div><div class=\"line\">               modCount += size - w;</div><div class=\"line\">               size = w;</div><div class=\"line\">               modified = <span class=\"keyword\">true</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> modified;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>batchRemove()主要用于retainAll()和removeAll()这两个方法。其主要的思想就是 ： 把满足条件的元素还是用这个数组从0开始保存起来，如果满足条件的个数小于原来的长度就将其多余的设为null，并减小size</p>\n<h3 id=\"WriteObject和ReadObject\"><a href=\"#WriteObject和ReadObject\" class=\"headerlink\" title=\"WriteObject和ReadObject\"></a>WriteObject和ReadObject</h3><p>writeObject()和readObject()是实现序列化的。其中关于序列化请参考<a href=\"https://sakuraffy.github.io/java_serializable/\">序列化机制</a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">writeObject</span><span class=\"params\">(java.io.ObjectOutputStream s)</span></span></div><div class=\"line\">       <span class=\"keyword\">throws</span> java.io.IOException&#123;</div><div class=\"line\">       <span class=\"comment\">// Write out element count, and any hidden stuff</span></div><div class=\"line\">       <span class=\"keyword\">int</span> expectedModCount = modCount;</div><div class=\"line\">       s.defaultWriteObject();</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// Write out size as capacity for behavioural compatibility with clone()               </span></div><div class=\"line\">       s.writeInt(size);</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// Write out all elements in the proper order.</span></div><div class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;size; i++) &#123;</div><div class=\"line\">           s.writeObject(elementData[i]);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">if</span> (modCount != expectedModCount) &#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">readObject</span><span class=\"params\">(java.io.ObjectInputStream s)</span></span></div><div class=\"line\">       <span class=\"keyword\">throws</span> java.io.IOException, ClassNotFoundException &#123;</div><div class=\"line\">       elementData = EMPTY_ELEMENTDATA;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// Read in size, and any hidden stuff</span></div><div class=\"line\">       s.defaultReadObject();</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// Read in capacity</span></div><div class=\"line\">       s.readInt(); <span class=\"comment\">// ignored</span></div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">if</span> (size &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">           <span class=\"comment\">// be like clone(), allocate array based upon size not capacity</span></div><div class=\"line\">           ensureCapacityInternal(size);</div><div class=\"line\"></div><div class=\"line\">           Object[] a = elementData;</div><div class=\"line\">           <span class=\"comment\">// Read in all elements in the proper order.</span></div><div class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;size; i++) &#123;</div><div class=\"line\">               a[i] = s.readObject();</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>其中ArryList的序列化，无论是读还是写都是先将大小处理，然后才是各个元素</p>\n<p>上面讨论了ArrayList的方法，其实ArrayList中还有两个内部类Itr和ListItr<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayList</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractList</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Itr</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;&#125;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListItr</span> <span class=\"keyword\">extends</span> <span class=\"title\">Itr</span> <span class=\"keyword\">implements</span> <span class=\"title\">ListIterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>值得一提的是Itr和ListItr中有expectedModCount和modCount来确保安全性，其余的就没什么可说的，如果有不明白的可以看一下<a href=\"https://sakuraffy.github.io/pattern_iterator/\">迭代器模式</a></p>\n","excerpt":"<p>前面提到List接口，那么它的一个完整实现就是ArrayList。array数组的意思，所以这个List是以动态数组为基础实现的</p>\n<h3 id=\"基本属性\"><a href=\"#基本属性\" class=\"headerlink\" title=\"基本属性\"></a>基本属性</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayList</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractList</span>&lt;<span class=\"title\">E</span>&gt;</div><div class=\"line\">       <span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">RandomAccess</span>, <span class=\"title\">Cloneable</span>, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</div><div class=\"line\">\t<span class=\"keyword\">transient</span> Object[] elementData;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这就是ArrayList的两个属性，elementData用来装数据，而size则所装元素的个数</p>","more":"<p>下面就说一下方法的实现吧。对于一些见名知意简单的函数，这里就不涉及了。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 学会利用已有函数编程</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Object o)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> indexOf(o) &gt;= <span class=\"number\">0</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//注意null可以为任意类型，判空至关重要</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(Object o)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (o == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>; index &lt; size; index++)                                         </div><div class=\"line\">               <span class=\"keyword\">if</span> (elementData[index] == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                   fastRemove(index);</div><div class=\"line\">                   <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">               &#125;</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>; index &lt; size; index++)</div><div class=\"line\">               <span class=\"keyword\">if</span> (o.equals(elementData[index])) &#123;</div><div class=\"line\">                   fastRemove(index);</div><div class=\"line\">                   <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">               &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">rangeCheck</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (index &gt;= size)</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//与上个函数对别，add()是可以在size位置加入的</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">rangeCheckForAdd</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (index &gt; size || index &lt; <span class=\"number\">0</span>)</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//编程考虑垃圾回收(GC)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       modCount++;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// clear to let GC do its work</span></div><div class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++)</div><div class=\"line\">           elementData[i] = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">       size = <span class=\"number\">0</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//remove()和set()都是返回oldValue</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span> </span>&#123;</div><div class=\"line\">       rangeCheck(index);</div><div class=\"line\"></div><div class=\"line\">       E oldValue = elementData(index);</div><div class=\"line\">       elementData[index] = element;</div><div class=\"line\">       <span class=\"keyword\">return</span> oldValue;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//类似的addAll(),reamoveAll(),retainAll()都是一个成功就返回true</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">addAll</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class=\"line\">       Object[] a = c.toArray();</div><div class=\"line\">       <span class=\"keyword\">int</span> numNew = a.length;</div><div class=\"line\">       ensureCapacityInternal(size + numNew);  <span class=\"comment\">// Increments modCount</span></div><div class=\"line\">       System.arraycopy(a, <span class=\"number\">0</span>, elementData, size, numNew);</div><div class=\"line\">       size += numNew;</div><div class=\"line\">       <span class=\"keyword\">return</span> numNew != <span class=\"number\">0</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>上面的方法其实也很简单，只是多了一些注意点而已。下面就重点讨论一下数组动态增长、toArray、clone、batchRemove、writeObject和readObject这几个方法</p>\n<h3 id=\"数组动态增长\"><a href=\"#数组动态增长\" class=\"headerlink\" title=\"数组动态增长\"></a>数组动态增长</h3><p>我们知道数组是有固定长度的，ArrayList的关键之一就是数组的动态增长<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureCapacityInternal</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</div><div class=\"line\">           minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       ensureExplicitCapacity(minCapacity);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureExplicitCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</div><div class=\"line\">       modCount++;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// overflow-conscious code</span></div><div class=\"line\">       <span class=\"keyword\">if</span> (minCapacity - elementData.length &gt; <span class=\"number\">0</span>)</div><div class=\"line\">           grow(minCapacity);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">grow</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</div><div class=\"line\">       <span class=\"comment\">// overflow-conscious code</span></div><div class=\"line\">       <span class=\"keyword\">int</span> oldCapacity = elementData.length;</div><div class=\"line\">       <span class=\"keyword\">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class=\"number\">1</span>);</div><div class=\"line\">       <span class=\"keyword\">if</span> (newCapacity - minCapacity &lt; <span class=\"number\">0</span>)</div><div class=\"line\">           newCapacity = minCapacity;</div><div class=\"line\">       <span class=\"keyword\">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class=\"number\">0</span>)</div><div class=\"line\">           newCapacity = hugeCapacity(minCapacity);</div><div class=\"line\">       <span class=\"comment\">// minCapacity is usually close to size, so this is a win:                             </span></div><div class=\"line\">       elementData = Arrays.copyOf(elementData, newCapacity);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">hugeCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (minCapacity &lt; <span class=\"number\">0</span>) <span class=\"comment\">// overflow</span></div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> OutOfMemoryError();</div><div class=\"line\">       <span class=\"keyword\">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</div><div class=\"line\">           Integer.MAX_VALUE :</div><div class=\"line\">           MAX_ARRAY_SIZE;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>它上面说的比较严谨，简而言之就是当所需要minCapacity &gt; dataElement.length,就在dataElement数组长度的基础上加上其一半</p>\n<h3 id=\"ToArray\"><a href=\"#ToArray\" class=\"headerlink\" title=\"ToArray\"></a>ToArray</h3><p>先来看一下一个小Demo吧<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tArrayList&lt;String&gt; al = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;(<span class=\"number\">3</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</div><div class=\"line\">\t\t\tal.add(<span class=\"string\">\"Hello\"</span> + i);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tString[] str1 = <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">\"HH0\"</span>,<span class=\"string\">\"HH1\"</span>,<span class=\"string\">\"HH2\"</span>,<span class=\"string\">\"HH3\"</span>,<span class=\"string\">\"HH4\"</span>,<span class=\"string\">\"HH5\"</span>&#125;;</div><div class=\"line\">\t\tString[] str2 = <span class=\"keyword\">new</span> String[<span class=\"number\">1</span>];</div><div class=\"line\">\t\tstr1 = al.toArray(str1);</div><div class=\"line\">\t\tstr2 = al.toArray(str2);</div><div class=\"line\">\t\tSystem.out.println(Arrays.toString(str1));</div><div class=\"line\">\t\tSystem.out.println(Arrays.toString(str2));</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[Hello0, Hello1, Hello2, <span class=\"keyword\">null</span>, HH4, HH5]</div><div class=\"line\">[Hello0, Hello1, Hello2]</div></pre></td></tr></table></figure></p>\n<p>为什么str1会输出这个结果呢？看一下源码就一目了然了<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">   <span class=\"keyword\">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (a.length &lt; size)</div><div class=\"line\">           <span class=\"comment\">// Make a new array of a's runtime type, but my contents:</span></div><div class=\"line\">           <span class=\"keyword\">return</span> (T[]) Arrays.copyOf(elementData, size, a.getClass());</div><div class=\"line\">       System.arraycopy(elementData, <span class=\"number\">0</span>, a, <span class=\"number\">0</span>, size);</div><div class=\"line\">       <span class=\"keyword\">if</span> (a.length &gt; size)</div><div class=\"line\">           a[size] = <span class=\"keyword\">null</span>;</div><div class=\"line\">       <span class=\"keyword\">return</span> a;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Clone\"><a href=\"#Clone\" class=\"headerlink\" title=\"Clone\"></a>Clone</h3><p>clone()是实现cloneable接口必须实现的一个方法，具体的可以看<a href=\"https://sakuraffy.github.io/pattern_prototype/\">原型模式</a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           ArrayList&lt;?&gt; v = (ArrayList&lt;?&gt;) <span class=\"keyword\">super</span>.clone();</div><div class=\"line\">           v.elementData = Arrays.copyOf(elementData, size);</div><div class=\"line\">           v.modCount = <span class=\"number\">0</span>;</div><div class=\"line\">           <span class=\"keyword\">return</span> v;</div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</div><div class=\"line\">           <span class=\"comment\">// this shouldn't happen, since we are Cloneable</span></div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InternalError(e);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"BatchRemove\"><a href=\"#BatchRemove\" class=\"headerlink\" title=\"BatchRemove\"></a>BatchRemove</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">batchRemove</span><span class=\"params\">(Collection&lt;?&gt; c, <span class=\"keyword\">boolean</span> complement)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">final</span> Object[] elementData = <span class=\"keyword\">this</span>.elementData;</div><div class=\"line\">       <span class=\"keyword\">int</span> r = <span class=\"number\">0</span>, w = <span class=\"number\">0</span>;</div><div class=\"line\">       <span class=\"keyword\">boolean</span> modified = <span class=\"keyword\">false</span>;</div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           <span class=\"keyword\">for</span> (; r &lt; size; r++)</div><div class=\"line\">               <span class=\"keyword\">if</span> (c.contains(elementData[r]) == complement)</div><div class=\"line\">                   elementData[w++] = elementData[r];</div><div class=\"line\">       &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">           <span class=\"comment\">// Preserve behavioral compatibility with AbstractCollection,                      </span></div><div class=\"line\">           <span class=\"comment\">// even if c.contains() throws.</span></div><div class=\"line\">           <span class=\"keyword\">if</span> (r != size) &#123;</div><div class=\"line\">               System.arraycopy(elementData, r,</div><div class=\"line\">                                elementData, w,</div><div class=\"line\">                                size - r);</div><div class=\"line\">               w += size - r;</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">if</span> (w != size) &#123;</div><div class=\"line\">               <span class=\"comment\">// clear to let GC do its work</span></div><div class=\"line\">               <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = w; i &lt; size; i++)</div><div class=\"line\">                   elementData[i] = <span class=\"keyword\">null</span>;</div><div class=\"line\">               modCount += size - w;</div><div class=\"line\">               size = w;</div><div class=\"line\">               modified = <span class=\"keyword\">true</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> modified;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>batchRemove()主要用于retainAll()和removeAll()这两个方法。其主要的思想就是 ： 把满足条件的元素还是用这个数组从0开始保存起来，如果满足条件的个数小于原来的长度就将其多余的设为null，并减小size</p>\n<h3 id=\"WriteObject和ReadObject\"><a href=\"#WriteObject和ReadObject\" class=\"headerlink\" title=\"WriteObject和ReadObject\"></a>WriteObject和ReadObject</h3><p>writeObject()和readObject()是实现序列化的。其中关于序列化请参考<a href=\"https://sakuraffy.github.io/java_serializable/\">序列化机制</a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">writeObject</span><span class=\"params\">(java.io.ObjectOutputStream s)</span></div><div class=\"line\">       <span class=\"keyword\">throws</span> java.io.IOException</span>&#123;</div><div class=\"line\">       <span class=\"comment\">// Write out element count, and any hidden stuff</span></div><div class=\"line\">       <span class=\"keyword\">int</span> expectedModCount = modCount;</div><div class=\"line\">       s.defaultWriteObject();</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// Write out size as capacity for behavioural compatibility with clone()               </span></div><div class=\"line\">       s.writeInt(size);</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// Write out all elements in the proper order.</span></div><div class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;size; i++) &#123;</div><div class=\"line\">           s.writeObject(elementData[i]);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">if</span> (modCount != expectedModCount) &#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">readObject</span><span class=\"params\">(java.io.ObjectInputStream s)</span></div><div class=\"line\">       <span class=\"keyword\">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</div><div class=\"line\">       elementData = EMPTY_ELEMENTDATA;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// Read in size, and any hidden stuff</span></div><div class=\"line\">       s.defaultReadObject();</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// Read in capacity</span></div><div class=\"line\">       s.readInt(); <span class=\"comment\">// ignored</span></div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">if</span> (size &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">           <span class=\"comment\">// be like clone(), allocate array based upon size not capacity</span></div><div class=\"line\">           ensureCapacityInternal(size);</div><div class=\"line\"></div><div class=\"line\">           Object[] a = elementData;</div><div class=\"line\">           <span class=\"comment\">// Read in all elements in the proper order.</span></div><div class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;size; i++) &#123;</div><div class=\"line\">               a[i] = s.readObject();</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>其中ArryList的序列化，无论是读还是写都是先将大小处理，然后才是各个元素</p>\n<p>上面讨论了ArrayList的方法，其实ArrayList中还有两个内部类Itr和ListItr<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayList</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractList</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Itr</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;&#125;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListItr</span> <span class=\"keyword\">extends</span> <span class=\"title\">Itr</span> <span class=\"keyword\">implements</span> <span class=\"title\">ListIterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>值得一提的是Itr和ListItr中有expectedModCount和modCount来确保安全性，其余的就没什么可说的，如果有不明白的可以看一下<a href=\"https://sakuraffy.github.io/pattern_iterator/\">迭代器模式</a></p>"},{"title":"集合系列01-集合框架","date":"2016-10-01T01:59:29.000Z","_content":"一个集合（collection）就是一个存储一组对象的容器，一般将这些对象称为集合的元素（element）。Java 集合中一般分为这四块 ： Collection接口及其实现类、Map接口及其实现类、Iterator接口及实现类 和工具类\n先来看看整体的其框架的UML类图 ：\n{% qnimg collection/freamwork/p1.png 'class:class1 class2' normal:yes %}\n\n### Collection\n\nCollection是List、Set、Queue等集合高度抽象出来的接口，它包含了这些集合的基本操作.实现关系层次图：\n\n<!--more-->\n\n{% qnimg collection/freamwork/p2.png 'class:class1 class2' normal:yes %}\n\n### Map\n\nMap提供key到value的映射。一个Map中不能包含相同的key，每个key只能映射一个value.实现关系层次图：　\n{% qnimg collection/freamwork/p3.png 'class:class1 class2' normal:yes %}\n\n### Iterator\n\nIterator用来对于容器的遍历，请参考[迭代器模式(Iterator)](https://sakuraffy.github.io/pattern_iterator/)\n``` java\n\tpublic interface Iterator<E> {\n\t\tboolean hasNext();\n\t\tE next();\n\t}\n\tpublic interface ListIterator<E> extends Iterator<E> {\n\t\t boolean hasPrevious();\n\t\t E previous();\n\t\t int nextIndex();\n\t\t int previousIndex();\n\t\t void remove();\n\t\t void set(E e);\n\t\t void add(E e);\n\t}\n```\n\n### 工具类\n\n关于Collection的工具类Collections一般主要处理容器的排序，查找等操作","source":"_posts/collection_freamwork.md","raw":"---\ntitle: 集合系列01-集合框架\ndate: 2016-10-01 09:59:29\ntags:\n\t- Collection\n---\n一个集合（collection）就是一个存储一组对象的容器，一般将这些对象称为集合的元素（element）。Java 集合中一般分为这四块 ： Collection接口及其实现类、Map接口及其实现类、Iterator接口及实现类 和工具类\n先来看看整体的其框架的UML类图 ：\n{% qnimg collection/freamwork/p1.png 'class:class1 class2' normal:yes %}\n\n### Collection\n\nCollection是List、Set、Queue等集合高度抽象出来的接口，它包含了这些集合的基本操作.实现关系层次图：\n\n<!--more-->\n\n{% qnimg collection/freamwork/p2.png 'class:class1 class2' normal:yes %}\n\n### Map\n\nMap提供key到value的映射。一个Map中不能包含相同的key，每个key只能映射一个value.实现关系层次图：　\n{% qnimg collection/freamwork/p3.png 'class:class1 class2' normal:yes %}\n\n### Iterator\n\nIterator用来对于容器的遍历，请参考[迭代器模式(Iterator)](https://sakuraffy.github.io/pattern_iterator/)\n``` java\n\tpublic interface Iterator<E> {\n\t\tboolean hasNext();\n\t\tE next();\n\t}\n\tpublic interface ListIterator<E> extends Iterator<E> {\n\t\t boolean hasPrevious();\n\t\t E previous();\n\t\t int nextIndex();\n\t\t int previousIndex();\n\t\t void remove();\n\t\t void set(E e);\n\t\t void add(E e);\n\t}\n```\n\n### 工具类\n\n关于Collection的工具类Collections一般主要处理容器的排序，查找等操作","slug":"collection_freamwork","published":1,"updated":"2017-03-08T11:44:32.477Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5bn0006qoq1j7yls6v9","content":"<p>一个集合（collection）就是一个存储一组对象的容器，一般将这些对象称为集合的元素（element）。Java 集合中一般分为这四块 ： Collection接口及其实现类、Map接口及其实现类、Iterator接口及实现类 和工具类<br>先来看看整体的其框架的UML类图 ：<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/collection/freamwork/p1.png\"></p>\n<h3 id=\"Collection\"><a href=\"#Collection\" class=\"headerlink\" title=\"Collection\"></a>Collection</h3><p>Collection是List、Set、Queue等集合高度抽象出来的接口，它包含了这些集合的基本操作.实现关系层次图：</p>\n<a id=\"more\"></a>\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/collection/freamwork/p2.png\">\n<h3 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h3><p>Map提供key到value的映射。一个Map中不能包含相同的key，每个key只能映射一个value.实现关系层次图：　<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/collection/freamwork/p3.png\"></p>\n<h3 id=\"Iterator\"><a href=\"#Iterator\" class=\"headerlink\" title=\"Iterator\"></a>Iterator</h3><p>Iterator用来对于容器的遍历，请参考<a href=\"https://sakuraffy.github.io/pattern_iterator/\">迭代器模式(Iterator)</a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\">E <span class=\"title\">next</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ListIterator</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</div><div class=\"line\">\t <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">hasPrevious</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t <span class=\"function\">E <span class=\"title\">previous</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">nextIndex</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">previousIndex</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(E e)</span></span>;</div><div class=\"line\">\t <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"工具类\"><a href=\"#工具类\" class=\"headerlink\" title=\"工具类\"></a>工具类</h3><p>关于Collection的工具类Collections一般主要处理容器的排序，查找等操作</p>\n","excerpt":"<p>一个集合（collection）就是一个存储一组对象的容器，一般将这些对象称为集合的元素（element）。Java 集合中一般分为这四块 ： Collection接口及其实现类、Map接口及其实现类、Iterator接口及实现类 和工具类<br>先来看看整体的其框架的UML类图 ：<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/collection/freamwork/p1.png\"></p>\n<h3 id=\"Collection\"><a href=\"#Collection\" class=\"headerlink\" title=\"Collection\"></a>Collection</h3><p>Collection是List、Set、Queue等集合高度抽象出来的接口，它包含了这些集合的基本操作.实现关系层次图：</p>","more":"<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/collection/freamwork/p2.png\">\n<h3 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h3><p>Map提供key到value的映射。一个Map中不能包含相同的key，每个key只能映射一个value.实现关系层次图：　<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/collection/freamwork/p3.png\"></p>\n<h3 id=\"Iterator\"><a href=\"#Iterator\" class=\"headerlink\" title=\"Iterator\"></a>Iterator</h3><p>Iterator用来对于容器的遍历，请参考<a href=\"https://sakuraffy.github.io/pattern_iterator/\">迭代器模式(Iterator)</a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\">E <span class=\"title\">next</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ListIterator</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</div><div class=\"line\">\t <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">hasPrevious</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t <span class=\"function\">E <span class=\"title\">previous</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">nextIndex</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">previousIndex</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(E e)</span></span>;</div><div class=\"line\">\t <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"工具类\"><a href=\"#工具类\" class=\"headerlink\" title=\"工具类\"></a>工具类</h3><p>关于Collection的工具类Collections一般主要处理容器的排序，查找等操作</p>"},{"title":"集合系列09-HashMap的原理与使用","date":"2016-10-20T03:30:12.000Z","_content":"\n在说到HashMap的实现与使用之前，先来看一下HashMap的数据结构，HashMap实际上是一个“链表散列”的数据结构，即数组和链表的结合体\n{% qnimg collection/hashmap/p2.jpg 'class:class1 class2' normal:yes %}\n\n### 骨架实现和属性\n\n``` java \n\tpublic class HashMap<K,V> extends AbstractMap<K,V>\n\t\timplements Map<K,V>, Cloneable, Serializable {\n\t\t// 节点table数组\n\t\ttransient Node<K,V>[] table;\n\t\t// 数组的增长因子\n\t\tfinal float loadFactor;\n\t\t//HashMap的实体集\n\t\ttransient Set<Map.Entry<K,V>> entrySet;\n\t\t//HashMap中键的个数\n\t\ttransient int size;\n\t\t// 保证遍历时操作的安全性\n\t\ttransient int modCount;\n\t\t//table使用的最大限制\n\t\tint threshold;\n\t}\n```\n\n<!--more-->\n\n### 构造函数\n\n``` java\n\tpublic HashMap()\n\tpublic HashMap(int initialCapacity)\n\tpublic HashMap(int initialCapacity, float loadFactor);\n```\n这两个参数就是衡量HashMap性能好坏的关键因素，initialCapacity就是table数组的长度，而loadFactor为散列表的空间的使用程度，负载因子越大表示散列表的装填程度越高，反之愈小。对于使用链表法的散列表来说，负载因子越大，对空间的利用更充分，然而后果是查找效率的降低；如果负载因子太小，那么散列表的数据将过于稀疏，对空间造成严重浪费\n\n### 扩容实现(resize)\n\n``` java\nfinal Node<K,V>[] resize() {\n\tNode<K,V>[] oldTab = table;\n\t//获取原table的长度\n\tint oldCap = (oldTab == null) ? 0 : oldTab.length;\n\tint oldThr = threshold;\n\tint newCap, newThr = 0;\n\tif (oldCap > 0) {\n\t\t//MAXIMUM_CAPACITY = 1 << 30\n\t\tif (oldCap >= MAXIMUM_CAPACITY) {\n\t\t\tthreshold = Integer.MAX_VALUE;\n\t\t\treturn oldTab;\n\t\t}\n\t\t//扩大为原来的2倍\n\t\telse if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY &&\n\t\t\t\t oldCap >= DEFAULT_INITIAL_CAPACITY)\n\t\t\tnewThr = oldThr << 1; // double threshold\n\t}\n\telse if (oldThr > 0) // initial capacity was placed in threshold\n\t\tnewCap = oldThr;\n\telse {               // zero initial threshold signifies using defaults               \n\t\t//DEFAULT_INITIAL_CAPACITY = 1 << 4\n\t\tnewCap = DEFAULT_INITIAL_CAPACITY;\n\t\tnewThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n\t}\n\t//计算threshold\n\tif (newThr == 0) {\n\t\tfloat ft = (float)newCap * loadFactor;\n\t\tnewThr = (newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ?\n\t\t\t\t  (int)ft : Integer.MAX_VALUE);\n\t}\n\tthreshold = newThr;\n\t@SuppressWarnings({\"rawtypes\",\"unchecked\"})\n\t\tNode<K,V>[] newTab = (Node<K,V>[])new Node[newCap];\n\ttable = newTab;\n\t//将oldTable元素复制到table\n\tif (oldTab != null) {\n\t\tfor (int j = 0; j < oldCap; ++j) {\n\t\t\tNode<K,V> e;\n\t\t\tif ((e = oldTab[j]) != null) {\n\t\t\t\toldTab[j] = null;\n\t\t\t\t//链表只有一个元素\n\t\t\t\tif (e.next == null)\n\t\t\t\t\tnewTab[e.hash & (newCap - 1)] = e;\n\t\t\t\t//链表的元素过多，使用红黑树来表示\n\t\t\t\telse if (e instanceof TreeNode)\n\t\t\t\t\t((TreeNode<K,V>)e).split(this, newTab, j, oldCap);\n\t\t\t\t//依次替换链表\n\t\t\t\telse { // preserve order\n\t\t\t\t\tNode<K,V> loHead = null, loTail = null;\n\t\t\t\t\tNode<K,V> hiHead = null, hiTail = null;\n\t\t\t\t\tNode<K,V> next;\n\t\t\t\t\tdo {\n\t\t\t\t\t\tnext = e.next;\n\t\t\t\t\t\tif ((e.hash & oldCap) == 0) {\n\t\t\t\t\t\t\tif (loTail == null)\n\t\t\t\t\t\t\t\tloHead = e;\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tloTail.next = e;\n\t\t\t\t\t\t\tloTail = e;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tif (hiTail == null)\n\t\t\t\t\t\t\t\thiHead = e;\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\thiTail.next = e;\n\t\t\t\t\t\t\thiTail = e;\n\t\t\t\t\t\t}\n\t\t\t\t\t} while ((e = next) != null);\n\t\t\t\t\tif (loTail != null) {\n\t\t\t\t\t\tloTail.next = null;\n\t\t\t\t\t\tnewTab[j] = loHead;\n\t\t\t\t\t}\n\t\t\t\t\tif (hiTail != null) {\n\t\t\t\t\t\thiTail.next = null;\n\t\t\t\t\t\tnewTab[j + oldCap] = hiHead;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn newTab;\n}\n```\n看到这你有可能会问：我自己初始化table大小，怎么能保证它一定是2的n次方呢？而链表移动的时候，全部移动，效率该有多低啊\n\n其实不然，JDK也考虑到了这个，他用|和>>>来确保2的n次方\n``` java\n\tpublic HashMap(int initialCapacity, float loadFactor) {\n        if (initialCapacity < 0)\n            throw new IllegalArgumentException(\"Illegal initial capacity: \" +\n                                               initialCapacity);\n        if (initialCapacity > MAXIMUM_CAPACITY)\n            initialCapacity = MAXIMUM_CAPACITY;\n        if (loadFactor <= 0 || Float.isNaN(loadFactor))\n            throw new IllegalArgumentException(\"Illegal load factor: \" +\n                                               loadFactor);\n        this.loadFactor = loadFactor;\n        this.threshold = tableSizeFor(initialCapacity);\n    }\n\tstatic final int tableSizeFor(int cap) {\n\t\tint n = cap - 1;\n\t\tn |= n >>> 1;\n\t\tn |= n >>> 2;\n\t\tn |= n >>> 4;\n\t\tn |= n >>> 8;\n\t\tn |= n >>> 16;\n\t\treturn (n < 0) ? 1 : (n >= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;             \n\t}\n```\n\n### 存储实现(put)\n\n``` java\n\tfinal V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n                   boolean evict) {\n        Node<K,V>[] tab; Node<K,V> p; int n, i;\n\t\t//table为null或者长度为0，重置大小\n        if ((tab = table) == null || (n = tab.length) == 0)\n            n = (tab = resize()).length;\n\t\t//table索引链表位置为null\n        if ((p = tab[i = (n - 1) & hash]) == null)\n            tab[i] = newNode(hash, key, value, null);\t\n        else {\n            Node<K,V> e; K k;\n            if (p.hash == hash &&\n                ((k = p.key) == key || (key != null && key.equals(k))))\n                e = p;\n\t\t\t//若链表过长，使用红黑树\n            else if (p instanceof TreeNode)\n                e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);               \n            else {\n                for (int binCount = 0; ; ++binCount) {\n                    if ((e = p.next) == null) {\n                        p.next = newNode(hash, key, value, null);\n                        if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                            treeifyBin(tab, hash);\n                        break;\n                    }\n                    if (e.hash == hash &&\n                        ((k = e.key) == key || (key != null && key.equals(k))))\n                        break;\n                    p = e;\n                }\n            }\n            if (e != null) { // existing mapping for key\n                V oldValue = e.value;\n                if (!onlyIfAbsent || oldValue == null)\n                    e.value = value;\n                afterNodeAccess(e);\n                return oldValue;\n            }\n        }\n        ++modCount;\n        if (++size > threshold)\n            resize();\n        afterNodeInsertion(evict);\n        return null;\n    }\n\n```\n\n### 读取实现(get)\n\n``` java\n\tpublic V get(Object key) {\n        Node<K,V> e;\n        return (e = getNode(hash(key), key)) == null ? null : e.value;\n    }\n\t//先通过hash找到table索引，再遍历比较\n\tfinal Node<K,V> getNode(int hash, Object key) {\n        Node<K,V>[] tab; Node<K,V> first, e; int n; K k;\n        if ((tab = table) != null && (n = tab.length) > 0 &&\n            (first = tab[(n - 1) & hash]) != null) {\n            if (first.hash == hash && // always check first node\n                ((k = first.key) == key || (key != null && key.equals(k))))                   \n                return first;\n            if ((e = first.next) != null) {\n                if (first instanceof TreeNode)\n                    return ((TreeNode<K,V>)first).getTreeNode(hash, key);\n                do {\n                    if (e.hash == hash &&\n                        ((k = e.key) == key || (key != null && key.equals(k))))\n                        return e;\n                } while ((e = e.next) != null);\n            }\n        }\n        return null;\n    }\n```","source":"_posts/collection_hashmap.md","raw":"---\ntitle: 集合系列09-HashMap的原理与使用\ndate: 2016-10-20 11:30:12\ntags:\n\t- Collection\n---\n\n在说到HashMap的实现与使用之前，先来看一下HashMap的数据结构，HashMap实际上是一个“链表散列”的数据结构，即数组和链表的结合体\n{% qnimg collection/hashmap/p2.jpg 'class:class1 class2' normal:yes %}\n\n### 骨架实现和属性\n\n``` java \n\tpublic class HashMap<K,V> extends AbstractMap<K,V>\n\t\timplements Map<K,V>, Cloneable, Serializable {\n\t\t// 节点table数组\n\t\ttransient Node<K,V>[] table;\n\t\t// 数组的增长因子\n\t\tfinal float loadFactor;\n\t\t//HashMap的实体集\n\t\ttransient Set<Map.Entry<K,V>> entrySet;\n\t\t//HashMap中键的个数\n\t\ttransient int size;\n\t\t// 保证遍历时操作的安全性\n\t\ttransient int modCount;\n\t\t//table使用的最大限制\n\t\tint threshold;\n\t}\n```\n\n<!--more-->\n\n### 构造函数\n\n``` java\n\tpublic HashMap()\n\tpublic HashMap(int initialCapacity)\n\tpublic HashMap(int initialCapacity, float loadFactor);\n```\n这两个参数就是衡量HashMap性能好坏的关键因素，initialCapacity就是table数组的长度，而loadFactor为散列表的空间的使用程度，负载因子越大表示散列表的装填程度越高，反之愈小。对于使用链表法的散列表来说，负载因子越大，对空间的利用更充分，然而后果是查找效率的降低；如果负载因子太小，那么散列表的数据将过于稀疏，对空间造成严重浪费\n\n### 扩容实现(resize)\n\n``` java\nfinal Node<K,V>[] resize() {\n\tNode<K,V>[] oldTab = table;\n\t//获取原table的长度\n\tint oldCap = (oldTab == null) ? 0 : oldTab.length;\n\tint oldThr = threshold;\n\tint newCap, newThr = 0;\n\tif (oldCap > 0) {\n\t\t//MAXIMUM_CAPACITY = 1 << 30\n\t\tif (oldCap >= MAXIMUM_CAPACITY) {\n\t\t\tthreshold = Integer.MAX_VALUE;\n\t\t\treturn oldTab;\n\t\t}\n\t\t//扩大为原来的2倍\n\t\telse if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY &&\n\t\t\t\t oldCap >= DEFAULT_INITIAL_CAPACITY)\n\t\t\tnewThr = oldThr << 1; // double threshold\n\t}\n\telse if (oldThr > 0) // initial capacity was placed in threshold\n\t\tnewCap = oldThr;\n\telse {               // zero initial threshold signifies using defaults               \n\t\t//DEFAULT_INITIAL_CAPACITY = 1 << 4\n\t\tnewCap = DEFAULT_INITIAL_CAPACITY;\n\t\tnewThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n\t}\n\t//计算threshold\n\tif (newThr == 0) {\n\t\tfloat ft = (float)newCap * loadFactor;\n\t\tnewThr = (newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ?\n\t\t\t\t  (int)ft : Integer.MAX_VALUE);\n\t}\n\tthreshold = newThr;\n\t@SuppressWarnings({\"rawtypes\",\"unchecked\"})\n\t\tNode<K,V>[] newTab = (Node<K,V>[])new Node[newCap];\n\ttable = newTab;\n\t//将oldTable元素复制到table\n\tif (oldTab != null) {\n\t\tfor (int j = 0; j < oldCap; ++j) {\n\t\t\tNode<K,V> e;\n\t\t\tif ((e = oldTab[j]) != null) {\n\t\t\t\toldTab[j] = null;\n\t\t\t\t//链表只有一个元素\n\t\t\t\tif (e.next == null)\n\t\t\t\t\tnewTab[e.hash & (newCap - 1)] = e;\n\t\t\t\t//链表的元素过多，使用红黑树来表示\n\t\t\t\telse if (e instanceof TreeNode)\n\t\t\t\t\t((TreeNode<K,V>)e).split(this, newTab, j, oldCap);\n\t\t\t\t//依次替换链表\n\t\t\t\telse { // preserve order\n\t\t\t\t\tNode<K,V> loHead = null, loTail = null;\n\t\t\t\t\tNode<K,V> hiHead = null, hiTail = null;\n\t\t\t\t\tNode<K,V> next;\n\t\t\t\t\tdo {\n\t\t\t\t\t\tnext = e.next;\n\t\t\t\t\t\tif ((e.hash & oldCap) == 0) {\n\t\t\t\t\t\t\tif (loTail == null)\n\t\t\t\t\t\t\t\tloHead = e;\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tloTail.next = e;\n\t\t\t\t\t\t\tloTail = e;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tif (hiTail == null)\n\t\t\t\t\t\t\t\thiHead = e;\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\thiTail.next = e;\n\t\t\t\t\t\t\thiTail = e;\n\t\t\t\t\t\t}\n\t\t\t\t\t} while ((e = next) != null);\n\t\t\t\t\tif (loTail != null) {\n\t\t\t\t\t\tloTail.next = null;\n\t\t\t\t\t\tnewTab[j] = loHead;\n\t\t\t\t\t}\n\t\t\t\t\tif (hiTail != null) {\n\t\t\t\t\t\thiTail.next = null;\n\t\t\t\t\t\tnewTab[j + oldCap] = hiHead;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn newTab;\n}\n```\n看到这你有可能会问：我自己初始化table大小，怎么能保证它一定是2的n次方呢？而链表移动的时候，全部移动，效率该有多低啊\n\n其实不然，JDK也考虑到了这个，他用|和>>>来确保2的n次方\n``` java\n\tpublic HashMap(int initialCapacity, float loadFactor) {\n        if (initialCapacity < 0)\n            throw new IllegalArgumentException(\"Illegal initial capacity: \" +\n                                               initialCapacity);\n        if (initialCapacity > MAXIMUM_CAPACITY)\n            initialCapacity = MAXIMUM_CAPACITY;\n        if (loadFactor <= 0 || Float.isNaN(loadFactor))\n            throw new IllegalArgumentException(\"Illegal load factor: \" +\n                                               loadFactor);\n        this.loadFactor = loadFactor;\n        this.threshold = tableSizeFor(initialCapacity);\n    }\n\tstatic final int tableSizeFor(int cap) {\n\t\tint n = cap - 1;\n\t\tn |= n >>> 1;\n\t\tn |= n >>> 2;\n\t\tn |= n >>> 4;\n\t\tn |= n >>> 8;\n\t\tn |= n >>> 16;\n\t\treturn (n < 0) ? 1 : (n >= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;             \n\t}\n```\n\n### 存储实现(put)\n\n``` java\n\tfinal V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n                   boolean evict) {\n        Node<K,V>[] tab; Node<K,V> p; int n, i;\n\t\t//table为null或者长度为0，重置大小\n        if ((tab = table) == null || (n = tab.length) == 0)\n            n = (tab = resize()).length;\n\t\t//table索引链表位置为null\n        if ((p = tab[i = (n - 1) & hash]) == null)\n            tab[i] = newNode(hash, key, value, null);\t\n        else {\n            Node<K,V> e; K k;\n            if (p.hash == hash &&\n                ((k = p.key) == key || (key != null && key.equals(k))))\n                e = p;\n\t\t\t//若链表过长，使用红黑树\n            else if (p instanceof TreeNode)\n                e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);               \n            else {\n                for (int binCount = 0; ; ++binCount) {\n                    if ((e = p.next) == null) {\n                        p.next = newNode(hash, key, value, null);\n                        if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                            treeifyBin(tab, hash);\n                        break;\n                    }\n                    if (e.hash == hash &&\n                        ((k = e.key) == key || (key != null && key.equals(k))))\n                        break;\n                    p = e;\n                }\n            }\n            if (e != null) { // existing mapping for key\n                V oldValue = e.value;\n                if (!onlyIfAbsent || oldValue == null)\n                    e.value = value;\n                afterNodeAccess(e);\n                return oldValue;\n            }\n        }\n        ++modCount;\n        if (++size > threshold)\n            resize();\n        afterNodeInsertion(evict);\n        return null;\n    }\n\n```\n\n### 读取实现(get)\n\n``` java\n\tpublic V get(Object key) {\n        Node<K,V> e;\n        return (e = getNode(hash(key), key)) == null ? null : e.value;\n    }\n\t//先通过hash找到table索引，再遍历比较\n\tfinal Node<K,V> getNode(int hash, Object key) {\n        Node<K,V>[] tab; Node<K,V> first, e; int n; K k;\n        if ((tab = table) != null && (n = tab.length) > 0 &&\n            (first = tab[(n - 1) & hash]) != null) {\n            if (first.hash == hash && // always check first node\n                ((k = first.key) == key || (key != null && key.equals(k))))                   \n                return first;\n            if ((e = first.next) != null) {\n                if (first instanceof TreeNode)\n                    return ((TreeNode<K,V>)first).getTreeNode(hash, key);\n                do {\n                    if (e.hash == hash &&\n                        ((k = e.key) == key || (key != null && key.equals(k))))\n                        return e;\n                } while ((e = e.next) != null);\n            }\n        }\n        return null;\n    }\n```","slug":"collection_hashmap","published":1,"updated":"2017-03-08T11:46:14.424Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5bq0009qoq1z61ztixh","content":"<p>在说到HashMap的实现与使用之前，先来看一下HashMap的数据结构，HashMap实际上是一个“链表散列”的数据结构，即数组和链表的结合体<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/collection/hashmap/p2.jpg\"></p>\n<h3 id=\"骨架实现和属性\"><a href=\"#骨架实现和属性\" class=\"headerlink\" title=\"骨架实现和属性\"></a>骨架实现和属性</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HashMap</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractMap</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt;</span></div><div class=\"line\">\t<span class=\"keyword\">implements</span> <span class=\"title\">Map</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt;, <span class=\"title\">Cloneable</span>, <span class=\"title\">Serializable</span> &#123;</div><div class=\"line\">\t<span class=\"comment\">// 节点table数组</span></div><div class=\"line\">\t<span class=\"keyword\">transient</span> Node&lt;K,V&gt;[] table;</div><div class=\"line\">\t<span class=\"comment\">// 数组的增长因子</span></div><div class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">float</span> loadFactor;</div><div class=\"line\">\t<span class=\"comment\">//HashMap的实体集</span></div><div class=\"line\">\t<span class=\"keyword\">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</div><div class=\"line\">\t<span class=\"comment\">//HashMap中键的个数</span></div><div class=\"line\">\t<span class=\"keyword\">transient</span> <span class=\"keyword\">int</span> size;</div><div class=\"line\">\t<span class=\"comment\">// 保证遍历时操作的安全性</span></div><div class=\"line\">\t<span class=\"keyword\">transient</span> <span class=\"keyword\">int</span> modCount;</div><div class=\"line\">\t<span class=\"comment\">//table使用的最大限制</span></div><div class=\"line\">\t<span class=\"keyword\">int</span> threshold;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashMap</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"title\">HashMap</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity)</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"title\">HashMap</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity, <span class=\"keyword\">float</span> loadFactor)</span>;</div></pre></td></tr></table></figure>\n<p>这两个参数就是衡量HashMap性能好坏的关键因素，initialCapacity就是table数组的长度，而loadFactor为散列表的空间的使用程度，负载因子越大表示散列表的装填程度越高，反之愈小。对于使用链表法的散列表来说，负载因子越大，对空间的利用更充分，然而后果是查找效率的降低；如果负载因子太小，那么散列表的数据将过于稀疏，对空间造成严重浪费</p>\n<h3 id=\"扩容实现-resize\"><a href=\"#扩容实现-resize\" class=\"headerlink\" title=\"扩容实现(resize)\"></a>扩容实现(resize)</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> Node&lt;K,V&gt;[] resize() &#123;</div><div class=\"line\">\tNode&lt;K,V&gt;[] oldTab = table;</div><div class=\"line\">\t<span class=\"comment\">//获取原table的长度</span></div><div class=\"line\">\t<span class=\"keyword\">int</span> oldCap = (oldTab == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : oldTab.length;</div><div class=\"line\">\t<span class=\"keyword\">int</span> oldThr = threshold;</div><div class=\"line\">\t<span class=\"keyword\">int</span> newCap, newThr = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (oldCap &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t<span class=\"comment\">//MAXIMUM_CAPACITY = 1 &lt;&lt; 30</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</div><div class=\"line\">\t\t\tthreshold = Integer.MAX_VALUE;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> oldTab;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">//扩大为原来的2倍</span></div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((newCap = oldCap &lt;&lt; <span class=\"number\">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</div><div class=\"line\">\t\t\t\t oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</div><div class=\"line\">\t\t\tnewThr = oldThr &lt;&lt; <span class=\"number\">1</span>; <span class=\"comment\">// double threshold</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (oldThr &gt; <span class=\"number\">0</span>) <span class=\"comment\">// initial capacity was placed in threshold</span></div><div class=\"line\">\t\tnewCap = oldThr;</div><div class=\"line\">\t<span class=\"keyword\">else</span> &#123;               <span class=\"comment\">// zero initial threshold signifies using defaults               </span></div><div class=\"line\">\t\t<span class=\"comment\">//DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4</span></div><div class=\"line\">\t\tnewCap = DEFAULT_INITIAL_CAPACITY;</div><div class=\"line\">\t\tnewThr = (<span class=\"keyword\">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">//计算threshold</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (newThr == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">float</span> ft = (<span class=\"keyword\">float</span>)newCap * loadFactor;</div><div class=\"line\">\t\tnewThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class=\"keyword\">float</span>)MAXIMUM_CAPACITY ?</div><div class=\"line\">\t\t\t\t  (<span class=\"keyword\">int</span>)ft : Integer.MAX_VALUE);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tthreshold = newThr;</div><div class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(&#123;<span class=\"string\">\"rawtypes\"</span>,<span class=\"string\">\"unchecked\"</span>&#125;)</div><div class=\"line\">\t\tNode&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class=\"keyword\">new</span> Node[newCap];</div><div class=\"line\">\ttable = newTab;</div><div class=\"line\">\t<span class=\"comment\">//将oldTable元素复制到table</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (oldTab != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; oldCap; ++j) &#123;</div><div class=\"line\">\t\t\tNode&lt;K,V&gt; e;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> ((e = oldTab[j]) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\toldTab[j] = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//链表只有一个元素</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (e.next == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t\t\tnewTab[e.hash &amp; (newCap - <span class=\"number\">1</span>)] = e;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//链表的元素过多，使用红黑树来表示</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> TreeNode)</div><div class=\"line\">\t\t\t\t\t((TreeNode&lt;K,V&gt;)e).split(<span class=\"keyword\">this</span>, newTab, j, oldCap);</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//依次替换链表</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> &#123; <span class=\"comment\">// preserve order</span></div><div class=\"line\">\t\t\t\t\tNode&lt;K,V&gt; loHead = <span class=\"keyword\">null</span>, loTail = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t\t\t\tNode&lt;K,V&gt; hiHead = <span class=\"keyword\">null</span>, hiTail = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t\t\t\tNode&lt;K,V&gt; next;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">do</span> &#123;</div><div class=\"line\">\t\t\t\t\t\tnext = e.next;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> ((e.hash &amp; oldCap) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">if</span> (loTail == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t\t\t\t\t\tloHead = e;</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t\t\t\t\tloTail.next = e;</div><div class=\"line\">\t\t\t\t\t\t\tloTail = e;</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">if</span> (hiTail == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t\t\t\t\t\thiHead = e;</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t\t\t\t\thiTail.next = e;</div><div class=\"line\">\t\t\t\t\t\t\thiTail = e;</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">while</span> ((e = next) != <span class=\"keyword\">null</span>);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (loTail != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\t\t\tloTail.next = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t\t\t\t\tnewTab[j] = loHead;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (hiTail != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\t\t\thiTail.next = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t\t\t\t\tnewTab[j + oldCap] = hiHead;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> newTab;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>看到这你有可能会问：我自己初始化table大小，怎么能保证它一定是2的n次方呢？而链表移动的时候，全部移动，效率该有多低啊</p>\n<p>其实不然，JDK也考虑到了这个，他用|和&gt;&gt;&gt;来确保2的n次方<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashMap</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity, <span class=\"keyword\">float</span> loadFactor)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (initialCapacity &lt; <span class=\"number\">0</span>)</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Illegal initial capacity: \"</span> +</div><div class=\"line\">                                              initialCapacity);</div><div class=\"line\">       <span class=\"keyword\">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</div><div class=\"line\">           initialCapacity = MAXIMUM_CAPACITY;</div><div class=\"line\">       <span class=\"keyword\">if</span> (loadFactor &lt;= <span class=\"number\">0</span> || Float.isNaN(loadFactor))</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Illegal load factor: \"</span> +</div><div class=\"line\">                                              loadFactor);</div><div class=\"line\">       <span class=\"keyword\">this</span>.loadFactor = loadFactor;</div><div class=\"line\">       <span class=\"keyword\">this</span>.threshold = tableSizeFor(initialCapacity);</div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">tableSizeFor</span><span class=\"params\">(<span class=\"keyword\">int</span> cap)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> n = cap - <span class=\"number\">1</span>;</div><div class=\"line\">\tn |= n &gt;&gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">\tn |= n &gt;&gt;&gt; <span class=\"number\">2</span>;</div><div class=\"line\">\tn |= n &gt;&gt;&gt; <span class=\"number\">4</span>;</div><div class=\"line\">\tn |= n &gt;&gt;&gt; <span class=\"number\">8</span>;</div><div class=\"line\">\tn |= n &gt;&gt;&gt; <span class=\"number\">16</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> (n &lt; <span class=\"number\">0</span>) ? <span class=\"number\">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class=\"number\">1</span>;             </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"存储实现-put\"><a href=\"#存储实现-put\" class=\"headerlink\" title=\"存储实现(put)\"></a>存储实现(put)</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> V <span class=\"title\">putVal</span><span class=\"params\">(<span class=\"keyword\">int</span> hash, K key, V value, <span class=\"keyword\">boolean</span> onlyIfAbsent,</span></span></div><div class=\"line\">                  <span class=\"keyword\">boolean</span> evict) &#123;</div><div class=\"line\">       Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class=\"keyword\">int</span> n, i;</div><div class=\"line\">\t<span class=\"comment\">//table为null或者长度为0，重置大小</span></div><div class=\"line\">       <span class=\"keyword\">if</span> ((tab = table) == <span class=\"keyword\">null</span> || (n = tab.length) == <span class=\"number\">0</span>)</div><div class=\"line\">           n = (tab = resize()).length;</div><div class=\"line\">\t<span class=\"comment\">//table索引链表位置为null</span></div><div class=\"line\">       <span class=\"keyword\">if</span> ((p = tab[i = (n - <span class=\"number\">1</span>) &amp; hash]) == <span class=\"keyword\">null</span>)</div><div class=\"line\">           tab[i] = newNode(hash, key, value, <span class=\"keyword\">null</span>);\t</div><div class=\"line\">       <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">           Node&lt;K,V&gt; e; K k;</div><div class=\"line\">           <span class=\"keyword\">if</span> (p.hash == hash &amp;&amp;</div><div class=\"line\">               ((k = p.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</div><div class=\"line\">               e = p;</div><div class=\"line\">\t\t<span class=\"comment\">//若链表过长，使用红黑树</span></div><div class=\"line\">           <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p <span class=\"keyword\">instanceof</span> TreeNode)</div><div class=\"line\">               e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class=\"keyword\">this</span>, tab, hash, key, value);               </div><div class=\"line\">           <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">               <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> binCount = <span class=\"number\">0</span>; ; ++binCount) &#123;</div><div class=\"line\">                   <span class=\"keyword\">if</span> ((e = p.next) == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                       p.next = newNode(hash, key, value, <span class=\"keyword\">null</span>);</div><div class=\"line\">                       <span class=\"keyword\">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class=\"number\">1</span>) <span class=\"comment\">// -1 for 1st</span></div><div class=\"line\">                           treeifyBin(tab, hash);</div><div class=\"line\">                       <span class=\"keyword\">break</span>;</div><div class=\"line\">                   &#125;</div><div class=\"line\">                   <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</div><div class=\"line\">                       ((k = e.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</div><div class=\"line\">                       <span class=\"keyword\">break</span>;</div><div class=\"line\">                   p = e;</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">if</span> (e != <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// existing mapping for key</span></div><div class=\"line\">               V oldValue = e.value;</div><div class=\"line\">               <span class=\"keyword\">if</span> (!onlyIfAbsent || oldValue == <span class=\"keyword\">null</span>)</div><div class=\"line\">                   e.value = value;</div><div class=\"line\">               afterNodeAccess(e);</div><div class=\"line\">               <span class=\"keyword\">return</span> oldValue;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       ++modCount;</div><div class=\"line\">       <span class=\"keyword\">if</span> (++size &gt; threshold)</div><div class=\"line\">           resize();</div><div class=\"line\">       afterNodeInsertion(evict);</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"读取实现-get\"><a href=\"#读取实现-get\" class=\"headerlink\" title=\"读取实现(get)\"></a>读取实现(get)</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">get</span><span class=\"params\">(Object key)</span> </span>&#123;</div><div class=\"line\">       Node&lt;K,V&gt; e;</div><div class=\"line\">       <span class=\"keyword\">return</span> (e = getNode(hash(key), key)) == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : e.value;</div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"comment\">//先通过hash找到table索引，再遍历比较</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> Node&lt;K,V&gt; <span class=\"title\">getNode</span><span class=\"params\">(<span class=\"keyword\">int</span> hash, Object key)</span> </span>&#123;</div><div class=\"line\">       Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class=\"keyword\">int</span> n; K k;</div><div class=\"line\">       <span class=\"keyword\">if</span> ((tab = table) != <span class=\"keyword\">null</span> &amp;&amp; (n = tab.length) &gt; <span class=\"number\">0</span> &amp;&amp;</div><div class=\"line\">           (first = tab[(n - <span class=\"number\">1</span>) &amp; hash]) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (first.hash == hash &amp;&amp; <span class=\"comment\">// always check first node</span></div><div class=\"line\">               ((k = first.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))                   </div><div class=\"line\">               <span class=\"keyword\">return</span> first;</div><div class=\"line\">           <span class=\"keyword\">if</span> ((e = first.next) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">               <span class=\"keyword\">if</span> (first <span class=\"keyword\">instanceof</span> TreeNode)</div><div class=\"line\">                   <span class=\"keyword\">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</div><div class=\"line\">               <span class=\"keyword\">do</span> &#123;</div><div class=\"line\">                   <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</div><div class=\"line\">                       ((k = e.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</div><div class=\"line\">                       <span class=\"keyword\">return</span> e;</div><div class=\"line\">               &#125; <span class=\"keyword\">while</span> ((e = e.next) != <span class=\"keyword\">null</span>);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>","excerpt":"<p>在说到HashMap的实现与使用之前，先来看一下HashMap的数据结构，HashMap实际上是一个“链表散列”的数据结构，即数组和链表的结合体<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/collection/hashmap/p2.jpg\"></p>\n<h3 id=\"骨架实现和属性\"><a href=\"#骨架实现和属性\" class=\"headerlink\" title=\"骨架实现和属性\"></a>骨架实现和属性</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HashMap</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractMap</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt;</div><div class=\"line\">\t<span class=\"keyword\">implements</span> <span class=\"title\">Map</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt;, <span class=\"title\">Cloneable</span>, <span class=\"title\">Serializable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 节点table数组</span></div><div class=\"line\">\t<span class=\"keyword\">transient</span> Node&lt;K,V&gt;[] table;</div><div class=\"line\">\t<span class=\"comment\">// 数组的增长因子</span></div><div class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">float</span> loadFactor;</div><div class=\"line\">\t<span class=\"comment\">//HashMap的实体集</span></div><div class=\"line\">\t<span class=\"keyword\">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</div><div class=\"line\">\t<span class=\"comment\">//HashMap中键的个数</span></div><div class=\"line\">\t<span class=\"keyword\">transient</span> <span class=\"keyword\">int</span> size;</div><div class=\"line\">\t<span class=\"comment\">// 保证遍历时操作的安全性</span></div><div class=\"line\">\t<span class=\"keyword\">transient</span> <span class=\"keyword\">int</span> modCount;</div><div class=\"line\">\t<span class=\"comment\">//table使用的最大限制</span></div><div class=\"line\">\t<span class=\"keyword\">int</span> threshold;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","more":"<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashMap</span><span class=\"params\">()</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"title\">HashMap</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity)</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"title\">HashMap</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity, <span class=\"keyword\">float</span> loadFactor)</span></span>;</div></pre></td></tr></table></figure>\n<p>这两个参数就是衡量HashMap性能好坏的关键因素，initialCapacity就是table数组的长度，而loadFactor为散列表的空间的使用程度，负载因子越大表示散列表的装填程度越高，反之愈小。对于使用链表法的散列表来说，负载因子越大，对空间的利用更充分，然而后果是查找效率的降低；如果负载因子太小，那么散列表的数据将过于稀疏，对空间造成严重浪费</p>\n<h3 id=\"扩容实现-resize\"><a href=\"#扩容实现-resize\" class=\"headerlink\" title=\"扩容实现(resize)\"></a>扩容实现(resize)</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> Node&lt;K,V&gt;[] resize() &#123;</div><div class=\"line\">\tNode&lt;K,V&gt;[] oldTab = table;</div><div class=\"line\">\t<span class=\"comment\">//获取原table的长度</span></div><div class=\"line\">\t<span class=\"keyword\">int</span> oldCap = (oldTab == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : oldTab.length;</div><div class=\"line\">\t<span class=\"keyword\">int</span> oldThr = threshold;</div><div class=\"line\">\t<span class=\"keyword\">int</span> newCap, newThr = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (oldCap &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t<span class=\"comment\">//MAXIMUM_CAPACITY = 1 &lt;&lt; 30</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</div><div class=\"line\">\t\t\tthreshold = Integer.MAX_VALUE;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> oldTab;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">//扩大为原来的2倍</span></div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((newCap = oldCap &lt;&lt; <span class=\"number\">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</div><div class=\"line\">\t\t\t\t oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</div><div class=\"line\">\t\t\tnewThr = oldThr &lt;&lt; <span class=\"number\">1</span>; <span class=\"comment\">// double threshold</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (oldThr &gt; <span class=\"number\">0</span>) <span class=\"comment\">// initial capacity was placed in threshold</span></div><div class=\"line\">\t\tnewCap = oldThr;</div><div class=\"line\">\t<span class=\"keyword\">else</span> &#123;               <span class=\"comment\">// zero initial threshold signifies using defaults               </span></div><div class=\"line\">\t\t<span class=\"comment\">//DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4</span></div><div class=\"line\">\t\tnewCap = DEFAULT_INITIAL_CAPACITY;</div><div class=\"line\">\t\tnewThr = (<span class=\"keyword\">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">//计算threshold</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (newThr == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">float</span> ft = (<span class=\"keyword\">float</span>)newCap * loadFactor;</div><div class=\"line\">\t\tnewThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class=\"keyword\">float</span>)MAXIMUM_CAPACITY ?</div><div class=\"line\">\t\t\t\t  (<span class=\"keyword\">int</span>)ft : Integer.MAX_VALUE);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tthreshold = newThr;</div><div class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(&#123;<span class=\"string\">\"rawtypes\"</span>,<span class=\"string\">\"unchecked\"</span>&#125;)</div><div class=\"line\">\t\tNode&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class=\"keyword\">new</span> Node[newCap];</div><div class=\"line\">\ttable = newTab;</div><div class=\"line\">\t<span class=\"comment\">//将oldTable元素复制到table</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (oldTab != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; oldCap; ++j) &#123;</div><div class=\"line\">\t\t\tNode&lt;K,V&gt; e;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> ((e = oldTab[j]) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\toldTab[j] = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//链表只有一个元素</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (e.next == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t\t\tnewTab[e.hash &amp; (newCap - <span class=\"number\">1</span>)] = e;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//链表的元素过多，使用红黑树来表示</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> TreeNode)</div><div class=\"line\">\t\t\t\t\t((TreeNode&lt;K,V&gt;)e).split(<span class=\"keyword\">this</span>, newTab, j, oldCap);</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//依次替换链表</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> &#123; <span class=\"comment\">// preserve order</span></div><div class=\"line\">\t\t\t\t\tNode&lt;K,V&gt; loHead = <span class=\"keyword\">null</span>, loTail = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t\t\t\tNode&lt;K,V&gt; hiHead = <span class=\"keyword\">null</span>, hiTail = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t\t\t\tNode&lt;K,V&gt; next;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">do</span> &#123;</div><div class=\"line\">\t\t\t\t\t\tnext = e.next;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> ((e.hash &amp; oldCap) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">if</span> (loTail == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t\t\t\t\t\tloHead = e;</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t\t\t\t\tloTail.next = e;</div><div class=\"line\">\t\t\t\t\t\t\tloTail = e;</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">if</span> (hiTail == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t\t\t\t\t\thiHead = e;</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t\t\t\t\thiTail.next = e;</div><div class=\"line\">\t\t\t\t\t\t\thiTail = e;</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">while</span> ((e = next) != <span class=\"keyword\">null</span>);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (loTail != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\t\t\tloTail.next = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t\t\t\t\tnewTab[j] = loHead;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (hiTail != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\t\t\thiTail.next = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t\t\t\t\tnewTab[j + oldCap] = hiHead;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> newTab;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>看到这你有可能会问：我自己初始化table大小，怎么能保证它一定是2的n次方呢？而链表移动的时候，全部移动，效率该有多低啊</p>\n<p>其实不然，JDK也考虑到了这个，他用|和&gt;&gt;&gt;来确保2的n次方<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashMap</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity, <span class=\"keyword\">float</span> loadFactor)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (initialCapacity &lt; <span class=\"number\">0</span>)</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Illegal initial capacity: \"</span> +</div><div class=\"line\">                                              initialCapacity);</div><div class=\"line\">       <span class=\"keyword\">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</div><div class=\"line\">           initialCapacity = MAXIMUM_CAPACITY;</div><div class=\"line\">       <span class=\"keyword\">if</span> (loadFactor &lt;= <span class=\"number\">0</span> || Float.isNaN(loadFactor))</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Illegal load factor: \"</span> +</div><div class=\"line\">                                              loadFactor);</div><div class=\"line\">       <span class=\"keyword\">this</span>.loadFactor = loadFactor;</div><div class=\"line\">       <span class=\"keyword\">this</span>.threshold = tableSizeFor(initialCapacity);</div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">tableSizeFor</span><span class=\"params\">(<span class=\"keyword\">int</span> cap)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> n = cap - <span class=\"number\">1</span>;</div><div class=\"line\">\tn |= n &gt;&gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">\tn |= n &gt;&gt;&gt; <span class=\"number\">2</span>;</div><div class=\"line\">\tn |= n &gt;&gt;&gt; <span class=\"number\">4</span>;</div><div class=\"line\">\tn |= n &gt;&gt;&gt; <span class=\"number\">8</span>;</div><div class=\"line\">\tn |= n &gt;&gt;&gt; <span class=\"number\">16</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> (n &lt; <span class=\"number\">0</span>) ? <span class=\"number\">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class=\"number\">1</span>;             </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"存储实现-put\"><a href=\"#存储实现-put\" class=\"headerlink\" title=\"存储实现(put)\"></a>存储实现(put)</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> V <span class=\"title\">putVal</span><span class=\"params\">(<span class=\"keyword\">int</span> hash, K key, V value, <span class=\"keyword\">boolean</span> onlyIfAbsent,</div><div class=\"line\">                  <span class=\"keyword\">boolean</span> evict)</span> </span>&#123;</div><div class=\"line\">       Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class=\"keyword\">int</span> n, i;</div><div class=\"line\">\t<span class=\"comment\">//table为null或者长度为0，重置大小</span></div><div class=\"line\">       <span class=\"keyword\">if</span> ((tab = table) == <span class=\"keyword\">null</span> || (n = tab.length) == <span class=\"number\">0</span>)</div><div class=\"line\">           n = (tab = resize()).length;</div><div class=\"line\">\t<span class=\"comment\">//table索引链表位置为null</span></div><div class=\"line\">       <span class=\"keyword\">if</span> ((p = tab[i = (n - <span class=\"number\">1</span>) &amp; hash]) == <span class=\"keyword\">null</span>)</div><div class=\"line\">           tab[i] = newNode(hash, key, value, <span class=\"keyword\">null</span>);\t</div><div class=\"line\">       <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">           Node&lt;K,V&gt; e; K k;</div><div class=\"line\">           <span class=\"keyword\">if</span> (p.hash == hash &amp;&amp;</div><div class=\"line\">               ((k = p.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</div><div class=\"line\">               e = p;</div><div class=\"line\">\t\t<span class=\"comment\">//若链表过长，使用红黑树</span></div><div class=\"line\">           <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p <span class=\"keyword\">instanceof</span> TreeNode)</div><div class=\"line\">               e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class=\"keyword\">this</span>, tab, hash, key, value);               </div><div class=\"line\">           <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">               <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> binCount = <span class=\"number\">0</span>; ; ++binCount) &#123;</div><div class=\"line\">                   <span class=\"keyword\">if</span> ((e = p.next) == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                       p.next = newNode(hash, key, value, <span class=\"keyword\">null</span>);</div><div class=\"line\">                       <span class=\"keyword\">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class=\"number\">1</span>) <span class=\"comment\">// -1 for 1st</span></div><div class=\"line\">                           treeifyBin(tab, hash);</div><div class=\"line\">                       <span class=\"keyword\">break</span>;</div><div class=\"line\">                   &#125;</div><div class=\"line\">                   <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</div><div class=\"line\">                       ((k = e.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</div><div class=\"line\">                       <span class=\"keyword\">break</span>;</div><div class=\"line\">                   p = e;</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">if</span> (e != <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// existing mapping for key</span></div><div class=\"line\">               V oldValue = e.value;</div><div class=\"line\">               <span class=\"keyword\">if</span> (!onlyIfAbsent || oldValue == <span class=\"keyword\">null</span>)</div><div class=\"line\">                   e.value = value;</div><div class=\"line\">               afterNodeAccess(e);</div><div class=\"line\">               <span class=\"keyword\">return</span> oldValue;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       ++modCount;</div><div class=\"line\">       <span class=\"keyword\">if</span> (++size &gt; threshold)</div><div class=\"line\">           resize();</div><div class=\"line\">       afterNodeInsertion(evict);</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"读取实现-get\"><a href=\"#读取实现-get\" class=\"headerlink\" title=\"读取实现(get)\"></a>读取实现(get)</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">get</span><span class=\"params\">(Object key)</span> </span>&#123;</div><div class=\"line\">       Node&lt;K,V&gt; e;</div><div class=\"line\">       <span class=\"keyword\">return</span> (e = getNode(hash(key), key)) == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : e.value;</div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"comment\">//先通过hash找到table索引，再遍历比较</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> Node&lt;K,V&gt; <span class=\"title\">getNode</span><span class=\"params\">(<span class=\"keyword\">int</span> hash, Object key)</span> </span>&#123;</div><div class=\"line\">       Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class=\"keyword\">int</span> n; K k;</div><div class=\"line\">       <span class=\"keyword\">if</span> ((tab = table) != <span class=\"keyword\">null</span> &amp;&amp; (n = tab.length) &gt; <span class=\"number\">0</span> &amp;&amp;</div><div class=\"line\">           (first = tab[(n - <span class=\"number\">1</span>) &amp; hash]) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (first.hash == hash &amp;&amp; <span class=\"comment\">// always check first node</span></div><div class=\"line\">               ((k = first.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))                   </div><div class=\"line\">               <span class=\"keyword\">return</span> first;</div><div class=\"line\">           <span class=\"keyword\">if</span> ((e = first.next) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">               <span class=\"keyword\">if</span> (first <span class=\"keyword\">instanceof</span> TreeNode)</div><div class=\"line\">                   <span class=\"keyword\">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</div><div class=\"line\">               <span class=\"keyword\">do</span> &#123;</div><div class=\"line\">                   <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</div><div class=\"line\">                       ((k = e.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</div><div class=\"line\">                       <span class=\"keyword\">return</span> e;</div><div class=\"line\">               &#125; <span class=\"keyword\">while</span> ((e = e.next) != <span class=\"keyword\">null</span>);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>"},{"title":"集合系列06-LinkedList的原理与使用","date":"2016-10-10T00:34:17.000Z","_content":"前面我们了解了ArrayList，知道它是以数组为基础，每个数组都有固定的长度。通过学习数据结构，我们知道线性表还有一种就是链表。那么数组和链表各自的优缺点又是什么呢？\n- 数组 ： 方便查找，增加删除繁琐\n- 链表 ： 方便删除和增加，查找麻烦\n\n<!--more-->\n\n``` java\n\tpublic class LinkedList<E>\n    extends AbstractSequentialList<E>\n    implements List<E>, Deque<E>, Cloneable, java.io.Serializable {\n\t\ttransient int size = 0;\n\t\ttransient Node<E> first;\n\t\ttransient Node<E> last;\n\t\t\n\t\tprivate static class Node<E> {\n\t\t\tE item;\n\t\t\tNode<E> next;\n\t\t\tNode<E> prev;\n\n\t\t\tNode(Node<E> prev, E element, Node<E> next) {\n\t\t\t\tthis.item = element;\n\t\t\t\tthis.next = next;\n\t\t\t\tthis.prev = prev;\n\t\t\t}\n\t\t}\n\t}\n```\n这是LinkedList主要的几个属性和一个很重要的内部类Node。size用来保存元素个数，first和last分别为首尾节点\n\n接下来还是讨论一下方法的实现与应用\n``` java\n\tpublic void addLast(E e) {\n        linkLast(e);\n    }\n\t\n\t/**\n\t *\n\t * 思路 ： 先取出last节点，再将新节点连接到last节点后面，最后判断原last节点是否为null，是就将其设为\n\t * first节点，否则为其设置后继节点，size++\n\t */\n\tvoid linkLast(E e) {\n        final Node<E> l = last;\n        final Node<E> newNode = new Node<>(l, e, null);\n        last = newNode;\n        if (l == null)\n            first = newNode;\n        else\n            l.next = newNode;\n        size++;\n        modCount++;\n    }\n\t\n\tpublic E getLast() {\n        final Node<E> l = last;\n        if (l == null)\n            throw new NoSuchElementException();\n        return l.item;\n    }\n\t\n\t/**\n\t * 思路 ： 先取出last节点，获取节点元素，找到last节点的前驱并设为last，判断此时的last节点是否为空    \n\t * 是就将first设为null，否则将其后驱节点设为null,size--\n\t * \n\t */\n\tpublic E removeLast() {\n        final Node<E> l = last;\n        if (l == null)\n            throw new NoSuchElementException();\n        return unlinkLast(l);\n    }\n\t\n\tpublic boolean add(E e) {\n        linkLast(e);\n        return true;\n    }\n\t\n\tpublic E remove() {\n        return removeFirst();\n    }\n```\n上面是LinkedList所独有的，只介绍了关于last的部分，至于first，与last原理相同，其它的poll()、push()、offer()等都是直接调用这些基础函数\n","source":"_posts/collection_linkedlist.md","raw":"---\ntitle: 集合系列06-LinkedList的原理与使用\ndate: 2016-10-10 08:34:17\ntags:\n\t- Collection\n---\n前面我们了解了ArrayList，知道它是以数组为基础，每个数组都有固定的长度。通过学习数据结构，我们知道线性表还有一种就是链表。那么数组和链表各自的优缺点又是什么呢？\n- 数组 ： 方便查找，增加删除繁琐\n- 链表 ： 方便删除和增加，查找麻烦\n\n<!--more-->\n\n``` java\n\tpublic class LinkedList<E>\n    extends AbstractSequentialList<E>\n    implements List<E>, Deque<E>, Cloneable, java.io.Serializable {\n\t\ttransient int size = 0;\n\t\ttransient Node<E> first;\n\t\ttransient Node<E> last;\n\t\t\n\t\tprivate static class Node<E> {\n\t\t\tE item;\n\t\t\tNode<E> next;\n\t\t\tNode<E> prev;\n\n\t\t\tNode(Node<E> prev, E element, Node<E> next) {\n\t\t\t\tthis.item = element;\n\t\t\t\tthis.next = next;\n\t\t\t\tthis.prev = prev;\n\t\t\t}\n\t\t}\n\t}\n```\n这是LinkedList主要的几个属性和一个很重要的内部类Node。size用来保存元素个数，first和last分别为首尾节点\n\n接下来还是讨论一下方法的实现与应用\n``` java\n\tpublic void addLast(E e) {\n        linkLast(e);\n    }\n\t\n\t/**\n\t *\n\t * 思路 ： 先取出last节点，再将新节点连接到last节点后面，最后判断原last节点是否为null，是就将其设为\n\t * first节点，否则为其设置后继节点，size++\n\t */\n\tvoid linkLast(E e) {\n        final Node<E> l = last;\n        final Node<E> newNode = new Node<>(l, e, null);\n        last = newNode;\n        if (l == null)\n            first = newNode;\n        else\n            l.next = newNode;\n        size++;\n        modCount++;\n    }\n\t\n\tpublic E getLast() {\n        final Node<E> l = last;\n        if (l == null)\n            throw new NoSuchElementException();\n        return l.item;\n    }\n\t\n\t/**\n\t * 思路 ： 先取出last节点，获取节点元素，找到last节点的前驱并设为last，判断此时的last节点是否为空    \n\t * 是就将first设为null，否则将其后驱节点设为null,size--\n\t * \n\t */\n\tpublic E removeLast() {\n        final Node<E> l = last;\n        if (l == null)\n            throw new NoSuchElementException();\n        return unlinkLast(l);\n    }\n\t\n\tpublic boolean add(E e) {\n        linkLast(e);\n        return true;\n    }\n\t\n\tpublic E remove() {\n        return removeFirst();\n    }\n```\n上面是LinkedList所独有的，只介绍了关于last的部分，至于first，与last原理相同，其它的poll()、push()、offer()等都是直接调用这些基础函数\n","slug":"collection_linkedlist","published":1,"updated":"2017-03-08T11:50:44.367Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5bs000aqoq127tli7hz","content":"<p>前面我们了解了ArrayList，知道它是以数组为基础，每个数组都有固定的长度。通过学习数据结构，我们知道线性表还有一种就是链表。那么数组和链表各自的优缺点又是什么呢？</p>\n<ul>\n<li>数组 ： 方便查找，增加删除繁琐</li>\n<li>链表 ： 方便删除和增加，查找麻烦</li>\n</ul>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkedList</span>&lt;<span class=\"title\">E</span>&gt;</span></div><div class=\"line\">   <span class=\"keyword\">extends</span> <span class=\"title\">AbstractSequentialList</span>&lt;<span class=\"title\">E</span>&gt;</div><div class=\"line\">   <span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">Deque</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">Cloneable</span>, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">transient</span> <span class=\"keyword\">int</span> size = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">transient</span> Node&lt;E&gt; first;</div><div class=\"line\">\t<span class=\"keyword\">transient</span> Node&lt;E&gt; last;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</div><div class=\"line\">\t\tE item;</div><div class=\"line\">\t\tNode&lt;E&gt; next;</div><div class=\"line\">\t\tNode&lt;E&gt; prev;</div><div class=\"line\"></div><div class=\"line\">\t\tNode(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.item = element;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.next = next;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.prev = prev;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这是LinkedList主要的几个属性和一个很重要的内部类Node。size用来保存元素个数，first和last分别为首尾节点</p>\n<p>接下来还是讨论一下方法的实现与应用<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addLast</span><span class=\"params\">(E e)</span> </span>&#123;</div><div class=\"line\">       linkLast(e);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *</div><div class=\"line\"> * 思路 ： 先取出last节点，再将新节点连接到last节点后面，最后判断原last节点是否为null，是就将其设为</div><div class=\"line\"> * first节点，否则为其设置后继节点，size++</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">linkLast</span><span class=\"params\">(E e)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">final</span> Node&lt;E&gt; l = last;</div><div class=\"line\">       <span class=\"keyword\">final</span> Node&lt;E&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(l, e, <span class=\"keyword\">null</span>);</div><div class=\"line\">       last = newNode;</div><div class=\"line\">       <span class=\"keyword\">if</span> (l == <span class=\"keyword\">null</span>)</div><div class=\"line\">           first = newNode;</div><div class=\"line\">       <span class=\"keyword\">else</span></div><div class=\"line\">           l.next = newNode;</div><div class=\"line\">       size++;</div><div class=\"line\">       modCount++;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">getLast</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">final</span> Node&lt;E&gt; l = last;</div><div class=\"line\">       <span class=\"keyword\">if</span> (l == <span class=\"keyword\">null</span>)</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</div><div class=\"line\">       <span class=\"keyword\">return</span> l.item;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 思路 ： 先取出last节点，获取节点元素，找到last节点的前驱并设为last，判断此时的last节点是否为空    </div><div class=\"line\"> * 是就将first设为null，否则将其后驱节点设为null,size--</div><div class=\"line\"> * </div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">removeLast</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">final</span> Node&lt;E&gt; l = last;</div><div class=\"line\">       <span class=\"keyword\">if</span> (l == <span class=\"keyword\">null</span>)</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</div><div class=\"line\">       <span class=\"keyword\">return</span> unlinkLast(l);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</div><div class=\"line\">       linkLast(e);</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">remove</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> removeFirst();</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>上面是LinkedList所独有的，只介绍了关于last的部分，至于first，与last原理相同，其它的poll()、push()、offer()等都是直接调用这些基础函数</p>\n","excerpt":"<p>前面我们了解了ArrayList，知道它是以数组为基础，每个数组都有固定的长度。通过学习数据结构，我们知道线性表还有一种就是链表。那么数组和链表各自的优缺点又是什么呢？</p>\n<ul>\n<li>数组 ： 方便查找，增加删除繁琐</li>\n<li>链表 ： 方便删除和增加，查找麻烦</li>\n</ul>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkedList</span>&lt;<span class=\"title\">E</span>&gt;</div><div class=\"line\">   <span class=\"keyword\">extends</span> <span class=\"title\">AbstractSequentialList</span>&lt;<span class=\"title\">E</span>&gt;</div><div class=\"line\">   <span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">Deque</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">Cloneable</span>, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">transient</span> <span class=\"keyword\">int</span> size = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">transient</span> Node&lt;E&gt; first;</div><div class=\"line\">\t<span class=\"keyword\">transient</span> Node&lt;E&gt; last;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</div><div class=\"line\">\t\tE item;</div><div class=\"line\">\t\tNode&lt;E&gt; next;</div><div class=\"line\">\t\tNode&lt;E&gt; prev;</div><div class=\"line\"></div><div class=\"line\">\t\tNode(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.item = element;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.next = next;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.prev = prev;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这是LinkedList主要的几个属性和一个很重要的内部类Node。size用来保存元素个数，first和last分别为首尾节点</p>\n<p>接下来还是讨论一下方法的实现与应用<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addLast</span><span class=\"params\">(E e)</span> </span>&#123;</div><div class=\"line\">       linkLast(e);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *</div><div class=\"line\"> * 思路 ： 先取出last节点，再将新节点连接到last节点后面，最后判断原last节点是否为null，是就将其设为</div><div class=\"line\"> * first节点，否则为其设置后继节点，size++</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">linkLast</span><span class=\"params\">(E e)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">final</span> Node&lt;E&gt; l = last;</div><div class=\"line\">       <span class=\"keyword\">final</span> Node&lt;E&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(l, e, <span class=\"keyword\">null</span>);</div><div class=\"line\">       last = newNode;</div><div class=\"line\">       <span class=\"keyword\">if</span> (l == <span class=\"keyword\">null</span>)</div><div class=\"line\">           first = newNode;</div><div class=\"line\">       <span class=\"keyword\">else</span></div><div class=\"line\">           l.next = newNode;</div><div class=\"line\">       size++;</div><div class=\"line\">       modCount++;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">getLast</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">final</span> Node&lt;E&gt; l = last;</div><div class=\"line\">       <span class=\"keyword\">if</span> (l == <span class=\"keyword\">null</span>)</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</div><div class=\"line\">       <span class=\"keyword\">return</span> l.item;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 思路 ： 先取出last节点，获取节点元素，找到last节点的前驱并设为last，判断此时的last节点是否为空    </div><div class=\"line\"> * 是就将first设为null，否则将其后驱节点设为null,size--</div><div class=\"line\"> * </div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">removeLast</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">final</span> Node&lt;E&gt; l = last;</div><div class=\"line\">       <span class=\"keyword\">if</span> (l == <span class=\"keyword\">null</span>)</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</div><div class=\"line\">       <span class=\"keyword\">return</span> unlinkLast(l);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</div><div class=\"line\">       linkLast(e);</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">remove</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> removeFirst();</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>上面是LinkedList所独有的，只介绍了关于last的部分，至于first，与last原理相同，其它的poll()、push()、offer()等都是直接调用这些基础函数</p>"},{"title":"集合系列03-List和Set及其抽象类","date":"2016-10-05T01:25:03.000Z","_content":"前面提到了Collection接口和它的抽象类，而在集合架构中提到Collection是将List、Set和Queue高度抽象而来\n\n### List\n\nList是有序的集合，那么理所当然的会在List接口加入关于索引操作\n\n<!--more-->\n\n``` java\n\tpublic abstract class AbstractList<E> extends AbstractCollection<E> implements List<E> {     \n\t\t//extends Collection\n\t\tint size();\n\t\tboolean isEmpty();\n\t\tboolean contains(Object obj);\n\t\tboolean add(E e);\n\t\tboolean remove(Object obj);\n\t\tboolean equals(Object obj);\n\t\tint hashCode();\n\t\tvoid clear();\n\t\t\n\t\tboolean addAll(SCollection<? extends E> sc);\n\t\tboolean containAll(SCollection<? extends E> sc);\n\t\tboolean removeAll(SCollection<? extends E> sc);\n\t\tboolean retainAll(SCollection<? extends E> sc);\n\t\t\n\t\tSIterator<E> iterator();\n\t\t\n\t\tE[] toArray(E[] e);\n\t\tObject[] toArray();\n\t\t\n\t\t//自己所独有的\n\t\tvoid add(int index, E e);\n\t\tE get(int index);\n\t\tE set(int index, E e);\n\t\tE remove(int index);\n\t\tE indexOf(Object obj);\n\t\tE lastIndexOf(Object obj);\n\t\tboolean addAll(int index,Collection<? extends E> c);\n\t\tListIterator<E> listIterator();\n\t\tList<E> subList(int fromIndex, int toIndex);\n\t}\n```\n### AbstractList\n\n``` java\n\tpublic boolean add(E e) {\n\t\tadd(size(), e);\n\t\treturn true;\n\t}\n\tpublic void add(int index, E element) {\n        throw new UnsupportedOperationException();\n    }\n\t\n\tpublic Iterator<E> iterator() {\n        return new Itr();\n    }\n\t\n\tpublic ListIterator<E> listIterator() {\n        return listIterator(0);\n    }\n\t\n\tprivate class Itr implements Iterator<E> {}\n\tprivate class ListItr extends Itr implements ListIterator<E> {}\n```\nIterator和ListIterator都是采用的内部类。get(),set()和remove()都是采用和add()一样的方法抛出UnsupportedOperationException\n\n### Set\n\nSet为无序不可重复的集合，Set接口和Collection接口完全一样，没有自己所独有的方法。但为什么要抽象出这个接口，这是为了整体架构，方便以后对Set的拓展\n\n### AbstractSet\n\nAbstractSet重写了equals()和hashCode()方法\n``` java\n\tpublic abstract class AbstractSet<E> extends AbstractCollection<E> implements Set<E> {       \n\t\tpublic boolean equals(Object o) {\n\t\t\tif (o == this)\n\t\t\t\treturn true;\n\n\t\t\tif (!(o instanceof Set))\n\t\t\t\treturn false;\n\t\t\tCollection<?> c = (Collection<?>) o;\n\t\t\tif (c.size() != size())\n\t\t\t\treturn false;\n\t\t\ttry {\n\t\t\t\treturn containsAll(c);\n\t\t\t} catch (ClassCastException unused)   {\n\t\t\t\treturn false;\n\t\t\t} catch (NullPointerException unused) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n    }\n\t\n\tpublic boolean removeAll(Collection<?> c) {\n        Objects.requireNonNull(c);\n        boolean modified = false;\n\n        if (size() > c.size()) {\n            for (Iterator<?> i = c.iterator(); i.hasNext(); )\n                modified |= remove(i.next());\n        } else {\n            for (Iterator<?> i = iterator(); i.hasNext(); ) {\n                if (c.contains(i.next())) {\n                    i.remove();\n                    modified = true;\n                }\n            }\n        }\n        return modified;\n    }\n\t\n```","source":"_posts/collection_list-set.md","raw":"---\ntitle: 集合系列03-List和Set及其抽象类\ndate: 2016-10-05 09:25:03\ntags:\n\t - Collection\n---\n前面提到了Collection接口和它的抽象类，而在集合架构中提到Collection是将List、Set和Queue高度抽象而来\n\n### List\n\nList是有序的集合，那么理所当然的会在List接口加入关于索引操作\n\n<!--more-->\n\n``` java\n\tpublic abstract class AbstractList<E> extends AbstractCollection<E> implements List<E> {     \n\t\t//extends Collection\n\t\tint size();\n\t\tboolean isEmpty();\n\t\tboolean contains(Object obj);\n\t\tboolean add(E e);\n\t\tboolean remove(Object obj);\n\t\tboolean equals(Object obj);\n\t\tint hashCode();\n\t\tvoid clear();\n\t\t\n\t\tboolean addAll(SCollection<? extends E> sc);\n\t\tboolean containAll(SCollection<? extends E> sc);\n\t\tboolean removeAll(SCollection<? extends E> sc);\n\t\tboolean retainAll(SCollection<? extends E> sc);\n\t\t\n\t\tSIterator<E> iterator();\n\t\t\n\t\tE[] toArray(E[] e);\n\t\tObject[] toArray();\n\t\t\n\t\t//自己所独有的\n\t\tvoid add(int index, E e);\n\t\tE get(int index);\n\t\tE set(int index, E e);\n\t\tE remove(int index);\n\t\tE indexOf(Object obj);\n\t\tE lastIndexOf(Object obj);\n\t\tboolean addAll(int index,Collection<? extends E> c);\n\t\tListIterator<E> listIterator();\n\t\tList<E> subList(int fromIndex, int toIndex);\n\t}\n```\n### AbstractList\n\n``` java\n\tpublic boolean add(E e) {\n\t\tadd(size(), e);\n\t\treturn true;\n\t}\n\tpublic void add(int index, E element) {\n        throw new UnsupportedOperationException();\n    }\n\t\n\tpublic Iterator<E> iterator() {\n        return new Itr();\n    }\n\t\n\tpublic ListIterator<E> listIterator() {\n        return listIterator(0);\n    }\n\t\n\tprivate class Itr implements Iterator<E> {}\n\tprivate class ListItr extends Itr implements ListIterator<E> {}\n```\nIterator和ListIterator都是采用的内部类。get(),set()和remove()都是采用和add()一样的方法抛出UnsupportedOperationException\n\n### Set\n\nSet为无序不可重复的集合，Set接口和Collection接口完全一样，没有自己所独有的方法。但为什么要抽象出这个接口，这是为了整体架构，方便以后对Set的拓展\n\n### AbstractSet\n\nAbstractSet重写了equals()和hashCode()方法\n``` java\n\tpublic abstract class AbstractSet<E> extends AbstractCollection<E> implements Set<E> {       \n\t\tpublic boolean equals(Object o) {\n\t\t\tif (o == this)\n\t\t\t\treturn true;\n\n\t\t\tif (!(o instanceof Set))\n\t\t\t\treturn false;\n\t\t\tCollection<?> c = (Collection<?>) o;\n\t\t\tif (c.size() != size())\n\t\t\t\treturn false;\n\t\t\ttry {\n\t\t\t\treturn containsAll(c);\n\t\t\t} catch (ClassCastException unused)   {\n\t\t\t\treturn false;\n\t\t\t} catch (NullPointerException unused) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n    }\n\t\n\tpublic boolean removeAll(Collection<?> c) {\n        Objects.requireNonNull(c);\n        boolean modified = false;\n\n        if (size() > c.size()) {\n            for (Iterator<?> i = c.iterator(); i.hasNext(); )\n                modified |= remove(i.next());\n        } else {\n            for (Iterator<?> i = iterator(); i.hasNext(); ) {\n                if (c.contains(i.next())) {\n                    i.remove();\n                    modified = true;\n                }\n            }\n        }\n        return modified;\n    }\n\t\n```","slug":"collection_list-set","published":1,"updated":"2017-03-08T11:45:35.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5bv000dqoq1uhn4didf","content":"<p>前面提到了Collection接口和它的抽象类，而在集合架构中提到Collection是将List、Set和Queue高度抽象而来</p>\n<h3 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h3><p>List是有序的集合，那么理所当然的会在List接口加入关于索引操作</p>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractList</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractCollection</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;     </div><div class=\"line\">\t<span class=\"comment\">//extends Collection</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Object obj)</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(Object obj)</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">addAll</span><span class=\"params\">(SCollection&lt;? extends E&gt; sc)</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">containAll</span><span class=\"params\">(SCollection&lt;? extends E&gt; sc)</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">removeAll</span><span class=\"params\">(SCollection&lt;? extends E&gt; sc)</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">retainAll</span><span class=\"params\">(SCollection&lt;? extends E&gt; sc)</span></span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\">SIterator&lt;E&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t</div><div class=\"line\">\tE[] toArray(E[] e);</div><div class=\"line\">\tObject[] toArray();</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//自己所独有的</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E e)</span></span>;</div><div class=\"line\">\t<span class=\"function\">E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span>;</div><div class=\"line\">\t<span class=\"function\">E <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E e)</span></span>;</div><div class=\"line\">\t<span class=\"function\">E <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span>;</div><div class=\"line\">\t<span class=\"function\">E <span class=\"title\">indexOf</span><span class=\"params\">(Object obj)</span></span>;</div><div class=\"line\">\t<span class=\"function\">E <span class=\"title\">lastIndexOf</span><span class=\"params\">(Object obj)</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">addAll</span><span class=\"params\">(<span class=\"keyword\">int</span> index,Collection&lt;? extends E&gt; c)</span></span>;</div><div class=\"line\">\t<span class=\"function\">ListIterator&lt;E&gt; <span class=\"title\">listIterator</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\">List&lt;E&gt; <span class=\"title\">subList</span><span class=\"params\">(<span class=\"keyword\">int</span> fromIndex, <span class=\"keyword\">int</span> toIndex)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"AbstractList\"><a href=\"#AbstractList\" class=\"headerlink\" title=\"AbstractList\"></a>AbstractList</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</div><div class=\"line\">\tadd(size(), e);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException();</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Iterator&lt;E&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Itr();</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListIterator&lt;E&gt; <span class=\"title\">listIterator</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> listIterator(<span class=\"number\">0</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Itr</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;&#125;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListItr</span> <span class=\"keyword\">extends</span> <span class=\"title\">Itr</span> <span class=\"keyword\">implements</span> <span class=\"title\">ListIterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;&#125;</div></pre></td></tr></table></figure>\n<p>Iterator和ListIterator都是采用的内部类。get(),set()和remove()都是采用和add()一样的方法抛出UnsupportedOperationException</p>\n<h3 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h3><p>Set为无序不可重复的集合，Set接口和Collection接口完全一样，没有自己所独有的方法。但为什么要抽象出这个接口，这是为了整体架构，方便以后对Set的拓展</p>\n<h3 id=\"AbstractSet\"><a href=\"#AbstractSet\" class=\"headerlink\" title=\"AbstractSet\"></a>AbstractSet</h3><p>AbstractSet重写了equals()和hashCode()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractSet</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractCollection</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Set</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;       </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object o)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (o == <span class=\"keyword\">this</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!(o <span class=\"keyword\">instanceof</span> Set))</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\tCollection&lt;?&gt; c = (Collection&lt;?&gt;) o;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (c.size() != size())</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> containsAll(c);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (ClassCastException unused)   &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (NullPointerException unused) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">removeAll</span><span class=\"params\">(Collection&lt;?&gt; c)</span> </span>&#123;</div><div class=\"line\">       Objects.requireNonNull(c);</div><div class=\"line\">       <span class=\"keyword\">boolean</span> modified = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">if</span> (size() &gt; c.size()) &#123;</div><div class=\"line\">           <span class=\"keyword\">for</span> (Iterator&lt;?&gt; i = c.iterator(); i.hasNext(); )</div><div class=\"line\">               modified |= remove(i.next());</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">           <span class=\"keyword\">for</span> (Iterator&lt;?&gt; i = iterator(); i.hasNext(); ) &#123;</div><div class=\"line\">               <span class=\"keyword\">if</span> (c.contains(i.next())) &#123;</div><div class=\"line\">                   i.remove();</div><div class=\"line\">                   modified = <span class=\"keyword\">true</span>;</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> modified;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>前面提到了Collection接口和它的抽象类，而在集合架构中提到Collection是将List、Set和Queue高度抽象而来</p>\n<h3 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h3><p>List是有序的集合，那么理所当然的会在List接口加入关于索引操作</p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractList</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractCollection</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;     </div><div class=\"line\">\t<span class=\"comment\">//extends Collection</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Object obj)</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(Object obj)</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">addAll</span><span class=\"params\">(SCollection&lt;? extends E&gt; sc)</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">containAll</span><span class=\"params\">(SCollection&lt;? extends E&gt; sc)</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">removeAll</span><span class=\"params\">(SCollection&lt;? extends E&gt; sc)</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">retainAll</span><span class=\"params\">(SCollection&lt;? extends E&gt; sc)</span></span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\">SIterator&lt;E&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t</div><div class=\"line\">\tE[] toArray(E[] e);</div><div class=\"line\">\tObject[] toArray();</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//自己所独有的</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E e)</span></span>;</div><div class=\"line\">\t<span class=\"function\">E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span>;</div><div class=\"line\">\t<span class=\"function\">E <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E e)</span></span>;</div><div class=\"line\">\t<span class=\"function\">E <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span>;</div><div class=\"line\">\t<span class=\"function\">E <span class=\"title\">indexOf</span><span class=\"params\">(Object obj)</span></span>;</div><div class=\"line\">\t<span class=\"function\">E <span class=\"title\">lastIndexOf</span><span class=\"params\">(Object obj)</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">addAll</span><span class=\"params\">(<span class=\"keyword\">int</span> index,Collection&lt;? extends E&gt; c)</span></span>;</div><div class=\"line\">\t<span class=\"function\">ListIterator&lt;E&gt; <span class=\"title\">listIterator</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\">List&lt;E&gt; <span class=\"title\">subList</span><span class=\"params\">(<span class=\"keyword\">int</span> fromIndex, <span class=\"keyword\">int</span> toIndex)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"AbstractList\"><a href=\"#AbstractList\" class=\"headerlink\" title=\"AbstractList\"></a>AbstractList</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</div><div class=\"line\">\tadd(size(), e);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException();</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Iterator&lt;E&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Itr();</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListIterator&lt;E&gt; <span class=\"title\">listIterator</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> listIterator(<span class=\"number\">0</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Itr</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;&#125;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListItr</span> <span class=\"keyword\">extends</span> <span class=\"title\">Itr</span> <span class=\"keyword\">implements</span> <span class=\"title\">ListIterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;&#125;</div></pre></td></tr></table></figure>\n<p>Iterator和ListIterator都是采用的内部类。get(),set()和remove()都是采用和add()一样的方法抛出UnsupportedOperationException</p>\n<h3 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h3><p>Set为无序不可重复的集合，Set接口和Collection接口完全一样，没有自己所独有的方法。但为什么要抽象出这个接口，这是为了整体架构，方便以后对Set的拓展</p>\n<h3 id=\"AbstractSet\"><a href=\"#AbstractSet\" class=\"headerlink\" title=\"AbstractSet\"></a>AbstractSet</h3><p>AbstractSet重写了equals()和hashCode()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractSet</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractCollection</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Set</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;       </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object o)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (o == <span class=\"keyword\">this</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!(o <span class=\"keyword\">instanceof</span> Set))</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\tCollection&lt;?&gt; c = (Collection&lt;?&gt;) o;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (c.size() != size())</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> containsAll(c);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (ClassCastException unused)   &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (NullPointerException unused) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">removeAll</span><span class=\"params\">(Collection&lt;?&gt; c)</span> </span>&#123;</div><div class=\"line\">       Objects.requireNonNull(c);</div><div class=\"line\">       <span class=\"keyword\">boolean</span> modified = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">if</span> (size() &gt; c.size()) &#123;</div><div class=\"line\">           <span class=\"keyword\">for</span> (Iterator&lt;?&gt; i = c.iterator(); i.hasNext(); )</div><div class=\"line\">               modified |= remove(i.next());</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">           <span class=\"keyword\">for</span> (Iterator&lt;?&gt; i = iterator(); i.hasNext(); ) &#123;</div><div class=\"line\">               <span class=\"keyword\">if</span> (c.contains(i.next())) &#123;</div><div class=\"line\">                   i.remove();</div><div class=\"line\">                   modified = <span class=\"keyword\">true</span>;</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> modified;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>"},{"title":"集合系列05-Queue和Deque及其抽象类","date":"2016-10-08T02:20:20.000Z","_content":"前面提到了List和Set接口及其抽象类，今天我们就讨论一下关于队列Queue和Deque及其抽象类\n\n### Queue\n\n下来看一下Queue接口的几个方法\n{% qnimg collection/queue-deque/p1.png 'class:class1 class2' normal:yes %}\n\n<!--more-->\n\n#### 两个添加方法: 继承Collection的add()和自身所特有的offer()\n- offer()在添加时容量不足时会抛出IllegalStateException\n- add()在添加时容量不足时不会抛出IllegalStateException\n\n\n#### 两个删除方法：继承Collection的remove()和自身所特有的poll()\n- 当队列为空时，remove()会抛出java.util.NoSuchElementException\n- 当队列为空时，poll()返回null\n\t\n#### 两个获得元素方法：都是Queue自身特有的。都是获得队列的头元素。\n- 当队列为空时，element()会抛出NoSuchElementException\n- 当队列为空时，peek()返回null\n\t\n### AbstractQueue\n\n{% qnimg collection/queue-deque/p2.png 'class:class1 class2' normal:yes %}\n\nAbstractQueue重写了AbstractCollection的addAll()、clear()以及remove()和add()方法\n``` java\n\tpublic E remove() {\n        E x = poll();\n        if (x != null)\n            return x;\n        else\n            throw new NoSuchElementException();\n    }\n\t\n\tpublic boolean add(E e) {\n        if (offer(e))\n            return true;\n        else\n            throw new IllegalStateException(\"Queue full\");\n    }\n```\n通过上面的源码可以看出remove()和add()都是调用了offer()、poll()方法，再加上判断，抛出Exception\n\n### Deque\n\nQueue的数据结构满足先进先出或者说后进后出，而Deque是一个双向的队列\n下面看一下Deque接口中的方法，其中从Collection和Queue继承而来，这里就不说了\n``` java\n\t/* stack method */\n\t//添加元素\n\tvoid push(E e);\n\t//删除元素\n\tE pop();\n\t\n\t/* myself */\n\tvoid addFirst(E e);\n\tvoid addLast(E e);\n\tboolean offerFirst(E e);\n\tboolean offerLast(E e);\n\tE removeFirst();\n\tE removeLast();\n\tE pollFirst();\n\tE pollLast();\n\tE getFirst();\n\tE getLast();\n\tE peekFirst();\n\tE peekLast();\n\tboolean removeFirstOccurrence(Object o);\n\tboolean removeLastOccurrence(Object o);\n```\n其中各个方法所实现的功能就见名知意","source":"_posts/collection_queue-deque.md","raw":"---\ntitle: 集合系列05-Queue和Deque及其抽象类\ndate: 2016-10-08 10:20:20\ntags:\n\t- Collection\n---\n前面提到了List和Set接口及其抽象类，今天我们就讨论一下关于队列Queue和Deque及其抽象类\n\n### Queue\n\n下来看一下Queue接口的几个方法\n{% qnimg collection/queue-deque/p1.png 'class:class1 class2' normal:yes %}\n\n<!--more-->\n\n#### 两个添加方法: 继承Collection的add()和自身所特有的offer()\n- offer()在添加时容量不足时会抛出IllegalStateException\n- add()在添加时容量不足时不会抛出IllegalStateException\n\n\n#### 两个删除方法：继承Collection的remove()和自身所特有的poll()\n- 当队列为空时，remove()会抛出java.util.NoSuchElementException\n- 当队列为空时，poll()返回null\n\t\n#### 两个获得元素方法：都是Queue自身特有的。都是获得队列的头元素。\n- 当队列为空时，element()会抛出NoSuchElementException\n- 当队列为空时，peek()返回null\n\t\n### AbstractQueue\n\n{% qnimg collection/queue-deque/p2.png 'class:class1 class2' normal:yes %}\n\nAbstractQueue重写了AbstractCollection的addAll()、clear()以及remove()和add()方法\n``` java\n\tpublic E remove() {\n        E x = poll();\n        if (x != null)\n            return x;\n        else\n            throw new NoSuchElementException();\n    }\n\t\n\tpublic boolean add(E e) {\n        if (offer(e))\n            return true;\n        else\n            throw new IllegalStateException(\"Queue full\");\n    }\n```\n通过上面的源码可以看出remove()和add()都是调用了offer()、poll()方法，再加上判断，抛出Exception\n\n### Deque\n\nQueue的数据结构满足先进先出或者说后进后出，而Deque是一个双向的队列\n下面看一下Deque接口中的方法，其中从Collection和Queue继承而来，这里就不说了\n``` java\n\t/* stack method */\n\t//添加元素\n\tvoid push(E e);\n\t//删除元素\n\tE pop();\n\t\n\t/* myself */\n\tvoid addFirst(E e);\n\tvoid addLast(E e);\n\tboolean offerFirst(E e);\n\tboolean offerLast(E e);\n\tE removeFirst();\n\tE removeLast();\n\tE pollFirst();\n\tE pollLast();\n\tE getFirst();\n\tE getLast();\n\tE peekFirst();\n\tE peekLast();\n\tboolean removeFirstOccurrence(Object o);\n\tboolean removeLastOccurrence(Object o);\n```\n其中各个方法所实现的功能就见名知意","slug":"collection_queue-deque","published":1,"updated":"2017-03-08T11:46:07.062Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5bx000fqoq1h6gn28fi","content":"<p>前面提到了List和Set接口及其抽象类，今天我们就讨论一下关于队列Queue和Deque及其抽象类</p>\n<h3 id=\"Queue\"><a href=\"#Queue\" class=\"headerlink\" title=\"Queue\"></a>Queue</h3><p>下来看一下Queue接口的几个方法<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/collection/queue-deque/p1.png\"></p>\n<a id=\"more\"></a>\n<h4 id=\"两个添加方法-继承Collection的add-和自身所特有的offer\"><a href=\"#两个添加方法-继承Collection的add-和自身所特有的offer\" class=\"headerlink\" title=\"两个添加方法: 继承Collection的add()和自身所特有的offer()\"></a>两个添加方法: 继承Collection的add()和自身所特有的offer()</h4><ul>\n<li>offer()在添加时容量不足时会抛出IllegalStateException</li>\n<li>add()在添加时容量不足时不会抛出IllegalStateException</li>\n</ul>\n<h4 id=\"两个删除方法：继承Collection的remove-和自身所特有的poll\"><a href=\"#两个删除方法：继承Collection的remove-和自身所特有的poll\" class=\"headerlink\" title=\"两个删除方法：继承Collection的remove()和自身所特有的poll()\"></a>两个删除方法：继承Collection的remove()和自身所特有的poll()</h4><ul>\n<li>当队列为空时，remove()会抛出java.util.NoSuchElementException</li>\n<li>当队列为空时，poll()返回null</li>\n</ul>\n<h4 id=\"两个获得元素方法：都是Queue自身特有的。都是获得队列的头元素。\"><a href=\"#两个获得元素方法：都是Queue自身特有的。都是获得队列的头元素。\" class=\"headerlink\" title=\"两个获得元素方法：都是Queue自身特有的。都是获得队列的头元素。\"></a>两个获得元素方法：都是Queue自身特有的。都是获得队列的头元素。</h4><ul>\n<li>当队列为空时，element()会抛出NoSuchElementException</li>\n<li>当队列为空时，peek()返回null</li>\n</ul>\n<h3 id=\"AbstractQueue\"><a href=\"#AbstractQueue\" class=\"headerlink\" title=\"AbstractQueue\"></a>AbstractQueue</h3><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/collection/queue-deque/p2.png\">\n<p>AbstractQueue重写了AbstractCollection的addAll()、clear()以及remove()和add()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">remove</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       E x = poll();</div><div class=\"line\">       <span class=\"keyword\">if</span> (x != <span class=\"keyword\">null</span>)</div><div class=\"line\">           <span class=\"keyword\">return</span> x;</div><div class=\"line\">       <span class=\"keyword\">else</span></div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (offer(e))</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">       <span class=\"keyword\">else</span></div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Queue full\"</span>);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>通过上面的源码可以看出remove()和add()都是调用了offer()、poll()方法，再加上判断，抛出Exception</p>\n<h3 id=\"Deque\"><a href=\"#Deque\" class=\"headerlink\" title=\"Deque\"></a>Deque</h3><p>Queue的数据结构满足先进先出或者说后进后出，而Deque是一个双向的队列<br>下面看一下Deque接口中的方法，其中从Collection和Queue继承而来，这里就不说了<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* stack method */</span></div><div class=\"line\"><span class=\"comment\">//添加元素</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(E e)</span></span>;</div><div class=\"line\"><span class=\"comment\">//删除元素</span></div><div class=\"line\"><span class=\"function\">E <span class=\"title\">pop</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* myself */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addFirst</span><span class=\"params\">(E e)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addLast</span><span class=\"params\">(E e)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">offerFirst</span><span class=\"params\">(E e)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">offerLast</span><span class=\"params\">(E e)</span></span>;</div><div class=\"line\"><span class=\"function\">E <span class=\"title\">removeFirst</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"function\">E <span class=\"title\">removeLast</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"function\">E <span class=\"title\">pollFirst</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"function\">E <span class=\"title\">pollLast</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"function\">E <span class=\"title\">getFirst</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"function\">E <span class=\"title\">getLast</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"function\">E <span class=\"title\">peekFirst</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"function\">E <span class=\"title\">peekLast</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">removeFirstOccurrence</span><span class=\"params\">(Object o)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">removeLastOccurrence</span><span class=\"params\">(Object o)</span></span>;</div></pre></td></tr></table></figure></p>\n<p>其中各个方法所实现的功能就见名知意</p>\n","excerpt":"<p>前面提到了List和Set接口及其抽象类，今天我们就讨论一下关于队列Queue和Deque及其抽象类</p>\n<h3 id=\"Queue\"><a href=\"#Queue\" class=\"headerlink\" title=\"Queue\"></a>Queue</h3><p>下来看一下Queue接口的几个方法<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/collection/queue-deque/p1.png\"></p>","more":"<h4 id=\"两个添加方法-继承Collection的add-和自身所特有的offer\"><a href=\"#两个添加方法-继承Collection的add-和自身所特有的offer\" class=\"headerlink\" title=\"两个添加方法: 继承Collection的add()和自身所特有的offer()\"></a>两个添加方法: 继承Collection的add()和自身所特有的offer()</h4><ul>\n<li>offer()在添加时容量不足时会抛出IllegalStateException</li>\n<li>add()在添加时容量不足时不会抛出IllegalStateException</li>\n</ul>\n<h4 id=\"两个删除方法：继承Collection的remove-和自身所特有的poll\"><a href=\"#两个删除方法：继承Collection的remove-和自身所特有的poll\" class=\"headerlink\" title=\"两个删除方法：继承Collection的remove()和自身所特有的poll()\"></a>两个删除方法：继承Collection的remove()和自身所特有的poll()</h4><ul>\n<li>当队列为空时，remove()会抛出java.util.NoSuchElementException</li>\n<li>当队列为空时，poll()返回null</li>\n</ul>\n<h4 id=\"两个获得元素方法：都是Queue自身特有的。都是获得队列的头元素。\"><a href=\"#两个获得元素方法：都是Queue自身特有的。都是获得队列的头元素。\" class=\"headerlink\" title=\"两个获得元素方法：都是Queue自身特有的。都是获得队列的头元素。\"></a>两个获得元素方法：都是Queue自身特有的。都是获得队列的头元素。</h4><ul>\n<li>当队列为空时，element()会抛出NoSuchElementException</li>\n<li>当队列为空时，peek()返回null</li>\n</ul>\n<h3 id=\"AbstractQueue\"><a href=\"#AbstractQueue\" class=\"headerlink\" title=\"AbstractQueue\"></a>AbstractQueue</h3><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/collection/queue-deque/p2.png\">\n<p>AbstractQueue重写了AbstractCollection的addAll()、clear()以及remove()和add()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">remove</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       E x = poll();</div><div class=\"line\">       <span class=\"keyword\">if</span> (x != <span class=\"keyword\">null</span>)</div><div class=\"line\">           <span class=\"keyword\">return</span> x;</div><div class=\"line\">       <span class=\"keyword\">else</span></div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (offer(e))</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">       <span class=\"keyword\">else</span></div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Queue full\"</span>);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>通过上面的源码可以看出remove()和add()都是调用了offer()、poll()方法，再加上判断，抛出Exception</p>\n<h3 id=\"Deque\"><a href=\"#Deque\" class=\"headerlink\" title=\"Deque\"></a>Deque</h3><p>Queue的数据结构满足先进先出或者说后进后出，而Deque是一个双向的队列<br>下面看一下Deque接口中的方法，其中从Collection和Queue继承而来，这里就不说了<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* stack method */</span></div><div class=\"line\"><span class=\"comment\">//添加元素</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(E e)</span></span>;</div><div class=\"line\"><span class=\"comment\">//删除元素</span></div><div class=\"line\"><span class=\"function\">E <span class=\"title\">pop</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* myself */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addFirst</span><span class=\"params\">(E e)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addLast</span><span class=\"params\">(E e)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">offerFirst</span><span class=\"params\">(E e)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">offerLast</span><span class=\"params\">(E e)</span></span>;</div><div class=\"line\"><span class=\"function\">E <span class=\"title\">removeFirst</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"function\">E <span class=\"title\">removeLast</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"function\">E <span class=\"title\">pollFirst</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"function\">E <span class=\"title\">pollLast</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"function\">E <span class=\"title\">getFirst</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"function\">E <span class=\"title\">getLast</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"function\">E <span class=\"title\">peekFirst</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"function\">E <span class=\"title\">peekLast</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">removeFirstOccurrence</span><span class=\"params\">(Object o)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">removeLastOccurrence</span><span class=\"params\">(Object o)</span></span>;</div></pre></td></tr></table></figure></p>\n<p>其中各个方法所实现的功能就见名知意</p>"},{"title":"集合系列08-Map和AbstractMap的原理与使用","date":"2016-10-19T05:49:06.000Z","_content":"### Map\n\n我们前面谈到了Collection，其实集合中还有另一种键值对的存在，那就是Map\n``` java\n\tpublic interface Map<K,V> {\n\t\t// ...\n\t\tinterface Entry<K,V> {\n\t\t\t// ...\n\t\t}\n\t\t// ...\n\t}\n```\n这就是Map接口的结构，至于其抽象方法如下图\n\n<!--more-->\n\n{% qnimg collection/map/p1.png 'class:class1 class2' normal:yes %}\n\n下面就看看jdk8出现的常用默认方法\n\n``` java\n\t//若键不存在或所对应的值为null，则返回默认值\n\tdefault V getOrDefault(Object key, V defaultValue) {\n        V v;\n        return (((v = get(key)) != null) || containsKey(key))                                 \n            ? v\n            : defaultValue;\n    }\n\t// 若键所对应的值为null，则将值添加进去\n\tdefault V putIfAbsent(K key, V value) {\n        V v = get(key);\n        if (v == null) {\n            v = put(key, value);\n        }\n\n        return v;\n    }\n\t//若键所对应的值和给定的值相同则删除\n\tdefault boolean remove(Object key, Object value) {\n        Object curValue = get(key);\n        if (!Objects.equals(curValue, value) ||\n            (curValue == null && !containsKey(key))) {\n            return false;\n        }\n        remove(key);\n        return true;\n    }\n\t//若键存在且对应的值与oldValue相同，则用新值替代\n\tdefault boolean replace(K key, V oldValue, V newValue) {\n        Object curValue = get(key);\n        if (!Objects.equals(curValue, oldValue) ||\n            (curValue == null && !containsKey(key))) {\n            return false;\n        }\n        put(key, newValue);\n        return true;\n    }\n\t//若键存在，则用给定值替代原值\n\tdefault V replace(K key, V value) {\n        V curValue;\n        if (((curValue = get(key)) != null) || containsKey(key)) {\n            curValue = put(key, value);\n        }\n        return curValue;\n    }\n```\n\n比较特别的是Map接口中还有一个接口Entry(包含key和value)，下图是Entry的抽象方法\n{% qnimg collection/map/p2.png 'class:class1 class2' normal:yes %}\n\n### AbstractMap\n\n上面提到了Map和Entry接口，下面说说Map的一个抽象实现AbstractMap\n``` java\n\tpublic abstract class AbstractMap<K,V> implements Map<K,V> {\n\t\ttransient volatile Set<K>        keySet;\n\t\ttransient volatile Collection<V> values;\n\t}\n```\n\n通过查看源码发现AbstractMap中只有一个entrySet()抽象方法和一个抛出UnsupportedOperationException的put(),其余的都通过entrySet()方法实现了，可见entrySet()多么重要，entrySet()返回的就是一个包含每一个键值对组合实体的集合","source":"_posts/collection_map.md","raw":"---\ntitle: 集合系列08-Map和AbstractMap的原理与使用\ndate: 2016-10-19 13:49:06\ntags:\n\t- Collection\n---\n### Map\n\n我们前面谈到了Collection，其实集合中还有另一种键值对的存在，那就是Map\n``` java\n\tpublic interface Map<K,V> {\n\t\t// ...\n\t\tinterface Entry<K,V> {\n\t\t\t// ...\n\t\t}\n\t\t// ...\n\t}\n```\n这就是Map接口的结构，至于其抽象方法如下图\n\n<!--more-->\n\n{% qnimg collection/map/p1.png 'class:class1 class2' normal:yes %}\n\n下面就看看jdk8出现的常用默认方法\n\n``` java\n\t//若键不存在或所对应的值为null，则返回默认值\n\tdefault V getOrDefault(Object key, V defaultValue) {\n        V v;\n        return (((v = get(key)) != null) || containsKey(key))                                 \n            ? v\n            : defaultValue;\n    }\n\t// 若键所对应的值为null，则将值添加进去\n\tdefault V putIfAbsent(K key, V value) {\n        V v = get(key);\n        if (v == null) {\n            v = put(key, value);\n        }\n\n        return v;\n    }\n\t//若键所对应的值和给定的值相同则删除\n\tdefault boolean remove(Object key, Object value) {\n        Object curValue = get(key);\n        if (!Objects.equals(curValue, value) ||\n            (curValue == null && !containsKey(key))) {\n            return false;\n        }\n        remove(key);\n        return true;\n    }\n\t//若键存在且对应的值与oldValue相同，则用新值替代\n\tdefault boolean replace(K key, V oldValue, V newValue) {\n        Object curValue = get(key);\n        if (!Objects.equals(curValue, oldValue) ||\n            (curValue == null && !containsKey(key))) {\n            return false;\n        }\n        put(key, newValue);\n        return true;\n    }\n\t//若键存在，则用给定值替代原值\n\tdefault V replace(K key, V value) {\n        V curValue;\n        if (((curValue = get(key)) != null) || containsKey(key)) {\n            curValue = put(key, value);\n        }\n        return curValue;\n    }\n```\n\n比较特别的是Map接口中还有一个接口Entry(包含key和value)，下图是Entry的抽象方法\n{% qnimg collection/map/p2.png 'class:class1 class2' normal:yes %}\n\n### AbstractMap\n\n上面提到了Map和Entry接口，下面说说Map的一个抽象实现AbstractMap\n``` java\n\tpublic abstract class AbstractMap<K,V> implements Map<K,V> {\n\t\ttransient volatile Set<K>        keySet;\n\t\ttransient volatile Collection<V> values;\n\t}\n```\n\n通过查看源码发现AbstractMap中只有一个entrySet()抽象方法和一个抛出UnsupportedOperationException的put(),其余的都通过entrySet()方法实现了，可见entrySet()多么重要，entrySet()返回的就是一个包含每一个键值对组合实体的集合","slug":"collection_map","published":1,"updated":"2017-03-08T11:51:00.134Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5bz000iqoq12gp0t33h","content":"<h3 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h3><p>我们前面谈到了Collection，其实集合中还有另一种键值对的存在，那就是Map<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Map</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// ...</span></div><div class=\"line\">\t<span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Entry</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// ...</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这就是Map接口的结构，至于其抽象方法如下图</p>\n<a id=\"more\"></a>\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/collection/map/p1.png\">\n<p>下面就看看jdk8出现的常用默认方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//若键不存在或所对应的值为null，则返回默认值</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">default</span> V <span class=\"title\">getOrDefault</span><span class=\"params\">(Object key, V defaultValue)</span> </span>&#123;</div><div class=\"line\">       V v;</div><div class=\"line\">       <span class=\"keyword\">return</span> (((v = get(key)) != <span class=\"keyword\">null</span>) || containsKey(key))                                 </div><div class=\"line\">           ? v</div><div class=\"line\">           : defaultValue;</div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"comment\">// 若键所对应的值为null，则将值添加进去</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">default</span> V <span class=\"title\">putIfAbsent</span><span class=\"params\">(K key, V value)</span> </span>&#123;</div><div class=\"line\">       V v = get(key);</div><div class=\"line\">       <span class=\"keyword\">if</span> (v == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           v = put(key, value);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">return</span> v;</div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"comment\">//若键所对应的值和给定的值相同则删除</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(Object key, Object value)</span> </span>&#123;</div><div class=\"line\">       Object curValue = get(key);</div><div class=\"line\">       <span class=\"keyword\">if</span> (!Objects.equals(curValue, value) ||</div><div class=\"line\">           (curValue == <span class=\"keyword\">null</span> &amp;&amp; !containsKey(key))) &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       remove(key);</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"comment\">//若键存在且对应的值与oldValue相同，则用新值替代</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">boolean</span> <span class=\"title\">replace</span><span class=\"params\">(K key, V oldValue, V newValue)</span> </span>&#123;</div><div class=\"line\">       Object curValue = get(key);</div><div class=\"line\">       <span class=\"keyword\">if</span> (!Objects.equals(curValue, oldValue) ||</div><div class=\"line\">           (curValue == <span class=\"keyword\">null</span> &amp;&amp; !containsKey(key))) &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       put(key, newValue);</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"comment\">//若键存在，则用给定值替代原值</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">default</span> V <span class=\"title\">replace</span><span class=\"params\">(K key, V value)</span> </span>&#123;</div><div class=\"line\">       V curValue;</div><div class=\"line\">       <span class=\"keyword\">if</span> (((curValue = get(key)) != <span class=\"keyword\">null</span>) || containsKey(key)) &#123;</div><div class=\"line\">           curValue = put(key, value);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> curValue;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>比较特别的是Map接口中还有一个接口Entry(包含key和value)，下图是Entry的抽象方法<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/collection/map/p2.png\"></p>\n<h3 id=\"AbstractMap\"><a href=\"#AbstractMap\" class=\"headerlink\" title=\"AbstractMap\"></a>AbstractMap</h3><p>上面提到了Map和Entry接口，下面说说Map的一个抽象实现AbstractMap<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractMap</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Map</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">transient</span> <span class=\"keyword\">volatile</span> Set&lt;K&gt;        keySet;</div><div class=\"line\">\t<span class=\"keyword\">transient</span> <span class=\"keyword\">volatile</span> Collection&lt;V&gt; values;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>通过查看源码发现AbstractMap中只有一个entrySet()抽象方法和一个抛出UnsupportedOperationException的put(),其余的都通过entrySet()方法实现了，可见entrySet()多么重要，entrySet()返回的就是一个包含每一个键值对组合实体的集合</p>\n","excerpt":"<h3 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h3><p>我们前面谈到了Collection，其实集合中还有另一种键值对的存在，那就是Map<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Map</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// ...</span></div><div class=\"line\">\t<span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Entry</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// ...</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这就是Map接口的结构，至于其抽象方法如下图</p>","more":"<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/collection/map/p1.png\">\n<p>下面就看看jdk8出现的常用默认方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//若键不存在或所对应的值为null，则返回默认值</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">default</span> V <span class=\"title\">getOrDefault</span><span class=\"params\">(Object key, V defaultValue)</span> </span>&#123;</div><div class=\"line\">       V v;</div><div class=\"line\">       <span class=\"keyword\">return</span> (((v = get(key)) != <span class=\"keyword\">null</span>) || containsKey(key))                                 </div><div class=\"line\">           ? v</div><div class=\"line\">           : defaultValue;</div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"comment\">// 若键所对应的值为null，则将值添加进去</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">default</span> V <span class=\"title\">putIfAbsent</span><span class=\"params\">(K key, V value)</span> </span>&#123;</div><div class=\"line\">       V v = get(key);</div><div class=\"line\">       <span class=\"keyword\">if</span> (v == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           v = put(key, value);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">return</span> v;</div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"comment\">//若键所对应的值和给定的值相同则删除</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(Object key, Object value)</span> </span>&#123;</div><div class=\"line\">       Object curValue = get(key);</div><div class=\"line\">       <span class=\"keyword\">if</span> (!Objects.equals(curValue, value) ||</div><div class=\"line\">           (curValue == <span class=\"keyword\">null</span> &amp;&amp; !containsKey(key))) &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       remove(key);</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"comment\">//若键存在且对应的值与oldValue相同，则用新值替代</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">boolean</span> <span class=\"title\">replace</span><span class=\"params\">(K key, V oldValue, V newValue)</span> </span>&#123;</div><div class=\"line\">       Object curValue = get(key);</div><div class=\"line\">       <span class=\"keyword\">if</span> (!Objects.equals(curValue, oldValue) ||</div><div class=\"line\">           (curValue == <span class=\"keyword\">null</span> &amp;&amp; !containsKey(key))) &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       put(key, newValue);</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"comment\">//若键存在，则用给定值替代原值</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">default</span> V <span class=\"title\">replace</span><span class=\"params\">(K key, V value)</span> </span>&#123;</div><div class=\"line\">       V curValue;</div><div class=\"line\">       <span class=\"keyword\">if</span> (((curValue = get(key)) != <span class=\"keyword\">null</span>) || containsKey(key)) &#123;</div><div class=\"line\">           curValue = put(key, value);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> curValue;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>比较特别的是Map接口中还有一个接口Entry(包含key和value)，下图是Entry的抽象方法<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/collection/map/p2.png\"></p>\n<h3 id=\"AbstractMap\"><a href=\"#AbstractMap\" class=\"headerlink\" title=\"AbstractMap\"></a>AbstractMap</h3><p>上面提到了Map和Entry接口，下面说说Map的一个抽象实现AbstractMap<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractMap</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Map</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">transient</span> <span class=\"keyword\">volatile</span> Set&lt;K&gt;        keySet;</div><div class=\"line\">\t<span class=\"keyword\">transient</span> <span class=\"keyword\">volatile</span> Collection&lt;V&gt; values;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>通过查看源码发现AbstractMap中只有一个entrySet()抽象方法和一个抛出UnsupportedOperationException的put(),其余的都通过entrySet()方法实现了，可见entrySet()多么重要，entrySet()返回的就是一个包含每一个键值对组合实体的集合</p>"},{"title":"集合系列07-Vector和Stack的原理与使用","date":"2016-10-13T02:57:11.000Z","_content":"### Vector\n\nVector应该说是线程安全的ArrayList，但又不全是，由于@since 1.1 那是还没有Iterator接口，所以多了Enumeration的形式来遍历集合\n#### 基本属性\n``` java\n\tpublic class Vector<E>\n    extends AbstractList<E>\n    implements List<E>, RandomAccess, Cloneable, java.io.Serializable {\n\t\tprotected Object[] elementData;\n\t\tprotected int elementCount;\n\t\tprotected int capacityIncrement;\n\t}\n```\n\n<!--more-->\n\n这就是Vector类的几个属性，与ArrayList不同的是多了一个capacityIncrement，这就可以自定义增长数了。ArrayList增长默认的是原数组大小的一半，而Vector默认的则是原数组大小\n\n这里看看Vector比ArrayList多出来的函数吧\n``` java\n\telementAt(int index) // get(int index)\n\tsetElementAt(E e, int index) // set(E e, int index)\n\tE firstElement()\n\t\n\t//实现Enumeration形式的集合遍历\n\tpublic Enumeration<E> elements() {\n        return new Enumeration<E>() {\n            int count = 0;\n\n            public boolean hasMoreElements() {\n                return count < elementCount;\n            }\n\n            public E nextElement() {\n                synchronized (Vector.this) {\n                    if (count < elementCount) {\n                        return elementData(count++);\n                    }\n                }\n                throw new NoSuchElementException(\"Vector Enumeration\");                       \n            }\n        };\n    }\n\t\n\t//实质是将其后面的元素赋值为空\n\tpublic synchronized void setSize(int newSize) {\n        modCount++;\n        if (newSize > elementCount) {\n            ensureCapacityHelper(newSize);\n        } else {\n            for (int i = newSize ; i < elementCount ; i++) {\n                elementData[i] = null;\n            }\n        }\n        elementCount = newSize;\n    }\n\t\n\t//查看动态数组的容量大小\n\tpublic synchronized int capacity() {\n        return elementData.length;\n    }\t\n```\n\n### Stack\n\nStack类其实还是比较简单的，就几个栈方法。栈在数据结构中为先进后出\n``` java\n\tpublic class Stack<E> extends Vector<E> {\n\t\t//进栈其实调用的就是Vector的addElement\n\t\tpublic E push(E item) {\n\t\t\taddElement(item);\n\n\t\t\treturn item;\n\t\t}\n\t\t\n\t\t//出栈\n\t\tpublic synchronized E pop() {\n\t\t\tE       obj;\n\t\t\tint     len = size();\n\n\t\t\tobj = peek();\n\t\t\tremoveElementAt(len - 1);\n\n\t\t\treturn obj;\n\t\t}\n\t\t\n\t\tpublic synchronized E peek() {\n\t\t\tint     len = size();\n\n\t\t\tif (len == 0)\n\t\t\t\tthrow new EmptyStackException();                                     \n\t\t\treturn elementAt(len - 1);\n\t\t}\n\t\t\n\t\t//因为是栈的原因，是从后往前找\n\t\tpublic synchronized int search(Object o) {\n\t\t\tint i = lastIndexOf(o);\n\n\t\t\tif (i >= 0) {\n\t\t\t\treturn size() - i;\n\t\t\t}\n\t\t\treturn -1;\n\t\t}\n\t}\n```\n","source":"_posts/collection_vector-stack.md","raw":"---\ntitle: 集合系列07-Vector和Stack的原理与使用\ndate: 2016-10-13 10:57:11\ntags:\n\t- Collection\n---\n### Vector\n\nVector应该说是线程安全的ArrayList，但又不全是，由于@since 1.1 那是还没有Iterator接口，所以多了Enumeration的形式来遍历集合\n#### 基本属性\n``` java\n\tpublic class Vector<E>\n    extends AbstractList<E>\n    implements List<E>, RandomAccess, Cloneable, java.io.Serializable {\n\t\tprotected Object[] elementData;\n\t\tprotected int elementCount;\n\t\tprotected int capacityIncrement;\n\t}\n```\n\n<!--more-->\n\n这就是Vector类的几个属性，与ArrayList不同的是多了一个capacityIncrement，这就可以自定义增长数了。ArrayList增长默认的是原数组大小的一半，而Vector默认的则是原数组大小\n\n这里看看Vector比ArrayList多出来的函数吧\n``` java\n\telementAt(int index) // get(int index)\n\tsetElementAt(E e, int index) // set(E e, int index)\n\tE firstElement()\n\t\n\t//实现Enumeration形式的集合遍历\n\tpublic Enumeration<E> elements() {\n        return new Enumeration<E>() {\n            int count = 0;\n\n            public boolean hasMoreElements() {\n                return count < elementCount;\n            }\n\n            public E nextElement() {\n                synchronized (Vector.this) {\n                    if (count < elementCount) {\n                        return elementData(count++);\n                    }\n                }\n                throw new NoSuchElementException(\"Vector Enumeration\");                       \n            }\n        };\n    }\n\t\n\t//实质是将其后面的元素赋值为空\n\tpublic synchronized void setSize(int newSize) {\n        modCount++;\n        if (newSize > elementCount) {\n            ensureCapacityHelper(newSize);\n        } else {\n            for (int i = newSize ; i < elementCount ; i++) {\n                elementData[i] = null;\n            }\n        }\n        elementCount = newSize;\n    }\n\t\n\t//查看动态数组的容量大小\n\tpublic synchronized int capacity() {\n        return elementData.length;\n    }\t\n```\n\n### Stack\n\nStack类其实还是比较简单的，就几个栈方法。栈在数据结构中为先进后出\n``` java\n\tpublic class Stack<E> extends Vector<E> {\n\t\t//进栈其实调用的就是Vector的addElement\n\t\tpublic E push(E item) {\n\t\t\taddElement(item);\n\n\t\t\treturn item;\n\t\t}\n\t\t\n\t\t//出栈\n\t\tpublic synchronized E pop() {\n\t\t\tE       obj;\n\t\t\tint     len = size();\n\n\t\t\tobj = peek();\n\t\t\tremoveElementAt(len - 1);\n\n\t\t\treturn obj;\n\t\t}\n\t\t\n\t\tpublic synchronized E peek() {\n\t\t\tint     len = size();\n\n\t\t\tif (len == 0)\n\t\t\t\tthrow new EmptyStackException();                                     \n\t\t\treturn elementAt(len - 1);\n\t\t}\n\t\t\n\t\t//因为是栈的原因，是从后往前找\n\t\tpublic synchronized int search(Object o) {\n\t\t\tint i = lastIndexOf(o);\n\n\t\t\tif (i >= 0) {\n\t\t\t\treturn size() - i;\n\t\t\t}\n\t\t\treturn -1;\n\t\t}\n\t}\n```\n","slug":"collection_vector-stack","published":1,"updated":"2017-03-08T11:50:49.383Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5c2000kqoq1wfbs92jq","content":"<h3 id=\"Vector\"><a href=\"#Vector\" class=\"headerlink\" title=\"Vector\"></a>Vector</h3><p>Vector应该说是线程安全的ArrayList，但又不全是，由于@since 1.1 那是还没有Iterator接口，所以多了Enumeration的形式来遍历集合</p>\n<h4 id=\"基本属性\"><a href=\"#基本属性\" class=\"headerlink\" title=\"基本属性\"></a>基本属性</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vector</span>&lt;<span class=\"title\">E</span>&gt;</span></div><div class=\"line\">   <span class=\"keyword\">extends</span> <span class=\"title\">AbstractList</span>&lt;<span class=\"title\">E</span>&gt;</div><div class=\"line\">   <span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">RandomAccess</span>, <span class=\"title\">Cloneable</span>, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">protected</span> Object[] elementData;</div><div class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> elementCount;</div><div class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> capacityIncrement;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>这就是Vector类的几个属性，与ArrayList不同的是多了一个capacityIncrement，这就可以自定义增长数了。ArrayList增长默认的是原数组大小的一半，而Vector默认的则是原数组大小</p>\n<p>这里看看Vector比ArrayList多出来的函数吧<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">elementAt(<span class=\"keyword\">int</span> index) <span class=\"comment\">// get(int index)</span></div><div class=\"line\">setElementAt(E e, <span class=\"keyword\">int</span> index) <span class=\"comment\">// set(E e, int index)</span></div><div class=\"line\"><span class=\"function\">E <span class=\"title\">firstElement</span><span class=\"params\">()</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//实现Enumeration形式的集合遍历</span></div><div class=\"line\"><span class=\"keyword\">public</span> Enumeration&lt;E&gt; <span class=\"title\">elements</span><span class=\"params\">()</span> &#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Enumeration&lt;E&gt;() &#123;</div><div class=\"line\">           <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasMoreElements</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">               <span class=\"keyword\">return</span> count &lt; elementCount;</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">nextElement</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">               <span class=\"keyword\">synchronized</span> (Vector.<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">                   <span class=\"keyword\">if</span> (count &lt; elementCount) &#123;</div><div class=\"line\">                       <span class=\"keyword\">return</span> elementData(count++);</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;</div><div class=\"line\">               <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException(<span class=\"string\">\"Vector Enumeration\"</span>);                       </div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//实质是将其后面的元素赋值为空</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">setSize</span><span class=\"params\">(<span class=\"keyword\">int</span> newSize)</span> </span>&#123;</div><div class=\"line\">       modCount++;</div><div class=\"line\">       <span class=\"keyword\">if</span> (newSize &gt; elementCount) &#123;</div><div class=\"line\">           ensureCapacityHelper(newSize);</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = newSize ; i &lt; elementCount ; i++) &#123;</div><div class=\"line\">               elementData[i] = <span class=\"keyword\">null</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       elementCount = newSize;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//查看动态数组的容量大小</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">int</span> <span class=\"title\">capacity</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> elementData.length;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Stack\"><a href=\"#Stack\" class=\"headerlink\" title=\"Stack\"></a>Stack</h3><p>Stack类其实还是比较简单的，就几个栈方法。栈在数据结构中为先进后出<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stack</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Vector</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//进栈其实调用的就是Vector的addElement</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">push</span><span class=\"params\">(E item)</span> </span>&#123;</div><div class=\"line\">\t\taddElement(item);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> item;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//出栈</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> E <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tE       obj;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>     len = size();</div><div class=\"line\"></div><div class=\"line\">\t\tobj = peek();</div><div class=\"line\">\t\tremoveElementAt(len - <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> obj;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> E <span class=\"title\">peek</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>     len = size();</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (len == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> EmptyStackException();                                     </div><div class=\"line\">\t\t<span class=\"keyword\">return</span> elementAt(len - <span class=\"number\">1</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//因为是栈的原因，是从后往前找</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">int</span> <span class=\"title\">search</span><span class=\"params\">(Object o)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> i = lastIndexOf(o);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (i &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> size() - i;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<h3 id=\"Vector\"><a href=\"#Vector\" class=\"headerlink\" title=\"Vector\"></a>Vector</h3><p>Vector应该说是线程安全的ArrayList，但又不全是，由于@since 1.1 那是还没有Iterator接口，所以多了Enumeration的形式来遍历集合</p>\n<h4 id=\"基本属性\"><a href=\"#基本属性\" class=\"headerlink\" title=\"基本属性\"></a>基本属性</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vector</span>&lt;<span class=\"title\">E</span>&gt;</div><div class=\"line\">   <span class=\"keyword\">extends</span> <span class=\"title\">AbstractList</span>&lt;<span class=\"title\">E</span>&gt;</div><div class=\"line\">   <span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">RandomAccess</span>, <span class=\"title\">Cloneable</span>, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">protected</span> Object[] elementData;</div><div class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> elementCount;</div><div class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> capacityIncrement;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","more":"<p>这就是Vector类的几个属性，与ArrayList不同的是多了一个capacityIncrement，这就可以自定义增长数了。ArrayList增长默认的是原数组大小的一半，而Vector默认的则是原数组大小</p>\n<p>这里看看Vector比ArrayList多出来的函数吧<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">elementAt(<span class=\"keyword\">int</span> index) <span class=\"comment\">// get(int index)</span></div><div class=\"line\">setElementAt(E e, <span class=\"keyword\">int</span> index) <span class=\"comment\">// set(E e, int index)</span></div><div class=\"line\"><span class=\"function\">E <span class=\"title\">firstElement</span><span class=\"params\">()</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//实现Enumeration形式的集合遍历</span></div><div class=\"line\"><span class=\"keyword\">public</span> Enumeration&lt;E&gt; <span class=\"title\">elements</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Enumeration&lt;E&gt;() &#123;</div><div class=\"line\">           <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasMoreElements</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">               <span class=\"keyword\">return</span> count &lt; elementCount;</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">nextElement</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">               <span class=\"keyword\">synchronized</span> (Vector.<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">                   <span class=\"keyword\">if</span> (count &lt; elementCount) &#123;</div><div class=\"line\">                       <span class=\"keyword\">return</span> elementData(count++);</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;</div><div class=\"line\">               <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException(<span class=\"string\">\"Vector Enumeration\"</span>);                       </div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//实质是将其后面的元素赋值为空</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">setSize</span><span class=\"params\">(<span class=\"keyword\">int</span> newSize)</span> </span>&#123;</div><div class=\"line\">       modCount++;</div><div class=\"line\">       <span class=\"keyword\">if</span> (newSize &gt; elementCount) &#123;</div><div class=\"line\">           ensureCapacityHelper(newSize);</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = newSize ; i &lt; elementCount ; i++) &#123;</div><div class=\"line\">               elementData[i] = <span class=\"keyword\">null</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       elementCount = newSize;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//查看动态数组的容量大小</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">int</span> <span class=\"title\">capacity</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> elementData.length;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Stack\"><a href=\"#Stack\" class=\"headerlink\" title=\"Stack\"></a>Stack</h3><p>Stack类其实还是比较简单的，就几个栈方法。栈在数据结构中为先进后出<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stack</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Vector</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//进栈其实调用的就是Vector的addElement</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">push</span><span class=\"params\">(E item)</span> </span>&#123;</div><div class=\"line\">\t\taddElement(item);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> item;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//出栈</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> E <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tE       obj;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>     len = size();</div><div class=\"line\"></div><div class=\"line\">\t\tobj = peek();</div><div class=\"line\">\t\tremoveElementAt(len - <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> obj;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> E <span class=\"title\">peek</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>     len = size();</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (len == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> EmptyStackException();                                     </div><div class=\"line\">\t\t<span class=\"keyword\">return</span> elementAt(len - <span class=\"number\">1</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//因为是栈的原因，是从后往前找</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">int</span> <span class=\"title\">search</span><span class=\"params\">(Object o)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> i = lastIndexOf(o);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (i &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> size() - i;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"号角已经吹响","date":"2016-12-25T10:32:51.000Z","_content":"伴随着今天下午的一声铃响，2017年考研初试结束，2018年考研也将隆重登场，号角已经吹响，作为一个战士，你准备好冲锋了吗？\n\n<!--more-->\n\n说来也是好笑，曾经的自己是那么的信誓旦旦：我打死都不会考虑考研的……或许是没有被打死吧。如今的我也开始走上了这条不归路。也不知道自己是什么开始有这种想法的,或许是从高考结束查到自己分数的时候，又或许是来到现在的学校吧\n\n曾经问过学长和师长，考研和就业，那条路更好。有人说考研好，也有人说就业更合适。其实现在想想，不管他们给出的答案如何，还是要谢谢他们，至少他们给出了一个明确的答案，而不是模棱两可的回答。他们是真正把我当作朋友，才这么说的。而不是可以也不可以避免我以后抱怨\n\n你到底想怎么样？我也不止一次这样问过自己。我不奢求大富大贵，但也不希望就这样庸庸碌碌地过完一生。而考研将是你的下一个十字路口\n\n我不是天之骄子，所以我不去触摸我达不到的顶端，我只是一个有着自己小小梦想的人。特别喜欢这句从书上看到的话，我不屑于触手可及的果实，因为它没有承载着自己的努力，我喜欢的果实是需要垫垫脚，甚至是跳一跳才能够得到的苹果。所以北工大，你准备好了我的到来吗？\n\n既然选择了远方，就只顾风雨兼程。我也知道北工大对于我来说也是一个不小的挑战，甚至会失败，但是为什么要去想呢？只有努力，才有可能实现，想想是不会解决任何问题，反而增添烦恼。看一年后的结果吧。时光不会辜负任何人，反而会更偏爱努力的人\n\n你现在的生活是你三年前努力的结果，想想也是，为什么自己当初不努力一把呢？我没有时光机，不可能重新再来，我只能沿着我的选择大步朝前走……哪怕路途再艰辛，因为这是你以前的选择，当然，你也可以改变选择，但是所付出的代价你也必须承受。努力吧，少年;努力吧，少年;努力吧，少年;你现在的努力就是你三年后的结果\n\n最后用孟子的话与己共勉 ：天降大任于斯人也，必先苦其心志，劳其筋骨，饿其体肤，空乏其身，行拂乱其所为也，所以动心忍性，增益其所不能\n","source":"_posts/essay_bugle-sounded.md","raw":"---\ntitle: 号角已经吹响\ndate: 2016-12-25 18:32:51\ntags:\n\t- 随笔 \n---\n伴随着今天下午的一声铃响，2017年考研初试结束，2018年考研也将隆重登场，号角已经吹响，作为一个战士，你准备好冲锋了吗？\n\n<!--more-->\n\n说来也是好笑，曾经的自己是那么的信誓旦旦：我打死都不会考虑考研的……或许是没有被打死吧。如今的我也开始走上了这条不归路。也不知道自己是什么开始有这种想法的,或许是从高考结束查到自己分数的时候，又或许是来到现在的学校吧\n\n曾经问过学长和师长，考研和就业，那条路更好。有人说考研好，也有人说就业更合适。其实现在想想，不管他们给出的答案如何，还是要谢谢他们，至少他们给出了一个明确的答案，而不是模棱两可的回答。他们是真正把我当作朋友，才这么说的。而不是可以也不可以避免我以后抱怨\n\n你到底想怎么样？我也不止一次这样问过自己。我不奢求大富大贵，但也不希望就这样庸庸碌碌地过完一生。而考研将是你的下一个十字路口\n\n我不是天之骄子，所以我不去触摸我达不到的顶端，我只是一个有着自己小小梦想的人。特别喜欢这句从书上看到的话，我不屑于触手可及的果实，因为它没有承载着自己的努力，我喜欢的果实是需要垫垫脚，甚至是跳一跳才能够得到的苹果。所以北工大，你准备好了我的到来吗？\n\n既然选择了远方，就只顾风雨兼程。我也知道北工大对于我来说也是一个不小的挑战，甚至会失败，但是为什么要去想呢？只有努力，才有可能实现，想想是不会解决任何问题，反而增添烦恼。看一年后的结果吧。时光不会辜负任何人，反而会更偏爱努力的人\n\n你现在的生活是你三年前努力的结果，想想也是，为什么自己当初不努力一把呢？我没有时光机，不可能重新再来，我只能沿着我的选择大步朝前走……哪怕路途再艰辛，因为这是你以前的选择，当然，你也可以改变选择，但是所付出的代价你也必须承受。努力吧，少年;努力吧，少年;努力吧，少年;你现在的努力就是你三年后的结果\n\n最后用孟子的话与己共勉 ：天降大任于斯人也，必先苦其心志，劳其筋骨，饿其体肤，空乏其身，行拂乱其所为也，所以动心忍性，增益其所不能\n","slug":"essay_bugle-sounded","published":1,"updated":"2017-02-20T12:34:01.528Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5c3000nqoq1863ltuse","content":"<p>伴随着今天下午的一声铃响，2017年考研初试结束，2018年考研也将隆重登场，号角已经吹响，作为一个战士，你准备好冲锋了吗？</p>\n<a id=\"more\"></a>\n<p>说来也是好笑，曾经的自己是那么的信誓旦旦：我打死都不会考虑考研的……或许是没有被打死吧。如今的我也开始走上了这条不归路。也不知道自己是什么开始有这种想法的,或许是从高考结束查到自己分数的时候，又或许是来到现在的学校吧</p>\n<p>曾经问过学长和师长，考研和就业，那条路更好。有人说考研好，也有人说就业更合适。其实现在想想，不管他们给出的答案如何，还是要谢谢他们，至少他们给出了一个明确的答案，而不是模棱两可的回答。他们是真正把我当作朋友，才这么说的。而不是可以也不可以避免我以后抱怨</p>\n<p>你到底想怎么样？我也不止一次这样问过自己。我不奢求大富大贵，但也不希望就这样庸庸碌碌地过完一生。而考研将是你的下一个十字路口</p>\n<p>我不是天之骄子，所以我不去触摸我达不到的顶端，我只是一个有着自己小小梦想的人。特别喜欢这句从书上看到的话，我不屑于触手可及的果实，因为它没有承载着自己的努力，我喜欢的果实是需要垫垫脚，甚至是跳一跳才能够得到的苹果。所以北工大，你准备好了我的到来吗？</p>\n<p>既然选择了远方，就只顾风雨兼程。我也知道北工大对于我来说也是一个不小的挑战，甚至会失败，但是为什么要去想呢？只有努力，才有可能实现，想想是不会解决任何问题，反而增添烦恼。看一年后的结果吧。时光不会辜负任何人，反而会更偏爱努力的人</p>\n<p>你现在的生活是你三年前努力的结果，想想也是，为什么自己当初不努力一把呢？我没有时光机，不可能重新再来，我只能沿着我的选择大步朝前走……哪怕路途再艰辛，因为这是你以前的选择，当然，你也可以改变选择，但是所付出的代价你也必须承受。努力吧，少年;努力吧，少年;努力吧，少年;你现在的努力就是你三年后的结果</p>\n<p>最后用孟子的话与己共勉 ：天降大任于斯人也，必先苦其心志，劳其筋骨，饿其体肤，空乏其身，行拂乱其所为也，所以动心忍性，增益其所不能</p>\n","excerpt":"<p>伴随着今天下午的一声铃响，2017年考研初试结束，2018年考研也将隆重登场，号角已经吹响，作为一个战士，你准备好冲锋了吗？</p>","more":"<p>说来也是好笑，曾经的自己是那么的信誓旦旦：我打死都不会考虑考研的……或许是没有被打死吧。如今的我也开始走上了这条不归路。也不知道自己是什么开始有这种想法的,或许是从高考结束查到自己分数的时候，又或许是来到现在的学校吧</p>\n<p>曾经问过学长和师长，考研和就业，那条路更好。有人说考研好，也有人说就业更合适。其实现在想想，不管他们给出的答案如何，还是要谢谢他们，至少他们给出了一个明确的答案，而不是模棱两可的回答。他们是真正把我当作朋友，才这么说的。而不是可以也不可以避免我以后抱怨</p>\n<p>你到底想怎么样？我也不止一次这样问过自己。我不奢求大富大贵，但也不希望就这样庸庸碌碌地过完一生。而考研将是你的下一个十字路口</p>\n<p>我不是天之骄子，所以我不去触摸我达不到的顶端，我只是一个有着自己小小梦想的人。特别喜欢这句从书上看到的话，我不屑于触手可及的果实，因为它没有承载着自己的努力，我喜欢的果实是需要垫垫脚，甚至是跳一跳才能够得到的苹果。所以北工大，你准备好了我的到来吗？</p>\n<p>既然选择了远方，就只顾风雨兼程。我也知道北工大对于我来说也是一个不小的挑战，甚至会失败，但是为什么要去想呢？只有努力，才有可能实现，想想是不会解决任何问题，反而增添烦恼。看一年后的结果吧。时光不会辜负任何人，反而会更偏爱努力的人</p>\n<p>你现在的生活是你三年前努力的结果，想想也是，为什么自己当初不努力一把呢？我没有时光机，不可能重新再来，我只能沿着我的选择大步朝前走……哪怕路途再艰辛，因为这是你以前的选择，当然，你也可以改变选择，但是所付出的代价你也必须承受。努力吧，少年;努力吧，少年;努力吧，少年;你现在的努力就是你三年后的结果</p>\n<p>最后用孟子的话与己共勉 ：天降大任于斯人也，必先苦其心志，劳其筋骨，饿其体肤，空乏其身，行拂乱其所为也，所以动心忍性，增益其所不能</p>"},{"title":"千年老二","date":"2016-08-24T13:21:58.000Z","_content":"世人都知道1953年5月29日，英国登山队在队长约·汉特领导下，实现了人类第一次登上珠峰之巅，可又有谁能够了解第二个登顶的团队呢？事实就是这样：第一、第一个永远都戴着光环，背世人所记，可是第二却无人问津。在体育竞技更是如此\n{% qnimg essay/millenary_second/p1.jpg 'class:class1 class2' normal:yes %}\n\n<!--more-->\n\n我永远都忘不了那个瞬间：在王义夫2000奥运会获得银牌回国后回忆说：“当我结束赛事，回国到机场时，所有记者都去采访奥运冠军，我当时真的想找到一个地洞钻进去”。终于2004年雅典奥运会，王义夫再次获得冠军结束了他27年的射击生涯\n{% qnimg essay/millenary_second/p2.jpg 'class:class1 class2' normal:yes %}\n\n可是有一个世界亚军却让人永远记住了。那就是千年老二——李宗伟\n\n### 败者为王\n\n李宗伟11岁接触羽毛球，仅用6年的时间进入国家队。1999年，参加马来西亚全国羽毛球锦标赛，获得冠军，从此在世界赛事展露头角，2006年连续第三年赢得中国羽毛球公开赛。世界排名力压中国选手林丹排名第一。随后，因为伤病，陷入低迷期。\n\n2008年北京奥运会不敌林丹获得银牌。年底，李宗伟的世界排名再次超越林丹，位居第一。2009年，李宗伟赢得中国羽毛球公开赛，在全英赛杀进决赛，再次对到林丹，林丹再次直下两局打败李宗伟。李宗伟在2009年赢得瑞士羽毛球公开赛，印尼羽毛球公开赛，中国羽毛球黄金大奖赛，香港羽毛球超级赛及成功卫冕世界羽联超级系列赛总决赛。2010年，是李宗伟收获最多的一年，先后赢得十项国际公开赛冠军，并赢得自己第一个全英赛男单冠军，稳居世界排名第一。\n\n2012年韩国羽毛球公开赛，李宗伟在职业生涯中首次逆转林丹，赢得2012年新赛季的第一个首要超级赛冠军。2012年中国羽毛球公开赛开打，李宗伟在中国羽毛球公开赛称霸八连冠。同年在伦敦奥运会羽毛球男子单打决赛中再度对阵林丹，与林丹苦战三局，以2-1（15-21、21-10、21-19）最终败给林丹，再获奥运会银牌\n\n2016里约奥运会半决赛以2:1打败林丹晋级决赛，在决赛中0:2不敌谌龙再获奥运会银牌\n{% qnimg essay/millenary_second/p4.jpg 'class:class1 class2' normal:yes %}\n\n### 世界欠你一个冠军\n\n在中国广州举行的2013年世界羽毛球锦标赛是李宗伟夺冠的好时机。决赛中，是李宗伟今年首次与林丹交手。第一局在顺风向的场地以21-16先拔头筹。第二局，大会被称关闭了空调，赛后世界羽联表示空调一直在低速运转并无关闭，由于决赛观看人数多使球馆的温度升高，李宗伟及教练称受到温度、湿度和风向严重影响以致失去优势导致13-21败下阵来。第三局技术暂停时，林丹更换不同颜色的球衣，赛后其教练指责林丹触犯比赛规则打心理战。最后一局在李宗伟以16-19落后时，跨步接球时大腿突然抽筋，坚持后最终还是放弃，比赛结束后教练表示李宗伟是因为温度的提升和闷热而导致的。李宗伟在17-20落后时选择退赛，直接送往医院，缺席颁奖礼。\n\n2014年8月，李宗伟在丹麦哥本哈根举行的世界羽毛球锦标赛再次打进男单决赛，对战次号种子、中国的谌龙。在本届赛事中，李宗伟从首轮至半决赛都以两局横扫对手，可是他在决赛却没有打出应有的进攻节奏，处处受制对手。结果，在力拼69分钟后，他以直落两局19-21不敌谌龙，连续3届在决赛落败，屈居亚军。赛后，他承认自己打得太保守，并扬言希望在退休前争取拿到一次世界冠军。\n\n多年稳居世界排名第一，可却从未获得一次世界冠军。这是羽毛球欠你的\n{% qnimg essay/millenary_second/p5.jpg 'class:class1 class2' normal:yes %}\n\n### 为梦而努力\n\n世界冠军一直是你的梦想，你也一直为此努力着，为此，这么多年你四处征战，可是天不遂人愿。可是在每一个羽毛球爱好者的心中，你都是当之无愧的世界冠军，你一次次带给我们羽毛球盛宴，你一次次为梦想而追逐，感染着我每个人，让我们在一次次失败中有着继续为梦想而努力的勇气。有梦想的人所向披靡\n{% qnimg essay/millenary_second/p3.jpg 'class:class1 class2' normal:yes %}","source":"_posts/essay_millenary-second.md","raw":"---\ntitle: 千年老二\ndate: 2016-08-24 21:21:58\ntags:\n\t- 随笔\n---\n世人都知道1953年5月29日，英国登山队在队长约·汉特领导下，实现了人类第一次登上珠峰之巅，可又有谁能够了解第二个登顶的团队呢？事实就是这样：第一、第一个永远都戴着光环，背世人所记，可是第二却无人问津。在体育竞技更是如此\n{% qnimg essay/millenary_second/p1.jpg 'class:class1 class2' normal:yes %}\n\n<!--more-->\n\n我永远都忘不了那个瞬间：在王义夫2000奥运会获得银牌回国后回忆说：“当我结束赛事，回国到机场时，所有记者都去采访奥运冠军，我当时真的想找到一个地洞钻进去”。终于2004年雅典奥运会，王义夫再次获得冠军结束了他27年的射击生涯\n{% qnimg essay/millenary_second/p2.jpg 'class:class1 class2' normal:yes %}\n\n可是有一个世界亚军却让人永远记住了。那就是千年老二——李宗伟\n\n### 败者为王\n\n李宗伟11岁接触羽毛球，仅用6年的时间进入国家队。1999年，参加马来西亚全国羽毛球锦标赛，获得冠军，从此在世界赛事展露头角，2006年连续第三年赢得中国羽毛球公开赛。世界排名力压中国选手林丹排名第一。随后，因为伤病，陷入低迷期。\n\n2008年北京奥运会不敌林丹获得银牌。年底，李宗伟的世界排名再次超越林丹，位居第一。2009年，李宗伟赢得中国羽毛球公开赛，在全英赛杀进决赛，再次对到林丹，林丹再次直下两局打败李宗伟。李宗伟在2009年赢得瑞士羽毛球公开赛，印尼羽毛球公开赛，中国羽毛球黄金大奖赛，香港羽毛球超级赛及成功卫冕世界羽联超级系列赛总决赛。2010年，是李宗伟收获最多的一年，先后赢得十项国际公开赛冠军，并赢得自己第一个全英赛男单冠军，稳居世界排名第一。\n\n2012年韩国羽毛球公开赛，李宗伟在职业生涯中首次逆转林丹，赢得2012年新赛季的第一个首要超级赛冠军。2012年中国羽毛球公开赛开打，李宗伟在中国羽毛球公开赛称霸八连冠。同年在伦敦奥运会羽毛球男子单打决赛中再度对阵林丹，与林丹苦战三局，以2-1（15-21、21-10、21-19）最终败给林丹，再获奥运会银牌\n\n2016里约奥运会半决赛以2:1打败林丹晋级决赛，在决赛中0:2不敌谌龙再获奥运会银牌\n{% qnimg essay/millenary_second/p4.jpg 'class:class1 class2' normal:yes %}\n\n### 世界欠你一个冠军\n\n在中国广州举行的2013年世界羽毛球锦标赛是李宗伟夺冠的好时机。决赛中，是李宗伟今年首次与林丹交手。第一局在顺风向的场地以21-16先拔头筹。第二局，大会被称关闭了空调，赛后世界羽联表示空调一直在低速运转并无关闭，由于决赛观看人数多使球馆的温度升高，李宗伟及教练称受到温度、湿度和风向严重影响以致失去优势导致13-21败下阵来。第三局技术暂停时，林丹更换不同颜色的球衣，赛后其教练指责林丹触犯比赛规则打心理战。最后一局在李宗伟以16-19落后时，跨步接球时大腿突然抽筋，坚持后最终还是放弃，比赛结束后教练表示李宗伟是因为温度的提升和闷热而导致的。李宗伟在17-20落后时选择退赛，直接送往医院，缺席颁奖礼。\n\n2014年8月，李宗伟在丹麦哥本哈根举行的世界羽毛球锦标赛再次打进男单决赛，对战次号种子、中国的谌龙。在本届赛事中，李宗伟从首轮至半决赛都以两局横扫对手，可是他在决赛却没有打出应有的进攻节奏，处处受制对手。结果，在力拼69分钟后，他以直落两局19-21不敌谌龙，连续3届在决赛落败，屈居亚军。赛后，他承认自己打得太保守，并扬言希望在退休前争取拿到一次世界冠军。\n\n多年稳居世界排名第一，可却从未获得一次世界冠军。这是羽毛球欠你的\n{% qnimg essay/millenary_second/p5.jpg 'class:class1 class2' normal:yes %}\n\n### 为梦而努力\n\n世界冠军一直是你的梦想，你也一直为此努力着，为此，这么多年你四处征战，可是天不遂人愿。可是在每一个羽毛球爱好者的心中，你都是当之无愧的世界冠军，你一次次带给我们羽毛球盛宴，你一次次为梦想而追逐，感染着我每个人，让我们在一次次失败中有着继续为梦想而努力的勇气。有梦想的人所向披靡\n{% qnimg essay/millenary_second/p3.jpg 'class:class1 class2' normal:yes %}","slug":"essay_millenary-second","published":1,"updated":"2016-12-27T22:13:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5c5000pqoq1y86kj3og","content":"<p>世人都知道1953年5月29日，英国登山队在队长约·汉特领导下，实现了人类第一次登上珠峰之巅，可又有谁能够了解第二个登顶的团队呢？事实就是这样：第一、第一个永远都戴着光环，背世人所记，可是第二却无人问津。在体育竞技更是如此<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/essay/millenary_second/p1.jpg\"></p>\n<a id=\"more\"></a>\n<p>我永远都忘不了那个瞬间：在王义夫2000奥运会获得银牌回国后回忆说：“当我结束赛事，回国到机场时，所有记者都去采访奥运冠军，我当时真的想找到一个地洞钻进去”。终于2004年雅典奥运会，王义夫再次获得冠军结束了他27年的射击生涯<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/essay/millenary_second/p2.jpg\"></p>\n<p>可是有一个世界亚军却让人永远记住了。那就是千年老二——李宗伟</p>\n<h3 id=\"败者为王\"><a href=\"#败者为王\" class=\"headerlink\" title=\"败者为王\"></a>败者为王</h3><p>李宗伟11岁接触羽毛球，仅用6年的时间进入国家队。1999年，参加马来西亚全国羽毛球锦标赛，获得冠军，从此在世界赛事展露头角，2006年连续第三年赢得中国羽毛球公开赛。世界排名力压中国选手林丹排名第一。随后，因为伤病，陷入低迷期。</p>\n<p>2008年北京奥运会不敌林丹获得银牌。年底，李宗伟的世界排名再次超越林丹，位居第一。2009年，李宗伟赢得中国羽毛球公开赛，在全英赛杀进决赛，再次对到林丹，林丹再次直下两局打败李宗伟。李宗伟在2009年赢得瑞士羽毛球公开赛，印尼羽毛球公开赛，中国羽毛球黄金大奖赛，香港羽毛球超级赛及成功卫冕世界羽联超级系列赛总决赛。2010年，是李宗伟收获最多的一年，先后赢得十项国际公开赛冠军，并赢得自己第一个全英赛男单冠军，稳居世界排名第一。</p>\n<p>2012年韩国羽毛球公开赛，李宗伟在职业生涯中首次逆转林丹，赢得2012年新赛季的第一个首要超级赛冠军。2012年中国羽毛球公开赛开打，李宗伟在中国羽毛球公开赛称霸八连冠。同年在伦敦奥运会羽毛球男子单打决赛中再度对阵林丹，与林丹苦战三局，以2-1（15-21、21-10、21-19）最终败给林丹，再获奥运会银牌</p>\n<p>2016里约奥运会半决赛以2:1打败林丹晋级决赛，在决赛中0:2不敌谌龙再获奥运会银牌<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/essay/millenary_second/p4.jpg\"></p>\n<h3 id=\"世界欠你一个冠军\"><a href=\"#世界欠你一个冠军\" class=\"headerlink\" title=\"世界欠你一个冠军\"></a>世界欠你一个冠军</h3><p>在中国广州举行的2013年世界羽毛球锦标赛是李宗伟夺冠的好时机。决赛中，是李宗伟今年首次与林丹交手。第一局在顺风向的场地以21-16先拔头筹。第二局，大会被称关闭了空调，赛后世界羽联表示空调一直在低速运转并无关闭，由于决赛观看人数多使球馆的温度升高，李宗伟及教练称受到温度、湿度和风向严重影响以致失去优势导致13-21败下阵来。第三局技术暂停时，林丹更换不同颜色的球衣，赛后其教练指责林丹触犯比赛规则打心理战。最后一局在李宗伟以16-19落后时，跨步接球时大腿突然抽筋，坚持后最终还是放弃，比赛结束后教练表示李宗伟是因为温度的提升和闷热而导致的。李宗伟在17-20落后时选择退赛，直接送往医院，缺席颁奖礼。</p>\n<p>2014年8月，李宗伟在丹麦哥本哈根举行的世界羽毛球锦标赛再次打进男单决赛，对战次号种子、中国的谌龙。在本届赛事中，李宗伟从首轮至半决赛都以两局横扫对手，可是他在决赛却没有打出应有的进攻节奏，处处受制对手。结果，在力拼69分钟后，他以直落两局19-21不敌谌龙，连续3届在决赛落败，屈居亚军。赛后，他承认自己打得太保守，并扬言希望在退休前争取拿到一次世界冠军。</p>\n<p>多年稳居世界排名第一，可却从未获得一次世界冠军。这是羽毛球欠你的<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/essay/millenary_second/p5.jpg\"></p>\n<h3 id=\"为梦而努力\"><a href=\"#为梦而努力\" class=\"headerlink\" title=\"为梦而努力\"></a>为梦而努力</h3><p>世界冠军一直是你的梦想，你也一直为此努力着，为此，这么多年你四处征战，可是天不遂人愿。可是在每一个羽毛球爱好者的心中，你都是当之无愧的世界冠军，你一次次带给我们羽毛球盛宴，你一次次为梦想而追逐，感染着我每个人，让我们在一次次失败中有着继续为梦想而努力的勇气。有梦想的人所向披靡<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/essay/millenary_second/p3.jpg\"></p>\n","excerpt":"<p>世人都知道1953年5月29日，英国登山队在队长约·汉特领导下，实现了人类第一次登上珠峰之巅，可又有谁能够了解第二个登顶的团队呢？事实就是这样：第一、第一个永远都戴着光环，背世人所记，可是第二却无人问津。在体育竞技更是如此<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/essay/millenary_second/p1.jpg\"></p>","more":"<p>我永远都忘不了那个瞬间：在王义夫2000奥运会获得银牌回国后回忆说：“当我结束赛事，回国到机场时，所有记者都去采访奥运冠军，我当时真的想找到一个地洞钻进去”。终于2004年雅典奥运会，王义夫再次获得冠军结束了他27年的射击生涯<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/essay/millenary_second/p2.jpg\"></p>\n<p>可是有一个世界亚军却让人永远记住了。那就是千年老二——李宗伟</p>\n<h3 id=\"败者为王\"><a href=\"#败者为王\" class=\"headerlink\" title=\"败者为王\"></a>败者为王</h3><p>李宗伟11岁接触羽毛球，仅用6年的时间进入国家队。1999年，参加马来西亚全国羽毛球锦标赛，获得冠军，从此在世界赛事展露头角，2006年连续第三年赢得中国羽毛球公开赛。世界排名力压中国选手林丹排名第一。随后，因为伤病，陷入低迷期。</p>\n<p>2008年北京奥运会不敌林丹获得银牌。年底，李宗伟的世界排名再次超越林丹，位居第一。2009年，李宗伟赢得中国羽毛球公开赛，在全英赛杀进决赛，再次对到林丹，林丹再次直下两局打败李宗伟。李宗伟在2009年赢得瑞士羽毛球公开赛，印尼羽毛球公开赛，中国羽毛球黄金大奖赛，香港羽毛球超级赛及成功卫冕世界羽联超级系列赛总决赛。2010年，是李宗伟收获最多的一年，先后赢得十项国际公开赛冠军，并赢得自己第一个全英赛男单冠军，稳居世界排名第一。</p>\n<p>2012年韩国羽毛球公开赛，李宗伟在职业生涯中首次逆转林丹，赢得2012年新赛季的第一个首要超级赛冠军。2012年中国羽毛球公开赛开打，李宗伟在中国羽毛球公开赛称霸八连冠。同年在伦敦奥运会羽毛球男子单打决赛中再度对阵林丹，与林丹苦战三局，以2-1（15-21、21-10、21-19）最终败给林丹，再获奥运会银牌</p>\n<p>2016里约奥运会半决赛以2:1打败林丹晋级决赛，在决赛中0:2不敌谌龙再获奥运会银牌<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/essay/millenary_second/p4.jpg\"></p>\n<h3 id=\"世界欠你一个冠军\"><a href=\"#世界欠你一个冠军\" class=\"headerlink\" title=\"世界欠你一个冠军\"></a>世界欠你一个冠军</h3><p>在中国广州举行的2013年世界羽毛球锦标赛是李宗伟夺冠的好时机。决赛中，是李宗伟今年首次与林丹交手。第一局在顺风向的场地以21-16先拔头筹。第二局，大会被称关闭了空调，赛后世界羽联表示空调一直在低速运转并无关闭，由于决赛观看人数多使球馆的温度升高，李宗伟及教练称受到温度、湿度和风向严重影响以致失去优势导致13-21败下阵来。第三局技术暂停时，林丹更换不同颜色的球衣，赛后其教练指责林丹触犯比赛规则打心理战。最后一局在李宗伟以16-19落后时，跨步接球时大腿突然抽筋，坚持后最终还是放弃，比赛结束后教练表示李宗伟是因为温度的提升和闷热而导致的。李宗伟在17-20落后时选择退赛，直接送往医院，缺席颁奖礼。</p>\n<p>2014年8月，李宗伟在丹麦哥本哈根举行的世界羽毛球锦标赛再次打进男单决赛，对战次号种子、中国的谌龙。在本届赛事中，李宗伟从首轮至半决赛都以两局横扫对手，可是他在决赛却没有打出应有的进攻节奏，处处受制对手。结果，在力拼69分钟后，他以直落两局19-21不敌谌龙，连续3届在决赛落败，屈居亚军。赛后，他承认自己打得太保守，并扬言希望在退休前争取拿到一次世界冠军。</p>\n<p>多年稳居世界排名第一，可却从未获得一次世界冠军。这是羽毛球欠你的<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/essay/millenary_second/p5.jpg\"></p>\n<h3 id=\"为梦而努力\"><a href=\"#为梦而努力\" class=\"headerlink\" title=\"为梦而努力\"></a>为梦而努力</h3><p>世界冠军一直是你的梦想，你也一直为此努力着，为此，这么多年你四处征战，可是天不遂人愿。可是在每一个羽毛球爱好者的心中，你都是当之无愧的世界冠军，你一次次带给我们羽毛球盛宴，你一次次为梦想而追逐，感染着我每个人，让我们在一次次失败中有着继续为梦想而努力的勇气。有梦想的人所向披靡<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/essay/millenary_second/p3.jpg\"></p>"},{"title":"信—写给22岁的自己","date":"2017-01-16T05:26:07.000Z","_content":"感觉时间过得好快啊，一恍惚，自己都已经22岁了，18岁的成人礼宣誓和生日庆贺还历历在目，还记得儿时的戏言：自己怎么不能快点长大啊……而现在，时间好像都不是是以天为单位过的，而是以周，甚至是月\n\n<!--more-->\n\n回想20多年的生活，或因为太过久远，以致6岁前的记忆都不曾在我脑海中闪现过。若不是偶尔与父母谈及儿时，我都开始怀疑：我是不是直接从6岁开始长大的。\n\n","source":"_posts/essay_letter-to-me.md","raw":"---\ntitle: 信—写给22岁的自己 \ndate: 2017-1-16 13:26:07\ntags:\n\t- 随笔 \n---\n感觉时间过得好快啊，一恍惚，自己都已经22岁了，18岁的成人礼宣誓和生日庆贺还历历在目，还记得儿时的戏言：自己怎么不能快点长大啊……而现在，时间好像都不是是以天为单位过的，而是以周，甚至是月\n\n<!--more-->\n\n回想20多年的生活，或因为太过久远，以致6岁前的记忆都不曾在我脑海中闪现过。若不是偶尔与父母谈及儿时，我都开始怀疑：我是不是直接从6岁开始长大的。\n\n","slug":"essay_letter-to-me","published":1,"updated":"2017-03-08T10:52:15.251Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5cb000sqoq1250rd4di","content":"<p>感觉时间过得好快啊，一恍惚，自己都已经22岁了，18岁的成人礼宣誓和生日庆贺还历历在目，还记得儿时的戏言：自己怎么不能快点长大啊……而现在，时间好像都不是是以天为单位过的，而是以周，甚至是月</p>\n<a id=\"more\"></a>\n<p>回想20多年的生活，或因为太过久远，以致6岁前的记忆都不曾在我脑海中闪现过。若不是偶尔与父母谈及儿时，我都开始怀疑：我是不是直接从6岁开始长大的。</p>\n","excerpt":"<p>感觉时间过得好快啊，一恍惚，自己都已经22岁了，18岁的成人礼宣誓和生日庆贺还历历在目，还记得儿时的戏言：自己怎么不能快点长大啊……而现在，时间好像都不是是以天为单位过的，而是以周，甚至是月</p>","more":"<p>回想20多年的生活，或因为太过久远，以致6岁前的记忆都不曾在我脑海中闪现过。若不是偶尔与父母谈及儿时，我都开始怀疑：我是不是直接从6岁开始长大的。</p>"},{"title":"加油，别哭","date":"2016-12-11T11:08:22.000Z","_content":"其实一直都想写点关于找实习的事，但又不知道该从何写起，所以也就拖了那么久。那就从准备到面试再到放弃实习的计划整个都再说一遍吧。\n\n<!-- more -->\n\n### 基础准备\n从开始准备去找实习到具体投简历差不多有两个月左右的时间吧。这一段时间主要复习了一些关于框架的知识,以及数据库的知识，因为之前，以体验一下的心态在哈尔滨有面试一家公司，面试主要问到的就是数据库以及sprigmvc和mybatis这两个框架的使用。当然也看了看这两个框架的基础原型\n\n### 简历及投递\n简历的填写是参考网上的模板，至于其内容嘛，自己也做过一些商城类的小项目，虽然在工作后的人眼中看来什么都算不上，但也不至于太过寒酸。毕竟我还只是一个在读学生。我记得是27号开始，在网上开始投的简历，分别在实习僧、拉钩网和大街网这3个平台上面。投了差不多一个星期，由于前两个每天有限额，每天都只能投递10个，总共加起来差不多有150份，大街网打电话面试的倒是挺多的，但通过百度和学长的咨询都为培训机构；实习僧和拉钩，有反馈不合适的有20个，被查看的有20个，打电话面试的只有一家：美团\n\n### 面试\n美团的面试有2面，都是进行的电话面试，一面的时候就和我想的完全不一样。没有问到数据库的知识，而是同步和等待队列的底层实现，以及一些C语言的知识，当然，这些都是简历上面自己所写到的，关于自己能够坚持写博客还是给加不少分，因为他提到这件事好几次了。\n如果说美团的一面给的我是吃惊，那么美团二面给我的就是彻头彻尾的打击。他问到一些算法的使用，实现，以及证明，最后还在线做了一个题目，同样的没有任何涉及关于上层框架的使用\n\n### 总结\n通过这次寻找实习的经历还是给我不少收获，自己也分析了一下差不多是以下几点导致实习计划破产\n- 专注于上层框架的使用，而忽略底层实现\n- 数据结构、算法、计算机网络知识这些底层知识选择性忽略\n- 基础技能缺乏掌握，如熟练使用Linux和熟悉一门动态语言(PHP | Python)\n- 简历书写不太规范，没有针对性，使用一份简历投递所有公司\n- 自我期望值过高，其实并没有和一些名校有实力的学生相比较\n- 实习时间过短，2个多月中间还有一个春节对于企业来说并不太理想\n- 大量公司其实并不缺人\n\n> 路漫漫其修远兮，吾将上下而求索","source":"_posts/essay_nocry.md","raw":"---\ntitle: 加油，别哭\ndate: 2016-12-11 19:08:22\ntags:\n\t- 随笔\n---\n其实一直都想写点关于找实习的事，但又不知道该从何写起，所以也就拖了那么久。那就从准备到面试再到放弃实习的计划整个都再说一遍吧。\n\n<!-- more -->\n\n### 基础准备\n从开始准备去找实习到具体投简历差不多有两个月左右的时间吧。这一段时间主要复习了一些关于框架的知识,以及数据库的知识，因为之前，以体验一下的心态在哈尔滨有面试一家公司，面试主要问到的就是数据库以及sprigmvc和mybatis这两个框架的使用。当然也看了看这两个框架的基础原型\n\n### 简历及投递\n简历的填写是参考网上的模板，至于其内容嘛，自己也做过一些商城类的小项目，虽然在工作后的人眼中看来什么都算不上，但也不至于太过寒酸。毕竟我还只是一个在读学生。我记得是27号开始，在网上开始投的简历，分别在实习僧、拉钩网和大街网这3个平台上面。投了差不多一个星期，由于前两个每天有限额，每天都只能投递10个，总共加起来差不多有150份，大街网打电话面试的倒是挺多的，但通过百度和学长的咨询都为培训机构；实习僧和拉钩，有反馈不合适的有20个，被查看的有20个，打电话面试的只有一家：美团\n\n### 面试\n美团的面试有2面，都是进行的电话面试，一面的时候就和我想的完全不一样。没有问到数据库的知识，而是同步和等待队列的底层实现，以及一些C语言的知识，当然，这些都是简历上面自己所写到的，关于自己能够坚持写博客还是给加不少分，因为他提到这件事好几次了。\n如果说美团的一面给的我是吃惊，那么美团二面给我的就是彻头彻尾的打击。他问到一些算法的使用，实现，以及证明，最后还在线做了一个题目，同样的没有任何涉及关于上层框架的使用\n\n### 总结\n通过这次寻找实习的经历还是给我不少收获，自己也分析了一下差不多是以下几点导致实习计划破产\n- 专注于上层框架的使用，而忽略底层实现\n- 数据结构、算法、计算机网络知识这些底层知识选择性忽略\n- 基础技能缺乏掌握，如熟练使用Linux和熟悉一门动态语言(PHP | Python)\n- 简历书写不太规范，没有针对性，使用一份简历投递所有公司\n- 自我期望值过高，其实并没有和一些名校有实力的学生相比较\n- 实习时间过短，2个多月中间还有一个春节对于企业来说并不太理想\n- 大量公司其实并不缺人\n\n> 路漫漫其修远兮，吾将上下而求索","slug":"essay_nocry","published":1,"updated":"2016-12-27T22:13:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5cc000uqoq1s99xhokz","content":"<p>其实一直都想写点关于找实习的事，但又不知道该从何写起，所以也就拖了那么久。那就从准备到面试再到放弃实习的计划整个都再说一遍吧。</p>\n<a id=\"more\"></a>\n<h3 id=\"基础准备\"><a href=\"#基础准备\" class=\"headerlink\" title=\"基础准备\"></a>基础准备</h3><p>从开始准备去找实习到具体投简历差不多有两个月左右的时间吧。这一段时间主要复习了一些关于框架的知识,以及数据库的知识，因为之前，以体验一下的心态在哈尔滨有面试一家公司，面试主要问到的就是数据库以及sprigmvc和mybatis这两个框架的使用。当然也看了看这两个框架的基础原型</p>\n<h3 id=\"简历及投递\"><a href=\"#简历及投递\" class=\"headerlink\" title=\"简历及投递\"></a>简历及投递</h3><p>简历的填写是参考网上的模板，至于其内容嘛，自己也做过一些商城类的小项目，虽然在工作后的人眼中看来什么都算不上，但也不至于太过寒酸。毕竟我还只是一个在读学生。我记得是27号开始，在网上开始投的简历，分别在实习僧、拉钩网和大街网这3个平台上面。投了差不多一个星期，由于前两个每天有限额，每天都只能投递10个，总共加起来差不多有150份，大街网打电话面试的倒是挺多的，但通过百度和学长的咨询都为培训机构；实习僧和拉钩，有反馈不合适的有20个，被查看的有20个，打电话面试的只有一家：美团</p>\n<h3 id=\"面试\"><a href=\"#面试\" class=\"headerlink\" title=\"面试\"></a>面试</h3><p>美团的面试有2面，都是进行的电话面试，一面的时候就和我想的完全不一样。没有问到数据库的知识，而是同步和等待队列的底层实现，以及一些C语言的知识，当然，这些都是简历上面自己所写到的，关于自己能够坚持写博客还是给加不少分，因为他提到这件事好几次了。<br>如果说美团的一面给的我是吃惊，那么美团二面给我的就是彻头彻尾的打击。他问到一些算法的使用，实现，以及证明，最后还在线做了一个题目，同样的没有任何涉及关于上层框架的使用</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>通过这次寻找实习的经历还是给我不少收获，自己也分析了一下差不多是以下几点导致实习计划破产</p>\n<ul>\n<li>专注于上层框架的使用，而忽略底层实现</li>\n<li>数据结构、算法、计算机网络知识这些底层知识选择性忽略</li>\n<li>基础技能缺乏掌握，如熟练使用Linux和熟悉一门动态语言(PHP | Python)</li>\n<li>简历书写不太规范，没有针对性，使用一份简历投递所有公司</li>\n<li>自我期望值过高，其实并没有和一些名校有实力的学生相比较</li>\n<li>实习时间过短，2个多月中间还有一个春节对于企业来说并不太理想</li>\n<li>大量公司其实并不缺人</li>\n</ul>\n<blockquote>\n<p>路漫漫其修远兮，吾将上下而求索</p>\n</blockquote>\n","excerpt":"<p>其实一直都想写点关于找实习的事，但又不知道该从何写起，所以也就拖了那么久。那就从准备到面试再到放弃实习的计划整个都再说一遍吧。</p>","more":"<h3 id=\"基础准备\"><a href=\"#基础准备\" class=\"headerlink\" title=\"基础准备\"></a>基础准备</h3><p>从开始准备去找实习到具体投简历差不多有两个月左右的时间吧。这一段时间主要复习了一些关于框架的知识,以及数据库的知识，因为之前，以体验一下的心态在哈尔滨有面试一家公司，面试主要问到的就是数据库以及sprigmvc和mybatis这两个框架的使用。当然也看了看这两个框架的基础原型</p>\n<h3 id=\"简历及投递\"><a href=\"#简历及投递\" class=\"headerlink\" title=\"简历及投递\"></a>简历及投递</h3><p>简历的填写是参考网上的模板，至于其内容嘛，自己也做过一些商城类的小项目，虽然在工作后的人眼中看来什么都算不上，但也不至于太过寒酸。毕竟我还只是一个在读学生。我记得是27号开始，在网上开始投的简历，分别在实习僧、拉钩网和大街网这3个平台上面。投了差不多一个星期，由于前两个每天有限额，每天都只能投递10个，总共加起来差不多有150份，大街网打电话面试的倒是挺多的，但通过百度和学长的咨询都为培训机构；实习僧和拉钩，有反馈不合适的有20个，被查看的有20个，打电话面试的只有一家：美团</p>\n<h3 id=\"面试\"><a href=\"#面试\" class=\"headerlink\" title=\"面试\"></a>面试</h3><p>美团的面试有2面，都是进行的电话面试，一面的时候就和我想的完全不一样。没有问到数据库的知识，而是同步和等待队列的底层实现，以及一些C语言的知识，当然，这些都是简历上面自己所写到的，关于自己能够坚持写博客还是给加不少分，因为他提到这件事好几次了。<br>如果说美团的一面给的我是吃惊，那么美团二面给我的就是彻头彻尾的打击。他问到一些算法的使用，实现，以及证明，最后还在线做了一个题目，同样的没有任何涉及关于上层框架的使用</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>通过这次寻找实习的经历还是给我不少收获，自己也分析了一下差不多是以下几点导致实习计划破产</p>\n<ul>\n<li>专注于上层框架的使用，而忽略底层实现</li>\n<li>数据结构、算法、计算机网络知识这些底层知识选择性忽略</li>\n<li>基础技能缺乏掌握，如熟练使用Linux和熟悉一门动态语言(PHP | Python)</li>\n<li>简历书写不太规范，没有针对性，使用一份简历投递所有公司</li>\n<li>自我期望值过高，其实并没有和一些名校有实力的学生相比较</li>\n<li>实习时间过短，2个多月中间还有一个春节对于企业来说并不太理想</li>\n<li>大量公司其实并不缺人</li>\n</ul>\n<blockquote>\n<p>路漫漫其修远兮，吾将上下而求索</p>\n</blockquote>"},{"title":"这个世界怎么了","date":"2017-02-06T13:05:55.000Z","_content":"","source":"_posts/essay_what-happen-to-world.md","raw":"---\ntitle: 这个世界怎么了 \ndate: 2017-02-06 21:05:55\ntags:\n\t- 随笔\n---\n","slug":"essay_what-happen-to-world","published":1,"updated":"2017-03-08T10:52:54.272Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5cf000wqoq1j55bmw6d","content":"","excerpt":"","more":""},{"title":"maven搭建SSH","date":"2016-09-22T16:07:12.000Z","_content":"在实际开发中，我们习惯将项目分为三层，展示层，业务逻辑层，数据持久层。对于展现层我们一般会用到Strust2/Spring MVC，而数据层我们往往会用到Hibernate/Mybatis，这里我将介绍一下SSH(Spring + Struts2 + Hibernate)的搭建，至于SSM的搭建请参考[maven搭建SSM](https://sakuraffy.github.io/freamwork_ssm)\n\n<!-- more -->\n\n首先创建一个maven项目，这里不再赘述了，如果不太清楚，请参考[maven项目搭建](https://sakuraffy.github.io/maven_project_create)\n{% qnimg freamwork/ssh/p1.png 'class:class1 class2' normal:yes %}\n\n### 整合Spring\n\n#### 在pom.xml中添加spring相应的依赖\n``` xml\n<properties>\n\t<!-- spring版本号 -->    \n\t<spring.version>4.1.9.RELEASE</spring.version>\n</properties>\n\n<dependencies>\n\n\t<dependency>\n\t\t<groupId>junit</groupId>\n\t\t<artifactId>junit</artifactId>\n\t\t<version>4.12</version>\n\t\t<scope>test</scope>\n\t</dependency>\n\n\t<!-- Spring依赖 -->\n\t<dependency>\n\t\t<groupId>org.springframework</groupId>                                        \n\t\t<artifactId>spring-core</artifactId>\n\t\t<version>${spring.version}</version>\n\t</dependency>\n\n\t<dependency>\n\t\t<groupId>org.springframework</groupId>\n\t\t<artifactId>spring-context</artifactId>\n\t\t<version>${spring.version}</version>\n\t</dependency>\n\n\t<dependency>\n\t\t<groupId>org.springframework</groupId>\n\t\t<artifactId>spring-test</artifactId>\n\t\t<version>${spring.version}</version>\n\t</dependency>\n\n</dependencies>\n```\n\n#### 在src/main/resources下添加applicationContext.xml\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>  \n<beans xmlns=\"http://www.springframework.org/schema/beans\"  \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n    xmlns:p=\"http://www.springframework.org/schema/p\"  \n    xmlns:context=\"http://www.springframework.org/schema/context\"  \n    xmlns:mvc=\"http://www.springframework.org/schema/mvc\"  \n    xmlns:tx=\"http://www.springframework.org/schema/tx\"  \n    xmlns:aop=\"http://www.springframework.org/schema/aop\"  \n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans    \n       http://www.springframework.org/schema/beans/spring-beans-4.1.xsd    \n       http://www.springframework.org/schema/context    \n       http://www.springframework.org/schema/context/spring-context-4.1.xsd                  \n       http://www.springframework.org/schema/tx   \n       http://www.springframework.org/schema/tx/spring-tx-4.1.xsd    \n       http://www.springframework.org/schema/aop   \n       http://www.springframework.org/schema/aop/spring-aop-4.1.xsd    \n       http://www.springframework.org/schema/mvc    \n       http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd\">  \n       \n     <bean id=\"date\" class=\"java.util.Date\"></bean>\n      \n</beans>\n```\n\n#### 在src/test/java下添加测试类SSHTest\n``` java\npackage cn.sakuraffy.ssh.test;\n\nimport java.util.Date;\n\nimport javax.annotation.Resource;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(locations=\"classpath:applicationContext.xml\")\npublic class SSHTest {\n\n\t@Resource\n\tprivate Date date;\n\t\n\t@Test\n\tpublic void testSpring() {\n\t\tSystem.out.println(date);\n\t}\n}\n\n```\nRun As Maven test,如果下图所示，有日期打印，则说明Spring搭建成功\n{% qnimg freamwork/ssh/p2.png 'class:class1 class2' normal:yes %}\n\n### 整合Spring + Hibernate\n\n#### 在pom.xml中添加Hibernate和数据库相关依赖\n``` xml\n<!-- ... 不再显示已有内容-->\n<properties>\n\t<!-- Hibernate版本号 -->    \n\t<hibernate.version>4.1.9.RELEASE</hibernate.version>                                  \n</properties>\n\n<dependencies>\n\t<!-- Spring与Hibernate整合依赖 -->\n\n    <dependency>  \n        <groupId>org.springframework</groupId>  \n        <artifactId>spring-jdbc</artifactId>  \n        <version>${spring.version}</version>  \n    </dependency>\n\n    <dependency>  \n        <groupId>org.springframework</groupId>  \n        <artifactId>spring-orm</artifactId>  \n        <version>${spring.version}</version>  \n    </dependency>\n     \n    <dependency>  \n      <groupId>org.aspectj</groupId>  \n      <artifactId>aspectjweaver</artifactId>  \n      <version>1.8.9</version>  \n    </dependency>\n\n\t<!-- Hibernate依赖 -->\n\n    <dependency>\n\t    <groupId>org.hibernate</groupId>\n\t    <artifactId>hibernate-core</artifactId>\n\t    <version>${hibernate.version}</version>\n    </dependency>\n\t<!-- mysql驱动依赖 -->\n    <dependency>\n\t    <groupId>mysql</groupId>\n\t    <artifactId>mysql-connector-java</artifactId>\n\t    <version>5.1.30</version>\n    </dependency>\n    <!-- 连接池依赖 -->\n    <dependency>\n\t   <groupId>commons-dbcp</groupId>\n\t   <artifactId>commons-dbcp</artifactId>\n\t   <version>1.4</version>\n    </dependency>\n</dependencies>\n```\n#### 在applicationContext.xml中添加dataSource与sessionFactory\n``` xml\n<beans>\n    <bean id=\"dataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\" destroy-method=\"close\">  \n        <property name=\"driverClassName\" value=\"com.mysql.jdbc.Driver\" />  \n        <property name=\"url\" value=\"jdbc:mysql://localhost:3306/ssh\" />  \n        <property name=\"username\" value=\"root\" />  \n        <property name=\"password\" value=\"root\" />    \n    </bean>  \n    \n    <bean id=\"sessionFactory\" class=\"org.springframework.orm.hibernate4.LocalSessionFactoryBean\">  \n        <property name=\"dataSource\" ref=\"dataSource\"/> \n        <property name=\"packagesToScan\">\n        \t<list>\n        \t\t<value>cn.sakuraffy.ssh.model</value>\n        \t</list>\n        </property>\n        <property name=\"hibernateProperties\">  \n            <props>  \n                <prop key=\"show_sql\">true</prop>  \n            </props>  \n        </property>  \n    </bean> \n</beans>\n```\n\n#### 添加mysql测试数据库及表\n``` sql\n\tCREATE DATABASE ssh;\n\tUSE ssh;\n\tCREATE TABLE t_user (\n\t\tid int PRIMARY KEY AUTO_INCREMENT,\n\t\tname VARCHAR(20)\n\t);\n\tINSERT INTO t_user VALUES(1,'sakuraffy');\n```\n\n#### 添加实体类\n``` java\n\tpackage cn.sakuraffy.ssh.model;\n\n\timport java.io.Serializable;\n\n\timport javax.persistence.Entity;\n\timport javax.persistence.GeneratedValue;\n\timport javax.persistence.Id;\n\n\t@Entity(name=\"t_user\")\n\tpublic class User implements Serializable {\n\n\t\tprivate static final long serialVersionUID = 9213000568883367937L;                    \n\t\t\n\t\t@Id\n\t\t@GeneratedValue\n\t\tprivate int id;\n\t\tprivate String name;\n\t\t\n\t\tpublic User() {\n\t\t}\n\t\t\n\t\tpublic User(String name) {\n\t\t\tsuper();\n\t\t\tthis.name = name;\n\t\t}\n\n\t\tpublic final int getId() {\n\t\t\treturn id;\n\t\t}\n\t\tpublic final void setId(int id) {\n\t\t\tthis.id = id;\n\t\t}\n\t\tpublic final String getName() {\n\t\t\treturn name;\n\t\t}\n\t\tpublic final void setName(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn \"User [id=\" + id + \", name=\" + name + \"]\";\n\t\t}\n\t\t\n\t}\n```\n\n#### 添加数据持久层接口UserDao及其实现UserDaoImpl\n##### UserDao\n``` java\npackage cn.sakuraffy.ssh.dao;\n\nimport cn.sakuraffy.ssh.model.User;\n\npublic interface UserDao {\n\tpublic User getById(int id);\n}\n```\n##### UserDaoImpl\n``` java\npackage cn.sakuraffy.ssh.dao.impl;\nimport javax.annotation.Resource;\nimport org.hibernate.SessionFactory;\nimport org.springframework.stereotype.Repository;\n\nimport cn.sakuraffy.ssh.dao.UserDao;\nimport cn.sakuraffy.ssh.model.User;\n\n@Repository(\"userDao\")\npublic class UserDaoImpl implements UserDao {\n\t@Resource\n\tprivate SessionFactory sessionFactory;\n\n\t@Override\n\tpublic User getById(int id) {\n\t\treturn (User) sessionFactory.getCurrentSession()\n\t\t\t\t.get(User.class, id);\n\t}\n}\n```\n\n#### 添加业务逻辑层接口UserService及其实现UserServiceImpl\n##### UserService\n``` java\npackage cn.sakuraffy.ssh.service;\n\nimport cn.sakuraffy.ssh.model.User;\n\npublic interface UserService {\n\tpublic User getById(int id);\n}\n\n```\n\n##### UserServiceImpl\n``` java\npackage cn.sakuraffy.ssh.service.impl;\n\nimport org.springframework.stereotype.Service;\n\nimport javax.annotation.Resource;\n\nimport cn.sakuraffy.ssh.dao.UserDao;\nimport cn.sakuraffy.ssh.model.User;\nimport cn.sakuraffy.ssh.service.UserService;\n\n@Service(\"userService\")\npublic class UserServiceImpl implements UserService {\n\n\t@Resource\n\tprivate UserDao userDao;\n\t\n\t@Override\n\tpublic User getById(int id) {\n\t\treturn userDao.getById(id);\n\t}\n}\n```\n\n#### 在applicationContext.xml中配置声明式事务管理\n``` xml\n<beans>\n\t<bean id=\"transactionManager\"  \n\t    class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">  \n\t    <property name=\"dataSource\" ref=\"dataSource\" />  \n\t</bean>  \n\n\t<tx:advice id=\"txadvice\" transaction-manager=\"transactionManager\">\n\t\t<tx:attributes>\n\t\t\t<tx:method name=\"add*\" propagation=\"REQUIRED\" />\n\t\t\t<tx:method name=\"save*\" propagation=\"REQUIRED\" />\n\t\t\t<tx:method name=\"update*\" propagation=\"REQUIRED\" />\n\t\t\t<tx:method name=\"delete*\" propagation=\"REQUIRED\" />\n\t\t\t<tx:method name=\"get*\" read-only=\"true\" propagation=\"SUPPORTS\" />\n\t\t\t<tx:method name=\"find*\" read-only=\"true\" propagation=\"SUPPORTS\" />\n\t\t\t<tx:method name=\"*\" read-only=\"true\" />\n\t\t</tx:attributes>\n\t</tx:advice> \n\n\t<aop:config>\n\t\t<aop:pointcut id=\"serviceMethods\" expression=\"execution(* cn.sakuraffy.ssh.service.impl.*.*(..))\" />\n\t\t<aop:advisor advice-ref=\"txadvice\" pointcut-ref=\"serviceMethods\" />\n\t</aop:config>\n</beans>\n```\n\n#### 在applicationContext.xml中配置组件扫描\n``` xml\n<beans>\n\t<context:component-scan base-package=\"cn.sakuraffy.ssh\" />\n</beans>\n```\n\n#### 在SSHTest中添加测试方法\n``` java\n\t@Resource\n\tprivate UserService userService;\n\n\t@Test\n\tpublic void testGetById() {\n\t\tSystem.out.println(userService.getById(1));\n\t}\n```\nRun As Maven test,如果下图所示，有User打印，则说明Spring与Hibernate整合成功\n{% qnimg freamwork/ssh/p3.png 'class:class1 class2' normal:yes %}\n\n### 整合SSH\n在pom.xml中加入Struts2与web相关依赖\n``` xml\n<properties>\n\t<!-- Struts2版本 -->\n  \t<struts2.version>2.3.31</struts2.version>\n</properties>\n<dependencies>\n\t<!-- servlet依赖 -->\n\t<dependency>\n\t    <groupId>javax.servlet</groupId>\n\t    <artifactId>javax.servlet-api</artifactId>\n\t    <version>3.1.0</version>\n\t</dependency>\n\n\t<!-- jstl依赖 -->\n\t<dependency>\n   \t\t<groupId>jstl</groupId>\n    \t<artifactId>jstl</artifactId>\n    \t<version>1.2</version>\n\t</dependency>\n\t<!-- Struts2依赖 -->\n\t<dependency>\n\t    <groupId>org.apache.struts</groupId>\n\t    <artifactId>struts2-core</artifactId>\n\t    <version>${struts2.version}</version>\n\t</dependency>\n\t\n\t<dependency>\n\t    <groupId>org.apache.struts</groupId>\n\t    <artifactId>struts2-spring-plugin</artifactId>                                    \n\t    <version>${struts2.version}</version>\n\t</dependency>   \n</dependencies>\n```\n\n#### 修改web.xml文件\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n\txmlns=\"http://java.sun.com/xml/ns/javaee\" \n\txsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee \n\thttp://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\" version=\"3.0\">\n  <display-name>template</display-name>\n  <welcome-file-list>\n    <welcome-file>index.jsp</welcome-file>\n  </welcome-file-list>\n  <listener>\n    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n  </listener>\n  <context-param>\n    <param-name>contextConfigLocation</param-name>\n    <param-value>classpath:applicationContext.xml</param-value>\n  </context-param>\n  <filter>\n    <filter-name>struts2</filter-name>\n    <filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>\n  </filter>\n  <filter-mapping>\n    <filter-name>struts2</filter-name>\n    <url-pattern>*.action</url-pattern>\n  </filter-mapping>\n</web-app>\n```\n#### 添加Action类\n``` java\npackage cn.sakuraffy.ssh.action;\n\nimport javax.annotation.Resource;\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.apache.struts2.ServletActionContext;\n\nimport com.opensymphony.xwork2.ActionSupport;\n\nimport cn.sakuraffy.ssh.model.User;\nimport cn.sakuraffy.ssh.service.UserService;\n\n@Controller(\"userAction\")\npublic class UserAction extends ActionSupport {\n\n\tprivate static final long serialVersionUID = 6382018041366588184L;                    \n\t\n\t@Resource\n\tprivate UserService userService;\n\t\n\tprivate int id;\n\t\n\tpublic final int getId() {\n\t\treturn id;\n\t}\n\n\tpublic final void setId(int id) {\n\t\tthis.id = id;\n\t}\n\n\tpublic String getById() {\n\t\tUser user = userService.getById(id);\n\t\tSystem.out.println(user);\n\t\tHttpServletRequest request = ServletActionContext.getRequest();\n\t\trequest.setAttribute(\"user\", user);\n\t\treturn \"index\";\n\t}\n}\n```\n#### 添加struts.xml\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE struts PUBLIC\n    \"-//Apache Software Foundation//DTD Struts Configuration 2.0//EN\"\n    \"http://struts.apache.org/dtds/struts-2.0.dtd\">\n\n<struts>\n \t<package name=\"user\" extends=\"struts-default\">\n        <action name=\"user_*\" class=\"userAction\" method = \"{1}\">\n            <result name=\"index\">/index.jsp</result>\n        </action>\n    </package>\n</struts>\n```\n\n#### 在pom.xml中添加jetty容器插件\n``` xml\n<build>\n  \t<finalName>ssh</finalName>\n    <plugins> \n        <plugin>\n           <groupId>org.mortbay.jetty</groupId>\n           <artifactId>jetty-maven-plugin</artifactId>\n           <version>8.1.16.v20140903</version>\n           <configuration>\n               <scanIntervalSeconds>60</scanIntervalSeconds>\n               <webApp>\n                   <contextPath>/ssh</contextPath>\n               </webApp>\n               <connectors>\n                    <connector implementation=\"org.eclipse.jetty.server.nio.SelectChannelConnector\">\n                        <port>8080</port>\n                    </connector>\n                </connectors>\n            </configuration>\n         </plugin>\n    </plugins>\n</build>\t\n```\n#### 修改index.jsp\n``` html\n<%@ page language=\"java\" import=\"java.util.*\" pageEncoding=\"UTF-8\"%>\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n<html>\n  <body>\n    <a href=\"user_getById.action?id=1\">Hello</a> ${user.name }\n  </body>\n</html>\n```\nRun AS Maven Build,输入jetty：run，如图\n{% qnimg freamwork/ssh/p4.png 'class:class1 class2' normal:yes %}\n\n打开浏览器，输入 http://localhost:8080/ssh ,点击Hello，得到下图结果，至此SSH整合完毕\n{% qnimg freamwork/ssh/p5.png 'class:class1 class2' normal:yes %}","source":"_posts/freamwork_ssh.md","raw":"---\ntitle: maven搭建SSH\ndate: 2016-09-23 00:07:12\ntags:\n\t- freamwork\n---\n在实际开发中，我们习惯将项目分为三层，展示层，业务逻辑层，数据持久层。对于展现层我们一般会用到Strust2/Spring MVC，而数据层我们往往会用到Hibernate/Mybatis，这里我将介绍一下SSH(Spring + Struts2 + Hibernate)的搭建，至于SSM的搭建请参考[maven搭建SSM](https://sakuraffy.github.io/freamwork_ssm)\n\n<!-- more -->\n\n首先创建一个maven项目，这里不再赘述了，如果不太清楚，请参考[maven项目搭建](https://sakuraffy.github.io/maven_project_create)\n{% qnimg freamwork/ssh/p1.png 'class:class1 class2' normal:yes %}\n\n### 整合Spring\n\n#### 在pom.xml中添加spring相应的依赖\n``` xml\n<properties>\n\t<!-- spring版本号 -->    \n\t<spring.version>4.1.9.RELEASE</spring.version>\n</properties>\n\n<dependencies>\n\n\t<dependency>\n\t\t<groupId>junit</groupId>\n\t\t<artifactId>junit</artifactId>\n\t\t<version>4.12</version>\n\t\t<scope>test</scope>\n\t</dependency>\n\n\t<!-- Spring依赖 -->\n\t<dependency>\n\t\t<groupId>org.springframework</groupId>                                        \n\t\t<artifactId>spring-core</artifactId>\n\t\t<version>${spring.version}</version>\n\t</dependency>\n\n\t<dependency>\n\t\t<groupId>org.springframework</groupId>\n\t\t<artifactId>spring-context</artifactId>\n\t\t<version>${spring.version}</version>\n\t</dependency>\n\n\t<dependency>\n\t\t<groupId>org.springframework</groupId>\n\t\t<artifactId>spring-test</artifactId>\n\t\t<version>${spring.version}</version>\n\t</dependency>\n\n</dependencies>\n```\n\n#### 在src/main/resources下添加applicationContext.xml\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>  \n<beans xmlns=\"http://www.springframework.org/schema/beans\"  \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n    xmlns:p=\"http://www.springframework.org/schema/p\"  \n    xmlns:context=\"http://www.springframework.org/schema/context\"  \n    xmlns:mvc=\"http://www.springframework.org/schema/mvc\"  \n    xmlns:tx=\"http://www.springframework.org/schema/tx\"  \n    xmlns:aop=\"http://www.springframework.org/schema/aop\"  \n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans    \n       http://www.springframework.org/schema/beans/spring-beans-4.1.xsd    \n       http://www.springframework.org/schema/context    \n       http://www.springframework.org/schema/context/spring-context-4.1.xsd                  \n       http://www.springframework.org/schema/tx   \n       http://www.springframework.org/schema/tx/spring-tx-4.1.xsd    \n       http://www.springframework.org/schema/aop   \n       http://www.springframework.org/schema/aop/spring-aop-4.1.xsd    \n       http://www.springframework.org/schema/mvc    \n       http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd\">  \n       \n     <bean id=\"date\" class=\"java.util.Date\"></bean>\n      \n</beans>\n```\n\n#### 在src/test/java下添加测试类SSHTest\n``` java\npackage cn.sakuraffy.ssh.test;\n\nimport java.util.Date;\n\nimport javax.annotation.Resource;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(locations=\"classpath:applicationContext.xml\")\npublic class SSHTest {\n\n\t@Resource\n\tprivate Date date;\n\t\n\t@Test\n\tpublic void testSpring() {\n\t\tSystem.out.println(date);\n\t}\n}\n\n```\nRun As Maven test,如果下图所示，有日期打印，则说明Spring搭建成功\n{% qnimg freamwork/ssh/p2.png 'class:class1 class2' normal:yes %}\n\n### 整合Spring + Hibernate\n\n#### 在pom.xml中添加Hibernate和数据库相关依赖\n``` xml\n<!-- ... 不再显示已有内容-->\n<properties>\n\t<!-- Hibernate版本号 -->    \n\t<hibernate.version>4.1.9.RELEASE</hibernate.version>                                  \n</properties>\n\n<dependencies>\n\t<!-- Spring与Hibernate整合依赖 -->\n\n    <dependency>  \n        <groupId>org.springframework</groupId>  \n        <artifactId>spring-jdbc</artifactId>  \n        <version>${spring.version}</version>  \n    </dependency>\n\n    <dependency>  \n        <groupId>org.springframework</groupId>  \n        <artifactId>spring-orm</artifactId>  \n        <version>${spring.version}</version>  \n    </dependency>\n     \n    <dependency>  \n      <groupId>org.aspectj</groupId>  \n      <artifactId>aspectjweaver</artifactId>  \n      <version>1.8.9</version>  \n    </dependency>\n\n\t<!-- Hibernate依赖 -->\n\n    <dependency>\n\t    <groupId>org.hibernate</groupId>\n\t    <artifactId>hibernate-core</artifactId>\n\t    <version>${hibernate.version}</version>\n    </dependency>\n\t<!-- mysql驱动依赖 -->\n    <dependency>\n\t    <groupId>mysql</groupId>\n\t    <artifactId>mysql-connector-java</artifactId>\n\t    <version>5.1.30</version>\n    </dependency>\n    <!-- 连接池依赖 -->\n    <dependency>\n\t   <groupId>commons-dbcp</groupId>\n\t   <artifactId>commons-dbcp</artifactId>\n\t   <version>1.4</version>\n    </dependency>\n</dependencies>\n```\n#### 在applicationContext.xml中添加dataSource与sessionFactory\n``` xml\n<beans>\n    <bean id=\"dataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\" destroy-method=\"close\">  \n        <property name=\"driverClassName\" value=\"com.mysql.jdbc.Driver\" />  \n        <property name=\"url\" value=\"jdbc:mysql://localhost:3306/ssh\" />  \n        <property name=\"username\" value=\"root\" />  \n        <property name=\"password\" value=\"root\" />    \n    </bean>  \n    \n    <bean id=\"sessionFactory\" class=\"org.springframework.orm.hibernate4.LocalSessionFactoryBean\">  \n        <property name=\"dataSource\" ref=\"dataSource\"/> \n        <property name=\"packagesToScan\">\n        \t<list>\n        \t\t<value>cn.sakuraffy.ssh.model</value>\n        \t</list>\n        </property>\n        <property name=\"hibernateProperties\">  \n            <props>  \n                <prop key=\"show_sql\">true</prop>  \n            </props>  \n        </property>  \n    </bean> \n</beans>\n```\n\n#### 添加mysql测试数据库及表\n``` sql\n\tCREATE DATABASE ssh;\n\tUSE ssh;\n\tCREATE TABLE t_user (\n\t\tid int PRIMARY KEY AUTO_INCREMENT,\n\t\tname VARCHAR(20)\n\t);\n\tINSERT INTO t_user VALUES(1,'sakuraffy');\n```\n\n#### 添加实体类\n``` java\n\tpackage cn.sakuraffy.ssh.model;\n\n\timport java.io.Serializable;\n\n\timport javax.persistence.Entity;\n\timport javax.persistence.GeneratedValue;\n\timport javax.persistence.Id;\n\n\t@Entity(name=\"t_user\")\n\tpublic class User implements Serializable {\n\n\t\tprivate static final long serialVersionUID = 9213000568883367937L;                    \n\t\t\n\t\t@Id\n\t\t@GeneratedValue\n\t\tprivate int id;\n\t\tprivate String name;\n\t\t\n\t\tpublic User() {\n\t\t}\n\t\t\n\t\tpublic User(String name) {\n\t\t\tsuper();\n\t\t\tthis.name = name;\n\t\t}\n\n\t\tpublic final int getId() {\n\t\t\treturn id;\n\t\t}\n\t\tpublic final void setId(int id) {\n\t\t\tthis.id = id;\n\t\t}\n\t\tpublic final String getName() {\n\t\t\treturn name;\n\t\t}\n\t\tpublic final void setName(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn \"User [id=\" + id + \", name=\" + name + \"]\";\n\t\t}\n\t\t\n\t}\n```\n\n#### 添加数据持久层接口UserDao及其实现UserDaoImpl\n##### UserDao\n``` java\npackage cn.sakuraffy.ssh.dao;\n\nimport cn.sakuraffy.ssh.model.User;\n\npublic interface UserDao {\n\tpublic User getById(int id);\n}\n```\n##### UserDaoImpl\n``` java\npackage cn.sakuraffy.ssh.dao.impl;\nimport javax.annotation.Resource;\nimport org.hibernate.SessionFactory;\nimport org.springframework.stereotype.Repository;\n\nimport cn.sakuraffy.ssh.dao.UserDao;\nimport cn.sakuraffy.ssh.model.User;\n\n@Repository(\"userDao\")\npublic class UserDaoImpl implements UserDao {\n\t@Resource\n\tprivate SessionFactory sessionFactory;\n\n\t@Override\n\tpublic User getById(int id) {\n\t\treturn (User) sessionFactory.getCurrentSession()\n\t\t\t\t.get(User.class, id);\n\t}\n}\n```\n\n#### 添加业务逻辑层接口UserService及其实现UserServiceImpl\n##### UserService\n``` java\npackage cn.sakuraffy.ssh.service;\n\nimport cn.sakuraffy.ssh.model.User;\n\npublic interface UserService {\n\tpublic User getById(int id);\n}\n\n```\n\n##### UserServiceImpl\n``` java\npackage cn.sakuraffy.ssh.service.impl;\n\nimport org.springframework.stereotype.Service;\n\nimport javax.annotation.Resource;\n\nimport cn.sakuraffy.ssh.dao.UserDao;\nimport cn.sakuraffy.ssh.model.User;\nimport cn.sakuraffy.ssh.service.UserService;\n\n@Service(\"userService\")\npublic class UserServiceImpl implements UserService {\n\n\t@Resource\n\tprivate UserDao userDao;\n\t\n\t@Override\n\tpublic User getById(int id) {\n\t\treturn userDao.getById(id);\n\t}\n}\n```\n\n#### 在applicationContext.xml中配置声明式事务管理\n``` xml\n<beans>\n\t<bean id=\"transactionManager\"  \n\t    class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">  \n\t    <property name=\"dataSource\" ref=\"dataSource\" />  \n\t</bean>  \n\n\t<tx:advice id=\"txadvice\" transaction-manager=\"transactionManager\">\n\t\t<tx:attributes>\n\t\t\t<tx:method name=\"add*\" propagation=\"REQUIRED\" />\n\t\t\t<tx:method name=\"save*\" propagation=\"REQUIRED\" />\n\t\t\t<tx:method name=\"update*\" propagation=\"REQUIRED\" />\n\t\t\t<tx:method name=\"delete*\" propagation=\"REQUIRED\" />\n\t\t\t<tx:method name=\"get*\" read-only=\"true\" propagation=\"SUPPORTS\" />\n\t\t\t<tx:method name=\"find*\" read-only=\"true\" propagation=\"SUPPORTS\" />\n\t\t\t<tx:method name=\"*\" read-only=\"true\" />\n\t\t</tx:attributes>\n\t</tx:advice> \n\n\t<aop:config>\n\t\t<aop:pointcut id=\"serviceMethods\" expression=\"execution(* cn.sakuraffy.ssh.service.impl.*.*(..))\" />\n\t\t<aop:advisor advice-ref=\"txadvice\" pointcut-ref=\"serviceMethods\" />\n\t</aop:config>\n</beans>\n```\n\n#### 在applicationContext.xml中配置组件扫描\n``` xml\n<beans>\n\t<context:component-scan base-package=\"cn.sakuraffy.ssh\" />\n</beans>\n```\n\n#### 在SSHTest中添加测试方法\n``` java\n\t@Resource\n\tprivate UserService userService;\n\n\t@Test\n\tpublic void testGetById() {\n\t\tSystem.out.println(userService.getById(1));\n\t}\n```\nRun As Maven test,如果下图所示，有User打印，则说明Spring与Hibernate整合成功\n{% qnimg freamwork/ssh/p3.png 'class:class1 class2' normal:yes %}\n\n### 整合SSH\n在pom.xml中加入Struts2与web相关依赖\n``` xml\n<properties>\n\t<!-- Struts2版本 -->\n  \t<struts2.version>2.3.31</struts2.version>\n</properties>\n<dependencies>\n\t<!-- servlet依赖 -->\n\t<dependency>\n\t    <groupId>javax.servlet</groupId>\n\t    <artifactId>javax.servlet-api</artifactId>\n\t    <version>3.1.0</version>\n\t</dependency>\n\n\t<!-- jstl依赖 -->\n\t<dependency>\n   \t\t<groupId>jstl</groupId>\n    \t<artifactId>jstl</artifactId>\n    \t<version>1.2</version>\n\t</dependency>\n\t<!-- Struts2依赖 -->\n\t<dependency>\n\t    <groupId>org.apache.struts</groupId>\n\t    <artifactId>struts2-core</artifactId>\n\t    <version>${struts2.version}</version>\n\t</dependency>\n\t\n\t<dependency>\n\t    <groupId>org.apache.struts</groupId>\n\t    <artifactId>struts2-spring-plugin</artifactId>                                    \n\t    <version>${struts2.version}</version>\n\t</dependency>   \n</dependencies>\n```\n\n#### 修改web.xml文件\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n\txmlns=\"http://java.sun.com/xml/ns/javaee\" \n\txsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee \n\thttp://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\" version=\"3.0\">\n  <display-name>template</display-name>\n  <welcome-file-list>\n    <welcome-file>index.jsp</welcome-file>\n  </welcome-file-list>\n  <listener>\n    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n  </listener>\n  <context-param>\n    <param-name>contextConfigLocation</param-name>\n    <param-value>classpath:applicationContext.xml</param-value>\n  </context-param>\n  <filter>\n    <filter-name>struts2</filter-name>\n    <filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>\n  </filter>\n  <filter-mapping>\n    <filter-name>struts2</filter-name>\n    <url-pattern>*.action</url-pattern>\n  </filter-mapping>\n</web-app>\n```\n#### 添加Action类\n``` java\npackage cn.sakuraffy.ssh.action;\n\nimport javax.annotation.Resource;\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.apache.struts2.ServletActionContext;\n\nimport com.opensymphony.xwork2.ActionSupport;\n\nimport cn.sakuraffy.ssh.model.User;\nimport cn.sakuraffy.ssh.service.UserService;\n\n@Controller(\"userAction\")\npublic class UserAction extends ActionSupport {\n\n\tprivate static final long serialVersionUID = 6382018041366588184L;                    \n\t\n\t@Resource\n\tprivate UserService userService;\n\t\n\tprivate int id;\n\t\n\tpublic final int getId() {\n\t\treturn id;\n\t}\n\n\tpublic final void setId(int id) {\n\t\tthis.id = id;\n\t}\n\n\tpublic String getById() {\n\t\tUser user = userService.getById(id);\n\t\tSystem.out.println(user);\n\t\tHttpServletRequest request = ServletActionContext.getRequest();\n\t\trequest.setAttribute(\"user\", user);\n\t\treturn \"index\";\n\t}\n}\n```\n#### 添加struts.xml\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE struts PUBLIC\n    \"-//Apache Software Foundation//DTD Struts Configuration 2.0//EN\"\n    \"http://struts.apache.org/dtds/struts-2.0.dtd\">\n\n<struts>\n \t<package name=\"user\" extends=\"struts-default\">\n        <action name=\"user_*\" class=\"userAction\" method = \"{1}\">\n            <result name=\"index\">/index.jsp</result>\n        </action>\n    </package>\n</struts>\n```\n\n#### 在pom.xml中添加jetty容器插件\n``` xml\n<build>\n  \t<finalName>ssh</finalName>\n    <plugins> \n        <plugin>\n           <groupId>org.mortbay.jetty</groupId>\n           <artifactId>jetty-maven-plugin</artifactId>\n           <version>8.1.16.v20140903</version>\n           <configuration>\n               <scanIntervalSeconds>60</scanIntervalSeconds>\n               <webApp>\n                   <contextPath>/ssh</contextPath>\n               </webApp>\n               <connectors>\n                    <connector implementation=\"org.eclipse.jetty.server.nio.SelectChannelConnector\">\n                        <port>8080</port>\n                    </connector>\n                </connectors>\n            </configuration>\n         </plugin>\n    </plugins>\n</build>\t\n```\n#### 修改index.jsp\n``` html\n<%@ page language=\"java\" import=\"java.util.*\" pageEncoding=\"UTF-8\"%>\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n<html>\n  <body>\n    <a href=\"user_getById.action?id=1\">Hello</a> ${user.name }\n  </body>\n</html>\n```\nRun AS Maven Build,输入jetty：run，如图\n{% qnimg freamwork/ssh/p4.png 'class:class1 class2' normal:yes %}\n\n打开浏览器，输入 http://localhost:8080/ssh ,点击Hello，得到下图结果，至此SSH整合完毕\n{% qnimg freamwork/ssh/p5.png 'class:class1 class2' normal:yes %}","slug":"freamwork_ssh","published":1,"updated":"2017-03-08T11:39:39.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5ci000zqoq1dnfguo10","content":"<p>在实际开发中，我们习惯将项目分为三层，展示层，业务逻辑层，数据持久层。对于展现层我们一般会用到Strust2/Spring MVC，而数据层我们往往会用到Hibernate/Mybatis，这里我将介绍一下SSH(Spring + Struts2 + Hibernate)的搭建，至于SSM的搭建请参考<a href=\"https://sakuraffy.github.io/freamwork_ssm\">maven搭建SSM</a></p>\n<a id=\"more\"></a>\n<p>首先创建一个maven项目，这里不再赘述了，如果不太清楚，请参考<a href=\"https://sakuraffy.github.io/maven_project_create\">maven项目搭建</a><br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/freamwork/ssh/p1.png\"></p>\n<h3 id=\"整合Spring\"><a href=\"#整合Spring\" class=\"headerlink\" title=\"整合Spring\"></a>整合Spring</h3><h4 id=\"在pom-xml中添加spring相应的依赖\"><a href=\"#在pom-xml中添加spring相应的依赖\" class=\"headerlink\" title=\"在pom.xml中添加spring相应的依赖\"></a>在pom.xml中添加spring相应的依赖</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- spring版本号 --&gt;</span>    </div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">spring.version</span>&gt;</span>4.1.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">spring.version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- Spring依赖 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>                                        </div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"在src-main-resources下添加applicationContext-xml\"><a href=\"#在src-main-resources下添加applicationContext-xml\" class=\"headerlink\" title=\"在src/main/resources下添加applicationContext.xml\"></a>在src/main/resources下添加applicationContext.xml</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span>  </span></div><div class=\"line\">    <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> </div><div class=\"line\">    <span class=\"attr\">xmlns:p</span>=<span class=\"string\">\"http://www.springframework.org/schema/p\"</span>  </div><div class=\"line\">    <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span>  </div><div class=\"line\">    <span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">\"http://www.springframework.org/schema/mvc\"</span>  </div><div class=\"line\">    <span class=\"attr\">xmlns:tx</span>=<span class=\"string\">\"http://www.springframework.org/schema/tx\"</span>  </div><div class=\"line\">    <span class=\"attr\">xmlns:aop</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop\"</span>  </div><div class=\"line\">    <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans    </span></div><div class=\"line\">       http://www.springframework.org/schema/beans/spring-beans-4.1.xsd    </div><div class=\"line\">       http://www.springframework.org/schema/context    </div><div class=\"line\">       http://www.springframework.org/schema/context/spring-context-4.1.xsd                  </div><div class=\"line\">       http://www.springframework.org/schema/tx   </div><div class=\"line\">       http://www.springframework.org/schema/tx/spring-tx-4.1.xsd    </div><div class=\"line\">       http://www.springframework.org/schema/aop   </div><div class=\"line\">       http://www.springframework.org/schema/aop/spring-aop-4.1.xsd    </div><div class=\"line\">       http://www.springframework.org/schema/mvc    </div><div class=\"line\">       http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd\"&gt;  </div><div class=\"line\">       </div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"date\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"java.util.Date\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\">      </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"在src-test-java下添加测试类SSHTest\"><a href=\"#在src-test-java下添加测试类SSHTest\" class=\"headerlink\" title=\"在src/test/java下添加测试类SSHTest\"></a>在src/test/java下添加测试类SSHTest</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.ssh.test;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</div><div class=\"line\"><span class=\"keyword\">import</span> org.junit.runner.RunWith;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.context.ContextConfiguration;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class=\"line\"><span class=\"meta\">@ContextConfiguration</span>(locations=<span class=\"string\">\"classpath:applicationContext.xml\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SSHTest</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Resource</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> Date date;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSpring</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(date);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Run As Maven test,如果下图所示，有日期打印，则说明Spring搭建成功<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/freamwork/ssh/p2.png\"></p>\n<h3 id=\"整合Spring-Hibernate\"><a href=\"#整合Spring-Hibernate\" class=\"headerlink\" title=\"整合Spring + Hibernate\"></a>整合Spring + Hibernate</h3><h4 id=\"在pom-xml中添加Hibernate和数据库相关依赖\"><a href=\"#在pom-xml中添加Hibernate和数据库相关依赖\" class=\"headerlink\" title=\"在pom.xml中添加Hibernate和数据库相关依赖\"></a>在pom.xml中添加Hibernate和数据库相关依赖</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- ... 不再显示已有内容--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- Hibernate版本号 --&gt;</span>    </div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">hibernate.version</span>&gt;</span>4.1.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">hibernate.version</span>&gt;</span>                                  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- Spring与Hibernate整合依赖 --&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-orm<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">     </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>  </div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.aspectj<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aspectjweaver<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.8.9<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- Hibernate依赖 --&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.hibernate<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hibernate-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;hibernate.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- mysql驱动依赖 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.30<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 连接池依赖 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-dbcp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-dbcp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t   <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"在applicationContext-xml中添加dataSource与sessionFactory\"><a href=\"#在applicationContext-xml中添加dataSource与sessionFactory\" class=\"headerlink\" title=\"在applicationContext.xml中添加dataSource与sessionFactory\"></a>在applicationContext.xml中添加dataSource与sessionFactory</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.commons.dbcp.BasicDataSource\"</span> <span class=\"attr\">destroy-method</span>=<span class=\"string\">\"close\"</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driverClassName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"com.mysql.jdbc.Driver\"</span> /&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"jdbc:mysql://localhost:3306/ssh\"</span> /&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"root\"</span> /&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"root\"</span> /&gt;</span>    </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span>  </div><div class=\"line\">    </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sessionFactory\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.orm.hibernate4.LocalSessionFactoryBean\"</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span>/&gt;</span> </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"packagesToScan\"</span>&gt;</span></div><div class=\"line\">        \t<span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></div><div class=\"line\">        \t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>cn.sakuraffy.ssh.model<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">        \t<span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernateProperties\"</span>&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">props</span>&gt;</span>  </div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"show_sql\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">props</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"添加mysql测试数据库及表\"><a href=\"#添加mysql测试数据库及表\" class=\"headerlink\" title=\"添加mysql测试数据库及表\"></a>添加mysql测试数据库及表</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">DATABASE</span> ssh;</div><div class=\"line\"><span class=\"keyword\">USE</span> ssh;</div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> t_user (</div><div class=\"line\">\t<span class=\"keyword\">id</span> <span class=\"built_in\">int</span> PRIMARY <span class=\"keyword\">KEY</span> AUTO_INCREMENT,</div><div class=\"line\">\t<span class=\"keyword\">name</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">20</span>)</div><div class=\"line\">);</div><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> t_user <span class=\"keyword\">VALUES</span>(<span class=\"number\">1</span>,<span class=\"string\">'sakuraffy'</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"添加实体类\"><a href=\"#添加实体类\" class=\"headerlink\" title=\"添加实体类\"></a>添加实体类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.ssh.model;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.persistence.Entity;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.persistence.GeneratedValue;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.persistence.Id;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Entity</span>(name=<span class=\"string\">\"t_user\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">9213000568883367937L</span>;                    </div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Id</span></div><div class=\"line\">\t<span class=\"meta\">@GeneratedValue</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String name;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> id;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"User [id=\"</span> + id + <span class=\"string\">\", name=\"</span> + name + <span class=\"string\">\"]\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"添加数据持久层接口UserDao及其实现UserDaoImpl\"><a href=\"#添加数据持久层接口UserDao及其实现UserDaoImpl\" class=\"headerlink\" title=\"添加数据持久层接口UserDao及其实现UserDaoImpl\"></a>添加数据持久层接口UserDao及其实现UserDaoImpl</h4><h5 id=\"UserDao\"><a href=\"#UserDao\" class=\"headerlink\" title=\"UserDao\"></a>UserDao</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.ssh.dao;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> cn.sakuraffy.ssh.model.User;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserDao</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"UserDaoImpl\"><a href=\"#UserDaoImpl\" class=\"headerlink\" title=\"UserDaoImpl\"></a>UserDaoImpl</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.ssh.dao.impl;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</div><div class=\"line\"><span class=\"keyword\">import</span> org.hibernate.SessionFactory;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Repository;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> cn.sakuraffy.ssh.dao.UserDao;</div><div class=\"line\"><span class=\"keyword\">import</span> cn.sakuraffy.ssh.model.User;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Repository</span>(<span class=\"string\">\"userDao\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserDaoImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserDao</span> </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Resource</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> SessionFactory sessionFactory;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> (User) sessionFactory.getCurrentSession()</div><div class=\"line\">\t\t\t\t.get(User.class, id);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"添加业务逻辑层接口UserService及其实现UserServiceImpl\"><a href=\"#添加业务逻辑层接口UserService及其实现UserServiceImpl\" class=\"headerlink\" title=\"添加业务逻辑层接口UserService及其实现UserServiceImpl\"></a>添加业务逻辑层接口UserService及其实现UserServiceImpl</h4><h5 id=\"UserService\"><a href=\"#UserService\" class=\"headerlink\" title=\"UserService\"></a>UserService</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.ssh.service;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> cn.sakuraffy.ssh.model.User;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserService</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"UserServiceImpl\"><a href=\"#UserServiceImpl\" class=\"headerlink\" title=\"UserServiceImpl\"></a>UserServiceImpl</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.ssh.service.impl;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> cn.sakuraffy.ssh.dao.UserDao;</div><div class=\"line\"><span class=\"keyword\">import</span> cn.sakuraffy.ssh.model.User;</div><div class=\"line\"><span class=\"keyword\">import</span> cn.sakuraffy.ssh.service.UserService;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Service</span>(<span class=\"string\">\"userService\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserService</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Resource</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> UserDao userDao;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> userDao.getById(id);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"在applicationContext-xml中配置声明式事务管理\"><a href=\"#在applicationContext-xml中配置声明式事务管理\" class=\"headerlink\" title=\"在applicationContext.xml中配置声明式事务管理\"></a>在applicationContext.xml中配置声明式事务管理</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transactionManager\"</span>  </span></div><div class=\"line\">\t    <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"</span>&gt;  </div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span> /&gt;</span>  </div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span>  </div><div class=\"line\"></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">tx:advice</span> <span class=\"attr\">id</span>=<span class=\"string\">\"txadvice\"</span> <span class=\"attr\">transaction-manager</span>=<span class=\"string\">\"transactionManager\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:attributes</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"add*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span> /&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"save*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span> /&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"update*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span> /&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"delete*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span> /&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"get*\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"SUPPORTS\"</span> /&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"find*\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"SUPPORTS\"</span> /&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"*\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"true\"</span> /&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">tx:attributes</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">tx:advice</span>&gt;</span> </div><div class=\"line\"></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">\"serviceMethods\"</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"execution(* cn.sakuraffy.ssh.service.impl.*.*(..))\"</span> /&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:advisor</span> <span class=\"attr\">advice-ref</span>=<span class=\"string\">\"txadvice\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"serviceMethods\"</span> /&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"在applicationContext-xml中配置组件扫描\"><a href=\"#在applicationContext-xml中配置组件扫描\" class=\"headerlink\" title=\"在applicationContext.xml中配置组件扫描\"></a>在applicationContext.xml中配置组件扫描</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"cn.sakuraffy.ssh\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"在SSHTest中添加测试方法\"><a href=\"#在SSHTest中添加测试方法\" class=\"headerlink\" title=\"在SSHTest中添加测试方法\"></a>在SSHTest中添加测试方法</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Resource</span></div><div class=\"line\"><span class=\"keyword\">private</span> UserService userService;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testGetById</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tSystem.out.println(userService.getById(<span class=\"number\">1</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Run As Maven test,如果下图所示，有User打印，则说明Spring与Hibernate整合成功<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/freamwork/ssh/p3.png\"></p>\n<h3 id=\"整合SSH\"><a href=\"#整合SSH\" class=\"headerlink\" title=\"整合SSH\"></a>整合SSH</h3><p>在pom.xml中加入Struts2与web相关依赖<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- Struts2版本 --&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">struts2.version</span>&gt;</span>2.3.31<span class=\"tag\">&lt;/<span class=\"name\">struts2.version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- servlet依赖 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- jstl依赖 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">   \t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>jstl<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jstl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- Struts2依赖 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.struts<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>struts2-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;struts2.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.struts<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>struts2-spring-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>                                    </div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;struts2.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span>   </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"修改web-xml文件\"><a href=\"#修改web-xml文件\" class=\"headerlink\" title=\"修改web.xml文件\"></a>修改web.xml文件</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> </span></div><div class=\"line\">\t<span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/javaee\"</span> </div><div class=\"line\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/javaee </span></div><div class=\"line\">\thttp://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\" <span class=\"attr\">version</span>=<span class=\"string\">\"3.0\"</span>&gt;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">display-name</span>&gt;</span>template<span class=\"tag\">&lt;/<span class=\"name\">display-name</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">welcome-file-list</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">welcome-file</span>&gt;</span>index.jsp<span class=\"tag\">&lt;/<span class=\"name\">welcome-file</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">welcome-file-list</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:applicationContext.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>struts2<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>struts2<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.action<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"添加Action类\"><a href=\"#添加Action类\" class=\"headerlink\" title=\"添加Action类\"></a>添加Action类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.ssh.action;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.struts2.ServletActionContext;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.opensymphony.xwork2.ActionSupport;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> cn.sakuraffy.ssh.model.User;</div><div class=\"line\"><span class=\"keyword\">import</span> cn.sakuraffy.ssh.service.UserService;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Controller</span>(<span class=\"string\">\"userAction\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserAction</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionSupport</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">6382018041366588184L</span>;                    </div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Resource</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> UserService userService;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> id;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getById</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tUser user = userService.getById(id);</div><div class=\"line\">\t\tSystem.out.println(user);</div><div class=\"line\">\t\tHttpServletRequest request = ServletActionContext.getRequest();</div><div class=\"line\">\t\trequest.setAttribute(<span class=\"string\">\"user\"</span>, user);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"index\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"添加struts-xml\"><a href=\"#添加struts-xml\" class=\"headerlink\" title=\"添加struts.xml\"></a>添加struts.xml</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE struts PUBLIC</span></div><div class=\"line\">    \"-//Apache Software Foundation//DTD Struts Configuration 2.0//EN\"</div><div class=\"line\">    \"http://struts.apache.org/dtds/struts-2.0.dtd\"&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">struts</span>&gt;</span></div><div class=\"line\"> \t<span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"struts-default\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user_*\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"userAction\"</span> <span class=\"attr\">method</span> = <span class=\"string\">\"&#123;1&#125;\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"index\"</span>&gt;</span>/index.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">struts</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"在pom-xml中添加jetty容器插件\"><a href=\"#在pom-xml中添加jetty容器插件\" class=\"headerlink\" title=\"在pom.xml中添加jetty容器插件\"></a>在pom.xml中添加jetty容器插件</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>ssh<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span> </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mortbay.jetty<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jetty-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8.1.16.v20140903<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">scanIntervalSeconds</span>&gt;</span>60<span class=\"tag\">&lt;/<span class=\"name\">scanIntervalSeconds</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">webApp</span>&gt;</span></div><div class=\"line\">                   <span class=\"tag\">&lt;<span class=\"name\">contextPath</span>&gt;</span>/ssh<span class=\"tag\">&lt;/<span class=\"name\">contextPath</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;/<span class=\"name\">webApp</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">connectors</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">connector</span> <span class=\"attr\">implementation</span>=<span class=\"string\">\"org.eclipse.jetty.server.nio.SelectChannelConnector\"</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>8080<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">connector</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">connectors</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">         <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"修改index-jsp\"><a href=\"#修改index-jsp\" class=\"headerlink\" title=\"修改index.jsp\"></a>修改index.jsp</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">language</span>=<span class=\"string\">\"java\"</span> <span class=\"attr\">import</span>=<span class=\"string\">\"java.util.*\"</span> <span class=\"attr\">pageEncoding</span>=<span class=\"string\">\"UTF-8\"</span>%&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">taglib</span> <span class=\"attr\">uri</span>=<span class=\"string\">\"http://java.sun.com/jsp/jstl/core\"</span> <span class=\"attr\">prefix</span>=<span class=\"string\">\"c\"</span> %&gt;</span></div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"user_getById.action?id=1\"</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> $&#123;user.name &#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Run AS Maven Build,输入jetty：run，如图<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/freamwork/ssh/p4.png\"></p>\n<p>打开浏览器，输入 <a href=\"http://localhost:8080/ssh\" target=\"_blank\" rel=\"external\">http://localhost:8080/ssh</a> ,点击Hello，得到下图结果，至此SSH整合完毕<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/freamwork/ssh/p5.png\"></p>\n","excerpt":"<p>在实际开发中，我们习惯将项目分为三层，展示层，业务逻辑层，数据持久层。对于展现层我们一般会用到Strust2/Spring MVC，而数据层我们往往会用到Hibernate/Mybatis，这里我将介绍一下SSH(Spring + Struts2 + Hibernate)的搭建，至于SSM的搭建请参考<a href=\"https://sakuraffy.github.io/freamwork_ssm\">maven搭建SSM</a></p>","more":"<p>首先创建一个maven项目，这里不再赘述了，如果不太清楚，请参考<a href=\"https://sakuraffy.github.io/maven_project_create\">maven项目搭建</a><br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/freamwork/ssh/p1.png\"></p>\n<h3 id=\"整合Spring\"><a href=\"#整合Spring\" class=\"headerlink\" title=\"整合Spring\"></a>整合Spring</h3><h4 id=\"在pom-xml中添加spring相应的依赖\"><a href=\"#在pom-xml中添加spring相应的依赖\" class=\"headerlink\" title=\"在pom.xml中添加spring相应的依赖\"></a>在pom.xml中添加spring相应的依赖</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- spring版本号 --&gt;</span>    </div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">spring.version</span>&gt;</span>4.1.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">spring.version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- Spring依赖 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>                                        </div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"在src-main-resources下添加applicationContext-xml\"><a href=\"#在src-main-resources下添加applicationContext-xml\" class=\"headerlink\" title=\"在src/main/resources下添加applicationContext.xml\"></a>在src/main/resources下添加applicationContext.xml</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span>  </div><div class=\"line\">    <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> </div><div class=\"line\">    <span class=\"attr\">xmlns:p</span>=<span class=\"string\">\"http://www.springframework.org/schema/p\"</span>  </div><div class=\"line\">    <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span>  </div><div class=\"line\">    <span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">\"http://www.springframework.org/schema/mvc\"</span>  </div><div class=\"line\">    <span class=\"attr\">xmlns:tx</span>=<span class=\"string\">\"http://www.springframework.org/schema/tx\"</span>  </div><div class=\"line\">    <span class=\"attr\">xmlns:aop</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop\"</span>  </div><div class=\"line\">    <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans    </div><div class=\"line\">       http://www.springframework.org/schema/beans/spring-beans-4.1.xsd    </div><div class=\"line\">       http://www.springframework.org/schema/context    </div><div class=\"line\">       http://www.springframework.org/schema/context/spring-context-4.1.xsd                  </div><div class=\"line\">       http://www.springframework.org/schema/tx   </div><div class=\"line\">       http://www.springframework.org/schema/tx/spring-tx-4.1.xsd    </div><div class=\"line\">       http://www.springframework.org/schema/aop   </div><div class=\"line\">       http://www.springframework.org/schema/aop/spring-aop-4.1.xsd    </div><div class=\"line\">       http://www.springframework.org/schema/mvc    </div><div class=\"line\">       http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd\"</span>&gt;</span>  </div><div class=\"line\">       </div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"date\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"java.util.Date\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\">      </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"在src-test-java下添加测试类SSHTest\"><a href=\"#在src-test-java下添加测试类SSHTest\" class=\"headerlink\" title=\"在src/test/java下添加测试类SSHTest\"></a>在src/test/java下添加测试类SSHTest</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.ssh.test;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</div><div class=\"line\"><span class=\"keyword\">import</span> org.junit.runner.RunWith;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.context.ContextConfiguration;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class=\"line\"><span class=\"meta\">@ContextConfiguration</span>(locations=<span class=\"string\">\"classpath:applicationContext.xml\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SSHTest</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Resource</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> Date date;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSpring</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(date);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Run As Maven test,如果下图所示，有日期打印，则说明Spring搭建成功<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/freamwork/ssh/p2.png\"></p>\n<h3 id=\"整合Spring-Hibernate\"><a href=\"#整合Spring-Hibernate\" class=\"headerlink\" title=\"整合Spring + Hibernate\"></a>整合Spring + Hibernate</h3><h4 id=\"在pom-xml中添加Hibernate和数据库相关依赖\"><a href=\"#在pom-xml中添加Hibernate和数据库相关依赖\" class=\"headerlink\" title=\"在pom.xml中添加Hibernate和数据库相关依赖\"></a>在pom.xml中添加Hibernate和数据库相关依赖</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- ... 不再显示已有内容--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- Hibernate版本号 --&gt;</span>    </div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">hibernate.version</span>&gt;</span>4.1.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">hibernate.version</span>&gt;</span>                                  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- Spring与Hibernate整合依赖 --&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-orm<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">     </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>  </div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.aspectj<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aspectjweaver<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.8.9<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- Hibernate依赖 --&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.hibernate<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hibernate-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;hibernate.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- mysql驱动依赖 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.30<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 连接池依赖 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-dbcp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-dbcp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t   <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"在applicationContext-xml中添加dataSource与sessionFactory\"><a href=\"#在applicationContext-xml中添加dataSource与sessionFactory\" class=\"headerlink\" title=\"在applicationContext.xml中添加dataSource与sessionFactory\"></a>在applicationContext.xml中添加dataSource与sessionFactory</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.commons.dbcp.BasicDataSource\"</span> <span class=\"attr\">destroy-method</span>=<span class=\"string\">\"close\"</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driverClassName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"com.mysql.jdbc.Driver\"</span> /&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"jdbc:mysql://localhost:3306/ssh\"</span> /&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"root\"</span> /&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"root\"</span> /&gt;</span>    </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span>  </div><div class=\"line\">    </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sessionFactory\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.orm.hibernate4.LocalSessionFactoryBean\"</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span>/&gt;</span> </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"packagesToScan\"</span>&gt;</span></div><div class=\"line\">        \t<span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></div><div class=\"line\">        \t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>cn.sakuraffy.ssh.model<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">        \t<span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernateProperties\"</span>&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">props</span>&gt;</span>  </div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"show_sql\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">props</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"添加mysql测试数据库及表\"><a href=\"#添加mysql测试数据库及表\" class=\"headerlink\" title=\"添加mysql测试数据库及表\"></a>添加mysql测试数据库及表</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">DATABASE</span> ssh;</div><div class=\"line\"><span class=\"keyword\">USE</span> ssh;</div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> t_user (</div><div class=\"line\">\t<span class=\"keyword\">id</span> <span class=\"built_in\">int</span> PRIMARY <span class=\"keyword\">KEY</span> AUTO_INCREMENT,</div><div class=\"line\">\t<span class=\"keyword\">name</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">20</span>)</div><div class=\"line\">);</div><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> t_user <span class=\"keyword\">VALUES</span>(<span class=\"number\">1</span>,<span class=\"string\">'sakuraffy'</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"添加实体类\"><a href=\"#添加实体类\" class=\"headerlink\" title=\"添加实体类\"></a>添加实体类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.ssh.model;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.persistence.Entity;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.persistence.GeneratedValue;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.persistence.Id;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Entity</span>(name=<span class=\"string\">\"t_user\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">9213000568883367937L</span>;                    </div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Id</span></div><div class=\"line\">\t<span class=\"meta\">@GeneratedValue</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String name;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> id;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"User [id=\"</span> + id + <span class=\"string\">\", name=\"</span> + name + <span class=\"string\">\"]\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"添加数据持久层接口UserDao及其实现UserDaoImpl\"><a href=\"#添加数据持久层接口UserDao及其实现UserDaoImpl\" class=\"headerlink\" title=\"添加数据持久层接口UserDao及其实现UserDaoImpl\"></a>添加数据持久层接口UserDao及其实现UserDaoImpl</h4><h5 id=\"UserDao\"><a href=\"#UserDao\" class=\"headerlink\" title=\"UserDao\"></a>UserDao</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.ssh.dao;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> cn.sakuraffy.ssh.model.User;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserDao</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"UserDaoImpl\"><a href=\"#UserDaoImpl\" class=\"headerlink\" title=\"UserDaoImpl\"></a>UserDaoImpl</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.ssh.dao.impl;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</div><div class=\"line\"><span class=\"keyword\">import</span> org.hibernate.SessionFactory;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Repository;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> cn.sakuraffy.ssh.dao.UserDao;</div><div class=\"line\"><span class=\"keyword\">import</span> cn.sakuraffy.ssh.model.User;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Repository</span>(<span class=\"string\">\"userDao\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserDaoImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserDao</span> </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Resource</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> SessionFactory sessionFactory;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> (User) sessionFactory.getCurrentSession()</div><div class=\"line\">\t\t\t\t.get(User.class, id);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"添加业务逻辑层接口UserService及其实现UserServiceImpl\"><a href=\"#添加业务逻辑层接口UserService及其实现UserServiceImpl\" class=\"headerlink\" title=\"添加业务逻辑层接口UserService及其实现UserServiceImpl\"></a>添加业务逻辑层接口UserService及其实现UserServiceImpl</h4><h5 id=\"UserService\"><a href=\"#UserService\" class=\"headerlink\" title=\"UserService\"></a>UserService</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.ssh.service;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> cn.sakuraffy.ssh.model.User;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserService</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"UserServiceImpl\"><a href=\"#UserServiceImpl\" class=\"headerlink\" title=\"UserServiceImpl\"></a>UserServiceImpl</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.ssh.service.impl;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> cn.sakuraffy.ssh.dao.UserDao;</div><div class=\"line\"><span class=\"keyword\">import</span> cn.sakuraffy.ssh.model.User;</div><div class=\"line\"><span class=\"keyword\">import</span> cn.sakuraffy.ssh.service.UserService;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Service</span>(<span class=\"string\">\"userService\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserService</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Resource</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> UserDao userDao;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> userDao.getById(id);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"在applicationContext-xml中配置声明式事务管理\"><a href=\"#在applicationContext-xml中配置声明式事务管理\" class=\"headerlink\" title=\"在applicationContext.xml中配置声明式事务管理\"></a>在applicationContext.xml中配置声明式事务管理</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transactionManager\"</span>  </div><div class=\"line\">\t    <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"</span>&gt;</span>  </div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span> /&gt;</span>  </div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span>  </div><div class=\"line\"></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">tx:advice</span> <span class=\"attr\">id</span>=<span class=\"string\">\"txadvice\"</span> <span class=\"attr\">transaction-manager</span>=<span class=\"string\">\"transactionManager\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:attributes</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"add*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span> /&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"save*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span> /&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"update*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span> /&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"delete*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span> /&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"get*\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"SUPPORTS\"</span> /&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"find*\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"SUPPORTS\"</span> /&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"*\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"true\"</span> /&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">tx:attributes</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">tx:advice</span>&gt;</span> </div><div class=\"line\"></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">\"serviceMethods\"</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"execution(* cn.sakuraffy.ssh.service.impl.*.*(..))\"</span> /&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:advisor</span> <span class=\"attr\">advice-ref</span>=<span class=\"string\">\"txadvice\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"serviceMethods\"</span> /&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"在applicationContext-xml中配置组件扫描\"><a href=\"#在applicationContext-xml中配置组件扫描\" class=\"headerlink\" title=\"在applicationContext.xml中配置组件扫描\"></a>在applicationContext.xml中配置组件扫描</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"cn.sakuraffy.ssh\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"在SSHTest中添加测试方法\"><a href=\"#在SSHTest中添加测试方法\" class=\"headerlink\" title=\"在SSHTest中添加测试方法\"></a>在SSHTest中添加测试方法</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Resource</span></div><div class=\"line\"><span class=\"keyword\">private</span> UserService userService;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testGetById</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tSystem.out.println(userService.getById(<span class=\"number\">1</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Run As Maven test,如果下图所示，有User打印，则说明Spring与Hibernate整合成功<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/freamwork/ssh/p3.png\"></p>\n<h3 id=\"整合SSH\"><a href=\"#整合SSH\" class=\"headerlink\" title=\"整合SSH\"></a>整合SSH</h3><p>在pom.xml中加入Struts2与web相关依赖<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- Struts2版本 --&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">struts2.version</span>&gt;</span>2.3.31<span class=\"tag\">&lt;/<span class=\"name\">struts2.version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- servlet依赖 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- jstl依赖 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">   \t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>jstl<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jstl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- Struts2依赖 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.struts<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>struts2-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;struts2.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.struts<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>struts2-spring-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>                                    </div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;struts2.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span>   </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"修改web-xml文件\"><a href=\"#修改web-xml文件\" class=\"headerlink\" title=\"修改web.xml文件\"></a>修改web.xml文件</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> </div><div class=\"line\">\t<span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/javaee\"</span> </div><div class=\"line\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/javaee </div><div class=\"line\">\thttp://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"3.0\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">display-name</span>&gt;</span>template<span class=\"tag\">&lt;/<span class=\"name\">display-name</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">welcome-file-list</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">welcome-file</span>&gt;</span>index.jsp<span class=\"tag\">&lt;/<span class=\"name\">welcome-file</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">welcome-file-list</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:applicationContext.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>struts2<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>struts2<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.action<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"添加Action类\"><a href=\"#添加Action类\" class=\"headerlink\" title=\"添加Action类\"></a>添加Action类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.ssh.action;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.struts2.ServletActionContext;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.opensymphony.xwork2.ActionSupport;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> cn.sakuraffy.ssh.model.User;</div><div class=\"line\"><span class=\"keyword\">import</span> cn.sakuraffy.ssh.service.UserService;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Controller</span>(<span class=\"string\">\"userAction\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserAction</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionSupport</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">6382018041366588184L</span>;                    </div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Resource</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> UserService userService;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> id;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getById</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tUser user = userService.getById(id);</div><div class=\"line\">\t\tSystem.out.println(user);</div><div class=\"line\">\t\tHttpServletRequest request = ServletActionContext.getRequest();</div><div class=\"line\">\t\trequest.setAttribute(<span class=\"string\">\"user\"</span>, user);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"index\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"添加struts-xml\"><a href=\"#添加struts-xml\" class=\"headerlink\" title=\"添加struts.xml\"></a>添加struts.xml</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE struts PUBLIC</div><div class=\"line\">    \"-//Apache Software Foundation//DTD Struts Configuration 2.0//EN\"</div><div class=\"line\">    \"http://struts.apache.org/dtds/struts-2.0.dtd\"&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">struts</span>&gt;</span></div><div class=\"line\"> \t<span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"struts-default\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user_*\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"userAction\"</span> <span class=\"attr\">method</span> = <span class=\"string\">\"&#123;1&#125;\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"index\"</span>&gt;</span>/index.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">struts</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"在pom-xml中添加jetty容器插件\"><a href=\"#在pom-xml中添加jetty容器插件\" class=\"headerlink\" title=\"在pom.xml中添加jetty容器插件\"></a>在pom.xml中添加jetty容器插件</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>ssh<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span> </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mortbay.jetty<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jetty-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8.1.16.v20140903<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">scanIntervalSeconds</span>&gt;</span>60<span class=\"tag\">&lt;/<span class=\"name\">scanIntervalSeconds</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">webApp</span>&gt;</span></div><div class=\"line\">                   <span class=\"tag\">&lt;<span class=\"name\">contextPath</span>&gt;</span>/ssh<span class=\"tag\">&lt;/<span class=\"name\">contextPath</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;/<span class=\"name\">webApp</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">connectors</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">connector</span> <span class=\"attr\">implementation</span>=<span class=\"string\">\"org.eclipse.jetty.server.nio.SelectChannelConnector\"</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>8080<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">connector</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">connectors</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">         <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"修改index-jsp\"><a href=\"#修改index-jsp\" class=\"headerlink\" title=\"修改index.jsp\"></a>修改index.jsp</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">language</span>=<span class=\"string\">\"java\"</span> <span class=\"attr\">import</span>=<span class=\"string\">\"java.util.*\"</span> <span class=\"attr\">pageEncoding</span>=<span class=\"string\">\"UTF-8\"</span>%&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">taglib</span> <span class=\"attr\">uri</span>=<span class=\"string\">\"http://java.sun.com/jsp/jstl/core\"</span> <span class=\"attr\">prefix</span>=<span class=\"string\">\"c\"</span> %&gt;</span></div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"user_getById.action?id=1\"</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> $&#123;user.name &#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Run AS Maven Build,输入jetty：run，如图<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/freamwork/ssh/p4.png\"></p>\n<p>打开浏览器，输入 <a href=\"http://localhost:8080/ssh\">http://localhost:8080/ssh</a> ,点击Hello，得到下图结果，至此SSH整合完毕<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/freamwork/ssh/p5.png\"></p>"},{"title":"maven搭建SSM","date":"2016-09-27T06:56:29.000Z","_content":"在实际开发中，我们习惯将项目分为三层，展示层，业务逻辑层，数据持久层。对于展现层我们一般会用到Strust2/Spring MVC，而数据层我们往往会用到Hibernate/Mybatis，这里我将介绍一下SSM(Spring + Spring MVC + Mybatis)的搭建，至于SSH的搭建请参考[maven搭建SSH](https://sakuraffy.github.io/freamwork_ssh)\n\n<!-- more -->\n\n首先创建一个maven项目，这里不再赘述了，如果不太清楚，请参考[maven项目搭建](https://sakuraffy.github.io/maven_project_create)\n{% qnimg freamwork/ssm/p1.png 'class:class1 class2' normal:yes %}\n\n### 整合Spring\n\n#### 在pom.xml中添加spring相应的依赖\n``` xml\n<properties>\n\t<!-- spring版本号 -->    \n\t<spring.version>4.1.9.RELEASE</spring.version>\n</properties>\n\n<dependencies>\n\n\t<dependency>\n\t\t<groupId>junit</groupId>\n\t\t<artifactId>junit</artifactId>\n\t\t<version>4.12</version>\n\t\t<scope>test</scope>\n\t</dependency>\n\n\t<!-- Spring依赖 -->\n\t<dependency>\n\t\t<groupId>org.springframework</groupId>                                        \n\t\t<artifactId>spring-core</artifactId>\n\t\t<version>${spring.version}</version>\n\t</dependency>\n\n\t<dependency>\n\t\t<groupId>org.springframework</groupId>\n\t\t<artifactId>spring-context</artifactId>\n\t\t<version>${spring.version}</version>\n\t</dependency>\n\n\t<dependency>\n\t\t<groupId>org.springframework</groupId>\n\t\t<artifactId>spring-test</artifactId>\n\t\t<version>${spring.version}</version>\n\t</dependency>\n\n</dependencies>\n\n```\n\n#### 在src/main/resources下添加applicationContext.xml\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>  \n<beans xmlns=\"http://www.springframework.org/schema/beans\"  \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n    xmlns:p=\"http://www.springframework.org/schema/p\"  \n    xmlns:context=\"http://www.springframework.org/schema/context\"                            \n    xmlns:mvc=\"http://www.springframework.org/schema/mvc\"  \n    xmlns:tx=\"http://www.springframework.org/schema/tx\"  \n    xmlns:aop=\"http://www.springframework.org/schema/aop\"  \n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans    \n       http://www.springframework.org/schema/beans/spring-beans-4.1.xsd    \n       http://www.springframework.org/schema/context    \n       http://www.springframework.org/schema/context/spring-context-4.1.xsd    \n       http://www.springframework.org/schema/tx   \n       http://www.springframework.org/schema/tx/spring-tx-4.1.xsd    \n       http://www.springframework.org/schema/aop   \n       http://www.springframework.org/schema/aop/spring-aop-4.1.xsd    \n       http://www.springframework.org/schema/mvc    \n       http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd\">  \n       \n     <bean id=\"date\" class=\"java.util.Date\"></bean>\n      \n</beans>\n```\n\n#### 在src/test/java下添加测试类SSMTest\n``` java\npackage cn.sakuraffy.ssm.test;\n\nimport java.util.Date;\n\nimport javax.annotation.Resource;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(locations=\"classpath:applicationContext.xml\")\npublic class SSMTest {\n\n\t@Resource\n\tprivate Date date;\n\t\n\t@Test\n\tpublic void testSpring() {                                                            \n\t\tSystem.out.println(date);\n\t}\n\n\t@Resource\n\tprivate Date date;\n\t\n\t@Test\n\tpublic void testSpring() {\n\t\tSystem.out.println(date);\n\t}\n}\n\n```\nRun As Maven test,如果下图所示，有日期打印，则说明Spring搭建成功\n{% qnimg freamwork/ssm/p2.png 'class:class1 class2' normal:yes %} \n\n### 整合Spring+Mybatis\n#### 在pom.xml中添加Mybatis和数据库相关依赖\n``` xml\n<!-- ... 不再显示已有内容-->\n<properties>\n\t <!-- mybatis版本号 -->  \n     <mybatis.version>3.2.6</mybatis.version>\n</properties>\n\n<dependencies>\n\t<!-- Spring与Mybatis整合依赖 -->\n\n    <dependency>  \n        <groupId>org.springframework</groupId>  \n        <artifactId>spring-jdbc</artifactId>  \n        <version>${spring.version}</version>  \n    </dependency>\n     \n    <dependency>  \n      <groupId>org.aspectj</groupId>  \n      <artifactId>aspectjweaver</artifactId>                                                  \n      <version>1.8.9</version>  \n    </dependency>\n\n\t<!-- mybatis核心包 -->  \n    <dependency>  \n        <groupId>org.mybatis</groupId>  \n        <artifactId>mybatis</artifactId>  \n        <version>${mybatis.version}</version>  \n    </dependency>  \n    <!-- mybatis/spring包 -->  \n    <dependency>  \n        <groupId>org.mybatis</groupId>  \n        <artifactId>mybatis-spring</artifactId>  \n        <version>1.2.2</version>  \n    </dependency>  \n\t<!-- mysql驱动依赖 -->\n    <dependency>\n\t    <groupId>mysql</groupId>\n\t    <artifactId>mysql-connector-java</artifactId>\t\t\t\t    \n\t    <version>5.1.30</version>\n    </dependency>\n    <!-- 连接池依赖 -->\n    <dependency>\n\t   <groupId>commons-dbcp</groupId>\n\t   <artifactId>commons-dbcp</artifactId>\n\t   <version>1.4</version>\n    </dependency>\n</dependencies>\n\n```\n\n#### 添加mysql测试数据库及表\n``` sql\n\tCREATE DATABASE ssm;\n\tUSE ssm;\n\tCREATE TABLE t_user (\n\t\tid int PRIMARY KEY AUTO_INCREMENT,\n\t\tname VARCHAR(20)\n\t);\n\tINSERT INTO t_user VALUES(1,'sakuraffy');\n```\n\n#### 添加实体类\n``` java\n\tpackage cn.sakuraffy.ssm.model;\n\n\timport java.io.Serializable;\n\n\tpublic class User implements Serializable {\n\n\t\tprivate static final long serialVersionUID = 9213000568883367937L;             \t      \n\t\t\n\t\tprivate int id;\n\t\tprivate String name;\n\t\t\n\t\tpublic User() {\n\t\t}\n\t\t\n\t\tpublic User(String name) {\n\t\t\tsuper();\n\t\t\tthis.name = name;\n\t\t}\n\n\t\tpublic final int getId() {\n\t\t\treturn id;\n\t\t}\n\t\tpublic final void setId(int id) {\n\t\t\tthis.id = id;\n\t\t}\n\t\tpublic final String getName() {\n\t\t\treturn name;\n\t\t}\n\t\tpublic final void setName(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn \"User [id=\" + id + \", name=\" + name + \"]\";\n\t\t}\n\t\t\n\t}\n```\n\n#### 添加数据持久层接口UserDao及UserMapper.xml\n##### UserDao\n``` java\npackage cn.sakuraffy.ssm.dao;\n\nimport cn.sakuraffy.ssm.model.User;\n\npublic interface UserDao {\n\tpublic User getById(int id);\n}\n```\n##### UserMapper.xml\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper\nPUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n\n<mapper namespace=\"cn.sakuraffy.ssm.dao.UserDao\">\n\t<select id=\"getById\" parameterType=\"int\" resultType=\"User\">\n\t\tSELECT * FROM t_user WHERE id = #{id}\n\t</select>\n</mapper>\n```\n\n#### 添加业务逻辑层接口UserService及其实现UserServiceImpl\n##### UserService\n``` java\npackage cn.sakuraffy.ssm.service;\n\nimport cn.sakuraffy.ssm.model.User;\n\npublic interface UserService {\n\tpublic User getById(int id);\n}\n\n```\n\n##### UserServiceImpl\n``` java\npackage cn.sakuraffy.ssm.service.impl;\n\nimport javax.annotation.Resource;\n\nimport org.springframework.stereotype.Service;\n\nimport cn.sakuraffy.ssm.dao.UserDao;\nimport cn.sakuraffy.ssm.model.User;\nimport cn.sakuraffy.ssm.service.UserService;\n\n@Service(\"userService\")\npublic class UserServiceImpl implements UserService {\n\n\t@Resource\n\tprivate UserDao userDao;\n\t\n\t@Override\n\tpublic User getById(int id) {\n\t\treturn userDao.getById(id);\n\t}\n}\n```\n\n#### 在applicationContext.xml中添加dataSource与sqlSessionFactory\n``` xml\n<beans>\n    <bean id=\"dataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\" destroy-method=\"close\">  \n        <property name=\"driverClassName\" value=\"com.mysql.jdbc.Driver\" />  \n        <property name=\"url\" value=\"jdbc:mysql://localhost:3306/ssm\" />  \n        <property name=\"username\" value=\"root\" />  \n        <property name=\"password\" value=\"root\" />    \n    </bean>  \n     \n    <bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">  \n        <property name=\"dataSource\" ref=\"dataSource\" />\n        <!-- 为实体配置别名 -->\n        <property name=\"typeAliasesPackage\" value=\"cn.sakuraffy.ssm.model\" /> \n        <!-- 自动扫描mapping.xml文件 -->  \n        <property name=\"mapperLocations\" value=\"classpath:cn/sakuraffy/ssm/mapper/*.xml\" />  \n    </bean> \n\n    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->  \n    <bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">  \n        <property name=\"basePackage\" value=\"cn.sakuraffy.ssm.dao\" />  \n        <property name=\"sqlSessionFactoryBeanName\" value=\"sqlSessionFactory\" />  \n    </bean> \n</beans>\n```\n\n#### 在applicationContext.xml中配置声明式事务管理\n``` xml\n<beans>\n\t<bean id=\"transactionManager\"  \n\t    class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">  \n\t    <property name=\"dataSource\" ref=\"dataSource\" />  \n\t</bean>  \n\n\t<tx:advice id=\"txadvice\" transaction-manager=\"transactionManager\">\n\t\t<tx:attributes>\n\t\t\t<tx:method name=\"add*\" propagation=\"REQUIRED\" />\n\t\t\t<tx:method name=\"save*\" propagation=\"REQUIRED\" />\n\t\t\t<tx:method name=\"update*\" propagation=\"REQUIRED\" />\n\t\t\t<tx:method name=\"delete*\" propagation=\"REQUIRED\" />\n\t\t\t<tx:method name=\"get*\" read-only=\"true\" propagation=\"SUPPORTS\" />\n\t\t\t<tx:method name=\"find*\" read-only=\"true\" propagation=\"SUPPORTS\" />\n\t\t\t<tx:method name=\"*\" read-only=\"true\" />\n\t\t</tx:attributes>\n\t</tx:advice> \n\n\t<aop:config>\n\t\t<aop:pointcut id=\"serviceMethods\" expression=\"execution(* cn.sakuraffy.ssm.service.impl.*.*(..))\" />\n\t\t<aop:advisor advice-ref=\"txadvice\" pointcut-ref=\"serviceMethods\" />\n\t</aop:config>\n</beans>\n```\n\n#### 在applicationContext.xml中配置组件扫描\n``` xml\n<beans>\n\t<context:component-scan base-package=\"cn.sakuraffy.ssm\" />\n</beans>\n```\n\n#### 在SSHTest中添加测试方法\n``` java\n\t@Resource\n\tprivate UserService userService;\n\n\t@Test\n\tpublic void testGetById() {\n\t\tSystem.out.println(userService.getById(1));\n\t}\n```\nRun As Maven test,如果下图所示，有User打印，则说明Spring与Mybatis整合成功\n{% qnimg freamwork/ssm/p4.png 'class:class1 class2' normal:yes %}\n如果不幸抛出下图错误，在pom.xml中加入资源处理\n{% qnimg freamwork/ssm/p3.png 'class:class1 class2' normal:yes %}\n``` xml\n<build>\n  <resources>\n    <resource>\n  \t  <directory>src/main/java</directory>\n   \t  <includes>\n  \t    <include>**/*.xml</include>\n \t  </includes>\n    </resource>\n  </resources>\n</build>\n```\n\n### 整合SSM\n在pom.xml中加入Spring与web相关依赖\n``` xml\n<dependencies>\n\t<dependency>\n\t\t<groupId>org.springframework</groupId>\n\t\t<artifactId>spring-web</artifactId>\n\t\t<version>${spring.version}</version>\n\t</dependency>\n\t\n\t<dependency>\n\t\t<groupId>org.springframework</groupId>\n\t\t<artifactId>spring-webmvc</artifactId>\n\t\t<version>${spring.version}</version>\n\t</dependency>\n\t<!-- servlet依赖 -->\n\t<dependency>\n\t    <groupId>javax.servlet</groupId>\n\t    <artifactId>javax.servlet-api</artifactId>                                        \n\t    <version>3.1.0</version>\n\t</dependency>\n\n\t<!-- jstl依赖 -->\n\t<dependency>\n   \t\t<groupId>jstl</groupId>\n    \t<artifactId>jstl</artifactId>\n    \t<version>1.2</version>\n\t</dependency>\n</dependencies>\n```\n\n#### 修改web.xml文件\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n\txmlns=\"http://java.sun.com/xml/ns/javaee\" \n\txsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee \n\thttp://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\" version=\"3.0\">\n  <display-name>ssm</display-name>\n  <welcome-file-list>\n    <welcome-file>index.jsp</welcome-file>\n  </welcome-file-list>\n  <listener>\n    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>    \n  </listener>\n  <context-param>\n    <param-name>contextConfigLocation</param-name>\n    <param-value>classpath:applicationContext.xml</param-value>\n  </context-param>\n  \n  <servlet>\n  \t<servlet-name>SpringMVC</servlet-name>\n  \t<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n  \t<init-param>\n  \t\t<param-name>contextConfigLocation</param-name>\n    \t<param-value>classpath:spring-mvc.xml</param-value>\n  \t</init-param>\n  \t<load-on-startup>1</load-on-startup>\n  </servlet>\n  \n  <servlet-mapping>\n  \t<servlet-name>SpringMVC</servlet-name>\n  \t<url-pattern>*.do</url-pattern>\n  </servlet-mapping>\n  \n</web-app>\n```\n\n#### 添加spring-mvc.xml\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>  \n<beans xmlns=\"http://www.springframework.org/schema/beans\"  \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n    xmlns:p=\"http://www.springframework.org/schema/p\"  \n    xmlns:context=\"http://www.springframework.org/schema/context\"  \n    xmlns:mvc=\"http://www.springframework.org/schema/mvc\"  \n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans    \n      http://www.springframework.org/schema/beans/spring-beans-3.1.xsd    \n      http://www.springframework.org/schema/context    \n      http://www.springframework.org/schema/context/spring-context-3.1.xsd    \n      http://www.springframework.org/schema/mvc    \n      http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd\">  \n    \n    <context:component-scan base-package=\"cn.sakuraffy.ssm.controller\" />\n\n    <!-- 配置视图渲染器(也可以不配)-->  \n    <bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">          \n        <property name=\"prefix\" value=\"/\" />  \n        <property name=\"suffix\" value=\".jsp\" />  \n    </bean> \n    \n</beans>\n```\n\n#### 添加Controller类\n``` java\npackage cn.sakuraffy.ssm.controller;\n\nimport javax.annotation.Resource;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.ModelMap;\nimport org.springframework.web.bind.annotation.RequestMapping;                               \n\nimport cn.sakuraffy.ssm.model.User;\nimport cn.sakuraffy.ssm.service.UserService;\n\n@Controller(\"userController\")\npublic class UserController {\n\t\n\t@Resource\n\tprivate UserService userService;\n\t\n\t@RequestMapping(\"/getById\")\n\tpublic String getById(int id, ModelMap model) {\n\t\tUser user = userService.getById(id);\n\t\tSystem.out.println(user);\n\t\tmodel.addAttribute(\"user\", user);\n\t\treturn \"index\";\n\t}\n}\n```\n\n#### 在pom.xml中添加jetty容器插件\n``` xml\n<build>\n  \t<finalName>ssm</finalName>\n    <plugins> \n        <plugin>\n           <groupId>org.mortbay.jetty</groupId>\n           <artifactId>jetty-maven-plugin</artifactId>\n           <version>8.1.16.v20140903</version>\n           <configuration>\n               <scanIntervalSeconds>60</scanIntervalSeconds>\n               <webApp>\n                   <contextPath>/ssm</contextPath>\n               </webApp>\n               <connectors>\n                    <connector implementation=\"org.eclipse.jetty.server.nio.SelectChannelConnector\">\n                        <port>8080</port>\n                    </connector>\n                </connectors>\n            </configuration>\n         </plugin>\n    </plugins>\n</build>\t\n```\n#### 修改index.jsp\n``` html\n<%@ page language=\"java\" import=\"java.util.*\" pageEncoding=\"UTF-8\"%>\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n<html>\n  <body>\n    <a href=\"user_getById.action?id=1\">Hello</a> ${user.name }\n  </body>\n</html>\n```\nRun AS Maven Build,输入jetty：run，如图\n{% qnimg freamwork/ssm/p5.png 'class:class1 class2' normal:yes %}\n\n打开浏览器，输入 http://localhost:8080/ssh ,点击Hello，得到下图结果，至此SSM整合完毕\n{% qnimg freamwork/ssm/p6.png 'class:class1 class2' normal:yes %}\n","source":"_posts/freamwork_ssm.md","raw":"---\ntitle: maven搭建SSM\ndate: 2016-09-27 14:56:29\ntags: \n\t- freamwork\n---\n在实际开发中，我们习惯将项目分为三层，展示层，业务逻辑层，数据持久层。对于展现层我们一般会用到Strust2/Spring MVC，而数据层我们往往会用到Hibernate/Mybatis，这里我将介绍一下SSM(Spring + Spring MVC + Mybatis)的搭建，至于SSH的搭建请参考[maven搭建SSH](https://sakuraffy.github.io/freamwork_ssh)\n\n<!-- more -->\n\n首先创建一个maven项目，这里不再赘述了，如果不太清楚，请参考[maven项目搭建](https://sakuraffy.github.io/maven_project_create)\n{% qnimg freamwork/ssm/p1.png 'class:class1 class2' normal:yes %}\n\n### 整合Spring\n\n#### 在pom.xml中添加spring相应的依赖\n``` xml\n<properties>\n\t<!-- spring版本号 -->    \n\t<spring.version>4.1.9.RELEASE</spring.version>\n</properties>\n\n<dependencies>\n\n\t<dependency>\n\t\t<groupId>junit</groupId>\n\t\t<artifactId>junit</artifactId>\n\t\t<version>4.12</version>\n\t\t<scope>test</scope>\n\t</dependency>\n\n\t<!-- Spring依赖 -->\n\t<dependency>\n\t\t<groupId>org.springframework</groupId>                                        \n\t\t<artifactId>spring-core</artifactId>\n\t\t<version>${spring.version}</version>\n\t</dependency>\n\n\t<dependency>\n\t\t<groupId>org.springframework</groupId>\n\t\t<artifactId>spring-context</artifactId>\n\t\t<version>${spring.version}</version>\n\t</dependency>\n\n\t<dependency>\n\t\t<groupId>org.springframework</groupId>\n\t\t<artifactId>spring-test</artifactId>\n\t\t<version>${spring.version}</version>\n\t</dependency>\n\n</dependencies>\n\n```\n\n#### 在src/main/resources下添加applicationContext.xml\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>  \n<beans xmlns=\"http://www.springframework.org/schema/beans\"  \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n    xmlns:p=\"http://www.springframework.org/schema/p\"  \n    xmlns:context=\"http://www.springframework.org/schema/context\"                            \n    xmlns:mvc=\"http://www.springframework.org/schema/mvc\"  \n    xmlns:tx=\"http://www.springframework.org/schema/tx\"  \n    xmlns:aop=\"http://www.springframework.org/schema/aop\"  \n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans    \n       http://www.springframework.org/schema/beans/spring-beans-4.1.xsd    \n       http://www.springframework.org/schema/context    \n       http://www.springframework.org/schema/context/spring-context-4.1.xsd    \n       http://www.springframework.org/schema/tx   \n       http://www.springframework.org/schema/tx/spring-tx-4.1.xsd    \n       http://www.springframework.org/schema/aop   \n       http://www.springframework.org/schema/aop/spring-aop-4.1.xsd    \n       http://www.springframework.org/schema/mvc    \n       http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd\">  \n       \n     <bean id=\"date\" class=\"java.util.Date\"></bean>\n      \n</beans>\n```\n\n#### 在src/test/java下添加测试类SSMTest\n``` java\npackage cn.sakuraffy.ssm.test;\n\nimport java.util.Date;\n\nimport javax.annotation.Resource;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(locations=\"classpath:applicationContext.xml\")\npublic class SSMTest {\n\n\t@Resource\n\tprivate Date date;\n\t\n\t@Test\n\tpublic void testSpring() {                                                            \n\t\tSystem.out.println(date);\n\t}\n\n\t@Resource\n\tprivate Date date;\n\t\n\t@Test\n\tpublic void testSpring() {\n\t\tSystem.out.println(date);\n\t}\n}\n\n```\nRun As Maven test,如果下图所示，有日期打印，则说明Spring搭建成功\n{% qnimg freamwork/ssm/p2.png 'class:class1 class2' normal:yes %} \n\n### 整合Spring+Mybatis\n#### 在pom.xml中添加Mybatis和数据库相关依赖\n``` xml\n<!-- ... 不再显示已有内容-->\n<properties>\n\t <!-- mybatis版本号 -->  \n     <mybatis.version>3.2.6</mybatis.version>\n</properties>\n\n<dependencies>\n\t<!-- Spring与Mybatis整合依赖 -->\n\n    <dependency>  \n        <groupId>org.springframework</groupId>  \n        <artifactId>spring-jdbc</artifactId>  \n        <version>${spring.version}</version>  \n    </dependency>\n     \n    <dependency>  \n      <groupId>org.aspectj</groupId>  \n      <artifactId>aspectjweaver</artifactId>                                                  \n      <version>1.8.9</version>  \n    </dependency>\n\n\t<!-- mybatis核心包 -->  \n    <dependency>  \n        <groupId>org.mybatis</groupId>  \n        <artifactId>mybatis</artifactId>  \n        <version>${mybatis.version}</version>  \n    </dependency>  \n    <!-- mybatis/spring包 -->  \n    <dependency>  \n        <groupId>org.mybatis</groupId>  \n        <artifactId>mybatis-spring</artifactId>  \n        <version>1.2.2</version>  \n    </dependency>  \n\t<!-- mysql驱动依赖 -->\n    <dependency>\n\t    <groupId>mysql</groupId>\n\t    <artifactId>mysql-connector-java</artifactId>\t\t\t\t    \n\t    <version>5.1.30</version>\n    </dependency>\n    <!-- 连接池依赖 -->\n    <dependency>\n\t   <groupId>commons-dbcp</groupId>\n\t   <artifactId>commons-dbcp</artifactId>\n\t   <version>1.4</version>\n    </dependency>\n</dependencies>\n\n```\n\n#### 添加mysql测试数据库及表\n``` sql\n\tCREATE DATABASE ssm;\n\tUSE ssm;\n\tCREATE TABLE t_user (\n\t\tid int PRIMARY KEY AUTO_INCREMENT,\n\t\tname VARCHAR(20)\n\t);\n\tINSERT INTO t_user VALUES(1,'sakuraffy');\n```\n\n#### 添加实体类\n``` java\n\tpackage cn.sakuraffy.ssm.model;\n\n\timport java.io.Serializable;\n\n\tpublic class User implements Serializable {\n\n\t\tprivate static final long serialVersionUID = 9213000568883367937L;             \t      \n\t\t\n\t\tprivate int id;\n\t\tprivate String name;\n\t\t\n\t\tpublic User() {\n\t\t}\n\t\t\n\t\tpublic User(String name) {\n\t\t\tsuper();\n\t\t\tthis.name = name;\n\t\t}\n\n\t\tpublic final int getId() {\n\t\t\treturn id;\n\t\t}\n\t\tpublic final void setId(int id) {\n\t\t\tthis.id = id;\n\t\t}\n\t\tpublic final String getName() {\n\t\t\treturn name;\n\t\t}\n\t\tpublic final void setName(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn \"User [id=\" + id + \", name=\" + name + \"]\";\n\t\t}\n\t\t\n\t}\n```\n\n#### 添加数据持久层接口UserDao及UserMapper.xml\n##### UserDao\n``` java\npackage cn.sakuraffy.ssm.dao;\n\nimport cn.sakuraffy.ssm.model.User;\n\npublic interface UserDao {\n\tpublic User getById(int id);\n}\n```\n##### UserMapper.xml\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper\nPUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n\n<mapper namespace=\"cn.sakuraffy.ssm.dao.UserDao\">\n\t<select id=\"getById\" parameterType=\"int\" resultType=\"User\">\n\t\tSELECT * FROM t_user WHERE id = #{id}\n\t</select>\n</mapper>\n```\n\n#### 添加业务逻辑层接口UserService及其实现UserServiceImpl\n##### UserService\n``` java\npackage cn.sakuraffy.ssm.service;\n\nimport cn.sakuraffy.ssm.model.User;\n\npublic interface UserService {\n\tpublic User getById(int id);\n}\n\n```\n\n##### UserServiceImpl\n``` java\npackage cn.sakuraffy.ssm.service.impl;\n\nimport javax.annotation.Resource;\n\nimport org.springframework.stereotype.Service;\n\nimport cn.sakuraffy.ssm.dao.UserDao;\nimport cn.sakuraffy.ssm.model.User;\nimport cn.sakuraffy.ssm.service.UserService;\n\n@Service(\"userService\")\npublic class UserServiceImpl implements UserService {\n\n\t@Resource\n\tprivate UserDao userDao;\n\t\n\t@Override\n\tpublic User getById(int id) {\n\t\treturn userDao.getById(id);\n\t}\n}\n```\n\n#### 在applicationContext.xml中添加dataSource与sqlSessionFactory\n``` xml\n<beans>\n    <bean id=\"dataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\" destroy-method=\"close\">  \n        <property name=\"driverClassName\" value=\"com.mysql.jdbc.Driver\" />  \n        <property name=\"url\" value=\"jdbc:mysql://localhost:3306/ssm\" />  \n        <property name=\"username\" value=\"root\" />  \n        <property name=\"password\" value=\"root\" />    \n    </bean>  \n     \n    <bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">  \n        <property name=\"dataSource\" ref=\"dataSource\" />\n        <!-- 为实体配置别名 -->\n        <property name=\"typeAliasesPackage\" value=\"cn.sakuraffy.ssm.model\" /> \n        <!-- 自动扫描mapping.xml文件 -->  \n        <property name=\"mapperLocations\" value=\"classpath:cn/sakuraffy/ssm/mapper/*.xml\" />  \n    </bean> \n\n    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->  \n    <bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">  \n        <property name=\"basePackage\" value=\"cn.sakuraffy.ssm.dao\" />  \n        <property name=\"sqlSessionFactoryBeanName\" value=\"sqlSessionFactory\" />  \n    </bean> \n</beans>\n```\n\n#### 在applicationContext.xml中配置声明式事务管理\n``` xml\n<beans>\n\t<bean id=\"transactionManager\"  \n\t    class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">  \n\t    <property name=\"dataSource\" ref=\"dataSource\" />  \n\t</bean>  \n\n\t<tx:advice id=\"txadvice\" transaction-manager=\"transactionManager\">\n\t\t<tx:attributes>\n\t\t\t<tx:method name=\"add*\" propagation=\"REQUIRED\" />\n\t\t\t<tx:method name=\"save*\" propagation=\"REQUIRED\" />\n\t\t\t<tx:method name=\"update*\" propagation=\"REQUIRED\" />\n\t\t\t<tx:method name=\"delete*\" propagation=\"REQUIRED\" />\n\t\t\t<tx:method name=\"get*\" read-only=\"true\" propagation=\"SUPPORTS\" />\n\t\t\t<tx:method name=\"find*\" read-only=\"true\" propagation=\"SUPPORTS\" />\n\t\t\t<tx:method name=\"*\" read-only=\"true\" />\n\t\t</tx:attributes>\n\t</tx:advice> \n\n\t<aop:config>\n\t\t<aop:pointcut id=\"serviceMethods\" expression=\"execution(* cn.sakuraffy.ssm.service.impl.*.*(..))\" />\n\t\t<aop:advisor advice-ref=\"txadvice\" pointcut-ref=\"serviceMethods\" />\n\t</aop:config>\n</beans>\n```\n\n#### 在applicationContext.xml中配置组件扫描\n``` xml\n<beans>\n\t<context:component-scan base-package=\"cn.sakuraffy.ssm\" />\n</beans>\n```\n\n#### 在SSHTest中添加测试方法\n``` java\n\t@Resource\n\tprivate UserService userService;\n\n\t@Test\n\tpublic void testGetById() {\n\t\tSystem.out.println(userService.getById(1));\n\t}\n```\nRun As Maven test,如果下图所示，有User打印，则说明Spring与Mybatis整合成功\n{% qnimg freamwork/ssm/p4.png 'class:class1 class2' normal:yes %}\n如果不幸抛出下图错误，在pom.xml中加入资源处理\n{% qnimg freamwork/ssm/p3.png 'class:class1 class2' normal:yes %}\n``` xml\n<build>\n  <resources>\n    <resource>\n  \t  <directory>src/main/java</directory>\n   \t  <includes>\n  \t    <include>**/*.xml</include>\n \t  </includes>\n    </resource>\n  </resources>\n</build>\n```\n\n### 整合SSM\n在pom.xml中加入Spring与web相关依赖\n``` xml\n<dependencies>\n\t<dependency>\n\t\t<groupId>org.springframework</groupId>\n\t\t<artifactId>spring-web</artifactId>\n\t\t<version>${spring.version}</version>\n\t</dependency>\n\t\n\t<dependency>\n\t\t<groupId>org.springframework</groupId>\n\t\t<artifactId>spring-webmvc</artifactId>\n\t\t<version>${spring.version}</version>\n\t</dependency>\n\t<!-- servlet依赖 -->\n\t<dependency>\n\t    <groupId>javax.servlet</groupId>\n\t    <artifactId>javax.servlet-api</artifactId>                                        \n\t    <version>3.1.0</version>\n\t</dependency>\n\n\t<!-- jstl依赖 -->\n\t<dependency>\n   \t\t<groupId>jstl</groupId>\n    \t<artifactId>jstl</artifactId>\n    \t<version>1.2</version>\n\t</dependency>\n</dependencies>\n```\n\n#### 修改web.xml文件\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n\txmlns=\"http://java.sun.com/xml/ns/javaee\" \n\txsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee \n\thttp://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\" version=\"3.0\">\n  <display-name>ssm</display-name>\n  <welcome-file-list>\n    <welcome-file>index.jsp</welcome-file>\n  </welcome-file-list>\n  <listener>\n    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>    \n  </listener>\n  <context-param>\n    <param-name>contextConfigLocation</param-name>\n    <param-value>classpath:applicationContext.xml</param-value>\n  </context-param>\n  \n  <servlet>\n  \t<servlet-name>SpringMVC</servlet-name>\n  \t<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n  \t<init-param>\n  \t\t<param-name>contextConfigLocation</param-name>\n    \t<param-value>classpath:spring-mvc.xml</param-value>\n  \t</init-param>\n  \t<load-on-startup>1</load-on-startup>\n  </servlet>\n  \n  <servlet-mapping>\n  \t<servlet-name>SpringMVC</servlet-name>\n  \t<url-pattern>*.do</url-pattern>\n  </servlet-mapping>\n  \n</web-app>\n```\n\n#### 添加spring-mvc.xml\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>  \n<beans xmlns=\"http://www.springframework.org/schema/beans\"  \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n    xmlns:p=\"http://www.springframework.org/schema/p\"  \n    xmlns:context=\"http://www.springframework.org/schema/context\"  \n    xmlns:mvc=\"http://www.springframework.org/schema/mvc\"  \n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans    \n      http://www.springframework.org/schema/beans/spring-beans-3.1.xsd    \n      http://www.springframework.org/schema/context    \n      http://www.springframework.org/schema/context/spring-context-3.1.xsd    \n      http://www.springframework.org/schema/mvc    \n      http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd\">  \n    \n    <context:component-scan base-package=\"cn.sakuraffy.ssm.controller\" />\n\n    <!-- 配置视图渲染器(也可以不配)-->  \n    <bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">          \n        <property name=\"prefix\" value=\"/\" />  \n        <property name=\"suffix\" value=\".jsp\" />  \n    </bean> \n    \n</beans>\n```\n\n#### 添加Controller类\n``` java\npackage cn.sakuraffy.ssm.controller;\n\nimport javax.annotation.Resource;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.ModelMap;\nimport org.springframework.web.bind.annotation.RequestMapping;                               \n\nimport cn.sakuraffy.ssm.model.User;\nimport cn.sakuraffy.ssm.service.UserService;\n\n@Controller(\"userController\")\npublic class UserController {\n\t\n\t@Resource\n\tprivate UserService userService;\n\t\n\t@RequestMapping(\"/getById\")\n\tpublic String getById(int id, ModelMap model) {\n\t\tUser user = userService.getById(id);\n\t\tSystem.out.println(user);\n\t\tmodel.addAttribute(\"user\", user);\n\t\treturn \"index\";\n\t}\n}\n```\n\n#### 在pom.xml中添加jetty容器插件\n``` xml\n<build>\n  \t<finalName>ssm</finalName>\n    <plugins> \n        <plugin>\n           <groupId>org.mortbay.jetty</groupId>\n           <artifactId>jetty-maven-plugin</artifactId>\n           <version>8.1.16.v20140903</version>\n           <configuration>\n               <scanIntervalSeconds>60</scanIntervalSeconds>\n               <webApp>\n                   <contextPath>/ssm</contextPath>\n               </webApp>\n               <connectors>\n                    <connector implementation=\"org.eclipse.jetty.server.nio.SelectChannelConnector\">\n                        <port>8080</port>\n                    </connector>\n                </connectors>\n            </configuration>\n         </plugin>\n    </plugins>\n</build>\t\n```\n#### 修改index.jsp\n``` html\n<%@ page language=\"java\" import=\"java.util.*\" pageEncoding=\"UTF-8\"%>\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n<html>\n  <body>\n    <a href=\"user_getById.action?id=1\">Hello</a> ${user.name }\n  </body>\n</html>\n```\nRun AS Maven Build,输入jetty：run，如图\n{% qnimg freamwork/ssm/p5.png 'class:class1 class2' normal:yes %}\n\n打开浏览器，输入 http://localhost:8080/ssh ,点击Hello，得到下图结果，至此SSM整合完毕\n{% qnimg freamwork/ssm/p6.png 'class:class1 class2' normal:yes %}\n","slug":"freamwork_ssm","published":1,"updated":"2017-03-08T11:39:47.713Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5ck0011qoq1rqk3hc2t","content":"<p>在实际开发中，我们习惯将项目分为三层，展示层，业务逻辑层，数据持久层。对于展现层我们一般会用到Strust2/Spring MVC，而数据层我们往往会用到Hibernate/Mybatis，这里我将介绍一下SSM(Spring + Spring MVC + Mybatis)的搭建，至于SSH的搭建请参考<a href=\"https://sakuraffy.github.io/freamwork_ssh\">maven搭建SSH</a></p>\n<a id=\"more\"></a>\n<p>首先创建一个maven项目，这里不再赘述了，如果不太清楚，请参考<a href=\"https://sakuraffy.github.io/maven_project_create\">maven项目搭建</a><br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/freamwork/ssm/p1.png\"></p>\n<h3 id=\"整合Spring\"><a href=\"#整合Spring\" class=\"headerlink\" title=\"整合Spring\"></a>整合Spring</h3><h4 id=\"在pom-xml中添加spring相应的依赖\"><a href=\"#在pom-xml中添加spring相应的依赖\" class=\"headerlink\" title=\"在pom.xml中添加spring相应的依赖\"></a>在pom.xml中添加spring相应的依赖</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- spring版本号 --&gt;</span>    </div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">spring.version</span>&gt;</span>4.1.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">spring.version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- Spring依赖 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>                                        </div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"在src-main-resources下添加applicationContext-xml\"><a href=\"#在src-main-resources下添加applicationContext-xml\" class=\"headerlink\" title=\"在src/main/resources下添加applicationContext.xml\"></a>在src/main/resources下添加applicationContext.xml</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span>  </span></div><div class=\"line\">    <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> </div><div class=\"line\">    <span class=\"attr\">xmlns:p</span>=<span class=\"string\">\"http://www.springframework.org/schema/p\"</span>  </div><div class=\"line\">    <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span>                            </div><div class=\"line\">    <span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">\"http://www.springframework.org/schema/mvc\"</span>  </div><div class=\"line\">    <span class=\"attr\">xmlns:tx</span>=<span class=\"string\">\"http://www.springframework.org/schema/tx\"</span>  </div><div class=\"line\">    <span class=\"attr\">xmlns:aop</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop\"</span>  </div><div class=\"line\">    <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans    </span></div><div class=\"line\">       http://www.springframework.org/schema/beans/spring-beans-4.1.xsd    </div><div class=\"line\">       http://www.springframework.org/schema/context    </div><div class=\"line\">       http://www.springframework.org/schema/context/spring-context-4.1.xsd    </div><div class=\"line\">       http://www.springframework.org/schema/tx   </div><div class=\"line\">       http://www.springframework.org/schema/tx/spring-tx-4.1.xsd    </div><div class=\"line\">       http://www.springframework.org/schema/aop   </div><div class=\"line\">       http://www.springframework.org/schema/aop/spring-aop-4.1.xsd    </div><div class=\"line\">       http://www.springframework.org/schema/mvc    </div><div class=\"line\">       http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd\"&gt;  </div><div class=\"line\">       </div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"date\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"java.util.Date\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\">      </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"在src-test-java下添加测试类SSMTest\"><a href=\"#在src-test-java下添加测试类SSMTest\" class=\"headerlink\" title=\"在src/test/java下添加测试类SSMTest\"></a>在src/test/java下添加测试类SSMTest</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.ssm.test;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</div><div class=\"line\"><span class=\"keyword\">import</span> org.junit.runner.RunWith;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.context.ContextConfiguration;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class=\"line\"><span class=\"meta\">@ContextConfiguration</span>(locations=<span class=\"string\">\"classpath:applicationContext.xml\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SSMTest</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Resource</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> Date date;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSpring</span><span class=\"params\">()</span> </span>&#123;                                                            </div><div class=\"line\">\t\tSystem.out.println(date);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Resource</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> Date date;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSpring</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(date);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Run As Maven test,如果下图所示，有日期打印，则说明Spring搭建成功<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/freamwork/ssm/p2.png\"> </p>\n<h3 id=\"整合Spring-Mybatis\"><a href=\"#整合Spring-Mybatis\" class=\"headerlink\" title=\"整合Spring+Mybatis\"></a>整合Spring+Mybatis</h3><h4 id=\"在pom-xml中添加Mybatis和数据库相关依赖\"><a href=\"#在pom-xml中添加Mybatis和数据库相关依赖\" class=\"headerlink\" title=\"在pom.xml中添加Mybatis和数据库相关依赖\"></a>在pom.xml中添加Mybatis和数据库相关依赖</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- ... 不再显示已有内容--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\">\t <span class=\"comment\">&lt;!-- mybatis版本号 --&gt;</span>  </div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">mybatis.version</span>&gt;</span>3.2.6<span class=\"tag\">&lt;/<span class=\"name\">mybatis.version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- Spring与Mybatis整合依赖 --&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">     </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>  </div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.aspectj<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aspectjweaver<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>                                                  </div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.8.9<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- mybatis核心包 --&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span>  </div><div class=\"line\">    <span class=\"comment\">&lt;!-- mybatis/spring包 --&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span>  </div><div class=\"line\">\t<span class=\"comment\">&lt;!-- mysql驱动依赖 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>\t\t\t\t    </div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.30<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 连接池依赖 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-dbcp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-dbcp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t   <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"添加mysql测试数据库及表\"><a href=\"#添加mysql测试数据库及表\" class=\"headerlink\" title=\"添加mysql测试数据库及表\"></a>添加mysql测试数据库及表</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">DATABASE</span> ssm;</div><div class=\"line\"><span class=\"keyword\">USE</span> ssm;</div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> t_user (</div><div class=\"line\">\t<span class=\"keyword\">id</span> <span class=\"built_in\">int</span> PRIMARY <span class=\"keyword\">KEY</span> AUTO_INCREMENT,</div><div class=\"line\">\t<span class=\"keyword\">name</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">20</span>)</div><div class=\"line\">);</div><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> t_user <span class=\"keyword\">VALUES</span>(<span class=\"number\">1</span>,<span class=\"string\">'sakuraffy'</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"添加实体类\"><a href=\"#添加实体类\" class=\"headerlink\" title=\"添加实体类\"></a>添加实体类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.ssm.model;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">9213000568883367937L</span>;             \t      </div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String name;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> id;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"User [id=\"</span> + id + <span class=\"string\">\", name=\"</span> + name + <span class=\"string\">\"]\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"添加数据持久层接口UserDao及UserMapper-xml\"><a href=\"#添加数据持久层接口UserDao及UserMapper-xml\" class=\"headerlink\" title=\"添加数据持久层接口UserDao及UserMapper.xml\"></a>添加数据持久层接口UserDao及UserMapper.xml</h4><h5 id=\"UserDao\"><a href=\"#UserDao\" class=\"headerlink\" title=\"UserDao\"></a>UserDao</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.ssm.dao;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> cn.sakuraffy.ssm.model.User;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserDao</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"UserMapper-xml\"><a href=\"#UserMapper-xml\" class=\"headerlink\" title=\"UserMapper.xml\"></a>UserMapper.xml</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE mapper</span></div><div class=\"line\">PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"</div><div class=\"line\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"cn.sakuraffy.ssm.dao.UserDao\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getById\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"int\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"User\"</span>&gt;</span></div><div class=\"line\">\t\tSELECT * FROM t_user WHERE id = #&#123;id&#125;</div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"添加业务逻辑层接口UserService及其实现UserServiceImpl\"><a href=\"#添加业务逻辑层接口UserService及其实现UserServiceImpl\" class=\"headerlink\" title=\"添加业务逻辑层接口UserService及其实现UserServiceImpl\"></a>添加业务逻辑层接口UserService及其实现UserServiceImpl</h4><h5 id=\"UserService\"><a href=\"#UserService\" class=\"headerlink\" title=\"UserService\"></a>UserService</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.ssm.service;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> cn.sakuraffy.ssm.model.User;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserService</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"UserServiceImpl\"><a href=\"#UserServiceImpl\" class=\"headerlink\" title=\"UserServiceImpl\"></a>UserServiceImpl</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.ssm.service.impl;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> cn.sakuraffy.ssm.dao.UserDao;</div><div class=\"line\"><span class=\"keyword\">import</span> cn.sakuraffy.ssm.model.User;</div><div class=\"line\"><span class=\"keyword\">import</span> cn.sakuraffy.ssm.service.UserService;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Service</span>(<span class=\"string\">\"userService\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserService</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Resource</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> UserDao userDao;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> userDao.getById(id);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"在applicationContext-xml中添加dataSource与sqlSessionFactory\"><a href=\"#在applicationContext-xml中添加dataSource与sqlSessionFactory\" class=\"headerlink\" title=\"在applicationContext.xml中添加dataSource与sqlSessionFactory\"></a>在applicationContext.xml中添加dataSource与sqlSessionFactory</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.commons.dbcp.BasicDataSource\"</span> <span class=\"attr\">destroy-method</span>=<span class=\"string\">\"close\"</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driverClassName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"com.mysql.jdbc.Driver\"</span> /&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"jdbc:mysql://localhost:3306/ssm\"</span> /&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"root\"</span> /&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"root\"</span> /&gt;</span>    </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span>  </div><div class=\"line\">     </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sqlSessionFactory\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.SqlSessionFactoryBean\"</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- 为实体配置别名 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"typeAliasesPackage\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"cn.sakuraffy.ssm.model\"</span> /&gt;</span> </div><div class=\"line\">        <span class=\"comment\">&lt;!-- 自动扫描mapping.xml文件 --&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mapperLocations\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath:cn/sakuraffy/ssm/mapper/*.xml\"</span> /&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span> </div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- DAO接口所在包名，Spring会自动查找其下的类 --&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.mapper.MapperScannerConfigurer\"</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"basePackage\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"cn.sakuraffy.ssm.dao\"</span> /&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sqlSessionFactoryBeanName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"sqlSessionFactory\"</span> /&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"在applicationContext-xml中配置声明式事务管理\"><a href=\"#在applicationContext-xml中配置声明式事务管理\" class=\"headerlink\" title=\"在applicationContext.xml中配置声明式事务管理\"></a>在applicationContext.xml中配置声明式事务管理</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transactionManager\"</span>  </span></div><div class=\"line\">\t    <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"</span>&gt;  </div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span> /&gt;</span>  </div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span>  </div><div class=\"line\"></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">tx:advice</span> <span class=\"attr\">id</span>=<span class=\"string\">\"txadvice\"</span> <span class=\"attr\">transaction-manager</span>=<span class=\"string\">\"transactionManager\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:attributes</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"add*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span> /&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"save*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span> /&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"update*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span> /&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"delete*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span> /&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"get*\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"SUPPORTS\"</span> /&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"find*\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"SUPPORTS\"</span> /&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"*\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"true\"</span> /&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">tx:attributes</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">tx:advice</span>&gt;</span> </div><div class=\"line\"></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">\"serviceMethods\"</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"execution(* cn.sakuraffy.ssm.service.impl.*.*(..))\"</span> /&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:advisor</span> <span class=\"attr\">advice-ref</span>=<span class=\"string\">\"txadvice\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"serviceMethods\"</span> /&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"在applicationContext-xml中配置组件扫描\"><a href=\"#在applicationContext-xml中配置组件扫描\" class=\"headerlink\" title=\"在applicationContext.xml中配置组件扫描\"></a>在applicationContext.xml中配置组件扫描</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"cn.sakuraffy.ssm\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"在SSHTest中添加测试方法\"><a href=\"#在SSHTest中添加测试方法\" class=\"headerlink\" title=\"在SSHTest中添加测试方法\"></a>在SSHTest中添加测试方法</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Resource</span></div><div class=\"line\"><span class=\"keyword\">private</span> UserService userService;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testGetById</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tSystem.out.println(userService.getById(<span class=\"number\">1</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Run As Maven test,如果下图所示，有User打印，则说明Spring与Mybatis整合成功<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/freamwork/ssm/p4.png\"><br>如果不幸抛出下图错误，在pom.xml中加入资源处理<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/freamwork/ssm/p3.png\"><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></div><div class=\"line\">  \t  <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></div><div class=\"line\">   \t  <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></div><div class=\"line\">  \t    <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></div><div class=\"line\"> \t  <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"整合SSM\"><a href=\"#整合SSM\" class=\"headerlink\" title=\"整合SSM\"></a>整合SSM</h3><p>在pom.xml中加入Spring与web相关依赖<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- servlet依赖 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>                                        </div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- jstl依赖 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">   \t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>jstl<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jstl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"修改web-xml文件\"><a href=\"#修改web-xml文件\" class=\"headerlink\" title=\"修改web.xml文件\"></a>修改web.xml文件</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> </span></div><div class=\"line\">\t<span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/javaee\"</span> </div><div class=\"line\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/javaee </span></div><div class=\"line\">\thttp://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\" <span class=\"attr\">version</span>=<span class=\"string\">\"3.0\"</span>&gt;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">display-name</span>&gt;</span>ssm<span class=\"tag\">&lt;/<span class=\"name\">display-name</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">welcome-file-list</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">welcome-file</span>&gt;</span>index.jsp<span class=\"tag\">&lt;/<span class=\"name\">welcome-file</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">welcome-file-list</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span>    </div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:applicationContext.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>SpringMVC<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">  \t\t<span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>SpringMVC<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.do<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"添加spring-mvc-xml\"><a href=\"#添加spring-mvc-xml\" class=\"headerlink\" title=\"添加spring-mvc.xml\"></a>添加spring-mvc.xml</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span>  </span></div><div class=\"line\">    <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> </div><div class=\"line\">    <span class=\"attr\">xmlns:p</span>=<span class=\"string\">\"http://www.springframework.org/schema/p\"</span>  </div><div class=\"line\">    <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span>  </div><div class=\"line\">    <span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">\"http://www.springframework.org/schema/mvc\"</span>  </div><div class=\"line\">    <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans    </span></div><div class=\"line\">      http://www.springframework.org/schema/beans/spring-beans-3.1.xsd    </div><div class=\"line\">      http://www.springframework.org/schema/context    </div><div class=\"line\">      http://www.springframework.org/schema/context/spring-context-3.1.xsd    </div><div class=\"line\">      http://www.springframework.org/schema/mvc    </div><div class=\"line\">      http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd\"&gt;  </div><div class=\"line\">    </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"cn.sakuraffy.ssm.controller\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 配置视图渲染器(也可以不配)--&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.view.InternalResourceViewResolver\"</span>&gt;</span>          </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"prefix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"/\"</span> /&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"suffix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\".jsp\"</span> /&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span> </div><div class=\"line\">    </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"添加Controller类\"><a href=\"#添加Controller类\" class=\"headerlink\" title=\"添加Controller类\"></a>添加Controller类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.ssm.controller;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.ui.ModelMap;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;                               </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> cn.sakuraffy.ssm.model.User;</div><div class=\"line\"><span class=\"keyword\">import</span> cn.sakuraffy.ssm.service.UserService;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Controller</span>(<span class=\"string\">\"userController\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Resource</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> UserService userService;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/getById\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getById</span><span class=\"params\">(<span class=\"keyword\">int</span> id, ModelMap model)</span> </span>&#123;</div><div class=\"line\">\t\tUser user = userService.getById(id);</div><div class=\"line\">\t\tSystem.out.println(user);</div><div class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"user\"</span>, user);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"index\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"在pom-xml中添加jetty容器插件\"><a href=\"#在pom-xml中添加jetty容器插件\" class=\"headerlink\" title=\"在pom.xml中添加jetty容器插件\"></a>在pom.xml中添加jetty容器插件</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>ssm<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span> </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mortbay.jetty<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jetty-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8.1.16.v20140903<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">scanIntervalSeconds</span>&gt;</span>60<span class=\"tag\">&lt;/<span class=\"name\">scanIntervalSeconds</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">webApp</span>&gt;</span></div><div class=\"line\">                   <span class=\"tag\">&lt;<span class=\"name\">contextPath</span>&gt;</span>/ssm<span class=\"tag\">&lt;/<span class=\"name\">contextPath</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;/<span class=\"name\">webApp</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">connectors</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">connector</span> <span class=\"attr\">implementation</span>=<span class=\"string\">\"org.eclipse.jetty.server.nio.SelectChannelConnector\"</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>8080<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">connector</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">connectors</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">         <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"修改index-jsp\"><a href=\"#修改index-jsp\" class=\"headerlink\" title=\"修改index.jsp\"></a>修改index.jsp</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">language</span>=<span class=\"string\">\"java\"</span> <span class=\"attr\">import</span>=<span class=\"string\">\"java.util.*\"</span> <span class=\"attr\">pageEncoding</span>=<span class=\"string\">\"UTF-8\"</span>%&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">taglib</span> <span class=\"attr\">uri</span>=<span class=\"string\">\"http://java.sun.com/jsp/jstl/core\"</span> <span class=\"attr\">prefix</span>=<span class=\"string\">\"c\"</span> %&gt;</span></div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"user_getById.action?id=1\"</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> $&#123;user.name &#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Run AS Maven Build,输入jetty：run，如图<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/freamwork/ssm/p5.png\"></p>\n<p>打开浏览器，输入 <a href=\"http://localhost:8080/ssh\" target=\"_blank\" rel=\"external\">http://localhost:8080/ssh</a> ,点击Hello，得到下图结果，至此SSM整合完毕<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/freamwork/ssm/p6.png\"></p>\n","excerpt":"<p>在实际开发中，我们习惯将项目分为三层，展示层，业务逻辑层，数据持久层。对于展现层我们一般会用到Strust2/Spring MVC，而数据层我们往往会用到Hibernate/Mybatis，这里我将介绍一下SSM(Spring + Spring MVC + Mybatis)的搭建，至于SSH的搭建请参考<a href=\"https://sakuraffy.github.io/freamwork_ssh\">maven搭建SSH</a></p>","more":"<p>首先创建一个maven项目，这里不再赘述了，如果不太清楚，请参考<a href=\"https://sakuraffy.github.io/maven_project_create\">maven项目搭建</a><br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/freamwork/ssm/p1.png\"></p>\n<h3 id=\"整合Spring\"><a href=\"#整合Spring\" class=\"headerlink\" title=\"整合Spring\"></a>整合Spring</h3><h4 id=\"在pom-xml中添加spring相应的依赖\"><a href=\"#在pom-xml中添加spring相应的依赖\" class=\"headerlink\" title=\"在pom.xml中添加spring相应的依赖\"></a>在pom.xml中添加spring相应的依赖</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- spring版本号 --&gt;</span>    </div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">spring.version</span>&gt;</span>4.1.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">spring.version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- Spring依赖 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>                                        </div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"在src-main-resources下添加applicationContext-xml\"><a href=\"#在src-main-resources下添加applicationContext-xml\" class=\"headerlink\" title=\"在src/main/resources下添加applicationContext.xml\"></a>在src/main/resources下添加applicationContext.xml</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span>  </div><div class=\"line\">    <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> </div><div class=\"line\">    <span class=\"attr\">xmlns:p</span>=<span class=\"string\">\"http://www.springframework.org/schema/p\"</span>  </div><div class=\"line\">    <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span>                            </div><div class=\"line\">    <span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">\"http://www.springframework.org/schema/mvc\"</span>  </div><div class=\"line\">    <span class=\"attr\">xmlns:tx</span>=<span class=\"string\">\"http://www.springframework.org/schema/tx\"</span>  </div><div class=\"line\">    <span class=\"attr\">xmlns:aop</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop\"</span>  </div><div class=\"line\">    <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans    </div><div class=\"line\">       http://www.springframework.org/schema/beans/spring-beans-4.1.xsd    </div><div class=\"line\">       http://www.springframework.org/schema/context    </div><div class=\"line\">       http://www.springframework.org/schema/context/spring-context-4.1.xsd    </div><div class=\"line\">       http://www.springframework.org/schema/tx   </div><div class=\"line\">       http://www.springframework.org/schema/tx/spring-tx-4.1.xsd    </div><div class=\"line\">       http://www.springframework.org/schema/aop   </div><div class=\"line\">       http://www.springframework.org/schema/aop/spring-aop-4.1.xsd    </div><div class=\"line\">       http://www.springframework.org/schema/mvc    </div><div class=\"line\">       http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd\"</span>&gt;</span>  </div><div class=\"line\">       </div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"date\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"java.util.Date\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\">      </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"在src-test-java下添加测试类SSMTest\"><a href=\"#在src-test-java下添加测试类SSMTest\" class=\"headerlink\" title=\"在src/test/java下添加测试类SSMTest\"></a>在src/test/java下添加测试类SSMTest</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.ssm.test;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</div><div class=\"line\"><span class=\"keyword\">import</span> org.junit.runner.RunWith;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.context.ContextConfiguration;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class=\"line\"><span class=\"meta\">@ContextConfiguration</span>(locations=<span class=\"string\">\"classpath:applicationContext.xml\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SSMTest</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Resource</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> Date date;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSpring</span><span class=\"params\">()</span> </span>&#123;                                                            </div><div class=\"line\">\t\tSystem.out.println(date);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Resource</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> Date date;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSpring</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(date);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Run As Maven test,如果下图所示，有日期打印，则说明Spring搭建成功<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/freamwork/ssm/p2.png\"> </p>\n<h3 id=\"整合Spring-Mybatis\"><a href=\"#整合Spring-Mybatis\" class=\"headerlink\" title=\"整合Spring+Mybatis\"></a>整合Spring+Mybatis</h3><h4 id=\"在pom-xml中添加Mybatis和数据库相关依赖\"><a href=\"#在pom-xml中添加Mybatis和数据库相关依赖\" class=\"headerlink\" title=\"在pom.xml中添加Mybatis和数据库相关依赖\"></a>在pom.xml中添加Mybatis和数据库相关依赖</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- ... 不再显示已有内容--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\">\t <span class=\"comment\">&lt;!-- mybatis版本号 --&gt;</span>  </div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">mybatis.version</span>&gt;</span>3.2.6<span class=\"tag\">&lt;/<span class=\"name\">mybatis.version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- Spring与Mybatis整合依赖 --&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">     </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>  </div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.aspectj<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aspectjweaver<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>                                                  </div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.8.9<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- mybatis核心包 --&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span>  </div><div class=\"line\">    <span class=\"comment\">&lt;!-- mybatis/spring包 --&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span>  </div><div class=\"line\">\t<span class=\"comment\">&lt;!-- mysql驱动依赖 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>\t\t\t\t    </div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.30<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 连接池依赖 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-dbcp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-dbcp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t   <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"添加mysql测试数据库及表\"><a href=\"#添加mysql测试数据库及表\" class=\"headerlink\" title=\"添加mysql测试数据库及表\"></a>添加mysql测试数据库及表</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">DATABASE</span> ssm;</div><div class=\"line\"><span class=\"keyword\">USE</span> ssm;</div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> t_user (</div><div class=\"line\">\t<span class=\"keyword\">id</span> <span class=\"built_in\">int</span> PRIMARY <span class=\"keyword\">KEY</span> AUTO_INCREMENT,</div><div class=\"line\">\t<span class=\"keyword\">name</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">20</span>)</div><div class=\"line\">);</div><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> t_user <span class=\"keyword\">VALUES</span>(<span class=\"number\">1</span>,<span class=\"string\">'sakuraffy'</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"添加实体类\"><a href=\"#添加实体类\" class=\"headerlink\" title=\"添加实体类\"></a>添加实体类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.ssm.model;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">9213000568883367937L</span>;             \t      </div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String name;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> id;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"User [id=\"</span> + id + <span class=\"string\">\", name=\"</span> + name + <span class=\"string\">\"]\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"添加数据持久层接口UserDao及UserMapper-xml\"><a href=\"#添加数据持久层接口UserDao及UserMapper-xml\" class=\"headerlink\" title=\"添加数据持久层接口UserDao及UserMapper.xml\"></a>添加数据持久层接口UserDao及UserMapper.xml</h4><h5 id=\"UserDao\"><a href=\"#UserDao\" class=\"headerlink\" title=\"UserDao\"></a>UserDao</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.ssm.dao;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> cn.sakuraffy.ssm.model.User;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserDao</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"UserMapper-xml\"><a href=\"#UserMapper-xml\" class=\"headerlink\" title=\"UserMapper.xml\"></a>UserMapper.xml</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE mapper</div><div class=\"line\">PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"</div><div class=\"line\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"cn.sakuraffy.ssm.dao.UserDao\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getById\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"int\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"User\"</span>&gt;</span></div><div class=\"line\">\t\tSELECT * FROM t_user WHERE id = #&#123;id&#125;</div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"添加业务逻辑层接口UserService及其实现UserServiceImpl\"><a href=\"#添加业务逻辑层接口UserService及其实现UserServiceImpl\" class=\"headerlink\" title=\"添加业务逻辑层接口UserService及其实现UserServiceImpl\"></a>添加业务逻辑层接口UserService及其实现UserServiceImpl</h4><h5 id=\"UserService\"><a href=\"#UserService\" class=\"headerlink\" title=\"UserService\"></a>UserService</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.ssm.service;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> cn.sakuraffy.ssm.model.User;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserService</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"UserServiceImpl\"><a href=\"#UserServiceImpl\" class=\"headerlink\" title=\"UserServiceImpl\"></a>UserServiceImpl</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.ssm.service.impl;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> cn.sakuraffy.ssm.dao.UserDao;</div><div class=\"line\"><span class=\"keyword\">import</span> cn.sakuraffy.ssm.model.User;</div><div class=\"line\"><span class=\"keyword\">import</span> cn.sakuraffy.ssm.service.UserService;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Service</span>(<span class=\"string\">\"userService\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserService</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Resource</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> UserDao userDao;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> userDao.getById(id);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"在applicationContext-xml中添加dataSource与sqlSessionFactory\"><a href=\"#在applicationContext-xml中添加dataSource与sqlSessionFactory\" class=\"headerlink\" title=\"在applicationContext.xml中添加dataSource与sqlSessionFactory\"></a>在applicationContext.xml中添加dataSource与sqlSessionFactory</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.commons.dbcp.BasicDataSource\"</span> <span class=\"attr\">destroy-method</span>=<span class=\"string\">\"close\"</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driverClassName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"com.mysql.jdbc.Driver\"</span> /&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"jdbc:mysql://localhost:3306/ssm\"</span> /&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"root\"</span> /&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"root\"</span> /&gt;</span>    </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span>  </div><div class=\"line\">     </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sqlSessionFactory\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.SqlSessionFactoryBean\"</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- 为实体配置别名 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"typeAliasesPackage\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"cn.sakuraffy.ssm.model\"</span> /&gt;</span> </div><div class=\"line\">        <span class=\"comment\">&lt;!-- 自动扫描mapping.xml文件 --&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mapperLocations\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath:cn/sakuraffy/ssm/mapper/*.xml\"</span> /&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span> </div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- DAO接口所在包名，Spring会自动查找其下的类 --&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.mapper.MapperScannerConfigurer\"</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"basePackage\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"cn.sakuraffy.ssm.dao\"</span> /&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sqlSessionFactoryBeanName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"sqlSessionFactory\"</span> /&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"在applicationContext-xml中配置声明式事务管理\"><a href=\"#在applicationContext-xml中配置声明式事务管理\" class=\"headerlink\" title=\"在applicationContext.xml中配置声明式事务管理\"></a>在applicationContext.xml中配置声明式事务管理</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transactionManager\"</span>  </div><div class=\"line\">\t    <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"</span>&gt;</span>  </div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span> /&gt;</span>  </div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span>  </div><div class=\"line\"></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">tx:advice</span> <span class=\"attr\">id</span>=<span class=\"string\">\"txadvice\"</span> <span class=\"attr\">transaction-manager</span>=<span class=\"string\">\"transactionManager\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:attributes</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"add*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span> /&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"save*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span> /&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"update*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span> /&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"delete*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span> /&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"get*\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"SUPPORTS\"</span> /&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"find*\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"SUPPORTS\"</span> /&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"*\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"true\"</span> /&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">tx:attributes</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">tx:advice</span>&gt;</span> </div><div class=\"line\"></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">\"serviceMethods\"</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"execution(* cn.sakuraffy.ssm.service.impl.*.*(..))\"</span> /&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:advisor</span> <span class=\"attr\">advice-ref</span>=<span class=\"string\">\"txadvice\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"serviceMethods\"</span> /&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"在applicationContext-xml中配置组件扫描\"><a href=\"#在applicationContext-xml中配置组件扫描\" class=\"headerlink\" title=\"在applicationContext.xml中配置组件扫描\"></a>在applicationContext.xml中配置组件扫描</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"cn.sakuraffy.ssm\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"在SSHTest中添加测试方法\"><a href=\"#在SSHTest中添加测试方法\" class=\"headerlink\" title=\"在SSHTest中添加测试方法\"></a>在SSHTest中添加测试方法</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Resource</span></div><div class=\"line\"><span class=\"keyword\">private</span> UserService userService;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testGetById</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tSystem.out.println(userService.getById(<span class=\"number\">1</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Run As Maven test,如果下图所示，有User打印，则说明Spring与Mybatis整合成功<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/freamwork/ssm/p4.png\"><br>如果不幸抛出下图错误，在pom.xml中加入资源处理<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/freamwork/ssm/p3.png\"><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></div><div class=\"line\">  \t  <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></div><div class=\"line\">   \t  <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></div><div class=\"line\">  \t    <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></div><div class=\"line\"> \t  <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"整合SSM\"><a href=\"#整合SSM\" class=\"headerlink\" title=\"整合SSM\"></a>整合SSM</h3><p>在pom.xml中加入Spring与web相关依赖<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- servlet依赖 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>                                        </div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- jstl依赖 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">   \t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>jstl<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jstl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"修改web-xml文件\"><a href=\"#修改web-xml文件\" class=\"headerlink\" title=\"修改web.xml文件\"></a>修改web.xml文件</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> </div><div class=\"line\">\t<span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/javaee\"</span> </div><div class=\"line\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/javaee </div><div class=\"line\">\thttp://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"3.0\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">display-name</span>&gt;</span>ssm<span class=\"tag\">&lt;/<span class=\"name\">display-name</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">welcome-file-list</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">welcome-file</span>&gt;</span>index.jsp<span class=\"tag\">&lt;/<span class=\"name\">welcome-file</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">welcome-file-list</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span>    </div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:applicationContext.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>SpringMVC<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">  \t\t<span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>SpringMVC<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.do<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"添加spring-mvc-xml\"><a href=\"#添加spring-mvc-xml\" class=\"headerlink\" title=\"添加spring-mvc.xml\"></a>添加spring-mvc.xml</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span>  </div><div class=\"line\">    <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> </div><div class=\"line\">    <span class=\"attr\">xmlns:p</span>=<span class=\"string\">\"http://www.springframework.org/schema/p\"</span>  </div><div class=\"line\">    <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span>  </div><div class=\"line\">    <span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">\"http://www.springframework.org/schema/mvc\"</span>  </div><div class=\"line\">    <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans    </div><div class=\"line\">      http://www.springframework.org/schema/beans/spring-beans-3.1.xsd    </div><div class=\"line\">      http://www.springframework.org/schema/context    </div><div class=\"line\">      http://www.springframework.org/schema/context/spring-context-3.1.xsd    </div><div class=\"line\">      http://www.springframework.org/schema/mvc    </div><div class=\"line\">      http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd\"</span>&gt;</span>  </div><div class=\"line\">    </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"cn.sakuraffy.ssm.controller\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 配置视图渲染器(也可以不配)--&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.view.InternalResourceViewResolver\"</span>&gt;</span>          </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"prefix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"/\"</span> /&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"suffix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\".jsp\"</span> /&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span> </div><div class=\"line\">    </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"添加Controller类\"><a href=\"#添加Controller类\" class=\"headerlink\" title=\"添加Controller类\"></a>添加Controller类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.ssm.controller;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.ui.ModelMap;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;                               </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> cn.sakuraffy.ssm.model.User;</div><div class=\"line\"><span class=\"keyword\">import</span> cn.sakuraffy.ssm.service.UserService;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Controller</span>(<span class=\"string\">\"userController\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Resource</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> UserService userService;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/getById\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getById</span><span class=\"params\">(<span class=\"keyword\">int</span> id, ModelMap model)</span> </span>&#123;</div><div class=\"line\">\t\tUser user = userService.getById(id);</div><div class=\"line\">\t\tSystem.out.println(user);</div><div class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"user\"</span>, user);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"index\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"在pom-xml中添加jetty容器插件\"><a href=\"#在pom-xml中添加jetty容器插件\" class=\"headerlink\" title=\"在pom.xml中添加jetty容器插件\"></a>在pom.xml中添加jetty容器插件</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>ssm<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span> </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mortbay.jetty<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jetty-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8.1.16.v20140903<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">scanIntervalSeconds</span>&gt;</span>60<span class=\"tag\">&lt;/<span class=\"name\">scanIntervalSeconds</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">webApp</span>&gt;</span></div><div class=\"line\">                   <span class=\"tag\">&lt;<span class=\"name\">contextPath</span>&gt;</span>/ssm<span class=\"tag\">&lt;/<span class=\"name\">contextPath</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;/<span class=\"name\">webApp</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">connectors</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">connector</span> <span class=\"attr\">implementation</span>=<span class=\"string\">\"org.eclipse.jetty.server.nio.SelectChannelConnector\"</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>8080<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">connector</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">connectors</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">         <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"修改index-jsp\"><a href=\"#修改index-jsp\" class=\"headerlink\" title=\"修改index.jsp\"></a>修改index.jsp</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">language</span>=<span class=\"string\">\"java\"</span> <span class=\"attr\">import</span>=<span class=\"string\">\"java.util.*\"</span> <span class=\"attr\">pageEncoding</span>=<span class=\"string\">\"UTF-8\"</span>%&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">taglib</span> <span class=\"attr\">uri</span>=<span class=\"string\">\"http://java.sun.com/jsp/jstl/core\"</span> <span class=\"attr\">prefix</span>=<span class=\"string\">\"c\"</span> %&gt;</span></div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"user_getById.action?id=1\"</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> $&#123;user.name &#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Run AS Maven Build,输入jetty：run，如图<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/freamwork/ssm/p5.png\"></p>\n<p>打开浏览器，输入 <a href=\"http://localhost:8080/ssh\">http://localhost:8080/ssh</a> ,点击Hello，得到下图结果，至此SSM整合完毕<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/freamwork/ssm/p6.png\"></p>"},{"title":"并发编程（十一）Condition与ReadWriteLock","date":"2016-07-15T08:20:44.000Z","_content":"\n### Condition\n\n我们前面说到ReentrantLock可以替代synchronized，那么JDK提供了wait()和notify()的替代方式吗？\n答案是肯定的。那就是Condition，但是值得一说的一点是Condition依赖于ReentrantLock\n下面我们看一下Condition\n``` java\n\tpublic interface Condition {\n\t\tvoid await() throws InterruptedException;\n\t\tvoid awaitUninterruptibly();\n\t\tboolean await(long time, TimeUnit unit) throws InterruptedException;\n\t\tvoid signal();\n\t\tvoid signalAll();\n\t}\n```\n\n<!--more-->\n\n- await() 与 wait() 对应\n- signal() 与 notify() 对应\n- signalAll() 与 notifyAll() 对应\n那么还有几个方法是干什么用的呢？\n- awaitUninterruptibly() 不响应等待中的中断\n- boolean await(long time, TimeUnit unit) 等待规定时间，无论是否被唤醒都继续执行\n\n``` java\n\tpublic class TestCondition implements Runnable {\n\t\tprivate static ReentrantLock lock = new ReentrantLock();\n\t\tprivate static Condition condition = lock.newCondition();\n\t\t\n\t\t@Override\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tlock.lock();\n\t\t\t\tcondition.await();\n\t\t\t\tSystem.out.println(\"thread is going on\");\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}finally {\n\t\t\t\tlock.unlock();\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) throws InterruptedException {                  \n\t\t\tThread t = new Thread(new TestCondition());\n\t\t\tt.start();\n\t\t\tThread.sleep(1000);\n\t\t\tlock.lock();\n\t\t\tcondition.signal();\n\t\t\tlock.unlock();\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\nthread is going on\n```\n\n### ReadWriteLock(读写锁)\n\n为了提高系统性能，从JDK5后提供ReadWriteLock将数据读写分离。读与写的阻塞状态如下 ：\n- 读与读不互斥，读读之间不阻塞\n- 读与写互斥，读写互相堵塞\n- 写与写互斥，写写阻塞\n","source":"_posts/intercurrent_condition-readwritelock.md","raw":"---\ntitle: 并发编程（十一）Condition与ReadWriteLock\ndate: 2016-07-15 16:20:44\ntags:\n\t- 并发编程\n---\n\n### Condition\n\n我们前面说到ReentrantLock可以替代synchronized，那么JDK提供了wait()和notify()的替代方式吗？\n答案是肯定的。那就是Condition，但是值得一说的一点是Condition依赖于ReentrantLock\n下面我们看一下Condition\n``` java\n\tpublic interface Condition {\n\t\tvoid await() throws InterruptedException;\n\t\tvoid awaitUninterruptibly();\n\t\tboolean await(long time, TimeUnit unit) throws InterruptedException;\n\t\tvoid signal();\n\t\tvoid signalAll();\n\t}\n```\n\n<!--more-->\n\n- await() 与 wait() 对应\n- signal() 与 notify() 对应\n- signalAll() 与 notifyAll() 对应\n那么还有几个方法是干什么用的呢？\n- awaitUninterruptibly() 不响应等待中的中断\n- boolean await(long time, TimeUnit unit) 等待规定时间，无论是否被唤醒都继续执行\n\n``` java\n\tpublic class TestCondition implements Runnable {\n\t\tprivate static ReentrantLock lock = new ReentrantLock();\n\t\tprivate static Condition condition = lock.newCondition();\n\t\t\n\t\t@Override\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tlock.lock();\n\t\t\t\tcondition.await();\n\t\t\t\tSystem.out.println(\"thread is going on\");\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}finally {\n\t\t\t\tlock.unlock();\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) throws InterruptedException {                  \n\t\t\tThread t = new Thread(new TestCondition());\n\t\t\tt.start();\n\t\t\tThread.sleep(1000);\n\t\t\tlock.lock();\n\t\t\tcondition.signal();\n\t\t\tlock.unlock();\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\nthread is going on\n```\n\n### ReadWriteLock(读写锁)\n\n为了提高系统性能，从JDK5后提供ReadWriteLock将数据读写分离。读与写的阻塞状态如下 ：\n- 读与读不互斥，读读之间不阻塞\n- 读与写互斥，读写互相堵塞\n- 写与写互斥，写写阻塞\n","slug":"intercurrent_condition-readwritelock","published":1,"updated":"2017-03-08T11:00:00.815Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5cm0014qoq1zyx0kf4s","content":"<h3 id=\"Condition\"><a href=\"#Condition\" class=\"headerlink\" title=\"Condition\"></a>Condition</h3><p>我们前面说到ReentrantLock可以替代synchronized，那么JDK提供了wait()和notify()的替代方式吗？<br>答案是肯定的。那就是Condition，但是值得一说的一点是Condition依赖于ReentrantLock<br>下面我们看一下Condition<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Condition</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">await</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException</span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">awaitUninterruptibly</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">await</span><span class=\"params\">(<span class=\"keyword\">long</span> time, TimeUnit unit)</span> <span class=\"keyword\">throws</span> InterruptedException</span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">signal</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">signalAll</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<ul>\n<li>await() 与 wait() 对应</li>\n<li>signal() 与 notify() 对应</li>\n<li>signalAll() 与 notifyAll() 对应<br>那么还有几个方法是干什么用的呢？</li>\n<li>awaitUninterruptibly() 不响应等待中的中断</li>\n<li>boolean await(long time, TimeUnit unit) 等待规定时间，无论是否被唤醒都继续执行</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestCondition</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ReentrantLock lock = <span class=\"keyword\">new</span> ReentrantLock();</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Condition condition = lock.newCondition();</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tlock.lock();</div><div class=\"line\">\t\t\tcondition.await();</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"thread is going on\"</span>);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\tlock.unlock();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;                  </div><div class=\"line\">\t\tThread t = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> TestCondition());</div><div class=\"line\">\t\tt.start();</div><div class=\"line\">\t\tThread.sleep(<span class=\"number\">1000</span>);</div><div class=\"line\">\t\tlock.lock();</div><div class=\"line\">\t\tcondition.signal();</div><div class=\"line\">\t\tlock.unlock();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">thread is going on</div></pre></td></tr></table></figure></p>\n<h3 id=\"ReadWriteLock-读写锁\"><a href=\"#ReadWriteLock-读写锁\" class=\"headerlink\" title=\"ReadWriteLock(读写锁)\"></a>ReadWriteLock(读写锁)</h3><p>为了提高系统性能，从JDK5后提供ReadWriteLock将数据读写分离。读与写的阻塞状态如下 ：</p>\n<ul>\n<li>读与读不互斥，读读之间不阻塞</li>\n<li>读与写互斥，读写互相堵塞</li>\n<li>写与写互斥，写写阻塞</li>\n</ul>\n","excerpt":"<h3 id=\"Condition\"><a href=\"#Condition\" class=\"headerlink\" title=\"Condition\"></a>Condition</h3><p>我们前面说到ReentrantLock可以替代synchronized，那么JDK提供了wait()和notify()的替代方式吗？<br>答案是肯定的。那就是Condition，但是值得一说的一点是Condition依赖于ReentrantLock<br>下面我们看一下Condition<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Condition</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">await</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException</span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">awaitUninterruptibly</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">await</span><span class=\"params\">(<span class=\"keyword\">long</span> time, TimeUnit unit)</span> <span class=\"keyword\">throws</span> InterruptedException</span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">signal</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">signalAll</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>","more":"<ul>\n<li>await() 与 wait() 对应</li>\n<li>signal() 与 notify() 对应</li>\n<li>signalAll() 与 notifyAll() 对应<br>那么还有几个方法是干什么用的呢？</li>\n<li>awaitUninterruptibly() 不响应等待中的中断</li>\n<li>boolean await(long time, TimeUnit unit) 等待规定时间，无论是否被唤醒都继续执行</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestCondition</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ReentrantLock lock = <span class=\"keyword\">new</span> ReentrantLock();</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Condition condition = lock.newCondition();</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tlock.lock();</div><div class=\"line\">\t\t\tcondition.await();</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"thread is going on\"</span>);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\tlock.unlock();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;                  </div><div class=\"line\">\t\tThread t = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> TestCondition());</div><div class=\"line\">\t\tt.start();</div><div class=\"line\">\t\tThread.sleep(<span class=\"number\">1000</span>);</div><div class=\"line\">\t\tlock.lock();</div><div class=\"line\">\t\tcondition.signal();</div><div class=\"line\">\t\tlock.unlock();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">thread is going on</div></pre></td></tr></table></figure></p>\n<h3 id=\"ReadWriteLock-读写锁\"><a href=\"#ReadWriteLock-读写锁\" class=\"headerlink\" title=\"ReadWriteLock(读写锁)\"></a>ReadWriteLock(读写锁)</h3><p>为了提高系统性能，从JDK5后提供ReadWriteLock将数据读写分离。读与写的阻塞状态如下 ：</p>\n<ul>\n<li>读与读不互斥，读读之间不阻塞</li>\n<li>读与写互斥，读写互相堵塞</li>\n<li>写与写互斥，写写阻塞</li>\n</ul>"},{"title":"并发编程（九）并发下ArrayList和HashMap的bug","date":"2016-07-03T08:09:21.000Z","_content":"### ArrayList的Bug\n\n我们知道ArrayList是线程不安全的，在并发编程中使用ArrayList可能会导致程序出错\n``` java \n\tpublic class ArrayListBug {\n\t\tprivate static ArrayList<Integer> al = new ArrayList<>(10);\n\t\tprivate static Vector<Integer> v = new Vector<>(10);\n\n\t\tpublic static class BugThread extends Thread {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tfor(int i = 0; i < 100000; i++) {\n\t\t\t\t\tal.add(i);\n\t\t\t\t\tv.add(i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) throws InterruptedException {                  \n\t\t\tThread t1 = new BugThread();\n\t\t\tThread t2 = new BugThread();\n\t\t\tt1.start();\n\t\t\tt2.start();\n\t\t\tt1.join();\n\t\t\tt2.join();\n\t\t\tSystem.out.println(\"al.size() : \" + al.size());\n\t\t\tSystem.out.println(\"v.size() : \" + v.size());\n\t\t}\n\t}\n```\n运行上面的程序，我们可能得到三种结果\n\n<!--more-->\n\n- 恭喜你，得到了正确的答案\nal.size() : 0\nv.size() : 200000\n\n- 也恭喜你，抛出了java.lang.ArrayIndexOutOfBoundsException\n为什么也值得恭喜呢？对于程序员来说找到bug其实就是解决了问题\n\n- 恭喜你，进入抓狂的状态，因为不报错，但结果就是不对\n``` java\nal.size() : 134508\nv.size() : 200000\n```\n\n这是为什么呢？\n因为两个线程同时对容器操作，那么它就有可能产生错误。不仅如此，当容器遍历的时候修改数据也会将数据写坏。\n\n怎么解决呢？\n你也看到了Vector则不会产生问题，在并发编程中可以用Vector代替ArrayList\n\n### HashMap的Bug\n\n``` java\n\tpublic class HashMapBug {\n\t\tprivate static HashMap<String,Integer> map = new HashMap<>();\n\t\t\n\t\tpublic static class BugThread extends Thread {\n\t\t\tprivate int start = 0;\n\t\t\tpublic BugThread(int start) {\n\t\t\t\tthis.start = start;\n\t\t\t}\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tfor(int i = start; i < 100000; i += 2) {\n\t\t\t\t\tmap.put(Integer.toString(i), i);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) throws InterruptedException {                  \n\t\t\tThread t1 = new BugThread(0);\n\t\t\tThread t2 = new BugThread(1);\n\t\t\tt1.start();\n\t\t\tt2.start();\n\t\t\tt1.join();\n\t\t\tt2.join();\n\t\t\tSystem.out.println(map.size());\n\t\t}\n\t}\n```\n运行上面的程序，我们可能得到三种结果\n- 100000\n- 99867\n- 程序陷入死循环\n\n至于前两种和ArrayList一样。产生死循环的原因又是什么呢？\n我们知道HashMap的键具有唯一性，那么每次加入，它都会以链表的形式遍历一次，在并发编程的时候，那么它就可能破坏链表结构，使其变成环，从而造成死循环。这里还要说的一点就是在JDK8中不存在这个问题，对其进行了优化，但是会抛出java.lang.ClassCastException\n\n解决方案\n使用线程安全的ConcurrentHashMap代替HashMap\n\n","source":"_posts/intercurrent_bug_arrayList-hashmap.md","raw":"---\ntitle: 并发编程（九）并发下ArrayList和HashMap的bug\ndate: 2016-07-03 16:09:21\ntags:\n\t- 并发编程\n---\n### ArrayList的Bug\n\n我们知道ArrayList是线程不安全的，在并发编程中使用ArrayList可能会导致程序出错\n``` java \n\tpublic class ArrayListBug {\n\t\tprivate static ArrayList<Integer> al = new ArrayList<>(10);\n\t\tprivate static Vector<Integer> v = new Vector<>(10);\n\n\t\tpublic static class BugThread extends Thread {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tfor(int i = 0; i < 100000; i++) {\n\t\t\t\t\tal.add(i);\n\t\t\t\t\tv.add(i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) throws InterruptedException {                  \n\t\t\tThread t1 = new BugThread();\n\t\t\tThread t2 = new BugThread();\n\t\t\tt1.start();\n\t\t\tt2.start();\n\t\t\tt1.join();\n\t\t\tt2.join();\n\t\t\tSystem.out.println(\"al.size() : \" + al.size());\n\t\t\tSystem.out.println(\"v.size() : \" + v.size());\n\t\t}\n\t}\n```\n运行上面的程序，我们可能得到三种结果\n\n<!--more-->\n\n- 恭喜你，得到了正确的答案\nal.size() : 0\nv.size() : 200000\n\n- 也恭喜你，抛出了java.lang.ArrayIndexOutOfBoundsException\n为什么也值得恭喜呢？对于程序员来说找到bug其实就是解决了问题\n\n- 恭喜你，进入抓狂的状态，因为不报错，但结果就是不对\n``` java\nal.size() : 134508\nv.size() : 200000\n```\n\n这是为什么呢？\n因为两个线程同时对容器操作，那么它就有可能产生错误。不仅如此，当容器遍历的时候修改数据也会将数据写坏。\n\n怎么解决呢？\n你也看到了Vector则不会产生问题，在并发编程中可以用Vector代替ArrayList\n\n### HashMap的Bug\n\n``` java\n\tpublic class HashMapBug {\n\t\tprivate static HashMap<String,Integer> map = new HashMap<>();\n\t\t\n\t\tpublic static class BugThread extends Thread {\n\t\t\tprivate int start = 0;\n\t\t\tpublic BugThread(int start) {\n\t\t\t\tthis.start = start;\n\t\t\t}\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tfor(int i = start; i < 100000; i += 2) {\n\t\t\t\t\tmap.put(Integer.toString(i), i);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) throws InterruptedException {                  \n\t\t\tThread t1 = new BugThread(0);\n\t\t\tThread t2 = new BugThread(1);\n\t\t\tt1.start();\n\t\t\tt2.start();\n\t\t\tt1.join();\n\t\t\tt2.join();\n\t\t\tSystem.out.println(map.size());\n\t\t}\n\t}\n```\n运行上面的程序，我们可能得到三种结果\n- 100000\n- 99867\n- 程序陷入死循环\n\n至于前两种和ArrayList一样。产生死循环的原因又是什么呢？\n我们知道HashMap的键具有唯一性，那么每次加入，它都会以链表的形式遍历一次，在并发编程的时候，那么它就可能破坏链表结构，使其变成环，从而造成死循环。这里还要说的一点就是在JDK8中不存在这个问题，对其进行了优化，但是会抛出java.lang.ClassCastException\n\n解决方案\n使用线程安全的ConcurrentHashMap代替HashMap\n\n","slug":"intercurrent_bug_arrayList-hashmap","published":1,"updated":"2017-03-08T10:59:51.737Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5co0016qoq1j8cv9250","content":"<h3 id=\"ArrayList的Bug\"><a href=\"#ArrayList的Bug\" class=\"headerlink\" title=\"ArrayList的Bug\"></a>ArrayList的Bug</h3><p>我们知道ArrayList是线程不安全的，在并发编程中使用ArrayList可能会导致程序出错<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayListBug</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ArrayList&lt;Integer&gt; al = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"number\">10</span>);</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Vector&lt;Integer&gt; v = <span class=\"keyword\">new</span> Vector&lt;&gt;(<span class=\"number\">10</span>);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BugThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100000</span>; i++) &#123;</div><div class=\"line\">\t\t\t\tal.add(i);</div><div class=\"line\">\t\t\t\tv.add(i);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;                  </div><div class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> BugThread();</div><div class=\"line\">\t\tThread t2 = <span class=\"keyword\">new</span> BugThread();</div><div class=\"line\">\t\tt1.start();</div><div class=\"line\">\t\tt2.start();</div><div class=\"line\">\t\tt1.join();</div><div class=\"line\">\t\tt2.join();</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"al.size() : \"</span> + al.size());</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"v.size() : \"</span> + v.size());</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行上面的程序，我们可能得到三种结果</p>\n<a id=\"more\"></a>\n<ul>\n<li><p>恭喜你，得到了正确的答案<br>al.size() : 0<br>v.size() : 200000</p>\n</li>\n<li><p>也恭喜你，抛出了java.lang.ArrayIndexOutOfBoundsException<br>为什么也值得恭喜呢？对于程序员来说找到bug其实就是解决了问题</p>\n</li>\n<li><p>恭喜你，进入抓狂的状态，因为不报错，但结果就是不对</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">al.size() : <span class=\"number\">134508</span></div><div class=\"line\">v.size() : <span class=\"number\">200000</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这是为什么呢？<br>因为两个线程同时对容器操作，那么它就有可能产生错误。不仅如此，当容器遍历的时候修改数据也会将数据写坏。</p>\n<p>怎么解决呢？<br>你也看到了Vector则不会产生问题，在并发编程中可以用Vector代替ArrayList</p>\n<h3 id=\"HashMap的Bug\"><a href=\"#HashMap的Bug\" class=\"headerlink\" title=\"HashMap的Bug\"></a>HashMap的Bug</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HashMapBug</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> HashMap&lt;String,Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BugThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> start = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BugThread</span><span class=\"params\">(<span class=\"keyword\">int</span> start)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.start = start;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = start; i &lt; <span class=\"number\">100000</span>; i += <span class=\"number\">2</span>) &#123;</div><div class=\"line\">\t\t\t\tmap.put(Integer.toString(i), i);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;                  </div><div class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> BugThread(<span class=\"number\">0</span>);</div><div class=\"line\">\t\tThread t2 = <span class=\"keyword\">new</span> BugThread(<span class=\"number\">1</span>);</div><div class=\"line\">\t\tt1.start();</div><div class=\"line\">\t\tt2.start();</div><div class=\"line\">\t\tt1.join();</div><div class=\"line\">\t\tt2.join();</div><div class=\"line\">\t\tSystem.out.println(map.size());</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行上面的程序，我们可能得到三种结果</p>\n<ul>\n<li>100000</li>\n<li>99867</li>\n<li>程序陷入死循环</li>\n</ul>\n<p>至于前两种和ArrayList一样。产生死循环的原因又是什么呢？<br>我们知道HashMap的键具有唯一性，那么每次加入，它都会以链表的形式遍历一次，在并发编程的时候，那么它就可能破坏链表结构，使其变成环，从而造成死循环。这里还要说的一点就是在JDK8中不存在这个问题，对其进行了优化，但是会抛出java.lang.ClassCastException</p>\n<p>解决方案<br>使用线程安全的ConcurrentHashMap代替HashMap</p>\n","excerpt":"<h3 id=\"ArrayList的Bug\"><a href=\"#ArrayList的Bug\" class=\"headerlink\" title=\"ArrayList的Bug\"></a>ArrayList的Bug</h3><p>我们知道ArrayList是线程不安全的，在并发编程中使用ArrayList可能会导致程序出错<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayListBug</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ArrayList&lt;Integer&gt; al = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"number\">10</span>);</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Vector&lt;Integer&gt; v = <span class=\"keyword\">new</span> Vector&lt;&gt;(<span class=\"number\">10</span>);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BugThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100000</span>; i++) &#123;</div><div class=\"line\">\t\t\t\tal.add(i);</div><div class=\"line\">\t\t\t\tv.add(i);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;                  </div><div class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> BugThread();</div><div class=\"line\">\t\tThread t2 = <span class=\"keyword\">new</span> BugThread();</div><div class=\"line\">\t\tt1.start();</div><div class=\"line\">\t\tt2.start();</div><div class=\"line\">\t\tt1.join();</div><div class=\"line\">\t\tt2.join();</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"al.size() : \"</span> + al.size());</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"v.size() : \"</span> + v.size());</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行上面的程序，我们可能得到三种结果</p>","more":"<ul>\n<li><p>恭喜你，得到了正确的答案<br>al.size() : 0<br>v.size() : 200000</p>\n</li>\n<li><p>也恭喜你，抛出了java.lang.ArrayIndexOutOfBoundsException<br>为什么也值得恭喜呢？对于程序员来说找到bug其实就是解决了问题</p>\n</li>\n<li><p>恭喜你，进入抓狂的状态，因为不报错，但结果就是不对</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">al.size() : <span class=\"number\">134508</span></div><div class=\"line\">v.size() : <span class=\"number\">200000</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这是为什么呢？<br>因为两个线程同时对容器操作，那么它就有可能产生错误。不仅如此，当容器遍历的时候修改数据也会将数据写坏。</p>\n<p>怎么解决呢？<br>你也看到了Vector则不会产生问题，在并发编程中可以用Vector代替ArrayList</p>\n<h3 id=\"HashMap的Bug\"><a href=\"#HashMap的Bug\" class=\"headerlink\" title=\"HashMap的Bug\"></a>HashMap的Bug</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HashMapBug</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> HashMap&lt;String,Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BugThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> start = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BugThread</span><span class=\"params\">(<span class=\"keyword\">int</span> start)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.start = start;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = start; i &lt; <span class=\"number\">100000</span>; i += <span class=\"number\">2</span>) &#123;</div><div class=\"line\">\t\t\t\tmap.put(Integer.toString(i), i);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;                  </div><div class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> BugThread(<span class=\"number\">0</span>);</div><div class=\"line\">\t\tThread t2 = <span class=\"keyword\">new</span> BugThread(<span class=\"number\">1</span>);</div><div class=\"line\">\t\tt1.start();</div><div class=\"line\">\t\tt2.start();</div><div class=\"line\">\t\tt1.join();</div><div class=\"line\">\t\tt2.join();</div><div class=\"line\">\t\tSystem.out.println(map.size());</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行上面的程序，我们可能得到三种结果</p>\n<ul>\n<li>100000</li>\n<li>99867</li>\n<li>程序陷入死循环</li>\n</ul>\n<p>至于前两种和ArrayList一样。产生死循环的原因又是什么呢？<br>我们知道HashMap的键具有唯一性，那么每次加入，它都会以链表的形式遍历一次，在并发编程的时候，那么它就可能破坏链表结构，使其变成环，从而造成死循环。这里还要说的一点就是在JDK8中不存在这个问题，对其进行了优化，但是会抛出java.lang.ClassCastException</p>\n<p>解决方案<br>使用线程安全的ConcurrentHashMap代替HashMap</p>"},{"title":"并发编程(十六) 并发容器","date":"2016-07-24T04:21:59.000Z","_content":"编程过程中，我们会经常使用容器，但我们知道ArrayList，LinkedList等都是线程不安全的。那么在并发编程中，我们又怎么解决这个问题呢？\n使用Collections工具类将上述数据结构包装成安全的，这里以ArrayList举例\n\n<!--more-->\n\n``` java\n\tstatic class SynchronizedList<E> extends SynchronizedCollection<E> implements List<E> {\n\t\tprivate static final long serialVersionUID = -7754090372962971524L;\n\t\tfinal List<E> list;\n\t\tpublic void add(int index, E element) {\n\t\t\tsynchronized (mutex) {list.add(index, element);}\n\t\t}\n\t}\n```\n关于List的所有操作都会使用这个mutex进行同步，从而保证线程安全，但它仅仅只用于并发级别不高的\n\n使用线程安全的数据结构\n### ConcurrentLinkedQueue\n\n我们先来看看它的具体实现\n``` java\n\tpublic class ConcurrentLinkedQueue<E> extends AbstractQueue<E>\n        implements Queue<E>, java.io.Serializable {\n\t\t\tprivate static class Node<E> {\n\t\t\t\tvolatile E item;\n\t\t\t\tvolatile Node<E> next;\n\t\t\t\tboolean casItem(E cmp, E val){}\n\t\t\t\tvoid lazySetNext(Node<E> val) {}\n\t\t\t\tboolean casNext(Node<E> cmp, Node<E> val) {}\n\t\t\t}\n\t}\n```\n我们可以看到Node中的方法都没有加锁，线程安全全部由CAS操作来保证，关于CAS操作，后面会说\n\n### CopyOnWriteArrayList\n\n为了更好的提高读写性能，JDK提供了CopyOnWriteArrayList类，对它来说，读写是不需要加锁的。而写数据的时候，它并不在原来的数据上修改，而是将原来的数据Copy一份修改好后，再将原来的替换\n下面就展示有关读取的实现\n``` java\n\tprivate transient volatile Object[] array;\n\tfinal Object[] getArray() {\n        return array;\n    }\n\tprivate E get(Object[] a, int index) {\n        return (E) a[index];\n    }\n\tpublic E get(int index) {\n        return get(getArray(), index);\n    }\n```\n相对于读，写就更麻烦一点\n``` java\n\tpublic boolean add(E e) {\n        final ReentrantLock lock = this.lock;\n        lock.lock();\n        try {\n            Object[] elements = getArray();\n            int len = elements.length;\n            Object[] newElements = Arrays.copyOf(elements, len + 1);\n            newElements[len] = e;\n            setArray(newElements);\n            return true;\n        } finally {\n            lock.unlock();\n        }\n    }\n```\n\n### BlockingQueue\n\nBlockingQueue主要作为数据共享的通道，它会让服务线程在队列为空时进行等待，当有新的消息进入队列后自动将线程唤醒, 值得一说的是BlockingQueue是个接口，它的主要实现有基于数组的ArrayBlockingQueue和基于链表的LinkedBlockingQueue\n下面看看JDK源码的实现\n``` java\n\tfinal Object[] items;\n\t/** Condition for waiting takes */\n\tprivate final Condition notEmpty;\n\n\t/** Condition for waiting puts */\n\tprivate final Condition notFull;\n\tpublic E take() throws InterruptedException {                                                 \n        final ReentrantLock lock = this.lock;\n        lock.lockInterruptibly();\n        try {\n            while (count == 0)\n                notEmpty.await();\n            return dequeue();\n        } finally {\n            lock.unlock();\n        }\n    }\n\tpublic void put(E e) throws InterruptedException {\n        checkNotNull(e);\n        final ReentrantLock lock = this.lock;\n        lock.lockInterruptibly();\n        try {\n            while (count == items.length)\n                notFull.await();\n            enqueue(e);\n        } finally {\n            lock.unlock();\n        }\n    }\n```\n \n","source":"_posts/intercurrent_collection.md","raw":"---\ntitle: 并发编程(十六) 并发容器\ndate: 2016-07-24 12:21:59\ntags:\n\t- 并发编程\n---\n编程过程中，我们会经常使用容器，但我们知道ArrayList，LinkedList等都是线程不安全的。那么在并发编程中，我们又怎么解决这个问题呢？\n使用Collections工具类将上述数据结构包装成安全的，这里以ArrayList举例\n\n<!--more-->\n\n``` java\n\tstatic class SynchronizedList<E> extends SynchronizedCollection<E> implements List<E> {\n\t\tprivate static final long serialVersionUID = -7754090372962971524L;\n\t\tfinal List<E> list;\n\t\tpublic void add(int index, E element) {\n\t\t\tsynchronized (mutex) {list.add(index, element);}\n\t\t}\n\t}\n```\n关于List的所有操作都会使用这个mutex进行同步，从而保证线程安全，但它仅仅只用于并发级别不高的\n\n使用线程安全的数据结构\n### ConcurrentLinkedQueue\n\n我们先来看看它的具体实现\n``` java\n\tpublic class ConcurrentLinkedQueue<E> extends AbstractQueue<E>\n        implements Queue<E>, java.io.Serializable {\n\t\t\tprivate static class Node<E> {\n\t\t\t\tvolatile E item;\n\t\t\t\tvolatile Node<E> next;\n\t\t\t\tboolean casItem(E cmp, E val){}\n\t\t\t\tvoid lazySetNext(Node<E> val) {}\n\t\t\t\tboolean casNext(Node<E> cmp, Node<E> val) {}\n\t\t\t}\n\t}\n```\n我们可以看到Node中的方法都没有加锁，线程安全全部由CAS操作来保证，关于CAS操作，后面会说\n\n### CopyOnWriteArrayList\n\n为了更好的提高读写性能，JDK提供了CopyOnWriteArrayList类，对它来说，读写是不需要加锁的。而写数据的时候，它并不在原来的数据上修改，而是将原来的数据Copy一份修改好后，再将原来的替换\n下面就展示有关读取的实现\n``` java\n\tprivate transient volatile Object[] array;\n\tfinal Object[] getArray() {\n        return array;\n    }\n\tprivate E get(Object[] a, int index) {\n        return (E) a[index];\n    }\n\tpublic E get(int index) {\n        return get(getArray(), index);\n    }\n```\n相对于读，写就更麻烦一点\n``` java\n\tpublic boolean add(E e) {\n        final ReentrantLock lock = this.lock;\n        lock.lock();\n        try {\n            Object[] elements = getArray();\n            int len = elements.length;\n            Object[] newElements = Arrays.copyOf(elements, len + 1);\n            newElements[len] = e;\n            setArray(newElements);\n            return true;\n        } finally {\n            lock.unlock();\n        }\n    }\n```\n\n### BlockingQueue\n\nBlockingQueue主要作为数据共享的通道，它会让服务线程在队列为空时进行等待，当有新的消息进入队列后自动将线程唤醒, 值得一说的是BlockingQueue是个接口，它的主要实现有基于数组的ArrayBlockingQueue和基于链表的LinkedBlockingQueue\n下面看看JDK源码的实现\n``` java\n\tfinal Object[] items;\n\t/** Condition for waiting takes */\n\tprivate final Condition notEmpty;\n\n\t/** Condition for waiting puts */\n\tprivate final Condition notFull;\n\tpublic E take() throws InterruptedException {                                                 \n        final ReentrantLock lock = this.lock;\n        lock.lockInterruptibly();\n        try {\n            while (count == 0)\n                notEmpty.await();\n            return dequeue();\n        } finally {\n            lock.unlock();\n        }\n    }\n\tpublic void put(E e) throws InterruptedException {\n        checkNotNull(e);\n        final ReentrantLock lock = this.lock;\n        lock.lockInterruptibly();\n        try {\n            while (count == items.length)\n                notFull.await();\n            enqueue(e);\n        } finally {\n            lock.unlock();\n        }\n    }\n```\n \n","slug":"intercurrent_collection","published":1,"updated":"2017-03-08T11:04:52.965Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5cq0019qoq1ajnnj6xp","content":"<p>编程过程中，我们会经常使用容器，但我们知道ArrayList，LinkedList等都是线程不安全的。那么在并发编程中，我们又怎么解决这个问题呢？<br>使用Collections工具类将上述数据结构包装成安全的，这里以ArrayList举例</p>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SynchronizedList</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">SynchronizedCollection</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = -<span class=\"number\">7754090372962971524L</span>;</div><div class=\"line\">\t<span class=\"keyword\">final</span> List&lt;E&gt; list;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (mutex) &#123;list.add(index, element);&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>关于List的所有操作都会使用这个mutex进行同步，从而保证线程安全，但它仅仅只用于并发级别不高的</p>\n<p>使用线程安全的数据结构</p>\n<h3 id=\"ConcurrentLinkedQueue\"><a href=\"#ConcurrentLinkedQueue\" class=\"headerlink\" title=\"ConcurrentLinkedQueue\"></a>ConcurrentLinkedQueue</h3><p>我们先来看看它的具体实现<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcurrentLinkedQueue</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractQueue</span>&lt;<span class=\"title\">E</span>&gt;</span></div><div class=\"line\">       <span class=\"keyword\">implements</span> <span class=\"title\">Queue</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">volatile</span> E item;</div><div class=\"line\">\t\t\t<span class=\"keyword\">volatile</span> Node&lt;E&gt; next;</div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">casItem</span><span class=\"params\">(E cmp, E val)</span></span>&#123;&#125;</div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">lazySetNext</span><span class=\"params\">(Node&lt;E&gt; val)</span> </span>&#123;&#125;</div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">casNext</span><span class=\"params\">(Node&lt;E&gt; cmp, Node&lt;E&gt; val)</span> </span>&#123;&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们可以看到Node中的方法都没有加锁，线程安全全部由CAS操作来保证，关于CAS操作，后面会说</p>\n<h3 id=\"CopyOnWriteArrayList\"><a href=\"#CopyOnWriteArrayList\" class=\"headerlink\" title=\"CopyOnWriteArrayList\"></a>CopyOnWriteArrayList</h3><p>为了更好的提高读写性能，JDK提供了CopyOnWriteArrayList类，对它来说，读写是不需要加锁的。而写数据的时候，它并不在原来的数据上修改，而是将原来的数据Copy一份修改好后，再将原来的替换<br>下面就展示有关读取的实现<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> <span class=\"keyword\">volatile</span> Object[] array;</div><div class=\"line\"><span class=\"keyword\">final</span> Object[] getArray() &#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> array;</div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> E <span class=\"title\">get</span><span class=\"params\">(Object[] a, <span class=\"keyword\">int</span> index)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> (E) a[index];</div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> get(getArray(), index);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>相对于读，写就更麻烦一点<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">final</span> ReentrantLock lock = <span class=\"keyword\">this</span>.lock;</div><div class=\"line\">       lock.lock();</div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           Object[] elements = getArray();</div><div class=\"line\">           <span class=\"keyword\">int</span> len = elements.length;</div><div class=\"line\">           Object[] newElements = Arrays.copyOf(elements, len + <span class=\"number\">1</span>);</div><div class=\"line\">           newElements[len] = e;</div><div class=\"line\">           setArray(newElements);</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">       &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">           lock.unlock();</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"BlockingQueue\"><a href=\"#BlockingQueue\" class=\"headerlink\" title=\"BlockingQueue\"></a>BlockingQueue</h3><p>BlockingQueue主要作为数据共享的通道，它会让服务线程在队列为空时进行等待，当有新的消息进入队列后自动将线程唤醒, 值得一说的是BlockingQueue是个接口，它的主要实现有基于数组的ArrayBlockingQueue和基于链表的LinkedBlockingQueue<br>下面看看JDK源码的实现<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> Object[] items;</div><div class=\"line\"><span class=\"comment\">/** Condition for waiting takes */</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Condition notEmpty;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/** Condition for waiting puts */</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Condition notFull;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">take</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;                                                 </div><div class=\"line\">       <span class=\"keyword\">final</span> ReentrantLock lock = <span class=\"keyword\">this</span>.lock;</div><div class=\"line\">       lock.lockInterruptibly();</div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           <span class=\"keyword\">while</span> (count == <span class=\"number\">0</span>)</div><div class=\"line\">               notEmpty.await();</div><div class=\"line\">           <span class=\"keyword\">return</span> dequeue();</div><div class=\"line\">       &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">           lock.unlock();</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(E e)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">       checkNotNull(e);</div><div class=\"line\">       <span class=\"keyword\">final</span> ReentrantLock lock = <span class=\"keyword\">this</span>.lock;</div><div class=\"line\">       lock.lockInterruptibly();</div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           <span class=\"keyword\">while</span> (count == items.length)</div><div class=\"line\">               notFull.await();</div><div class=\"line\">           enqueue(e);</div><div class=\"line\">       &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">           lock.unlock();</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>编程过程中，我们会经常使用容器，但我们知道ArrayList，LinkedList等都是线程不安全的。那么在并发编程中，我们又怎么解决这个问题呢？<br>使用Collections工具类将上述数据结构包装成安全的，这里以ArrayList举例</p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SynchronizedList</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">SynchronizedCollection</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = -<span class=\"number\">7754090372962971524L</span>;</div><div class=\"line\">\t<span class=\"keyword\">final</span> List&lt;E&gt; list;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (mutex) &#123;list.add(index, element);&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>关于List的所有操作都会使用这个mutex进行同步，从而保证线程安全，但它仅仅只用于并发级别不高的</p>\n<p>使用线程安全的数据结构</p>\n<h3 id=\"ConcurrentLinkedQueue\"><a href=\"#ConcurrentLinkedQueue\" class=\"headerlink\" title=\"ConcurrentLinkedQueue\"></a>ConcurrentLinkedQueue</h3><p>我们先来看看它的具体实现<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcurrentLinkedQueue</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractQueue</span>&lt;<span class=\"title\">E</span>&gt;</div><div class=\"line\">       <span class=\"keyword\">implements</span> <span class=\"title\">Queue</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">volatile</span> E item;</div><div class=\"line\">\t\t\t<span class=\"keyword\">volatile</span> Node&lt;E&gt; next;</div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">casItem</span><span class=\"params\">(E cmp, E val)</span></span>&#123;&#125;</div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">lazySetNext</span><span class=\"params\">(Node&lt;E&gt; val)</span> </span>&#123;&#125;</div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">casNext</span><span class=\"params\">(Node&lt;E&gt; cmp, Node&lt;E&gt; val)</span> </span>&#123;&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们可以看到Node中的方法都没有加锁，线程安全全部由CAS操作来保证，关于CAS操作，后面会说</p>\n<h3 id=\"CopyOnWriteArrayList\"><a href=\"#CopyOnWriteArrayList\" class=\"headerlink\" title=\"CopyOnWriteArrayList\"></a>CopyOnWriteArrayList</h3><p>为了更好的提高读写性能，JDK提供了CopyOnWriteArrayList类，对它来说，读写是不需要加锁的。而写数据的时候，它并不在原来的数据上修改，而是将原来的数据Copy一份修改好后，再将原来的替换<br>下面就展示有关读取的实现<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> <span class=\"keyword\">volatile</span> Object[] array;</div><div class=\"line\"><span class=\"keyword\">final</span> Object[] getArray() &#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> array;</div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> E <span class=\"title\">get</span><span class=\"params\">(Object[] a, <span class=\"keyword\">int</span> index)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> (E) a[index];</div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> get(getArray(), index);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>相对于读，写就更麻烦一点<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">final</span> ReentrantLock lock = <span class=\"keyword\">this</span>.lock;</div><div class=\"line\">       lock.lock();</div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           Object[] elements = getArray();</div><div class=\"line\">           <span class=\"keyword\">int</span> len = elements.length;</div><div class=\"line\">           Object[] newElements = Arrays.copyOf(elements, len + <span class=\"number\">1</span>);</div><div class=\"line\">           newElements[len] = e;</div><div class=\"line\">           setArray(newElements);</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">       &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">           lock.unlock();</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"BlockingQueue\"><a href=\"#BlockingQueue\" class=\"headerlink\" title=\"BlockingQueue\"></a>BlockingQueue</h3><p>BlockingQueue主要作为数据共享的通道，它会让服务线程在队列为空时进行等待，当有新的消息进入队列后自动将线程唤醒, 值得一说的是BlockingQueue是个接口，它的主要实现有基于数组的ArrayBlockingQueue和基于链表的LinkedBlockingQueue<br>下面看看JDK源码的实现<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> Object[] items;</div><div class=\"line\"><span class=\"comment\">/** Condition for waiting takes */</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Condition notEmpty;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/** Condition for waiting puts */</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Condition notFull;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">take</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;                                                 </div><div class=\"line\">       <span class=\"keyword\">final</span> ReentrantLock lock = <span class=\"keyword\">this</span>.lock;</div><div class=\"line\">       lock.lockInterruptibly();</div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           <span class=\"keyword\">while</span> (count == <span class=\"number\">0</span>)</div><div class=\"line\">               notEmpty.await();</div><div class=\"line\">           <span class=\"keyword\">return</span> dequeue();</div><div class=\"line\">       &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">           lock.unlock();</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(E e)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">       checkNotNull(e);</div><div class=\"line\">       <span class=\"keyword\">final</span> ReentrantLock lock = <span class=\"keyword\">this</span>.lock;</div><div class=\"line\">       lock.lockInterruptibly();</div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           <span class=\"keyword\">while</span> (count == items.length)</div><div class=\"line\">               notFull.await();</div><div class=\"line\">           enqueue(e);</div><div class=\"line\">       &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">           lock.unlock();</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>"},{"title":"并发编程（十三）CyclicBarrier与LockSupport","date":"2016-07-17T16:10:11.000Z","_content":"### CyclicBarrier（循环栅栏）\n\nCyclicBarrier与CountDownLatch非常相似，它也可以实现线程的计数等待，但它比CountDownLatch更加的强大。它可以多次利用，也就是说当计数为0后又变成和开始一样。\n下面展示一个测试案例 ：\n\n<!--more-->\n\n``` java\n\tpublic class TestCyclicBarrier {\n\t\tpublic static class BarrierThread implements Runnable {\t\t\n\t\t\tprivate static CyclicBarrier cb = new CyclicBarrier(5);\n\t\t\tprivate boolean flag = true;\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tdoWork(flag);\n\t\t\t\t\tcb.await();\n\t\t\t\t\tflag = false;\n\t\t\t\t\tdoWork(flag);\n\t\t\t\t\tcb.await();\n\t\t\t\t} catch (InterruptedException | BrokenBarrierException e) {\n\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tprivate void doWork(boolean flag) throws InterruptedException {\n\t\t\t\tThread.sleep(1000 * new Random().nextInt(5));\n\t\t\t\tif (flag) {\n\t\t\t\t\tSystem.out.println(System.currentTimeMillis()/1000 + \" \"\n\t\t\t\t\t\t\t+ Thread.currentThread().getName() + \" ready\");\t\n\t\t\t\t}else {\n\t\t\t\t\tSystem.out.println(System.currentTimeMillis()/1000 + \" \"\n\t\t\t\t\t\t\t+ Thread.currentThread().getName() + \" finsh\");\t\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) {\n\t\t\tBarrierThread barrier = new BarrierThread();\n\t\t\tfor(int i = 0; i < 5; i++) {\n\t\t\t\tnew Thread(barrier).start();\n\t\t\t}\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\n1469513719 Thread-4 ready\n1469513719 Thread-3 ready\n1469513719 Thread-2 ready\n1469513720 Thread-1 ready\n1469513720 Thread-0 ready\n1469513720 Thread-3 finsh\n1469513721 Thread-2 finsh\n1469513722 Thread-1 finsh\n1469513723 Thread-0 finsh\n1469513724 Thread-4 finsh\n```\n\n注意事项\nCyclicBarrier.await()会抛出两个异常，除了InterruptedException，还有就是BrokenBarrierException，抛出这个异常，说明此时的栅栏已经被破坏\n\n### LockSupport\n\n前面我们知道suspend()可能会使程序产生线程安全问题，那么JDK有没有更好的代替方案呢？\n答案是肯定的，那么就由LockSupport出场了\n与Object.wait()相比，LockSupport不需要获取对象的锁，更不会抛出InterruptedException。其内部实现使用了类似信号量的机制从而保证了线程安全\n``` java\n\tpublic static void unpark(Thread thread)\n\tpublic static void park()\n```\n这是LockSupport两个常用的方法\n下面展示一个关于中断处理的测试程序\n``` java\n\tpublic class TestLockSupport {\n\t\tprivate static Object object = new Object();\n\t\t\n\t\tpublic static class ChangObjectThread extends Thread {\n\t\t\tpublic ChangObjectThread(String name) {\n\t\t\t\tsuper.setName(name);\n\t\t\t}\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tsynchronized (object) {\n\t\t\t\t\tSystem.out.println(\"in \" + getName());\n\t\t\t\t\tLockSupport.park();\n\t\t\t\t\tif (interrupted()) {\n\t\t\t\t\t\tSystem.out.println(getName() + \" interrupted\");      \n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.println(getName() + \" exit\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) {\n\t\t\tChangObjectThread t1 = new ChangObjectThread(\"t1\");\n\t\t\tChangObjectThread t2 = new ChangObjectThread(\"t2\");\n\t\t\tt1.start();\n\t\t\tt2.start();\n\t\t\tt1.interrupt();\n\t\t\tLockSupport.unpark(t2);\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\nin t1\nt1 interrupted\nt1 exit\nin t2\nt2 exit\n```\n","source":"_posts/intercurrent_cyclicbarrier-locksupport.md","raw":"---\ntitle: 并发编程（十三）CyclicBarrier与LockSupport\ndate: 2016-07-18 00:10:11\ntags:\n\t- 并发编程\n---\n### CyclicBarrier（循环栅栏）\n\nCyclicBarrier与CountDownLatch非常相似，它也可以实现线程的计数等待，但它比CountDownLatch更加的强大。它可以多次利用，也就是说当计数为0后又变成和开始一样。\n下面展示一个测试案例 ：\n\n<!--more-->\n\n``` java\n\tpublic class TestCyclicBarrier {\n\t\tpublic static class BarrierThread implements Runnable {\t\t\n\t\t\tprivate static CyclicBarrier cb = new CyclicBarrier(5);\n\t\t\tprivate boolean flag = true;\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tdoWork(flag);\n\t\t\t\t\tcb.await();\n\t\t\t\t\tflag = false;\n\t\t\t\t\tdoWork(flag);\n\t\t\t\t\tcb.await();\n\t\t\t\t} catch (InterruptedException | BrokenBarrierException e) {\n\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tprivate void doWork(boolean flag) throws InterruptedException {\n\t\t\t\tThread.sleep(1000 * new Random().nextInt(5));\n\t\t\t\tif (flag) {\n\t\t\t\t\tSystem.out.println(System.currentTimeMillis()/1000 + \" \"\n\t\t\t\t\t\t\t+ Thread.currentThread().getName() + \" ready\");\t\n\t\t\t\t}else {\n\t\t\t\t\tSystem.out.println(System.currentTimeMillis()/1000 + \" \"\n\t\t\t\t\t\t\t+ Thread.currentThread().getName() + \" finsh\");\t\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) {\n\t\t\tBarrierThread barrier = new BarrierThread();\n\t\t\tfor(int i = 0; i < 5; i++) {\n\t\t\t\tnew Thread(barrier).start();\n\t\t\t}\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\n1469513719 Thread-4 ready\n1469513719 Thread-3 ready\n1469513719 Thread-2 ready\n1469513720 Thread-1 ready\n1469513720 Thread-0 ready\n1469513720 Thread-3 finsh\n1469513721 Thread-2 finsh\n1469513722 Thread-1 finsh\n1469513723 Thread-0 finsh\n1469513724 Thread-4 finsh\n```\n\n注意事项\nCyclicBarrier.await()会抛出两个异常，除了InterruptedException，还有就是BrokenBarrierException，抛出这个异常，说明此时的栅栏已经被破坏\n\n### LockSupport\n\n前面我们知道suspend()可能会使程序产生线程安全问题，那么JDK有没有更好的代替方案呢？\n答案是肯定的，那么就由LockSupport出场了\n与Object.wait()相比，LockSupport不需要获取对象的锁，更不会抛出InterruptedException。其内部实现使用了类似信号量的机制从而保证了线程安全\n``` java\n\tpublic static void unpark(Thread thread)\n\tpublic static void park()\n```\n这是LockSupport两个常用的方法\n下面展示一个关于中断处理的测试程序\n``` java\n\tpublic class TestLockSupport {\n\t\tprivate static Object object = new Object();\n\t\t\n\t\tpublic static class ChangObjectThread extends Thread {\n\t\t\tpublic ChangObjectThread(String name) {\n\t\t\t\tsuper.setName(name);\n\t\t\t}\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tsynchronized (object) {\n\t\t\t\t\tSystem.out.println(\"in \" + getName());\n\t\t\t\t\tLockSupport.park();\n\t\t\t\t\tif (interrupted()) {\n\t\t\t\t\t\tSystem.out.println(getName() + \" interrupted\");      \n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.println(getName() + \" exit\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) {\n\t\t\tChangObjectThread t1 = new ChangObjectThread(\"t1\");\n\t\t\tChangObjectThread t2 = new ChangObjectThread(\"t2\");\n\t\t\tt1.start();\n\t\t\tt2.start();\n\t\t\tt1.interrupt();\n\t\t\tLockSupport.unpark(t2);\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\nin t1\nt1 interrupted\nt1 exit\nin t2\nt2 exit\n```\n","slug":"intercurrent_cyclicbarrier-locksupport","published":1,"updated":"2017-03-08T11:04:00.017Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5cr001bqoq14dqs41tw","content":"<h3 id=\"CyclicBarrier（循环栅栏）\"><a href=\"#CyclicBarrier（循环栅栏）\" class=\"headerlink\" title=\"CyclicBarrier（循环栅栏）\"></a>CyclicBarrier（循环栅栏）</h3><p>CyclicBarrier与CountDownLatch非常相似，它也可以实现线程的计数等待，但它比CountDownLatch更加的强大。它可以多次利用，也就是说当计数为0后又变成和开始一样。<br>下面展示一个测试案例 ：</p>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestCyclicBarrier</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BarrierThread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> CyclicBarrier cb = <span class=\"keyword\">new</span> CyclicBarrier(<span class=\"number\">5</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tdoWork(flag);</div><div class=\"line\">\t\t\t\tcb.await();</div><div class=\"line\">\t\t\t\tflag = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t\t\tdoWork(flag);</div><div class=\"line\">\t\t\t\tcb.await();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException | BrokenBarrierException e) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">doWork</span><span class=\"params\">(<span class=\"keyword\">boolean</span> flag)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">\t\t\tThread.sleep(<span class=\"number\">1000</span> * <span class=\"keyword\">new</span> Random().nextInt(<span class=\"number\">5</span>));</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (flag) &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(System.currentTimeMillis()/<span class=\"number\">1000</span> + <span class=\"string\">\" \"</span></div><div class=\"line\">\t\t\t\t\t\t+ Thread.currentThread().getName() + <span class=\"string\">\" ready\"</span>);\t</div><div class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(System.currentTimeMillis()/<span class=\"number\">1000</span> + <span class=\"string\">\" \"</span></div><div class=\"line\">\t\t\t\t\t\t+ Thread.currentThread().getName() + <span class=\"string\">\" finsh\"</span>);\t</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tBarrierThread barrier = <span class=\"keyword\">new</span> BarrierThread();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">new</span> Thread(barrier).start();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1469513719</span> Thread-<span class=\"number\">4</span> ready</div><div class=\"line\"><span class=\"number\">1469513719</span> Thread-<span class=\"number\">3</span> ready</div><div class=\"line\"><span class=\"number\">1469513719</span> Thread-<span class=\"number\">2</span> ready</div><div class=\"line\"><span class=\"number\">1469513720</span> Thread-<span class=\"number\">1</span> ready</div><div class=\"line\"><span class=\"number\">1469513720</span> Thread-<span class=\"number\">0</span> ready</div><div class=\"line\"><span class=\"number\">1469513720</span> Thread-<span class=\"number\">3</span> finsh</div><div class=\"line\"><span class=\"number\">1469513721</span> Thread-<span class=\"number\">2</span> finsh</div><div class=\"line\"><span class=\"number\">1469513722</span> Thread-<span class=\"number\">1</span> finsh</div><div class=\"line\"><span class=\"number\">1469513723</span> Thread-<span class=\"number\">0</span> finsh</div><div class=\"line\"><span class=\"number\">1469513724</span> Thread-<span class=\"number\">4</span> finsh</div></pre></td></tr></table></figure></p>\n<p>注意事项<br>CyclicBarrier.await()会抛出两个异常，除了InterruptedException，还有就是BrokenBarrierException，抛出这个异常，说明此时的栅栏已经被破坏</p>\n<h3 id=\"LockSupport\"><a href=\"#LockSupport\" class=\"headerlink\" title=\"LockSupport\"></a>LockSupport</h3><p>前面我们知道suspend()可能会使程序产生线程安全问题，那么JDK有没有更好的代替方案呢？<br>答案是肯定的，那么就由LockSupport出场了<br>与Object.wait()相比，LockSupport不需要获取对象的锁，更不会抛出InterruptedException。其内部实现使用了类似信号量的机制从而保证了线程安全<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">unpark</span><span class=\"params\">(Thread thread)</span></span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">park</span><span class=\"params\">()</span></div></pre></td></tr></table></figure></p>\n<p>这是LockSupport两个常用的方法<br>下面展示一个关于中断处理的测试程序<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestLockSupport</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Object object = <span class=\"keyword\">new</span> Object();</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChangObjectThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ChangObjectThread</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">super</span>.setName(name);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span> (object) &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"in \"</span> + getName());</div><div class=\"line\">\t\t\t\tLockSupport.park();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (interrupted()) &#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.println(getName() + <span class=\"string\">\" interrupted\"</span>);      </div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tSystem.out.println(getName() + <span class=\"string\">\" exit\"</span>);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tChangObjectThread t1 = <span class=\"keyword\">new</span> ChangObjectThread(<span class=\"string\">\"t1\"</span>);</div><div class=\"line\">\t\tChangObjectThread t2 = <span class=\"keyword\">new</span> ChangObjectThread(<span class=\"string\">\"t2\"</span>);</div><div class=\"line\">\t\tt1.start();</div><div class=\"line\">\t\tt2.start();</div><div class=\"line\">\t\tt1.interrupt();</div><div class=\"line\">\t\tLockSupport.unpark(t2);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">in t1</div><div class=\"line\">t1 interrupted</div><div class=\"line\">t1 exit</div><div class=\"line\">in t2</div><div class=\"line\">t2 exit</div></pre></td></tr></table></figure></p>\n","excerpt":"<h3 id=\"CyclicBarrier（循环栅栏）\"><a href=\"#CyclicBarrier（循环栅栏）\" class=\"headerlink\" title=\"CyclicBarrier（循环栅栏）\"></a>CyclicBarrier（循环栅栏）</h3><p>CyclicBarrier与CountDownLatch非常相似，它也可以实现线程的计数等待，但它比CountDownLatch更加的强大。它可以多次利用，也就是说当计数为0后又变成和开始一样。<br>下面展示一个测试案例 ：</p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestCyclicBarrier</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BarrierThread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> CyclicBarrier cb = <span class=\"keyword\">new</span> CyclicBarrier(<span class=\"number\">5</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tdoWork(flag);</div><div class=\"line\">\t\t\t\tcb.await();</div><div class=\"line\">\t\t\t\tflag = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t\t\tdoWork(flag);</div><div class=\"line\">\t\t\t\tcb.await();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException | BrokenBarrierException e) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">doWork</span><span class=\"params\">(<span class=\"keyword\">boolean</span> flag)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">\t\t\tThread.sleep(<span class=\"number\">1000</span> * <span class=\"keyword\">new</span> Random().nextInt(<span class=\"number\">5</span>));</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (flag) &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(System.currentTimeMillis()/<span class=\"number\">1000</span> + <span class=\"string\">\" \"</span></div><div class=\"line\">\t\t\t\t\t\t+ Thread.currentThread().getName() + <span class=\"string\">\" ready\"</span>);\t</div><div class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(System.currentTimeMillis()/<span class=\"number\">1000</span> + <span class=\"string\">\" \"</span></div><div class=\"line\">\t\t\t\t\t\t+ Thread.currentThread().getName() + <span class=\"string\">\" finsh\"</span>);\t</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tBarrierThread barrier = <span class=\"keyword\">new</span> BarrierThread();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">new</span> Thread(barrier).start();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1469513719</span> Thread-<span class=\"number\">4</span> ready</div><div class=\"line\"><span class=\"number\">1469513719</span> Thread-<span class=\"number\">3</span> ready</div><div class=\"line\"><span class=\"number\">1469513719</span> Thread-<span class=\"number\">2</span> ready</div><div class=\"line\"><span class=\"number\">1469513720</span> Thread-<span class=\"number\">1</span> ready</div><div class=\"line\"><span class=\"number\">1469513720</span> Thread-<span class=\"number\">0</span> ready</div><div class=\"line\"><span class=\"number\">1469513720</span> Thread-<span class=\"number\">3</span> finsh</div><div class=\"line\"><span class=\"number\">1469513721</span> Thread-<span class=\"number\">2</span> finsh</div><div class=\"line\"><span class=\"number\">1469513722</span> Thread-<span class=\"number\">1</span> finsh</div><div class=\"line\"><span class=\"number\">1469513723</span> Thread-<span class=\"number\">0</span> finsh</div><div class=\"line\"><span class=\"number\">1469513724</span> Thread-<span class=\"number\">4</span> finsh</div></pre></td></tr></table></figure></p>\n<p>注意事项<br>CyclicBarrier.await()会抛出两个异常，除了InterruptedException，还有就是BrokenBarrierException，抛出这个异常，说明此时的栅栏已经被破坏</p>\n<h3 id=\"LockSupport\"><a href=\"#LockSupport\" class=\"headerlink\" title=\"LockSupport\"></a>LockSupport</h3><p>前面我们知道suspend()可能会使程序产生线程安全问题，那么JDK有没有更好的代替方案呢？<br>答案是肯定的，那么就由LockSupport出场了<br>与Object.wait()相比，LockSupport不需要获取对象的锁，更不会抛出InterruptedException。其内部实现使用了类似信号量的机制从而保证了线程安全<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">unpark</span><span class=\"params\">(Thread thread)</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">park</span><span class=\"params\">()</span></span></div></pre></td></tr></table></figure></p>\n<p>这是LockSupport两个常用的方法<br>下面展示一个关于中断处理的测试程序<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestLockSupport</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Object object = <span class=\"keyword\">new</span> Object();</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChangObjectThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ChangObjectThread</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">super</span>.setName(name);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span> (object) &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"in \"</span> + getName());</div><div class=\"line\">\t\t\t\tLockSupport.park();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (interrupted()) &#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.println(getName() + <span class=\"string\">\" interrupted\"</span>);      </div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tSystem.out.println(getName() + <span class=\"string\">\" exit\"</span>);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tChangObjectThread t1 = <span class=\"keyword\">new</span> ChangObjectThread(<span class=\"string\">\"t1\"</span>);</div><div class=\"line\">\t\tChangObjectThread t2 = <span class=\"keyword\">new</span> ChangObjectThread(<span class=\"string\">\"t2\"</span>);</div><div class=\"line\">\t\tt1.start();</div><div class=\"line\">\t\tt2.start();</div><div class=\"line\">\t\tt1.interrupt();</div><div class=\"line\">\t\tLockSupport.unpark(t2);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">in t1</div><div class=\"line\">t1 interrupted</div><div class=\"line\">t1 exit</div><div class=\"line\">in t2</div><div class=\"line\">t2 exit</div></pre></td></tr></table></figure></p>"},{"title":"并发编程(十七)锁的优化","date":"2016-07-26T12:33:50.000Z","_content":"多线程的应用其实不一定要比单线程效率高，就单线程应用来说CPU资源主要在任务上，而多线程不仅要作用于任务本身还要作用于线程之间的调度及其它。这就是单核在并行计算上性能要低于原始的串行计算\n在并发编程中，我们常常会使用锁来保证线程安全，那我们又有哪些方法来对锁进行优化呢？\n### 减少锁的持有时间\n\n我们前面说synchroinzed有两种锁定方法，一是直接放在方法前，另外一个是使用语句块。为了提高效率，我们使用语句块将需要同步的放在里面就行了,下面JDK中Patte的一个体现\n\n<!--more-->\n\n``` java\n\tpublic Matcher matcher(CharSequence input) {\n        if (!compiled) {\n            synchronized(this) {\n                if (!compiled)\n                    compile();\n            }\n        }\n        Matcher m = new Matcher(this, input);\n        return m;\n    }\n```\n\n### 减小锁的粒度\n\n所谓减少锁粒度就是指缩小锁定对象的范围，从而减小冲突的可能性\n减小锁的力度一个很好的例子就是ConcurrentHashMap,对于ConcurrentHashMap来说，减小锁的粒度就是将其内部结构再次分成多个HashMap，成之为段(SEGMENT)\n\n### 分离锁替换独占锁\n\n这个不用多说，ReentrantLock与ReentratReadWriteLock就是很好的例子，我们要尽量使用读写锁替换独占锁\n\n### 锁分离\n\n将读写锁再往外延伸一点就是将锁分离，不同的锁干不同的事，明确分工，下面看下JDK中LinkedBlockingQueue的实现\n``` java\n\tpublic class LinkedBlockingQueue<E> extends AbstractQueue<E>\n        implements BlockingQueue<E>, java.io.Serializable {\n\t\t\t/** Lock held by take, poll, etc */\n\t\t\tprivate final ReentrantLock takeLock = new ReentrantLock();\n\t\t\t /** Lock held by put, offer, etc */\n\t\t\tprivate final ReentrantLock putLock = new ReentrantLock();                    \n\t\t\tpublic E take() throws InterruptedException {\n\t\t\t\tE x;\n\t\t\t\tint c = -1;\n\t\t\t\tfinal AtomicInteger count = this.count;\n\t\t\t\tfinal ReentrantLock takeLock = this.takeLock;\n\t\t\t\ttakeLock.lockInterruptibly();\n\t\t\t\ttry {\n\t\t\t\t\twhile (count.get() == 0) {\n\t\t\t\t\t\tnotEmpty.await();\n\t\t\t\t\t}\n\t\t\t\t\tx = dequeue();\n\t\t\t\t\tc = count.getAndDecrement();\n\t\t\t\t\tif (c > 1)\n\t\t\t\t\t\tnotEmpty.signal();\n\t\t\t\t} finally {\n\t\t\t\t\ttakeLock.unlock();\n\t\t\t\t}\n\t\t\t\tif (c == capacity)\n\t\t\t\t\tsignalNotFull();\n\t\t\t\treturn x;\n\t\t\t}\n\n\t\t\tpublic E take() throws InterruptedException {\n\t\t\t\tE x;\n\t\t\t\tint c = -1;\n\t\t\t\tfinal AtomicInteger count = this.count;\n\t\t\t\tfinal ReentrantLock takeLock = this.takeLock;\n\t\t\t\ttakeLock.lockInterruptibly();\n\t\t\t\ttry {\n\t\t\t\t\twhile (count.get() == 0) {\n\t\t\t\t\t\tnotEmpty.await();\n\t\t\t\t\t}\n\t\t\t\t\tx = dequeue();\n\t\t\t\t\tc = count.getAndDecrement();\n\t\t\t\t\tif (c > 1)\n\t\t\t\t\t\tnotEmpty.signal();\n\t\t\t\t} finally {\n\t\t\t\t\ttakeLock.unlock();\n\t\t\t\t}\n\t\t\t\tif (c == capacity)\n\t\t\t\t\tsignalNotFull();\n\t\t\t\treturn x;\n\t\t\t}\t\t\t\t\n\t\t}\n```\n\n### 锁粗化\n\n为了提高并发效率，我们要减小持有锁的时间，然后再释放锁。但凡事都有一个度，反复对锁进行请求也会浪费资源，降低性能。如果遇到一连串连续对同一锁进行请求，那么我们就需要把所有锁请求整合成对锁的一次请求，这就是锁的粗化\n``` java\n\tsynchronized (this) {\n\t\tfor(int i = 0; i < 10000; i++) {\n\t\t\tcount++;\n\t\t}\n\t}\n\tfor(int i = 0; i < 10000; i++) {\n\t\tsynchronized (this) {\n\t\t\tcount++\n\t\t}\n\t}\n```\n明显的，肯定是上一个的效率更高\n\n### JVM对锁的优化\n\n#### 偏向锁\n偏向锁的核心思想就是：如果一个线程获得锁，那么锁就进入偏向模式，当这个线程再次请求锁时，无需做任何操作，这就节省了有关锁申请所耗费的时间\n\n#### 轻量级锁\n偏向锁失败之后，JVM并不会挂起，而是使用一种轻量级锁优化，简单地将对象头部作为指针，指向持有锁的线程堆栈内部来判断对象是否持有锁，成功则获取临界资源，失败则膨胀为重量级锁\n\n#### 自旋锁\n在线程被操作系统挂起之前，JVM还会做最后的努力，当线程无法获得锁时，它会假设在不久的将来它会这个锁，因此做几个空循环(这就是自旋的含义),在循环完之后，获得了锁就进入临界区，否则就真正挂起，在一定程度上还是提高性能了\n\n#### 锁清除\nJVM在编译的时候，通过上下文扫描，去除不可能共享资源的锁，这里主要指的是并发安全类的一些方法，例如Vector.add()如果操作只是一个局部变量，那么就没有锁定的必要了\n``` java\n\tpublic String[] createStrings() {\n\t\tVector<String> v = new Vector<>();\n\t\tfor(int i = 0; i < 100; i++) {\n\t\t\tv.add(Integer.toString(i));\n\t\t}\n\t\treturn v.toArray(new String[]{});\n\t}\n```","source":"_posts/intercurrent_lock_majorizing.md","raw":"---\ntitle: 并发编程(十七)锁的优化\ndate: 2016-07-26 20:33:50\ntags:\n\t- 并发编程\n---\n多线程的应用其实不一定要比单线程效率高，就单线程应用来说CPU资源主要在任务上，而多线程不仅要作用于任务本身还要作用于线程之间的调度及其它。这就是单核在并行计算上性能要低于原始的串行计算\n在并发编程中，我们常常会使用锁来保证线程安全，那我们又有哪些方法来对锁进行优化呢？\n### 减少锁的持有时间\n\n我们前面说synchroinzed有两种锁定方法，一是直接放在方法前，另外一个是使用语句块。为了提高效率，我们使用语句块将需要同步的放在里面就行了,下面JDK中Patte的一个体现\n\n<!--more-->\n\n``` java\n\tpublic Matcher matcher(CharSequence input) {\n        if (!compiled) {\n            synchronized(this) {\n                if (!compiled)\n                    compile();\n            }\n        }\n        Matcher m = new Matcher(this, input);\n        return m;\n    }\n```\n\n### 减小锁的粒度\n\n所谓减少锁粒度就是指缩小锁定对象的范围，从而减小冲突的可能性\n减小锁的力度一个很好的例子就是ConcurrentHashMap,对于ConcurrentHashMap来说，减小锁的粒度就是将其内部结构再次分成多个HashMap，成之为段(SEGMENT)\n\n### 分离锁替换独占锁\n\n这个不用多说，ReentrantLock与ReentratReadWriteLock就是很好的例子，我们要尽量使用读写锁替换独占锁\n\n### 锁分离\n\n将读写锁再往外延伸一点就是将锁分离，不同的锁干不同的事，明确分工，下面看下JDK中LinkedBlockingQueue的实现\n``` java\n\tpublic class LinkedBlockingQueue<E> extends AbstractQueue<E>\n        implements BlockingQueue<E>, java.io.Serializable {\n\t\t\t/** Lock held by take, poll, etc */\n\t\t\tprivate final ReentrantLock takeLock = new ReentrantLock();\n\t\t\t /** Lock held by put, offer, etc */\n\t\t\tprivate final ReentrantLock putLock = new ReentrantLock();                    \n\t\t\tpublic E take() throws InterruptedException {\n\t\t\t\tE x;\n\t\t\t\tint c = -1;\n\t\t\t\tfinal AtomicInteger count = this.count;\n\t\t\t\tfinal ReentrantLock takeLock = this.takeLock;\n\t\t\t\ttakeLock.lockInterruptibly();\n\t\t\t\ttry {\n\t\t\t\t\twhile (count.get() == 0) {\n\t\t\t\t\t\tnotEmpty.await();\n\t\t\t\t\t}\n\t\t\t\t\tx = dequeue();\n\t\t\t\t\tc = count.getAndDecrement();\n\t\t\t\t\tif (c > 1)\n\t\t\t\t\t\tnotEmpty.signal();\n\t\t\t\t} finally {\n\t\t\t\t\ttakeLock.unlock();\n\t\t\t\t}\n\t\t\t\tif (c == capacity)\n\t\t\t\t\tsignalNotFull();\n\t\t\t\treturn x;\n\t\t\t}\n\n\t\t\tpublic E take() throws InterruptedException {\n\t\t\t\tE x;\n\t\t\t\tint c = -1;\n\t\t\t\tfinal AtomicInteger count = this.count;\n\t\t\t\tfinal ReentrantLock takeLock = this.takeLock;\n\t\t\t\ttakeLock.lockInterruptibly();\n\t\t\t\ttry {\n\t\t\t\t\twhile (count.get() == 0) {\n\t\t\t\t\t\tnotEmpty.await();\n\t\t\t\t\t}\n\t\t\t\t\tx = dequeue();\n\t\t\t\t\tc = count.getAndDecrement();\n\t\t\t\t\tif (c > 1)\n\t\t\t\t\t\tnotEmpty.signal();\n\t\t\t\t} finally {\n\t\t\t\t\ttakeLock.unlock();\n\t\t\t\t}\n\t\t\t\tif (c == capacity)\n\t\t\t\t\tsignalNotFull();\n\t\t\t\treturn x;\n\t\t\t}\t\t\t\t\n\t\t}\n```\n\n### 锁粗化\n\n为了提高并发效率，我们要减小持有锁的时间，然后再释放锁。但凡事都有一个度，反复对锁进行请求也会浪费资源，降低性能。如果遇到一连串连续对同一锁进行请求，那么我们就需要把所有锁请求整合成对锁的一次请求，这就是锁的粗化\n``` java\n\tsynchronized (this) {\n\t\tfor(int i = 0; i < 10000; i++) {\n\t\t\tcount++;\n\t\t}\n\t}\n\tfor(int i = 0; i < 10000; i++) {\n\t\tsynchronized (this) {\n\t\t\tcount++\n\t\t}\n\t}\n```\n明显的，肯定是上一个的效率更高\n\n### JVM对锁的优化\n\n#### 偏向锁\n偏向锁的核心思想就是：如果一个线程获得锁，那么锁就进入偏向模式，当这个线程再次请求锁时，无需做任何操作，这就节省了有关锁申请所耗费的时间\n\n#### 轻量级锁\n偏向锁失败之后，JVM并不会挂起，而是使用一种轻量级锁优化，简单地将对象头部作为指针，指向持有锁的线程堆栈内部来判断对象是否持有锁，成功则获取临界资源，失败则膨胀为重量级锁\n\n#### 自旋锁\n在线程被操作系统挂起之前，JVM还会做最后的努力，当线程无法获得锁时，它会假设在不久的将来它会这个锁，因此做几个空循环(这就是自旋的含义),在循环完之后，获得了锁就进入临界区，否则就真正挂起，在一定程度上还是提高性能了\n\n#### 锁清除\nJVM在编译的时候，通过上下文扫描，去除不可能共享资源的锁，这里主要指的是并发安全类的一些方法，例如Vector.add()如果操作只是一个局部变量，那么就没有锁定的必要了\n``` java\n\tpublic String[] createStrings() {\n\t\tVector<String> v = new Vector<>();\n\t\tfor(int i = 0; i < 100; i++) {\n\t\t\tv.add(Integer.toString(i));\n\t\t}\n\t\treturn v.toArray(new String[]{});\n\t}\n```","slug":"intercurrent_lock_majorizing","published":1,"updated":"2017-03-08T11:04:57.388Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5cs001dqoq19fkeg88j","content":"<p>多线程的应用其实不一定要比单线程效率高，就单线程应用来说CPU资源主要在任务上，而多线程不仅要作用于任务本身还要作用于线程之间的调度及其它。这就是单核在并行计算上性能要低于原始的串行计算<br>在并发编程中，我们常常会使用锁来保证线程安全，那我们又有哪些方法来对锁进行优化呢？</p>\n<h3 id=\"减少锁的持有时间\"><a href=\"#减少锁的持有时间\" class=\"headerlink\" title=\"减少锁的持有时间\"></a>减少锁的持有时间</h3><p>我们前面说synchroinzed有两种锁定方法，一是直接放在方法前，另外一个是使用语句块。为了提高效率，我们使用语句块将需要同步的放在里面就行了,下面JDK中Patte的一个体现</p>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Matcher <span class=\"title\">matcher</span><span class=\"params\">(CharSequence input)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (!compiled) &#123;</div><div class=\"line\">           <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">               <span class=\"keyword\">if</span> (!compiled)</div><div class=\"line\">                   compile();</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       Matcher m = <span class=\"keyword\">new</span> Matcher(<span class=\"keyword\">this</span>, input);</div><div class=\"line\">       <span class=\"keyword\">return</span> m;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"减小锁的粒度\"><a href=\"#减小锁的粒度\" class=\"headerlink\" title=\"减小锁的粒度\"></a>减小锁的粒度</h3><p>所谓减少锁粒度就是指缩小锁定对象的范围，从而减小冲突的可能性<br>减小锁的力度一个很好的例子就是ConcurrentHashMap,对于ConcurrentHashMap来说，减小锁的粒度就是将其内部结构再次分成多个HashMap，成之为段(SEGMENT)</p>\n<h3 id=\"分离锁替换独占锁\"><a href=\"#分离锁替换独占锁\" class=\"headerlink\" title=\"分离锁替换独占锁\"></a>分离锁替换独占锁</h3><p>这个不用多说，ReentrantLock与ReentratReadWriteLock就是很好的例子，我们要尽量使用读写锁替换独占锁</p>\n<h3 id=\"锁分离\"><a href=\"#锁分离\" class=\"headerlink\" title=\"锁分离\"></a>锁分离</h3><p>将读写锁再往外延伸一点就是将锁分离，不同的锁干不同的事，明确分工，下面看下JDK中LinkedBlockingQueue的实现<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkedBlockingQueue</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractQueue</span>&lt;<span class=\"title\">E</span>&gt;</span></div><div class=\"line\">       <span class=\"keyword\">implements</span> <span class=\"title\">BlockingQueue</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span> &#123;</div><div class=\"line\">\t\t<span class=\"comment\">/** Lock held by take, poll, etc */</span></div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ReentrantLock takeLock = <span class=\"keyword\">new</span> ReentrantLock();</div><div class=\"line\">\t\t <span class=\"comment\">/** Lock held by put, offer, etc */</span></div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ReentrantLock putLock = <span class=\"keyword\">new</span> ReentrantLock();                    </div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">take</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">\t\t\tE x;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> c = -<span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">final</span> AtomicInteger count = <span class=\"keyword\">this</span>.count;</div><div class=\"line\">\t\t\t<span class=\"keyword\">final</span> ReentrantLock takeLock = <span class=\"keyword\">this</span>.takeLock;</div><div class=\"line\">\t\t\ttakeLock.lockInterruptibly();</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> (count.get() == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t\t\tnotEmpty.await();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tx = dequeue();</div><div class=\"line\">\t\t\t\tc = count.getAndDecrement();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (c &gt; <span class=\"number\">1</span>)</div><div class=\"line\">\t\t\t\t\tnotEmpty.signal();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t\ttakeLock.unlock();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (c == capacity)</div><div class=\"line\">\t\t\t\tsignalNotFull();</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">take</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">\t\t\tE x;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> c = -<span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">final</span> AtomicInteger count = <span class=\"keyword\">this</span>.count;</div><div class=\"line\">\t\t\t<span class=\"keyword\">final</span> ReentrantLock takeLock = <span class=\"keyword\">this</span>.takeLock;</div><div class=\"line\">\t\t\ttakeLock.lockInterruptibly();</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> (count.get() == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t\t\tnotEmpty.await();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tx = dequeue();</div><div class=\"line\">\t\t\t\tc = count.getAndDecrement();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (c &gt; <span class=\"number\">1</span>)</div><div class=\"line\">\t\t\t\t\tnotEmpty.signal();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t\ttakeLock.unlock();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (c == capacity)</div><div class=\"line\">\t\t\t\tsignalNotFull();</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t\t&#125;\t\t\t\t</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"锁粗化\"><a href=\"#锁粗化\" class=\"headerlink\" title=\"锁粗化\"></a>锁粗化</h3><p>为了提高并发效率，我们要减小持有锁的时间，然后再释放锁。但凡事都有一个度，反复对锁进行请求也会浪费资源，降低性能。如果遇到一连串连续对同一锁进行请求，那么我们就需要把所有锁请求整合成对锁的一次请求，这就是锁的粗化<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</div><div class=\"line\">\t\tcount++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</div><div class=\"line\">\t<span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">\t\tcount++</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>明显的，肯定是上一个的效率更高</p>\n<h3 id=\"JVM对锁的优化\"><a href=\"#JVM对锁的优化\" class=\"headerlink\" title=\"JVM对锁的优化\"></a>JVM对锁的优化</h3><h4 id=\"偏向锁\"><a href=\"#偏向锁\" class=\"headerlink\" title=\"偏向锁\"></a>偏向锁</h4><p>偏向锁的核心思想就是：如果一个线程获得锁，那么锁就进入偏向模式，当这个线程再次请求锁时，无需做任何操作，这就节省了有关锁申请所耗费的时间</p>\n<h4 id=\"轻量级锁\"><a href=\"#轻量级锁\" class=\"headerlink\" title=\"轻量级锁\"></a>轻量级锁</h4><p>偏向锁失败之后，JVM并不会挂起，而是使用一种轻量级锁优化，简单地将对象头部作为指针，指向持有锁的线程堆栈内部来判断对象是否持有锁，成功则获取临界资源，失败则膨胀为重量级锁</p>\n<h4 id=\"自旋锁\"><a href=\"#自旋锁\" class=\"headerlink\" title=\"自旋锁\"></a>自旋锁</h4><p>在线程被操作系统挂起之前，JVM还会做最后的努力，当线程无法获得锁时，它会假设在不久的将来它会这个锁，因此做几个空循环(这就是自旋的含义),在循环完之后，获得了锁就进入临界区，否则就真正挂起，在一定程度上还是提高性能了</p>\n<h4 id=\"锁清除\"><a href=\"#锁清除\" class=\"headerlink\" title=\"锁清除\"></a>锁清除</h4><p>JVM在编译的时候，通过上下文扫描，去除不可能共享资源的锁，这里主要指的是并发安全类的一些方法，例如Vector.add()如果操作只是一个局部变量，那么就没有锁定的必要了<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> String[] createStrings() &#123;</div><div class=\"line\">\tVector&lt;String&gt; v = <span class=\"keyword\">new</span> Vector&lt;&gt;();</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</div><div class=\"line\">\t\tv.add(Integer.toString(i));</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> v.toArray(<span class=\"keyword\">new</span> String[]&#123;&#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>多线程的应用其实不一定要比单线程效率高，就单线程应用来说CPU资源主要在任务上，而多线程不仅要作用于任务本身还要作用于线程之间的调度及其它。这就是单核在并行计算上性能要低于原始的串行计算<br>在并发编程中，我们常常会使用锁来保证线程安全，那我们又有哪些方法来对锁进行优化呢？</p>\n<h3 id=\"减少锁的持有时间\"><a href=\"#减少锁的持有时间\" class=\"headerlink\" title=\"减少锁的持有时间\"></a>减少锁的持有时间</h3><p>我们前面说synchroinzed有两种锁定方法，一是直接放在方法前，另外一个是使用语句块。为了提高效率，我们使用语句块将需要同步的放在里面就行了,下面JDK中Patte的一个体现</p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Matcher <span class=\"title\">matcher</span><span class=\"params\">(CharSequence input)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (!compiled) &#123;</div><div class=\"line\">           <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">               <span class=\"keyword\">if</span> (!compiled)</div><div class=\"line\">                   compile();</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       Matcher m = <span class=\"keyword\">new</span> Matcher(<span class=\"keyword\">this</span>, input);</div><div class=\"line\">       <span class=\"keyword\">return</span> m;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"减小锁的粒度\"><a href=\"#减小锁的粒度\" class=\"headerlink\" title=\"减小锁的粒度\"></a>减小锁的粒度</h3><p>所谓减少锁粒度就是指缩小锁定对象的范围，从而减小冲突的可能性<br>减小锁的力度一个很好的例子就是ConcurrentHashMap,对于ConcurrentHashMap来说，减小锁的粒度就是将其内部结构再次分成多个HashMap，成之为段(SEGMENT)</p>\n<h3 id=\"分离锁替换独占锁\"><a href=\"#分离锁替换独占锁\" class=\"headerlink\" title=\"分离锁替换独占锁\"></a>分离锁替换独占锁</h3><p>这个不用多说，ReentrantLock与ReentratReadWriteLock就是很好的例子，我们要尽量使用读写锁替换独占锁</p>\n<h3 id=\"锁分离\"><a href=\"#锁分离\" class=\"headerlink\" title=\"锁分离\"></a>锁分离</h3><p>将读写锁再往外延伸一点就是将锁分离，不同的锁干不同的事，明确分工，下面看下JDK中LinkedBlockingQueue的实现<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkedBlockingQueue</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractQueue</span>&lt;<span class=\"title\">E</span>&gt;</div><div class=\"line\">       <span class=\"keyword\">implements</span> <span class=\"title\">BlockingQueue</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">/** Lock held by take, poll, etc */</span></div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ReentrantLock takeLock = <span class=\"keyword\">new</span> ReentrantLock();</div><div class=\"line\">\t\t <span class=\"comment\">/** Lock held by put, offer, etc */</span></div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ReentrantLock putLock = <span class=\"keyword\">new</span> ReentrantLock();                    </div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">take</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">\t\t\tE x;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> c = -<span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">final</span> AtomicInteger count = <span class=\"keyword\">this</span>.count;</div><div class=\"line\">\t\t\t<span class=\"keyword\">final</span> ReentrantLock takeLock = <span class=\"keyword\">this</span>.takeLock;</div><div class=\"line\">\t\t\ttakeLock.lockInterruptibly();</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> (count.get() == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t\t\tnotEmpty.await();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tx = dequeue();</div><div class=\"line\">\t\t\t\tc = count.getAndDecrement();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (c &gt; <span class=\"number\">1</span>)</div><div class=\"line\">\t\t\t\t\tnotEmpty.signal();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t\ttakeLock.unlock();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (c == capacity)</div><div class=\"line\">\t\t\t\tsignalNotFull();</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">take</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">\t\t\tE x;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> c = -<span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">final</span> AtomicInteger count = <span class=\"keyword\">this</span>.count;</div><div class=\"line\">\t\t\t<span class=\"keyword\">final</span> ReentrantLock takeLock = <span class=\"keyword\">this</span>.takeLock;</div><div class=\"line\">\t\t\ttakeLock.lockInterruptibly();</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> (count.get() == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t\t\tnotEmpty.await();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tx = dequeue();</div><div class=\"line\">\t\t\t\tc = count.getAndDecrement();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (c &gt; <span class=\"number\">1</span>)</div><div class=\"line\">\t\t\t\t\tnotEmpty.signal();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t\ttakeLock.unlock();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (c == capacity)</div><div class=\"line\">\t\t\t\tsignalNotFull();</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t\t&#125;\t\t\t\t</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"锁粗化\"><a href=\"#锁粗化\" class=\"headerlink\" title=\"锁粗化\"></a>锁粗化</h3><p>为了提高并发效率，我们要减小持有锁的时间，然后再释放锁。但凡事都有一个度，反复对锁进行请求也会浪费资源，降低性能。如果遇到一连串连续对同一锁进行请求，那么我们就需要把所有锁请求整合成对锁的一次请求，这就是锁的粗化<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</div><div class=\"line\">\t\tcount++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</div><div class=\"line\">\t<span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">\t\tcount++</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>明显的，肯定是上一个的效率更高</p>\n<h3 id=\"JVM对锁的优化\"><a href=\"#JVM对锁的优化\" class=\"headerlink\" title=\"JVM对锁的优化\"></a>JVM对锁的优化</h3><h4 id=\"偏向锁\"><a href=\"#偏向锁\" class=\"headerlink\" title=\"偏向锁\"></a>偏向锁</h4><p>偏向锁的核心思想就是：如果一个线程获得锁，那么锁就进入偏向模式，当这个线程再次请求锁时，无需做任何操作，这就节省了有关锁申请所耗费的时间</p>\n<h4 id=\"轻量级锁\"><a href=\"#轻量级锁\" class=\"headerlink\" title=\"轻量级锁\"></a>轻量级锁</h4><p>偏向锁失败之后，JVM并不会挂起，而是使用一种轻量级锁优化，简单地将对象头部作为指针，指向持有锁的线程堆栈内部来判断对象是否持有锁，成功则获取临界资源，失败则膨胀为重量级锁</p>\n<h4 id=\"自旋锁\"><a href=\"#自旋锁\" class=\"headerlink\" title=\"自旋锁\"></a>自旋锁</h4><p>在线程被操作系统挂起之前，JVM还会做最后的努力，当线程无法获得锁时，它会假设在不久的将来它会这个锁，因此做几个空循环(这就是自旋的含义),在循环完之后，获得了锁就进入临界区，否则就真正挂起，在一定程度上还是提高性能了</p>\n<h4 id=\"锁清除\"><a href=\"#锁清除\" class=\"headerlink\" title=\"锁清除\"></a>锁清除</h4><p>JVM在编译的时候，通过上下文扫描，去除不可能共享资源的锁，这里主要指的是并发安全类的一些方法，例如Vector.add()如果操作只是一个局部变量，那么就没有锁定的必要了<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> String[] createStrings() &#123;</div><div class=\"line\">\tVector&lt;String&gt; v = <span class=\"keyword\">new</span> Vector&lt;&gt;();</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</div><div class=\"line\">\t\tv.add(Integer.toString(i));</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> v.toArray(<span class=\"keyword\">new</span> String[]&#123;&#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"并发编程(十九)无锁","date":"2016-07-29T12:37:50.000Z","_content":"\n就性格而言，有乐观也有悲观，对于并发控制而言，同样也是如此，锁就是一种悲观策略，它假设每一个临界资源的争夺都会产生冲突，因此它宁可牺牲让线程等待。而无锁就是一种乐观策略，它假设每次争取临界资源都不会冲突，那遇到冲突怎么办呢？它采用的是原子化CAS（Compare And Swap）的技术来有效地检查冲突，CAS算法的过程是这样的：它包含三个参数CAS（V,E,N）,v表示要更改的变量，e表示预期值，n表示新值，只有e和n相同才能修改成功\n\n<!--more-->\n\n### AtomicInteger\n\n先展示一下示例 ：\n``` java\n\tpublic class TestAtomicInteger {\n\t\tprivate static AtomicInteger ai = new AtomicInteger(0);\n\t\t\n\t\tpublic static class Add extends Thread {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tfor(int k = 0; k < 10000; k++) {\n\t\t\t\t\tai.incrementAndGet();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) throws InterruptedException {                  \n\t\t\tThread[] threads = new Thread[10];\n\t\t\tfor(int i = 0; i < 10; i++) {\n\t\t\t\tThread t = new Add();\n\t\t\t\tthreads[i] = t;\n\t\t\t\tt.start();\n\t\t\t}\n\t\t\tfor(int i = 0; i < 10; i++) {\n\t\t\t\tthreads[i].join();\n\t\t\t}\n\t\t\tSystem.out.println(ai.get());\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\n100000\n```\n\n由此可见，使用原子性的AtomicInteger是线程安全的，下面来看看看AtomicInteger的源码实现\n``` java\n\tpublic class AtomicInteger extends Number implements java.io.Serializable {\n\t\tprivate volatile int value;\n\t\tprivate static final long valueOffset;\n\t\tpublic final int get() {\n\t\t\treturn value;\n\t\t}\n\t\tpublic int intValue() {\n\t\t\treturn get();\n\t\t}\n\t\tpublic final int incrementAndGet() {\n\t\t\treturn unsafe.getAndAddInt(this, valueOffset, 1) + 1;\n\t\t}\n\t\tpublic final boolean compareAndSet(int expect, int update) {}\n\t}\n```\n上面看到AtomicInteger操作都是关于Unsafe，那下面就看看它的神秘，Unsafe是java里面的指针，但是它却无法被应用程序所使用，是一个JDK专用类\n\n### AtomicReference\n\n上面我们讲述了基本数据类型原子性操作，那么对于引用类型，AtomicReference就可以满足，但是AtomicReference有个小Bug，就是当数据修改，然后再修改至原值，此时，它就无能为力了\n下面就展示下这个Bug，假设一下业务流程 ：你的购物卡里面金额少于100时，公司会为你冲200，但就是一次\n``` java\n\tpublic class TestAtomicReference {\n\t\tprivate static AtomicReference<Integer> ar = new AtomicReference<>(250);              \n\t\tpublic static class RechargeThread extends Thread {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\twhile(true) {\n\t\t\t\t\twhile(true) {\n\t\t\t\t\t\tInteger value = ar.get();\n\t\t\t\t\t\tif(value < 100) {\n\t\t\t\t\t\t\tif (ar.compareAndSet(value, value + 200)) {\n\t\t\t\t\t\t\t\tSystem.out.println(\"recharge 200,\" \n\t\t\t\t\t\t\t\t+ \"remaining ：\" + ar.get());\n\t\t\t\t\t\t\t\tbreak;\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}else {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static class ConsumeThread extends Thread {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tfor(int i = 0; i < 10; i++) {\n\t\t\t\t\twhile(true) {\n\t\t\t\t\t\tInteger value = ar.get();\n\t\t\t\t\t\tif(value > 100) {\n\t\t\t\t\t\t\tif(ar.compareAndSet(value, value - 100)) {\n\t\t\t\t\t\t\t\tSystem.out.println(\"consume 100,\"\n\t\t\t\t\t\t\t\t+ \"remaining : \" + ar.get());\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}else {\n\t\t\t\t\t\t\tSystem.out.println(\"consume fail\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttry {\n\t\t\t\t\t\tThread.sleep(100);\n\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) {\n\t\t\tfor(int i = 0; i < 10; i++) {\n\t\t\t\tRechargeThread rt = new RechargeThread();\n\t\t\t\trt.start();\n\t\t\t}\n\t\t\tConsumeThread ct = new ConsumeThread();\n\t\t\tct.start();\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\nconsume 100,remaining ： 150\nconsume 100,remaining ： 50\nrecharge 200,remaining ： 250\nconsume 100,remaining ： 150\nconsume 100,remaining ： 50\nrecharge 200,remaining ： 250\nconsume 100,remaining ： 150\nconsume 100,remaining ： 250\nrecharge 200,remaining ： 250\nconsume 100,remaining ： 150\n```\n### AtomicStampedReference\n\n既然有这个Bug，那么JDK有没有解决的方案呢？答案是肯定的，那就是AtomicStampedReference\n``` java\n\tpublic class TestAtomicStampedReference {\n\t\tprivate static AtomicStampedReference<Integer> asr = new AtomicStampedReference<Integer>(50, 0);\n\t\t\n\t\tpublic static class RechargeThread extends Thread {\n\t\t\tprivate int stamp = asr.getStamp();\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\twhile(true) {\n\t\t\t\t\twhile(true) {\n\t\t\t\t\t\tInteger value = asr.getReference();\n\t\t\t\t\t\tif(value < 100) {\n\t\t\t\t\t\t\tif (asr.compareAndSet(value, value\n\t\t\t\t\t\t\t\t+ 200,stamp,stamp + 1)) {\n\t\t\t\t\t\t\t\tSystem.out.println(\"recharge 200,\" +\n\t\t\t\t\t\t\t\t\"remaining ：\" + asr.getReference());\n\t\t\t\t\t\t\t\tbreak;\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}else {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static class ConsumeThread extends Thread {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tfor(int i = 0; i < 10; i++) {\n\t\t\t\t\twhile(true) {\n\t\t\t\t\t\tInteger value = asr.getReference();\n\t\t\t\t\t\tint stamp = asr.getStamp();\n\t\t\t\t\t\tif(value > 100) {\n\t\t\t\t\t\t\tif(asr.compareAndSet(value, value \n\t\t\t\t\t\t\t\t- 100,stamp,stamp + 1)) {\n\t\t\t\t\t\t\t\tSystem.out.println(\"consume 100,\" + \n\t\t\t\t\t\t\t\t\"remaining ： \"  + asr.getReference());\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}else {\n\t\t\t\t\t\t\tSystem.out.println(\"consume fail\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttry {\n\t\t\t\t\t\tThread.sleep(100);\n\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) {\n\t\t\tfor(int i = 0; i < 10; i++) {\n\t\t\t\tRechargeThread rt = new RechargeThread();\n\t\t\t\trt.start();\n\t\t\t}\n\t\t\tConsumeThread ct = new ConsumeThread();\n\t\t\tct.start();\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\nrecharge 200,remaining ： 250\nconsume 100,remaining ： 150\nconsume 100,remaining ： 50\nconsume fail\nconsume fail\nconsume fail\nconsume fail\nconsume fail\nconsume fail\n```\n\n### AtomicIntegerArray\n\n同样的，数组也可以原子化，下面看看JDK源码\n``` java\n\t public final int get(int i) {}\n\t public final int getAndSet(int i, int newValue) {}\n\t public final boolean compareAndSet(int i, int expect, int update) {}\n\t public final int getAndIncrement(int i) {}\n\t public final int getAndDecrement(int i) {}\n```\n下面是一个示例\n``` java\n\tpublic class TestAtomicArray {\n\t\tpublic static void main(String[] args) throws InterruptedException {                  \n\t\t\tAtomicIntegerArray aia = new AtomicIntegerArray(10);\n\t\t\tThread[] threads = new Thread[10];\n\t\t\tfor(int i = 0; i < 10; i++) {\n\t\t\t\tThread t = new Thread() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tfor(int k = 0; k < 1000; k++) {\n\t\t\t\t\t\t\taia.incrementAndGet(k % 10);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tthreads[i] = t;\n\t\t\t\tt.start();\n\t\t\t}\n\t\t\tfor(int i = 0; i < 10; i++) {\n\t\t\t\tthreads[i].join();\n\t\t\t}\n\t\t\tSystem.out.println(aia);\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\n[1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]\n```\n\n### AtomicIntegerFieldUpdater\n有时候，在设计前期，由于考虑不周或后期改变，一些变量可能需要线程安全，那么就可以使用AtomicIntegerFieldUpdater，下面就展示个示例\n``` java\n\tpublic class TestAtomicIntegerFieldUpdater {\n\t\tpublic static class User {\n\t\t\tvolatile int score;\n\t\t}\n\t\t\n\t\tpublic static final AtomicIntegerFieldUpdater<User> scoreUpdater = \n\t\t\t\tAtomicIntegerFieldUpdater.newUpdater(User.class, \"score\");            \n\t\t\n\t\t//用来验证AtomicIntegerFieldUpdater的正确性\n\t\tpublic static AtomicInteger ai = new AtomicInteger(0);\n\t\t\n\t\tpublic static void main(String[] args) throws InterruptedException {\n\t\t\tUser user = new User();\n\t\t\tRandom r = new Random();\n\t\t\tThread[] threads = new Thread[100];\n\t\t\tfor(int i = 0; i < 100; i++) {\n\t\t\t\tthreads[i]  = new Thread() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tif(r.nextInt(5) > 2) {\n\t\t\t\t\t\t\tai.incrementAndGet();\n\t\t\t\t\t\t\tscoreUpdater.getAndIncrement(user);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tthreads[i].start();\n\t\t\t}\n\t\t\tfor(int i = 0; i < 100; i++) {\n\t\t\t\tthreads[i].join();\n\t\t\t}\n\t\t\tSystem.out.println(\"score : \" + user.score);\n\t\t\tSystem.out.println(\"ai : \" + ai);\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\nscore : 35\nai : 35\n```\n\n需要注意的几点 ：\n- 属性是通过反射获得，所以不能用private修饰\n- 为了确保读取的正确性，属性要用volatile修饰\n- 由于CAS是通过对象来完成，所以属性不能用static修饰","source":"_posts/intercurrent_lock_none.md","raw":"---\ntitle: 并发编程(十九)无锁\ndate: 2016-07-29 20:37:50\ntags:\n\t- 并发编程\n---\n\n就性格而言，有乐观也有悲观，对于并发控制而言，同样也是如此，锁就是一种悲观策略，它假设每一个临界资源的争夺都会产生冲突，因此它宁可牺牲让线程等待。而无锁就是一种乐观策略，它假设每次争取临界资源都不会冲突，那遇到冲突怎么办呢？它采用的是原子化CAS（Compare And Swap）的技术来有效地检查冲突，CAS算法的过程是这样的：它包含三个参数CAS（V,E,N）,v表示要更改的变量，e表示预期值，n表示新值，只有e和n相同才能修改成功\n\n<!--more-->\n\n### AtomicInteger\n\n先展示一下示例 ：\n``` java\n\tpublic class TestAtomicInteger {\n\t\tprivate static AtomicInteger ai = new AtomicInteger(0);\n\t\t\n\t\tpublic static class Add extends Thread {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tfor(int k = 0; k < 10000; k++) {\n\t\t\t\t\tai.incrementAndGet();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) throws InterruptedException {                  \n\t\t\tThread[] threads = new Thread[10];\n\t\t\tfor(int i = 0; i < 10; i++) {\n\t\t\t\tThread t = new Add();\n\t\t\t\tthreads[i] = t;\n\t\t\t\tt.start();\n\t\t\t}\n\t\t\tfor(int i = 0; i < 10; i++) {\n\t\t\t\tthreads[i].join();\n\t\t\t}\n\t\t\tSystem.out.println(ai.get());\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\n100000\n```\n\n由此可见，使用原子性的AtomicInteger是线程安全的，下面来看看看AtomicInteger的源码实现\n``` java\n\tpublic class AtomicInteger extends Number implements java.io.Serializable {\n\t\tprivate volatile int value;\n\t\tprivate static final long valueOffset;\n\t\tpublic final int get() {\n\t\t\treturn value;\n\t\t}\n\t\tpublic int intValue() {\n\t\t\treturn get();\n\t\t}\n\t\tpublic final int incrementAndGet() {\n\t\t\treturn unsafe.getAndAddInt(this, valueOffset, 1) + 1;\n\t\t}\n\t\tpublic final boolean compareAndSet(int expect, int update) {}\n\t}\n```\n上面看到AtomicInteger操作都是关于Unsafe，那下面就看看它的神秘，Unsafe是java里面的指针，但是它却无法被应用程序所使用，是一个JDK专用类\n\n### AtomicReference\n\n上面我们讲述了基本数据类型原子性操作，那么对于引用类型，AtomicReference就可以满足，但是AtomicReference有个小Bug，就是当数据修改，然后再修改至原值，此时，它就无能为力了\n下面就展示下这个Bug，假设一下业务流程 ：你的购物卡里面金额少于100时，公司会为你冲200，但就是一次\n``` java\n\tpublic class TestAtomicReference {\n\t\tprivate static AtomicReference<Integer> ar = new AtomicReference<>(250);              \n\t\tpublic static class RechargeThread extends Thread {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\twhile(true) {\n\t\t\t\t\twhile(true) {\n\t\t\t\t\t\tInteger value = ar.get();\n\t\t\t\t\t\tif(value < 100) {\n\t\t\t\t\t\t\tif (ar.compareAndSet(value, value + 200)) {\n\t\t\t\t\t\t\t\tSystem.out.println(\"recharge 200,\" \n\t\t\t\t\t\t\t\t+ \"remaining ：\" + ar.get());\n\t\t\t\t\t\t\t\tbreak;\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}else {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static class ConsumeThread extends Thread {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tfor(int i = 0; i < 10; i++) {\n\t\t\t\t\twhile(true) {\n\t\t\t\t\t\tInteger value = ar.get();\n\t\t\t\t\t\tif(value > 100) {\n\t\t\t\t\t\t\tif(ar.compareAndSet(value, value - 100)) {\n\t\t\t\t\t\t\t\tSystem.out.println(\"consume 100,\"\n\t\t\t\t\t\t\t\t+ \"remaining : \" + ar.get());\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}else {\n\t\t\t\t\t\t\tSystem.out.println(\"consume fail\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttry {\n\t\t\t\t\t\tThread.sleep(100);\n\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) {\n\t\t\tfor(int i = 0; i < 10; i++) {\n\t\t\t\tRechargeThread rt = new RechargeThread();\n\t\t\t\trt.start();\n\t\t\t}\n\t\t\tConsumeThread ct = new ConsumeThread();\n\t\t\tct.start();\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\nconsume 100,remaining ： 150\nconsume 100,remaining ： 50\nrecharge 200,remaining ： 250\nconsume 100,remaining ： 150\nconsume 100,remaining ： 50\nrecharge 200,remaining ： 250\nconsume 100,remaining ： 150\nconsume 100,remaining ： 250\nrecharge 200,remaining ： 250\nconsume 100,remaining ： 150\n```\n### AtomicStampedReference\n\n既然有这个Bug，那么JDK有没有解决的方案呢？答案是肯定的，那就是AtomicStampedReference\n``` java\n\tpublic class TestAtomicStampedReference {\n\t\tprivate static AtomicStampedReference<Integer> asr = new AtomicStampedReference<Integer>(50, 0);\n\t\t\n\t\tpublic static class RechargeThread extends Thread {\n\t\t\tprivate int stamp = asr.getStamp();\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\twhile(true) {\n\t\t\t\t\twhile(true) {\n\t\t\t\t\t\tInteger value = asr.getReference();\n\t\t\t\t\t\tif(value < 100) {\n\t\t\t\t\t\t\tif (asr.compareAndSet(value, value\n\t\t\t\t\t\t\t\t+ 200,stamp,stamp + 1)) {\n\t\t\t\t\t\t\t\tSystem.out.println(\"recharge 200,\" +\n\t\t\t\t\t\t\t\t\"remaining ：\" + asr.getReference());\n\t\t\t\t\t\t\t\tbreak;\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}else {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static class ConsumeThread extends Thread {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tfor(int i = 0; i < 10; i++) {\n\t\t\t\t\twhile(true) {\n\t\t\t\t\t\tInteger value = asr.getReference();\n\t\t\t\t\t\tint stamp = asr.getStamp();\n\t\t\t\t\t\tif(value > 100) {\n\t\t\t\t\t\t\tif(asr.compareAndSet(value, value \n\t\t\t\t\t\t\t\t- 100,stamp,stamp + 1)) {\n\t\t\t\t\t\t\t\tSystem.out.println(\"consume 100,\" + \n\t\t\t\t\t\t\t\t\"remaining ： \"  + asr.getReference());\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}else {\n\t\t\t\t\t\t\tSystem.out.println(\"consume fail\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttry {\n\t\t\t\t\t\tThread.sleep(100);\n\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) {\n\t\t\tfor(int i = 0; i < 10; i++) {\n\t\t\t\tRechargeThread rt = new RechargeThread();\n\t\t\t\trt.start();\n\t\t\t}\n\t\t\tConsumeThread ct = new ConsumeThread();\n\t\t\tct.start();\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\nrecharge 200,remaining ： 250\nconsume 100,remaining ： 150\nconsume 100,remaining ： 50\nconsume fail\nconsume fail\nconsume fail\nconsume fail\nconsume fail\nconsume fail\n```\n\n### AtomicIntegerArray\n\n同样的，数组也可以原子化，下面看看JDK源码\n``` java\n\t public final int get(int i) {}\n\t public final int getAndSet(int i, int newValue) {}\n\t public final boolean compareAndSet(int i, int expect, int update) {}\n\t public final int getAndIncrement(int i) {}\n\t public final int getAndDecrement(int i) {}\n```\n下面是一个示例\n``` java\n\tpublic class TestAtomicArray {\n\t\tpublic static void main(String[] args) throws InterruptedException {                  \n\t\t\tAtomicIntegerArray aia = new AtomicIntegerArray(10);\n\t\t\tThread[] threads = new Thread[10];\n\t\t\tfor(int i = 0; i < 10; i++) {\n\t\t\t\tThread t = new Thread() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tfor(int k = 0; k < 1000; k++) {\n\t\t\t\t\t\t\taia.incrementAndGet(k % 10);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tthreads[i] = t;\n\t\t\t\tt.start();\n\t\t\t}\n\t\t\tfor(int i = 0; i < 10; i++) {\n\t\t\t\tthreads[i].join();\n\t\t\t}\n\t\t\tSystem.out.println(aia);\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\n[1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]\n```\n\n### AtomicIntegerFieldUpdater\n有时候，在设计前期，由于考虑不周或后期改变，一些变量可能需要线程安全，那么就可以使用AtomicIntegerFieldUpdater，下面就展示个示例\n``` java\n\tpublic class TestAtomicIntegerFieldUpdater {\n\t\tpublic static class User {\n\t\t\tvolatile int score;\n\t\t}\n\t\t\n\t\tpublic static final AtomicIntegerFieldUpdater<User> scoreUpdater = \n\t\t\t\tAtomicIntegerFieldUpdater.newUpdater(User.class, \"score\");            \n\t\t\n\t\t//用来验证AtomicIntegerFieldUpdater的正确性\n\t\tpublic static AtomicInteger ai = new AtomicInteger(0);\n\t\t\n\t\tpublic static void main(String[] args) throws InterruptedException {\n\t\t\tUser user = new User();\n\t\t\tRandom r = new Random();\n\t\t\tThread[] threads = new Thread[100];\n\t\t\tfor(int i = 0; i < 100; i++) {\n\t\t\t\tthreads[i]  = new Thread() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tif(r.nextInt(5) > 2) {\n\t\t\t\t\t\t\tai.incrementAndGet();\n\t\t\t\t\t\t\tscoreUpdater.getAndIncrement(user);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tthreads[i].start();\n\t\t\t}\n\t\t\tfor(int i = 0; i < 100; i++) {\n\t\t\t\tthreads[i].join();\n\t\t\t}\n\t\t\tSystem.out.println(\"score : \" + user.score);\n\t\t\tSystem.out.println(\"ai : \" + ai);\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\nscore : 35\nai : 35\n```\n\n需要注意的几点 ：\n- 属性是通过反射获得，所以不能用private修饰\n- 为了确保读取的正确性，属性要用volatile修饰\n- 由于CAS是通过对象来完成，所以属性不能用static修饰","slug":"intercurrent_lock_none","published":1,"updated":"2016-12-27T22:13:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5cv001fqoq1cycgw3oh","content":"<p>就性格而言，有乐观也有悲观，对于并发控制而言，同样也是如此，锁就是一种悲观策略，它假设每一个临界资源的争夺都会产生冲突，因此它宁可牺牲让线程等待。而无锁就是一种乐观策略，它假设每次争取临界资源都不会冲突，那遇到冲突怎么办呢？它采用的是原子化CAS（Compare And Swap）的技术来有效地检查冲突，CAS算法的过程是这样的：它包含三个参数CAS（V,E,N）,v表示要更改的变量，e表示预期值，n表示新值，只有e和n相同才能修改成功</p>\n<a id=\"more\"></a>\n<h3 id=\"AtomicInteger\"><a href=\"#AtomicInteger\" class=\"headerlink\" title=\"AtomicInteger\"></a>AtomicInteger</h3><p>先展示一下示例 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestAtomicInteger</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> AtomicInteger ai = <span class=\"keyword\">new</span> AtomicInteger(<span class=\"number\">0</span>);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Add</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">10000</span>; k++) &#123;</div><div class=\"line\">\t\t\t\tai.incrementAndGet();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;                  </div><div class=\"line\">\t\tThread[] threads = <span class=\"keyword\">new</span> Thread[<span class=\"number\">10</span>];</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">\t\t\tThread t = <span class=\"keyword\">new</span> Add();</div><div class=\"line\">\t\t\tthreads[i] = t;</div><div class=\"line\">\t\t\tt.start();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">\t\t\tthreads[i].join();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.out.println(ai.get());</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">100000</span></div></pre></td></tr></table></figure></p>\n<p>由此可见，使用原子性的AtomicInteger是线程安全的，下面来看看看AtomicInteger的源码实现<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AtomicInteger</span> <span class=\"keyword\">extends</span> <span class=\"title\">Number</span> <span class=\"keyword\">implements</span> <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> value;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> valueOffset;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> value;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">intValue</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> get();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">incrementAndGet</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> unsafe.getAndAddInt(<span class=\"keyword\">this</span>, valueOffset, <span class=\"number\">1</span>) + <span class=\"number\">1</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">compareAndSet</span><span class=\"params\">(<span class=\"keyword\">int</span> expect, <span class=\"keyword\">int</span> update)</span> </span>&#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面看到AtomicInteger操作都是关于Unsafe，那下面就看看它的神秘，Unsafe是java里面的指针，但是它却无法被应用程序所使用，是一个JDK专用类</p>\n<h3 id=\"AtomicReference\"><a href=\"#AtomicReference\" class=\"headerlink\" title=\"AtomicReference\"></a>AtomicReference</h3><p>上面我们讲述了基本数据类型原子性操作，那么对于引用类型，AtomicReference就可以满足，但是AtomicReference有个小Bug，就是当数据修改，然后再修改至原值，此时，它就无能为力了<br>下面就展示下这个Bug，假设一下业务流程 ：你的购物卡里面金额少于100时，公司会为你冲200，但就是一次<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestAtomicReference</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> AtomicReference&lt;Integer&gt; ar = <span class=\"keyword\">new</span> AtomicReference&lt;&gt;(<span class=\"number\">250</span>);              </div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RechargeThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\t\t\tInteger value = ar.get();</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(value &lt; <span class=\"number\">100</span>) &#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (ar.compareAndSet(value, value + <span class=\"number\">200</span>)) &#123;</div><div class=\"line\">\t\t\t\t\t\t\tSystem.out.println(<span class=\"string\">\"recharge 200,\"</span> </div><div class=\"line\">\t\t\t\t\t\t\t+ <span class=\"string\">\"remaining ：\"</span> + ar.get());</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">break</span>;\t</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsumeThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\t\t\tInteger value = ar.get();</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(value &gt; <span class=\"number\">100</span>) &#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span>(ar.compareAndSet(value, value - <span class=\"number\">100</span>)) &#123;</div><div class=\"line\">\t\t\t\t\t\t\tSystem.out.println(<span class=\"string\">\"consume 100,\"</span></div><div class=\"line\">\t\t\t\t\t\t\t+ <span class=\"string\">\"remaining : \"</span> + ar.get());</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\t\tSystem.out.println(<span class=\"string\">\"consume fail\"</span>);</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\tThread.sleep(<span class=\"number\">100</span>);</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">\t\t\tRechargeThread rt = <span class=\"keyword\">new</span> RechargeThread();</div><div class=\"line\">\t\t\trt.start();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tConsumeThread ct = <span class=\"keyword\">new</span> ConsumeThread();</div><div class=\"line\">\t\tct.start();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">consume <span class=\"number\">100</span>,remaining ： <span class=\"number\">150</span></div><div class=\"line\">consume <span class=\"number\">100</span>,remaining ： <span class=\"number\">50</span></div><div class=\"line\">recharge <span class=\"number\">200</span>,remaining ： <span class=\"number\">250</span></div><div class=\"line\">consume <span class=\"number\">100</span>,remaining ： <span class=\"number\">150</span></div><div class=\"line\">consume <span class=\"number\">100</span>,remaining ： <span class=\"number\">50</span></div><div class=\"line\">recharge <span class=\"number\">200</span>,remaining ： <span class=\"number\">250</span></div><div class=\"line\">consume <span class=\"number\">100</span>,remaining ： <span class=\"number\">150</span></div><div class=\"line\">consume <span class=\"number\">100</span>,remaining ： <span class=\"number\">250</span></div><div class=\"line\">recharge <span class=\"number\">200</span>,remaining ： <span class=\"number\">250</span></div><div class=\"line\">consume <span class=\"number\">100</span>,remaining ： <span class=\"number\">150</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"AtomicStampedReference\"><a href=\"#AtomicStampedReference\" class=\"headerlink\" title=\"AtomicStampedReference\"></a>AtomicStampedReference</h3><p>既然有这个Bug，那么JDK有没有解决的方案呢？答案是肯定的，那就是AtomicStampedReference<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestAtomicStampedReference</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> AtomicStampedReference&lt;Integer&gt; asr = <span class=\"keyword\">new</span> AtomicStampedReference&lt;Integer&gt;(<span class=\"number\">50</span>, <span class=\"number\">0</span>);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RechargeThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> stamp = asr.getStamp();</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\t\t\tInteger value = asr.getReference();</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(value &lt; <span class=\"number\">100</span>) &#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (asr.compareAndSet(value, value</div><div class=\"line\">\t\t\t\t\t\t\t+ <span class=\"number\">200</span>,stamp,stamp + <span class=\"number\">1</span>)) &#123;</div><div class=\"line\">\t\t\t\t\t\t\tSystem.out.println(<span class=\"string\">\"recharge 200,\"</span> +</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"string\">\"remaining ：\"</span> + asr.getReference());</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">break</span>;\t</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsumeThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\t\t\tInteger value = asr.getReference();</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> stamp = asr.getStamp();</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(value &gt; <span class=\"number\">100</span>) &#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span>(asr.compareAndSet(value, value </div><div class=\"line\">\t\t\t\t\t\t\t- <span class=\"number\">100</span>,stamp,stamp + <span class=\"number\">1</span>)) &#123;</div><div class=\"line\">\t\t\t\t\t\t\tSystem.out.println(<span class=\"string\">\"consume 100,\"</span> + </div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"string\">\"remaining ： \"</span>  + asr.getReference());</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\t\tSystem.out.println(<span class=\"string\">\"consume fail\"</span>);</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\tThread.sleep(<span class=\"number\">100</span>);</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">\t\t\tRechargeThread rt = <span class=\"keyword\">new</span> RechargeThread();</div><div class=\"line\">\t\t\trt.start();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tConsumeThread ct = <span class=\"keyword\">new</span> ConsumeThread();</div><div class=\"line\">\t\tct.start();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">recharge <span class=\"number\">200</span>,remaining ： <span class=\"number\">250</span></div><div class=\"line\">consume <span class=\"number\">100</span>,remaining ： <span class=\"number\">150</span></div><div class=\"line\">consume <span class=\"number\">100</span>,remaining ： <span class=\"number\">50</span></div><div class=\"line\">consume fail</div><div class=\"line\">consume fail</div><div class=\"line\">consume fail</div><div class=\"line\">consume fail</div><div class=\"line\">consume fail</div><div class=\"line\">consume fail</div></pre></td></tr></table></figure></p>\n<h3 id=\"AtomicIntegerArray\"><a href=\"#AtomicIntegerArray\" class=\"headerlink\" title=\"AtomicIntegerArray\"></a>AtomicIntegerArray</h3><p>同样的，数组也可以原子化，下面看看JDK源码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getAndSet</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> newValue)</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">compareAndSet</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> expect, <span class=\"keyword\">int</span> update)</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getAndIncrement</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getAndDecrement</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;&#125;</div></pre></td></tr></table></figure></p>\n<p>下面是一个示例<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestAtomicArray</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;                  </div><div class=\"line\">\t\tAtomicIntegerArray aia = <span class=\"keyword\">new</span> AtomicIntegerArray(<span class=\"number\">10</span>);</div><div class=\"line\">\t\tThread[] threads = <span class=\"keyword\">new</span> Thread[<span class=\"number\">10</span>];</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">\t\t\tThread t = <span class=\"keyword\">new</span> Thread() &#123;</div><div class=\"line\">\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">1000</span>; k++) &#123;</div><div class=\"line\">\t\t\t\t\t\taia.incrementAndGet(k % <span class=\"number\">10</span>);</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;;</div><div class=\"line\">\t\t\tthreads[i] = t;</div><div class=\"line\">\t\t\tt.start();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">\t\t\tthreads[i].join();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.out.println(aia);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1000</span>, <span class=\"number\">1000</span>, <span class=\"number\">1000</span>, <span class=\"number\">1000</span>, <span class=\"number\">1000</span>, <span class=\"number\">1000</span>, <span class=\"number\">1000</span>, <span class=\"number\">1000</span>, <span class=\"number\">1000</span>, <span class=\"number\">1000</span>]</div></pre></td></tr></table></figure></p>\n<h3 id=\"AtomicIntegerFieldUpdater\"><a href=\"#AtomicIntegerFieldUpdater\" class=\"headerlink\" title=\"AtomicIntegerFieldUpdater\"></a>AtomicIntegerFieldUpdater</h3><p>有时候，在设计前期，由于考虑不周或后期改变，一些变量可能需要线程安全，那么就可以使用AtomicIntegerFieldUpdater，下面就展示个示例<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestAtomicIntegerFieldUpdater</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> score;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> AtomicIntegerFieldUpdater&lt;User&gt; scoreUpdater = </div><div class=\"line\">\t\t\tAtomicIntegerFieldUpdater.newUpdater(User.class, <span class=\"string\">\"score\"</span>);            </div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//用来验证AtomicIntegerFieldUpdater的正确性</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> AtomicInteger ai = <span class=\"keyword\">new</span> AtomicInteger(<span class=\"number\">0</span>);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">\t\tUser user = <span class=\"keyword\">new</span> User();</div><div class=\"line\">\t\tRandom r = <span class=\"keyword\">new</span> Random();</div><div class=\"line\">\t\tThread[] threads = <span class=\"keyword\">new</span> Thread[<span class=\"number\">100</span>];</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</div><div class=\"line\">\t\t\tthreads[i]  = <span class=\"keyword\">new</span> Thread() &#123;</div><div class=\"line\">\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(r.nextInt(<span class=\"number\">5</span>) &gt; <span class=\"number\">2</span>) &#123;</div><div class=\"line\">\t\t\t\t\t\tai.incrementAndGet();</div><div class=\"line\">\t\t\t\t\t\tscoreUpdater.getAndIncrement(user);</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;;</div><div class=\"line\">\t\t\tthreads[i].start();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</div><div class=\"line\">\t\t\tthreads[i].join();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"score : \"</span> + user.score);</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"ai : \"</span> + ai);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">score : <span class=\"number\">35</span></div><div class=\"line\">ai : <span class=\"number\">35</span></div></pre></td></tr></table></figure></p>\n<p>需要注意的几点 ：</p>\n<ul>\n<li>属性是通过反射获得，所以不能用private修饰</li>\n<li>为了确保读取的正确性，属性要用volatile修饰</li>\n<li>由于CAS是通过对象来完成，所以属性不能用static修饰</li>\n</ul>\n","excerpt":"<p>就性格而言，有乐观也有悲观，对于并发控制而言，同样也是如此，锁就是一种悲观策略，它假设每一个临界资源的争夺都会产生冲突，因此它宁可牺牲让线程等待。而无锁就是一种乐观策略，它假设每次争取临界资源都不会冲突，那遇到冲突怎么办呢？它采用的是原子化CAS（Compare And Swap）的技术来有效地检查冲突，CAS算法的过程是这样的：它包含三个参数CAS（V,E,N）,v表示要更改的变量，e表示预期值，n表示新值，只有e和n相同才能修改成功</p>","more":"<h3 id=\"AtomicInteger\"><a href=\"#AtomicInteger\" class=\"headerlink\" title=\"AtomicInteger\"></a>AtomicInteger</h3><p>先展示一下示例 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestAtomicInteger</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> AtomicInteger ai = <span class=\"keyword\">new</span> AtomicInteger(<span class=\"number\">0</span>);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Add</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">10000</span>; k++) &#123;</div><div class=\"line\">\t\t\t\tai.incrementAndGet();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;                  </div><div class=\"line\">\t\tThread[] threads = <span class=\"keyword\">new</span> Thread[<span class=\"number\">10</span>];</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">\t\t\tThread t = <span class=\"keyword\">new</span> Add();</div><div class=\"line\">\t\t\tthreads[i] = t;</div><div class=\"line\">\t\t\tt.start();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">\t\t\tthreads[i].join();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.out.println(ai.get());</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">100000</span></div></pre></td></tr></table></figure></p>\n<p>由此可见，使用原子性的AtomicInteger是线程安全的，下面来看看看AtomicInteger的源码实现<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AtomicInteger</span> <span class=\"keyword\">extends</span> <span class=\"title\">Number</span> <span class=\"keyword\">implements</span> <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> value;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> valueOffset;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> value;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">intValue</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> get();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">incrementAndGet</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> unsafe.getAndAddInt(<span class=\"keyword\">this</span>, valueOffset, <span class=\"number\">1</span>) + <span class=\"number\">1</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">compareAndSet</span><span class=\"params\">(<span class=\"keyword\">int</span> expect, <span class=\"keyword\">int</span> update)</span> </span>&#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面看到AtomicInteger操作都是关于Unsafe，那下面就看看它的神秘，Unsafe是java里面的指针，但是它却无法被应用程序所使用，是一个JDK专用类</p>\n<h3 id=\"AtomicReference\"><a href=\"#AtomicReference\" class=\"headerlink\" title=\"AtomicReference\"></a>AtomicReference</h3><p>上面我们讲述了基本数据类型原子性操作，那么对于引用类型，AtomicReference就可以满足，但是AtomicReference有个小Bug，就是当数据修改，然后再修改至原值，此时，它就无能为力了<br>下面就展示下这个Bug，假设一下业务流程 ：你的购物卡里面金额少于100时，公司会为你冲200，但就是一次<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestAtomicReference</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> AtomicReference&lt;Integer&gt; ar = <span class=\"keyword\">new</span> AtomicReference&lt;&gt;(<span class=\"number\">250</span>);              </div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RechargeThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\t\t\tInteger value = ar.get();</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(value &lt; <span class=\"number\">100</span>) &#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (ar.compareAndSet(value, value + <span class=\"number\">200</span>)) &#123;</div><div class=\"line\">\t\t\t\t\t\t\tSystem.out.println(<span class=\"string\">\"recharge 200,\"</span> </div><div class=\"line\">\t\t\t\t\t\t\t+ <span class=\"string\">\"remaining ：\"</span> + ar.get());</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">break</span>;\t</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsumeThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\t\t\tInteger value = ar.get();</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(value &gt; <span class=\"number\">100</span>) &#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span>(ar.compareAndSet(value, value - <span class=\"number\">100</span>)) &#123;</div><div class=\"line\">\t\t\t\t\t\t\tSystem.out.println(<span class=\"string\">\"consume 100,\"</span></div><div class=\"line\">\t\t\t\t\t\t\t+ <span class=\"string\">\"remaining : \"</span> + ar.get());</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\t\tSystem.out.println(<span class=\"string\">\"consume fail\"</span>);</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\tThread.sleep(<span class=\"number\">100</span>);</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">\t\t\tRechargeThread rt = <span class=\"keyword\">new</span> RechargeThread();</div><div class=\"line\">\t\t\trt.start();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tConsumeThread ct = <span class=\"keyword\">new</span> ConsumeThread();</div><div class=\"line\">\t\tct.start();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">consume <span class=\"number\">100</span>,remaining ： <span class=\"number\">150</span></div><div class=\"line\">consume <span class=\"number\">100</span>,remaining ： <span class=\"number\">50</span></div><div class=\"line\">recharge <span class=\"number\">200</span>,remaining ： <span class=\"number\">250</span></div><div class=\"line\">consume <span class=\"number\">100</span>,remaining ： <span class=\"number\">150</span></div><div class=\"line\">consume <span class=\"number\">100</span>,remaining ： <span class=\"number\">50</span></div><div class=\"line\">recharge <span class=\"number\">200</span>,remaining ： <span class=\"number\">250</span></div><div class=\"line\">consume <span class=\"number\">100</span>,remaining ： <span class=\"number\">150</span></div><div class=\"line\">consume <span class=\"number\">100</span>,remaining ： <span class=\"number\">250</span></div><div class=\"line\">recharge <span class=\"number\">200</span>,remaining ： <span class=\"number\">250</span></div><div class=\"line\">consume <span class=\"number\">100</span>,remaining ： <span class=\"number\">150</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"AtomicStampedReference\"><a href=\"#AtomicStampedReference\" class=\"headerlink\" title=\"AtomicStampedReference\"></a>AtomicStampedReference</h3><p>既然有这个Bug，那么JDK有没有解决的方案呢？答案是肯定的，那就是AtomicStampedReference<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestAtomicStampedReference</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> AtomicStampedReference&lt;Integer&gt; asr = <span class=\"keyword\">new</span> AtomicStampedReference&lt;Integer&gt;(<span class=\"number\">50</span>, <span class=\"number\">0</span>);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RechargeThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> stamp = asr.getStamp();</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\t\t\tInteger value = asr.getReference();</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(value &lt; <span class=\"number\">100</span>) &#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (asr.compareAndSet(value, value</div><div class=\"line\">\t\t\t\t\t\t\t+ <span class=\"number\">200</span>,stamp,stamp + <span class=\"number\">1</span>)) &#123;</div><div class=\"line\">\t\t\t\t\t\t\tSystem.out.println(<span class=\"string\">\"recharge 200,\"</span> +</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"string\">\"remaining ：\"</span> + asr.getReference());</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">break</span>;\t</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsumeThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\t\t\tInteger value = asr.getReference();</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> stamp = asr.getStamp();</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(value &gt; <span class=\"number\">100</span>) &#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span>(asr.compareAndSet(value, value </div><div class=\"line\">\t\t\t\t\t\t\t- <span class=\"number\">100</span>,stamp,stamp + <span class=\"number\">1</span>)) &#123;</div><div class=\"line\">\t\t\t\t\t\t\tSystem.out.println(<span class=\"string\">\"consume 100,\"</span> + </div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"string\">\"remaining ： \"</span>  + asr.getReference());</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\t\tSystem.out.println(<span class=\"string\">\"consume fail\"</span>);</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\tThread.sleep(<span class=\"number\">100</span>);</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">\t\t\tRechargeThread rt = <span class=\"keyword\">new</span> RechargeThread();</div><div class=\"line\">\t\t\trt.start();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tConsumeThread ct = <span class=\"keyword\">new</span> ConsumeThread();</div><div class=\"line\">\t\tct.start();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">recharge <span class=\"number\">200</span>,remaining ： <span class=\"number\">250</span></div><div class=\"line\">consume <span class=\"number\">100</span>,remaining ： <span class=\"number\">150</span></div><div class=\"line\">consume <span class=\"number\">100</span>,remaining ： <span class=\"number\">50</span></div><div class=\"line\">consume fail</div><div class=\"line\">consume fail</div><div class=\"line\">consume fail</div><div class=\"line\">consume fail</div><div class=\"line\">consume fail</div><div class=\"line\">consume fail</div></pre></td></tr></table></figure></p>\n<h3 id=\"AtomicIntegerArray\"><a href=\"#AtomicIntegerArray\" class=\"headerlink\" title=\"AtomicIntegerArray\"></a>AtomicIntegerArray</h3><p>同样的，数组也可以原子化，下面看看JDK源码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getAndSet</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> newValue)</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">compareAndSet</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> expect, <span class=\"keyword\">int</span> update)</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getAndIncrement</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getAndDecrement</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;&#125;</div></pre></td></tr></table></figure></p>\n<p>下面是一个示例<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestAtomicArray</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;                  </div><div class=\"line\">\t\tAtomicIntegerArray aia = <span class=\"keyword\">new</span> AtomicIntegerArray(<span class=\"number\">10</span>);</div><div class=\"line\">\t\tThread[] threads = <span class=\"keyword\">new</span> Thread[<span class=\"number\">10</span>];</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">\t\t\tThread t = <span class=\"keyword\">new</span> Thread() &#123;</div><div class=\"line\">\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">1000</span>; k++) &#123;</div><div class=\"line\">\t\t\t\t\t\taia.incrementAndGet(k % <span class=\"number\">10</span>);</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;;</div><div class=\"line\">\t\t\tthreads[i] = t;</div><div class=\"line\">\t\t\tt.start();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">\t\t\tthreads[i].join();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.out.println(aia);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1000</span>, <span class=\"number\">1000</span>, <span class=\"number\">1000</span>, <span class=\"number\">1000</span>, <span class=\"number\">1000</span>, <span class=\"number\">1000</span>, <span class=\"number\">1000</span>, <span class=\"number\">1000</span>, <span class=\"number\">1000</span>, <span class=\"number\">1000</span>]</div></pre></td></tr></table></figure></p>\n<h3 id=\"AtomicIntegerFieldUpdater\"><a href=\"#AtomicIntegerFieldUpdater\" class=\"headerlink\" title=\"AtomicIntegerFieldUpdater\"></a>AtomicIntegerFieldUpdater</h3><p>有时候，在设计前期，由于考虑不周或后期改变，一些变量可能需要线程安全，那么就可以使用AtomicIntegerFieldUpdater，下面就展示个示例<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestAtomicIntegerFieldUpdater</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> score;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> AtomicIntegerFieldUpdater&lt;User&gt; scoreUpdater = </div><div class=\"line\">\t\t\tAtomicIntegerFieldUpdater.newUpdater(User.class, <span class=\"string\">\"score\"</span>);            </div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//用来验证AtomicIntegerFieldUpdater的正确性</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> AtomicInteger ai = <span class=\"keyword\">new</span> AtomicInteger(<span class=\"number\">0</span>);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">\t\tUser user = <span class=\"keyword\">new</span> User();</div><div class=\"line\">\t\tRandom r = <span class=\"keyword\">new</span> Random();</div><div class=\"line\">\t\tThread[] threads = <span class=\"keyword\">new</span> Thread[<span class=\"number\">100</span>];</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</div><div class=\"line\">\t\t\tthreads[i]  = <span class=\"keyword\">new</span> Thread() &#123;</div><div class=\"line\">\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(r.nextInt(<span class=\"number\">5</span>) &gt; <span class=\"number\">2</span>) &#123;</div><div class=\"line\">\t\t\t\t\t\tai.incrementAndGet();</div><div class=\"line\">\t\t\t\t\t\tscoreUpdater.getAndIncrement(user);</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;;</div><div class=\"line\">\t\t\tthreads[i].start();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</div><div class=\"line\">\t\t\tthreads[i].join();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"score : \"</span> + user.score);</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"ai : \"</span> + ai);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">score : <span class=\"number\">35</span></div><div class=\"line\">ai : <span class=\"number\">35</span></div></pre></td></tr></table></figure></p>\n<p>需要注意的几点 ：</p>\n<ul>\n<li>属性是通过反射获得，所以不能用private修饰</li>\n<li>为了确保读取的正确性，属性要用volatile修饰</li>\n<li>由于CAS是通过对象来完成，所以属性不能用static修饰</li>\n</ul>"},{"title":"并发编程（二十三）并行操作","date":"2016-08-06T10:53:13.000Z","_content":"### 并发流水线\n\n我们知道一个产品的生产会经过很多步骤，工厂会让员工每一个步骤都执行，从头到尾的生产这个商品吗？\n显然不会，工厂会将产品的生产分为好几个部分，然后每个人分部分完成。如果将其抽象成为线程，每个部门的线程组合起来就是并发流水线\n\n### 并发搜索\n\n搜索是一个很常见的操作，对于有序数组，我们可以采用二分法搜索。当在并发编程中，并发搜索就是将数组分为多个段，每一段用一个线程进行查找\n\n<!--more-->\n\n下面就演示一个实例\n``` java\n\tpublic class IntercurrentSearch {\n\t\tpublic static final int NUM = 20;\n\t\tpublic static final int THREAD_NUM = 5;\n\t\t\n\t\tprivate static int[] array;\n\t\t\n\t\tpublic static void makeData() {\n\t\t\tRandom r = new Random();\n\t\t\tint[] arr = new int[NUM];\n\t\t\tfor(int i = 0; i < NUM; i++) {\n\t\t\t\tarr[i] = i;\n\t\t\t}\n\t\t\tfor(int i = 0; i < NUM; i++) {\n\t\t\t\tint temp = r.nextInt(NUM);\n\t\t\t\tint t = arr[i];\n\t\t\t\tarr[i] = arr[temp];\n\t\t\t\tarr[temp] = t;\n\t\t\t}\n\t\t\tarray = arr;\n\t\t}\n\t\t\n\t\tpublic static class SearchTask implements Callable<Integer> {\n\t\t\tprivate int start;\n\t\t\tprivate int end;\n\t\t\tprivate int searchValue;\n\t\t\t\n\t\t\tpublic SearchTask(int start, int end, int searchValue) {\n\t\t\t\tsuper();\n\t\t\t\tthis.start = start;\n\t\t\t\tthis.end = end;\n\t\t\t\tthis.searchValue = searchValue;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic Integer call() throws Exception {\n\t\t\t\tfor(int i = start; i < end; i++) {\n\t\t\t\t\tif (searchValue == array[i]) {\n\t\t\t\t\t\treturn i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) throws InterruptedException, ExecutionException {\n\t\t\tmakeData();\n\t\t\tint searchValue = 1;\n\t\t\tint size = NUM / THREAD_NUM;\n\t\t\tint ret = -1;\n\t\t\tExecutorService es = Executors.newFixedThreadPool(THREAD_NUM);\n\t\t\tList<Future<Integer>> futures = new ArrayList<>(THREAD_NUM);\n\t\t\tfor(int i = 0; i < NUM; i += size) {\n\t\t\t\tFuture<Integer> future = es.submit(new SearchTask(i, i + size, searchValue));\n\t\t\t\tfutures.add(future);\n\t\t\t}\n\t\t\tfor(int i = 0; i < THREAD_NUM; i++) {\n\t\t\t\tif (futures.get(i).get() > 0) {\n\t\t\t\t\tret = futures.get(i).get();\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(Arrays.toString(array));\n\t\t\tSystem.out.println(ret);\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\n[13, 19, 12, 2, 0, 4, 10, 11, 9, 16, 8, 14, 5, 7, 18, 1, 6, 15, 17, 3]\n15\n```\n\n### 并发排序\n\n并发排序的关键是解决分离数据相关性。什么是数据的相关性呢？就冒泡排序而言，每次迭代都会比较前后两个数据的大小，也就是说每一个数据都要和左右数据进行比较。这个就不符合了。那怎么能将其改变为并发的呢？如果我们分为基偶，每个数据只与后面一个数比较这就可以了\n先来看看串行的基偶排序\n``` java\n\tpublic static void sort(int[] arr) {\n\t\t// 是否交换\n\t\tboolean exchFlag = true;\n\t\tint start = 0;\n\t\t//当两轮循环都没有进行交换结束\n\t\twhile(start == 0 || exchFlag) {\n\t\t\texchFlag = false;\n\t\t\tfor(int i = start; i < arr.length - 1; i += 2) {                              \n\t\t\t\tif (arr[i] > arr[i+1]) {\n\t\t\t\t\tint temp = arr[i];\n\t\t\t\t\tarr[i] = arr[i+1];\n\t\t\t\t\tarr[i+1] = temp;\n\t\t\t\t\texchFlag = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (start == 0) {\n\t\t\t\tstart = 1;\n\t\t\t}else {\n\t\t\t\tstart = 0;\n\t\t\t}\n\t\t}\n\t}\n```\n再来看看并行的基偶排序\n``` java\n\tpublic class IcOddEvenSort {\n\t\tprivate static boolean exchFlag = true;\n\n\t\tpublic static class OddEvenSort implements Runnable {\n\t\t\tprivate int i;\n\t\t\tprivate CountDownLatch cdl;\n\t\t\tprivate int[] arr;\n\t\t\t\n\t\t\tpublic OddEvenSort(int[] arr, int i, CountDownLatch cdl) {                    \n\t\t\t\tsuper();\n\t\t\t\tthis.arr = arr;\n\t\t\t\tthis.i = i;\n\t\t\t\tthis.cdl = cdl;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tif (arr[i] > arr[i+1]) {\n\t\t\t\t\tint temp = arr[i];\n\t\t\t\t\tarr[i] = arr[i+1];\n\t\t\t\t\tarr[i+1] = temp;\n\t\t\t\t\texchFlag = true;\n\t\t\t\t}\n\t\t\t\tcdl.countDown();\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) throws InterruptedException {\n\t\t\tint[] arr = new int[]{1,2,3,6,5,4,7,8,9,0};\n\t\t\tint start = 0;\n\t\t\tExecutorService es = Executors.newCachedThreadPool();\n\t\t\twhile(start == 1 || exchFlag) {\n\t\t\t\texchFlag = false;\n\t\t\t\tCountDownLatch cdl = new CountDownLatch(arr.length/2 - \n\t\t\t\t\t\t(arr.length%2 == 0? start : 0));\n\t\t\t\tfor(int i = start; i < arr.length - 1; i += 2) {\n\t\t\t\t\tes.execute(new OddEvenSort(arr, i, cdl));\n\t\t\t\t}\n\t\t\t\tcdl.await();\n\t\t\t\tif (start == 0) {\n\t\t\t\t\tstart = 1;\n\t\t\t\t}else {\n\t\t\t\t\tstart = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(Arrays.toString(arr));\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n","source":"_posts/intercurrent_operator_parallel.md","raw":"---\ntitle: 并发编程（二十三）并行操作\ndate: 2016-08-06 18:53:13\ntags:\n\t- 并发编程\n---\n### 并发流水线\n\n我们知道一个产品的生产会经过很多步骤，工厂会让员工每一个步骤都执行，从头到尾的生产这个商品吗？\n显然不会，工厂会将产品的生产分为好几个部分，然后每个人分部分完成。如果将其抽象成为线程，每个部门的线程组合起来就是并发流水线\n\n### 并发搜索\n\n搜索是一个很常见的操作，对于有序数组，我们可以采用二分法搜索。当在并发编程中，并发搜索就是将数组分为多个段，每一段用一个线程进行查找\n\n<!--more-->\n\n下面就演示一个实例\n``` java\n\tpublic class IntercurrentSearch {\n\t\tpublic static final int NUM = 20;\n\t\tpublic static final int THREAD_NUM = 5;\n\t\t\n\t\tprivate static int[] array;\n\t\t\n\t\tpublic static void makeData() {\n\t\t\tRandom r = new Random();\n\t\t\tint[] arr = new int[NUM];\n\t\t\tfor(int i = 0; i < NUM; i++) {\n\t\t\t\tarr[i] = i;\n\t\t\t}\n\t\t\tfor(int i = 0; i < NUM; i++) {\n\t\t\t\tint temp = r.nextInt(NUM);\n\t\t\t\tint t = arr[i];\n\t\t\t\tarr[i] = arr[temp];\n\t\t\t\tarr[temp] = t;\n\t\t\t}\n\t\t\tarray = arr;\n\t\t}\n\t\t\n\t\tpublic static class SearchTask implements Callable<Integer> {\n\t\t\tprivate int start;\n\t\t\tprivate int end;\n\t\t\tprivate int searchValue;\n\t\t\t\n\t\t\tpublic SearchTask(int start, int end, int searchValue) {\n\t\t\t\tsuper();\n\t\t\t\tthis.start = start;\n\t\t\t\tthis.end = end;\n\t\t\t\tthis.searchValue = searchValue;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic Integer call() throws Exception {\n\t\t\t\tfor(int i = start; i < end; i++) {\n\t\t\t\t\tif (searchValue == array[i]) {\n\t\t\t\t\t\treturn i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) throws InterruptedException, ExecutionException {\n\t\t\tmakeData();\n\t\t\tint searchValue = 1;\n\t\t\tint size = NUM / THREAD_NUM;\n\t\t\tint ret = -1;\n\t\t\tExecutorService es = Executors.newFixedThreadPool(THREAD_NUM);\n\t\t\tList<Future<Integer>> futures = new ArrayList<>(THREAD_NUM);\n\t\t\tfor(int i = 0; i < NUM; i += size) {\n\t\t\t\tFuture<Integer> future = es.submit(new SearchTask(i, i + size, searchValue));\n\t\t\t\tfutures.add(future);\n\t\t\t}\n\t\t\tfor(int i = 0; i < THREAD_NUM; i++) {\n\t\t\t\tif (futures.get(i).get() > 0) {\n\t\t\t\t\tret = futures.get(i).get();\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(Arrays.toString(array));\n\t\t\tSystem.out.println(ret);\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\n[13, 19, 12, 2, 0, 4, 10, 11, 9, 16, 8, 14, 5, 7, 18, 1, 6, 15, 17, 3]\n15\n```\n\n### 并发排序\n\n并发排序的关键是解决分离数据相关性。什么是数据的相关性呢？就冒泡排序而言，每次迭代都会比较前后两个数据的大小，也就是说每一个数据都要和左右数据进行比较。这个就不符合了。那怎么能将其改变为并发的呢？如果我们分为基偶，每个数据只与后面一个数比较这就可以了\n先来看看串行的基偶排序\n``` java\n\tpublic static void sort(int[] arr) {\n\t\t// 是否交换\n\t\tboolean exchFlag = true;\n\t\tint start = 0;\n\t\t//当两轮循环都没有进行交换结束\n\t\twhile(start == 0 || exchFlag) {\n\t\t\texchFlag = false;\n\t\t\tfor(int i = start; i < arr.length - 1; i += 2) {                              \n\t\t\t\tif (arr[i] > arr[i+1]) {\n\t\t\t\t\tint temp = arr[i];\n\t\t\t\t\tarr[i] = arr[i+1];\n\t\t\t\t\tarr[i+1] = temp;\n\t\t\t\t\texchFlag = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (start == 0) {\n\t\t\t\tstart = 1;\n\t\t\t}else {\n\t\t\t\tstart = 0;\n\t\t\t}\n\t\t}\n\t}\n```\n再来看看并行的基偶排序\n``` java\n\tpublic class IcOddEvenSort {\n\t\tprivate static boolean exchFlag = true;\n\n\t\tpublic static class OddEvenSort implements Runnable {\n\t\t\tprivate int i;\n\t\t\tprivate CountDownLatch cdl;\n\t\t\tprivate int[] arr;\n\t\t\t\n\t\t\tpublic OddEvenSort(int[] arr, int i, CountDownLatch cdl) {                    \n\t\t\t\tsuper();\n\t\t\t\tthis.arr = arr;\n\t\t\t\tthis.i = i;\n\t\t\t\tthis.cdl = cdl;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tif (arr[i] > arr[i+1]) {\n\t\t\t\t\tint temp = arr[i];\n\t\t\t\t\tarr[i] = arr[i+1];\n\t\t\t\t\tarr[i+1] = temp;\n\t\t\t\t\texchFlag = true;\n\t\t\t\t}\n\t\t\t\tcdl.countDown();\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) throws InterruptedException {\n\t\t\tint[] arr = new int[]{1,2,3,6,5,4,7,8,9,0};\n\t\t\tint start = 0;\n\t\t\tExecutorService es = Executors.newCachedThreadPool();\n\t\t\twhile(start == 1 || exchFlag) {\n\t\t\t\texchFlag = false;\n\t\t\t\tCountDownLatch cdl = new CountDownLatch(arr.length/2 - \n\t\t\t\t\t\t(arr.length%2 == 0? start : 0));\n\t\t\t\tfor(int i = start; i < arr.length - 1; i += 2) {\n\t\t\t\t\tes.execute(new OddEvenSort(arr, i, cdl));\n\t\t\t\t}\n\t\t\t\tcdl.await();\n\t\t\t\tif (start == 0) {\n\t\t\t\t\tstart = 1;\n\t\t\t\t}else {\n\t\t\t\t\tstart = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(Arrays.toString(arr));\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n","slug":"intercurrent_operator_parallel","published":1,"updated":"2017-03-08T11:06:49.014Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5cy001hqoq1ajo7r4pj","content":"<h3 id=\"并发流水线\"><a href=\"#并发流水线\" class=\"headerlink\" title=\"并发流水线\"></a>并发流水线</h3><p>我们知道一个产品的生产会经过很多步骤，工厂会让员工每一个步骤都执行，从头到尾的生产这个商品吗？<br>显然不会，工厂会将产品的生产分为好几个部分，然后每个人分部分完成。如果将其抽象成为线程，每个部门的线程组合起来就是并发流水线</p>\n<h3 id=\"并发搜索\"><a href=\"#并发搜索\" class=\"headerlink\" title=\"并发搜索\"></a>并发搜索</h3><p>搜索是一个很常见的操作，对于有序数组，我们可以采用二分法搜索。当在并发编程中，并发搜索就是将数组分为多个段，每一段用一个线程进行查找</p>\n<a id=\"more\"></a>\n<p>下面就演示一个实例<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntercurrentSearch</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> NUM = <span class=\"number\">20</span>;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> THREAD_NUM = <span class=\"number\">5</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] array;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">makeData</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tRandom r = <span class=\"keyword\">new</span> Random();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[NUM];</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; NUM; i++) &#123;</div><div class=\"line\">\t\t\tarr[i] = i;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; NUM; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> temp = r.nextInt(NUM);</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> t = arr[i];</div><div class=\"line\">\t\t\tarr[i] = arr[temp];</div><div class=\"line\">\t\t\tarr[temp] = t;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tarray = arr;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SearchTask</span> <span class=\"keyword\">implements</span> <span class=\"title\">Callable</span>&lt;<span class=\"title\">Integer</span>&gt; </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> start;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> end;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> searchValue;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SearchTask</span><span class=\"params\">(<span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end, <span class=\"keyword\">int</span> searchValue)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.start = start;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.end = end;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.searchValue = searchValue;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = start; i &lt; end; i++) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (searchValue == array[i]) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> i;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException, ExecutionException </span>&#123;</div><div class=\"line\">\t\tmakeData();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> searchValue = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> size = NUM / THREAD_NUM;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> ret = -<span class=\"number\">1</span>;</div><div class=\"line\">\t\tExecutorService es = Executors.newFixedThreadPool(THREAD_NUM);</div><div class=\"line\">\t\tList&lt;Future&lt;Integer&gt;&gt; futures = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(THREAD_NUM);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; NUM; i += size) &#123;</div><div class=\"line\">\t\t\tFuture&lt;Integer&gt; future = es.submit(<span class=\"keyword\">new</span> SearchTask(i, i + size, searchValue));</div><div class=\"line\">\t\t\tfutures.add(future);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; THREAD_NUM; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (futures.get(i).get() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t\tret = futures.get(i).get();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.out.println(Arrays.toString(array));</div><div class=\"line\">\t\tSystem.out.println(ret);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">13</span>, <span class=\"number\">19</span>, <span class=\"number\">12</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">9</span>, <span class=\"number\">16</span>, <span class=\"number\">8</span>, <span class=\"number\">14</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">18</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">15</span>, <span class=\"number\">17</span>, <span class=\"number\">3</span>]</div><div class=\"line\"><span class=\"number\">15</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"并发排序\"><a href=\"#并发排序\" class=\"headerlink\" title=\"并发排序\"></a>并发排序</h3><p>并发排序的关键是解决分离数据相关性。什么是数据的相关性呢？就冒泡排序而言，每次迭代都会比较前后两个数据的大小，也就是说每一个数据都要和左右数据进行比较。这个就不符合了。那怎么能将其改变为并发的呢？如果我们分为基偶，每个数据只与后面一个数比较这就可以了<br>先来看看串行的基偶排序<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 是否交换</span></div><div class=\"line\">\t<span class=\"keyword\">boolean</span> exchFlag = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t<span class=\"keyword\">int</span> start = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"comment\">//当两轮循环都没有进行交换结束</span></div><div class=\"line\">\t<span class=\"keyword\">while</span>(start == <span class=\"number\">0</span> || exchFlag) &#123;</div><div class=\"line\">\t\texchFlag = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = start; i &lt; arr.length - <span class=\"number\">1</span>; i += <span class=\"number\">2</span>) &#123;                              </div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (arr[i] &gt; arr[i+<span class=\"number\">1</span>]) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> temp = arr[i];</div><div class=\"line\">\t\t\t\tarr[i] = arr[i+<span class=\"number\">1</span>];</div><div class=\"line\">\t\t\t\tarr[i+<span class=\"number\">1</span>] = temp;</div><div class=\"line\">\t\t\t\texchFlag = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (start == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\tstart = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\tstart = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>再来看看并行的基偶排序<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IcOddEvenSort</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> exchFlag = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OddEvenSort</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> i;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> CountDownLatch cdl;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] arr;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OddEvenSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> i, CountDownLatch cdl)</span> </span>&#123;                    </div><div class=\"line\">\t\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.arr = arr;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.i = i;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.cdl = cdl;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (arr[i] &gt; arr[i+<span class=\"number\">1</span>]) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> temp = arr[i];</div><div class=\"line\">\t\t\t\tarr[i] = arr[i+<span class=\"number\">1</span>];</div><div class=\"line\">\t\t\t\tarr[i+<span class=\"number\">1</span>] = temp;</div><div class=\"line\">\t\t\t\texchFlag = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tcdl.countDown();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">0</span>&#125;;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> start = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tExecutorService es = Executors.newCachedThreadPool();</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(start == <span class=\"number\">1</span> || exchFlag) &#123;</div><div class=\"line\">\t\t\texchFlag = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t\tCountDownLatch cdl = <span class=\"keyword\">new</span> CountDownLatch(arr.length/<span class=\"number\">2</span> - </div><div class=\"line\">\t\t\t\t\t(arr.length%<span class=\"number\">2</span> == <span class=\"number\">0</span>? start : <span class=\"number\">0</span>));</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = start; i &lt; arr.length - <span class=\"number\">1</span>; i += <span class=\"number\">2</span>) &#123;</div><div class=\"line\">\t\t\t\tes.execute(<span class=\"keyword\">new</span> OddEvenSort(arr, i, cdl));</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tcdl.await();</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (start == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t\tstart = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\tstart = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.out.println(Arrays.toString(arr));</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</div></pre></td></tr></table></figure></p>\n","excerpt":"<h3 id=\"并发流水线\"><a href=\"#并发流水线\" class=\"headerlink\" title=\"并发流水线\"></a>并发流水线</h3><p>我们知道一个产品的生产会经过很多步骤，工厂会让员工每一个步骤都执行，从头到尾的生产这个商品吗？<br>显然不会，工厂会将产品的生产分为好几个部分，然后每个人分部分完成。如果将其抽象成为线程，每个部门的线程组合起来就是并发流水线</p>\n<h3 id=\"并发搜索\"><a href=\"#并发搜索\" class=\"headerlink\" title=\"并发搜索\"></a>并发搜索</h3><p>搜索是一个很常见的操作，对于有序数组，我们可以采用二分法搜索。当在并发编程中，并发搜索就是将数组分为多个段，每一段用一个线程进行查找</p>","more":"<p>下面就演示一个实例<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntercurrentSearch</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> NUM = <span class=\"number\">20</span>;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> THREAD_NUM = <span class=\"number\">5</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] array;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">makeData</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tRandom r = <span class=\"keyword\">new</span> Random();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[NUM];</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; NUM; i++) &#123;</div><div class=\"line\">\t\t\tarr[i] = i;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; NUM; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> temp = r.nextInt(NUM);</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> t = arr[i];</div><div class=\"line\">\t\t\tarr[i] = arr[temp];</div><div class=\"line\">\t\t\tarr[temp] = t;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tarray = arr;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SearchTask</span> <span class=\"keyword\">implements</span> <span class=\"title\">Callable</span>&lt;<span class=\"title\">Integer</span>&gt; </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> start;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> end;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> searchValue;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SearchTask</span><span class=\"params\">(<span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end, <span class=\"keyword\">int</span> searchValue)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.start = start;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.end = end;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.searchValue = searchValue;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = start; i &lt; end; i++) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (searchValue == array[i]) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> i;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException, ExecutionException </span>&#123;</div><div class=\"line\">\t\tmakeData();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> searchValue = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> size = NUM / THREAD_NUM;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> ret = -<span class=\"number\">1</span>;</div><div class=\"line\">\t\tExecutorService es = Executors.newFixedThreadPool(THREAD_NUM);</div><div class=\"line\">\t\tList&lt;Future&lt;Integer&gt;&gt; futures = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(THREAD_NUM);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; NUM; i += size) &#123;</div><div class=\"line\">\t\t\tFuture&lt;Integer&gt; future = es.submit(<span class=\"keyword\">new</span> SearchTask(i, i + size, searchValue));</div><div class=\"line\">\t\t\tfutures.add(future);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; THREAD_NUM; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (futures.get(i).get() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t\tret = futures.get(i).get();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.out.println(Arrays.toString(array));</div><div class=\"line\">\t\tSystem.out.println(ret);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">13</span>, <span class=\"number\">19</span>, <span class=\"number\">12</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">9</span>, <span class=\"number\">16</span>, <span class=\"number\">8</span>, <span class=\"number\">14</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">18</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">15</span>, <span class=\"number\">17</span>, <span class=\"number\">3</span>]</div><div class=\"line\"><span class=\"number\">15</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"并发排序\"><a href=\"#并发排序\" class=\"headerlink\" title=\"并发排序\"></a>并发排序</h3><p>并发排序的关键是解决分离数据相关性。什么是数据的相关性呢？就冒泡排序而言，每次迭代都会比较前后两个数据的大小，也就是说每一个数据都要和左右数据进行比较。这个就不符合了。那怎么能将其改变为并发的呢？如果我们分为基偶，每个数据只与后面一个数比较这就可以了<br>先来看看串行的基偶排序<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 是否交换</span></div><div class=\"line\">\t<span class=\"keyword\">boolean</span> exchFlag = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t<span class=\"keyword\">int</span> start = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"comment\">//当两轮循环都没有进行交换结束</span></div><div class=\"line\">\t<span class=\"keyword\">while</span>(start == <span class=\"number\">0</span> || exchFlag) &#123;</div><div class=\"line\">\t\texchFlag = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = start; i &lt; arr.length - <span class=\"number\">1</span>; i += <span class=\"number\">2</span>) &#123;                              </div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (arr[i] &gt; arr[i+<span class=\"number\">1</span>]) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> temp = arr[i];</div><div class=\"line\">\t\t\t\tarr[i] = arr[i+<span class=\"number\">1</span>];</div><div class=\"line\">\t\t\t\tarr[i+<span class=\"number\">1</span>] = temp;</div><div class=\"line\">\t\t\t\texchFlag = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (start == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\tstart = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\tstart = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>再来看看并行的基偶排序<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IcOddEvenSort</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> exchFlag = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OddEvenSort</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> i;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> CountDownLatch cdl;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] arr;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OddEvenSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> i, CountDownLatch cdl)</span> </span>&#123;                    </div><div class=\"line\">\t\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.arr = arr;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.i = i;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.cdl = cdl;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (arr[i] &gt; arr[i+<span class=\"number\">1</span>]) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> temp = arr[i];</div><div class=\"line\">\t\t\t\tarr[i] = arr[i+<span class=\"number\">1</span>];</div><div class=\"line\">\t\t\t\tarr[i+<span class=\"number\">1</span>] = temp;</div><div class=\"line\">\t\t\t\texchFlag = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tcdl.countDown();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">0</span>&#125;;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> start = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tExecutorService es = Executors.newCachedThreadPool();</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(start == <span class=\"number\">1</span> || exchFlag) &#123;</div><div class=\"line\">\t\t\texchFlag = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t\tCountDownLatch cdl = <span class=\"keyword\">new</span> CountDownLatch(arr.length/<span class=\"number\">2</span> - </div><div class=\"line\">\t\t\t\t\t(arr.length%<span class=\"number\">2</span> == <span class=\"number\">0</span>? start : <span class=\"number\">0</span>));</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = start; i &lt; arr.length - <span class=\"number\">1</span>; i += <span class=\"number\">2</span>) &#123;</div><div class=\"line\">\t\t\t\tes.execute(<span class=\"keyword\">new</span> OddEvenSort(arr, i, cdl));</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tcdl.await();</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (start == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t\tstart = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\tstart = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.out.println(Arrays.toString(arr));</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</div></pre></td></tr></table></figure></p>"},{"title":"并发编程（二十）不变模式","date":"2016-08-01T10:14:47.000Z","_content":"### 什么是不变模式\n\n使用一种不可以改变的对象，依靠对象的不可变性，可以确保其在没有同步操作的多线程环境中依然始终保持内部状态的一致性和正确性，这就是不变模式\n\n### 不变模式的思想\n\n不变模式的核心思想是：一个对象一旦被创建，则它的内部状态就永远不会发生改变，所以没有一个线程可以修改其内部状态和数据，同时内部状态也不会自发发生改变。基于这些特性，对不变对象的多线程操作不需要同步\n不变模式和只读属性也是有不同的。只读属性有可能会自发地改变，例如对象的存活时间，虽然只读，但它会随着时间的改变而变化\n\n<!--more-->\n\n### 不变思想的实例\n\nJDK中一些不变对象 ： String，Integer，Double……\n``` java\n\tpublic final class String {}\n\tpublic final class Integer extends Number implements Comparable<Integer> {}\n\tpublic final class Double extends Number implements Comparable<Double> {}\n```\n下面给出自己写的示例\n``` java\n\tpublic final class UnModifiable {\n\t\tprivate final int id;\n\t\tprivate final String name;\n\t\t\n\t\tpublic UnModifiable(int id, String name) {\n\t\t\tsuper();\n\t\t\tthis.id = id;\n\t\t\tthis.name = name;\n\t\t}\n\n\t\tpublic final int getId() {\n\t\t\treturn id;\n\t\t}\n\n\t\tpublic final String getName() {\n\t\t\treturn name;\n\t\t}\n\t}\n```\n不变模式应该注意的几点 ：\n- 所有的属性都应该用final修饰\n- 属性没有setter方法\n- 必须要用一个全部属性的构造方法\n- 确保没有子类可以修改它的行为（可以用final修饰class）","source":"_posts/intercurrent_pattern_constant.md","raw":"---\ntitle: 并发编程（二十）不变模式\ndate: 2016-08-01 18:14:47\ntags:\n\t- 并发编程\n---\n### 什么是不变模式\n\n使用一种不可以改变的对象，依靠对象的不可变性，可以确保其在没有同步操作的多线程环境中依然始终保持内部状态的一致性和正确性，这就是不变模式\n\n### 不变模式的思想\n\n不变模式的核心思想是：一个对象一旦被创建，则它的内部状态就永远不会发生改变，所以没有一个线程可以修改其内部状态和数据，同时内部状态也不会自发发生改变。基于这些特性，对不变对象的多线程操作不需要同步\n不变模式和只读属性也是有不同的。只读属性有可能会自发地改变，例如对象的存活时间，虽然只读，但它会随着时间的改变而变化\n\n<!--more-->\n\n### 不变思想的实例\n\nJDK中一些不变对象 ： String，Integer，Double……\n``` java\n\tpublic final class String {}\n\tpublic final class Integer extends Number implements Comparable<Integer> {}\n\tpublic final class Double extends Number implements Comparable<Double> {}\n```\n下面给出自己写的示例\n``` java\n\tpublic final class UnModifiable {\n\t\tprivate final int id;\n\t\tprivate final String name;\n\t\t\n\t\tpublic UnModifiable(int id, String name) {\n\t\t\tsuper();\n\t\t\tthis.id = id;\n\t\t\tthis.name = name;\n\t\t}\n\n\t\tpublic final int getId() {\n\t\t\treturn id;\n\t\t}\n\n\t\tpublic final String getName() {\n\t\t\treturn name;\n\t\t}\n\t}\n```\n不变模式应该注意的几点 ：\n- 所有的属性都应该用final修饰\n- 属性没有setter方法\n- 必须要用一个全部属性的构造方法\n- 确保没有子类可以修改它的行为（可以用final修饰class）","slug":"intercurrent_pattern_constant","published":1,"updated":"2016-12-27T22:13:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5cz001jqoq1z754zop8","content":"<h3 id=\"什么是不变模式\"><a href=\"#什么是不变模式\" class=\"headerlink\" title=\"什么是不变模式\"></a>什么是不变模式</h3><p>使用一种不可以改变的对象，依靠对象的不可变性，可以确保其在没有同步操作的多线程环境中依然始终保持内部状态的一致性和正确性，这就是不变模式</p>\n<h3 id=\"不变模式的思想\"><a href=\"#不变模式的思想\" class=\"headerlink\" title=\"不变模式的思想\"></a>不变模式的思想</h3><p>不变模式的核心思想是：一个对象一旦被创建，则它的内部状态就永远不会发生改变，所以没有一个线程可以修改其内部状态和数据，同时内部状态也不会自发发生改变。基于这些特性，对不变对象的多线程操作不需要同步<br>不变模式和只读属性也是有不同的。只读属性有可能会自发地改变，例如对象的存活时间，虽然只读，但它会随着时间的改变而变化</p>\n<a id=\"more\"></a>\n<h3 id=\"不变思想的实例\"><a href=\"#不变思想的实例\" class=\"headerlink\" title=\"不变思想的实例\"></a>不变思想的实例</h3><p>JDK中一些不变对象 ： String，Integer，Double……<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">String</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Integer</span> <span class=\"keyword\">extends</span> <span class=\"title\">Number</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Integer</span>&gt; </span>&#123;&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Double</span> <span class=\"keyword\">extends</span> <span class=\"title\">Number</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Double</span>&gt; </span>&#123;&#125;</div></pre></td></tr></table></figure></p>\n<p>下面给出自己写的示例<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnModifiable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> id;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String name;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UnModifiable</span><span class=\"params\">(<span class=\"keyword\">int</span> id, String name)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> id;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>不变模式应该注意的几点 ：</p>\n<ul>\n<li>所有的属性都应该用final修饰</li>\n<li>属性没有setter方法</li>\n<li>必须要用一个全部属性的构造方法</li>\n<li>确保没有子类可以修改它的行为（可以用final修饰class）</li>\n</ul>\n","excerpt":"<h3 id=\"什么是不变模式\"><a href=\"#什么是不变模式\" class=\"headerlink\" title=\"什么是不变模式\"></a>什么是不变模式</h3><p>使用一种不可以改变的对象，依靠对象的不可变性，可以确保其在没有同步操作的多线程环境中依然始终保持内部状态的一致性和正确性，这就是不变模式</p>\n<h3 id=\"不变模式的思想\"><a href=\"#不变模式的思想\" class=\"headerlink\" title=\"不变模式的思想\"></a>不变模式的思想</h3><p>不变模式的核心思想是：一个对象一旦被创建，则它的内部状态就永远不会发生改变，所以没有一个线程可以修改其内部状态和数据，同时内部状态也不会自发发生改变。基于这些特性，对不变对象的多线程操作不需要同步<br>不变模式和只读属性也是有不同的。只读属性有可能会自发地改变，例如对象的存活时间，虽然只读，但它会随着时间的改变而变化</p>","more":"<h3 id=\"不变思想的实例\"><a href=\"#不变思想的实例\" class=\"headerlink\" title=\"不变思想的实例\"></a>不变思想的实例</h3><p>JDK中一些不变对象 ： String，Integer，Double……<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">String</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Integer</span> <span class=\"keyword\">extends</span> <span class=\"title\">Number</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Integer</span>&gt; </span>&#123;&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Double</span> <span class=\"keyword\">extends</span> <span class=\"title\">Number</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Double</span>&gt; </span>&#123;&#125;</div></pre></td></tr></table></figure></p>\n<p>下面给出自己写的示例<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnModifiable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> id;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String name;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UnModifiable</span><span class=\"params\">(<span class=\"keyword\">int</span> id, String name)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> id;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>不变模式应该注意的几点 ：</p>\n<ul>\n<li>所有的属性都应该用final修饰</li>\n<li>属性没有setter方法</li>\n<li>必须要用一个全部属性的构造方法</li>\n<li>确保没有子类可以修改它的行为（可以用final修饰class）</li>\n</ul>"},{"title":"并发编程（二十二）Future模式","date":"2016-08-04T12:40:50.000Z","_content":"Future模式的核心就是程序的异步。所谓程序的异步就是不再等待执行结果，而是开一个线程去执行并获得结果，而调用线程则继续向下执行\nFuture模式的角色组成 \n- Main ： 系统启动，调用Client发出请求\n- Client ：返回Data对象，立即返回FutureData对象，并开启线程装配RelData\n- Data ：返回数据的接口\n- FutureData ： Future数据，构造速度快，但是虚拟数据，需要装配RelData\n- RelDate ：真实数据，构造速度慢\n\n<!--more-->\n### 代码实现\n\nData接口定义\n``` java\n\tpublic static interface Data {\n\t\tpublic String getResult();\n\t}\n```\nFutureData定义\n``` java\n\tpublic static class FutureData implements Data {\n\t\tprivate RelData relData;\n\t\tprivate boolean isReady = false;\n\t\t\n\t\tpublic synchronized final void setRelData(RelData relData) {                          \n\t\t\tif(isReady) {\n\t\t\t\treturn ;\n\t\t\t}\n\t\t\tthis.relData = relData;\n\t\t\tisReady = true;\n\t\t\tnotifyAll();\n\t\t}\n\t\t@Override\n\t\tpublic String getResult() {\n\t\t\twhile(!isReady) {\n\t\t\t\ttry {\n\t\t\t\t\twait();\n\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn relData.getResult();\n\t\t}\n\t}\n```\nRelData定义\n``` java\n\tpublic static class RelData implements Data {\n\t\tprivate String result;\n\t\t\n\t\tpublic final void setResult(String result) {                                          \n\t\t\tthis.result = result;\n\t\t}\n\n\t\tpublic RelData(String request) {\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tfor(int i = 0; i < 3; i++) {\n\t\t\t\tsb.append(request);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tThread.sleep(500);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tresult = sb.toString();\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic String getResult() {\n\t\t\treturn result;\n\t\t}\n\t}\n```\nClient定义\n``` java\n\tpublic static class Client {\n\t\tpublic Data request(String request) {\n\t\t\tfinal FutureData futureData = new FutureData();\n\t\t\tnew Thread() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tRelData relData = new RelData(request);\n\t\t\t\t\tfutureData.setRelData(relData);\n\t\t\t\t};\n\t\t\t}.start();\n\t\t\treturn futureData;\n\t\t}\n\t}\n```\nMain\n``` java\n\tpublic static void main(String[] args) throws InterruptedException {\n\t\tClient client = new Client();\n\t\tData data = client.request(\"name\");\n\t\tSystem.out.println(\"request finsh\");\n\t\tThread.sleep(2000);\n\t\tSystem.out.println(\"data : \" + data.getResult());\n\t}\n```\n输出结果 ：\n``` java\nrequest finsh\ndata : namenamename\n```\n\n### JDK中的Future模式\n\n下面我们看下Future的源码架构\n``` java\n\tpublic interface RunnableFuture<V> extends Runnable, Future<V> {}\n\tpublic class FutureTask<V> implements RunnableFuture<V> {\n\t\t//取消任务\n\t\tpublic boolean cancel(boolean mayInterruptIfRunning) {}\n\t\t//是否已经取消\n\t\tpublic boolean isCancelled() {}\n\t\t//是否已经完成\n\t\tpublic boolean isDone() {}\n\t\t//返回取得对象\n\t\tpublic V get() throws InterruptedException, ExecutionException {}\n\t\t//返回取得对象，设置超时时间\n\t\tpublic V get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {}\n\t}\n\tpublic interface Callable<V> {\n\t\tV call() throws Exception;\n\t}\n```\nCallable接口中只有一个call(),它会返回需要构造的实际数据\n``` java\n\tpublic class TestFuture {\n\t\tpublic static class RelData implements Callable<String>{\n\t\t\tprivate String para;\n\t\t\t\n\t\t\tpublic RelData(String para) {\n\t\t\t\tsuper();\n\t\t\t\tthis.para = para;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String call() throws Exception {\n\t\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\t\tfor(int i = 0; i < 3; i++) {\n\t\t\t\t\tsb.append(para);\n\t\t\t\t}\n\t\t\t\tThread.sleep(500);\n\t\t\t\treturn sb.toString();\n\t\t\t}\n\t\t}\n\t\tpublic static void main(String[] args) throws InterruptedException, ExecutionException {\n\t\t\tExecutorService es = Executors.newCachedThreadPool();\n\t\t\tFutureTask<String> future = new FutureTask<>(new RelData(\"hello\"));\n\t\t\tes.execute(future);\n\t\t\tSystem.out.println(\"request finsh\");\n\t\t\tThread.sleep(2000);\n\t\t\tSystem.out.println(future.get());\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\nrequest finsh\nhellohellohello\n```\n\n","source":"_posts/intercurrent_pattern_future.md","raw":"---\ntitle: 并发编程（二十二）Future模式\ndate: 2016-08-04 20:40:50\ntags:\n\t- 并发编程\n---\nFuture模式的核心就是程序的异步。所谓程序的异步就是不再等待执行结果，而是开一个线程去执行并获得结果，而调用线程则继续向下执行\nFuture模式的角色组成 \n- Main ： 系统启动，调用Client发出请求\n- Client ：返回Data对象，立即返回FutureData对象，并开启线程装配RelData\n- Data ：返回数据的接口\n- FutureData ： Future数据，构造速度快，但是虚拟数据，需要装配RelData\n- RelDate ：真实数据，构造速度慢\n\n<!--more-->\n### 代码实现\n\nData接口定义\n``` java\n\tpublic static interface Data {\n\t\tpublic String getResult();\n\t}\n```\nFutureData定义\n``` java\n\tpublic static class FutureData implements Data {\n\t\tprivate RelData relData;\n\t\tprivate boolean isReady = false;\n\t\t\n\t\tpublic synchronized final void setRelData(RelData relData) {                          \n\t\t\tif(isReady) {\n\t\t\t\treturn ;\n\t\t\t}\n\t\t\tthis.relData = relData;\n\t\t\tisReady = true;\n\t\t\tnotifyAll();\n\t\t}\n\t\t@Override\n\t\tpublic String getResult() {\n\t\t\twhile(!isReady) {\n\t\t\t\ttry {\n\t\t\t\t\twait();\n\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn relData.getResult();\n\t\t}\n\t}\n```\nRelData定义\n``` java\n\tpublic static class RelData implements Data {\n\t\tprivate String result;\n\t\t\n\t\tpublic final void setResult(String result) {                                          \n\t\t\tthis.result = result;\n\t\t}\n\n\t\tpublic RelData(String request) {\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tfor(int i = 0; i < 3; i++) {\n\t\t\t\tsb.append(request);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tThread.sleep(500);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tresult = sb.toString();\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic String getResult() {\n\t\t\treturn result;\n\t\t}\n\t}\n```\nClient定义\n``` java\n\tpublic static class Client {\n\t\tpublic Data request(String request) {\n\t\t\tfinal FutureData futureData = new FutureData();\n\t\t\tnew Thread() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tRelData relData = new RelData(request);\n\t\t\t\t\tfutureData.setRelData(relData);\n\t\t\t\t};\n\t\t\t}.start();\n\t\t\treturn futureData;\n\t\t}\n\t}\n```\nMain\n``` java\n\tpublic static void main(String[] args) throws InterruptedException {\n\t\tClient client = new Client();\n\t\tData data = client.request(\"name\");\n\t\tSystem.out.println(\"request finsh\");\n\t\tThread.sleep(2000);\n\t\tSystem.out.println(\"data : \" + data.getResult());\n\t}\n```\n输出结果 ：\n``` java\nrequest finsh\ndata : namenamename\n```\n\n### JDK中的Future模式\n\n下面我们看下Future的源码架构\n``` java\n\tpublic interface RunnableFuture<V> extends Runnable, Future<V> {}\n\tpublic class FutureTask<V> implements RunnableFuture<V> {\n\t\t//取消任务\n\t\tpublic boolean cancel(boolean mayInterruptIfRunning) {}\n\t\t//是否已经取消\n\t\tpublic boolean isCancelled() {}\n\t\t//是否已经完成\n\t\tpublic boolean isDone() {}\n\t\t//返回取得对象\n\t\tpublic V get() throws InterruptedException, ExecutionException {}\n\t\t//返回取得对象，设置超时时间\n\t\tpublic V get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {}\n\t}\n\tpublic interface Callable<V> {\n\t\tV call() throws Exception;\n\t}\n```\nCallable接口中只有一个call(),它会返回需要构造的实际数据\n``` java\n\tpublic class TestFuture {\n\t\tpublic static class RelData implements Callable<String>{\n\t\t\tprivate String para;\n\t\t\t\n\t\t\tpublic RelData(String para) {\n\t\t\t\tsuper();\n\t\t\t\tthis.para = para;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String call() throws Exception {\n\t\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\t\tfor(int i = 0; i < 3; i++) {\n\t\t\t\t\tsb.append(para);\n\t\t\t\t}\n\t\t\t\tThread.sleep(500);\n\t\t\t\treturn sb.toString();\n\t\t\t}\n\t\t}\n\t\tpublic static void main(String[] args) throws InterruptedException, ExecutionException {\n\t\t\tExecutorService es = Executors.newCachedThreadPool();\n\t\t\tFutureTask<String> future = new FutureTask<>(new RelData(\"hello\"));\n\t\t\tes.execute(future);\n\t\t\tSystem.out.println(\"request finsh\");\n\t\t\tThread.sleep(2000);\n\t\t\tSystem.out.println(future.get());\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\nrequest finsh\nhellohellohello\n```\n\n","slug":"intercurrent_pattern_future","published":1,"updated":"2017-03-08T11:06:21.520Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5d2001mqoq107iyfmk9","content":"<p>Future模式的核心就是程序的异步。所谓程序的异步就是不再等待执行结果，而是开一个线程去执行并获得结果，而调用线程则继续向下执行<br>Future模式的角色组成 </p>\n<ul>\n<li>Main ： 系统启动，调用Client发出请求</li>\n<li>Client ：返回Data对象，立即返回FutureData对象，并开启线程装配RelData</li>\n<li>Data ：返回数据的接口</li>\n<li>FutureData ： Future数据，构造速度快，但是虚拟数据，需要装配RelData</li>\n<li>RelDate ：真实数据，构造速度慢</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p>Data接口定义<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Data</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getResult</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>FutureData定义<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FutureData</span> <span class=\"keyword\">implements</span> <span class=\"title\">Data</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> RelData relData;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isReady = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setRelData</span><span class=\"params\">(RelData relData)</span> </span>&#123;                          </div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(isReady) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> ;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.relData = relData;</div><div class=\"line\">\t\tisReady = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\tnotifyAll();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getResult</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(!isReady) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\twait();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> relData.getResult();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>RelData定义<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RelData</span> <span class=\"keyword\">implements</span> <span class=\"title\">Data</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String result;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setResult</span><span class=\"params\">(String result)</span> </span>&#123;                                          </div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.result = result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RelData</span><span class=\"params\">(String request)</span> </span>&#123;</div><div class=\"line\">\t\tStringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</div><div class=\"line\">\t\t\tsb.append(request);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tThread.sleep(<span class=\"number\">500</span>);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tresult = sb.toString();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getResult</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Client定义<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Data <span class=\"title\">request</span><span class=\"params\">(String request)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">final</span> FutureData futureData = <span class=\"keyword\">new</span> FutureData();</div><div class=\"line\">\t\t<span class=\"keyword\">new</span> Thread() &#123;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\tRelData relData = <span class=\"keyword\">new</span> RelData(request);</div><div class=\"line\">\t\t\t\tfutureData.setRelData(relData);</div><div class=\"line\">\t\t\t&#125;;</div><div class=\"line\">\t\t&#125;.start();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> futureData;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Main<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">\tClient client = <span class=\"keyword\">new</span> Client();</div><div class=\"line\">\tData data = client.request(<span class=\"string\">\"name\"</span>);</div><div class=\"line\">\tSystem.out.println(<span class=\"string\">\"request finsh\"</span>);</div><div class=\"line\">\tThread.sleep(<span class=\"number\">2000</span>);</div><div class=\"line\">\tSystem.out.println(<span class=\"string\">\"data : \"</span> + data.getResult());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">request finsh</div><div class=\"line\">data : namenamename</div></pre></td></tr></table></figure></p>\n<h3 id=\"JDK中的Future模式\"><a href=\"#JDK中的Future模式\" class=\"headerlink\" title=\"JDK中的Future模式\"></a>JDK中的Future模式</h3><p>下面我们看下Future的源码架构<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">RunnableFuture</span>&lt;<span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Runnable</span>, <span class=\"title\">Future</span>&lt;<span class=\"title\">V</span>&gt; </span>&#123;&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FutureTask</span>&lt;<span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">RunnableFuture</span>&lt;<span class=\"title\">V</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//取消任务</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">cancel</span><span class=\"params\">(<span class=\"keyword\">boolean</span> mayInterruptIfRunning)</span> </span>&#123;&#125;</div><div class=\"line\">\t<span class=\"comment\">//是否已经取消</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isCancelled</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\">\t<span class=\"comment\">//是否已经完成</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isDone</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\">\t<span class=\"comment\">//返回取得对象</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">get</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException, ExecutionException </span>&#123;&#125;</div><div class=\"line\">\t<span class=\"comment\">//返回取得对象，设置超时时间</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">long</span> timeout, TimeUnit unit)</span> <span class=\"keyword\">throws</span> InterruptedException, ExecutionException, TimeoutException </span>&#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Callable</span>&lt;<span class=\"title\">V</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"function\">V <span class=\"title\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Callable接口中只有一个call(),它会返回需要构造的实际数据<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestFuture</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RelData</span> <span class=\"keyword\">implements</span> <span class=\"title\">Callable</span>&lt;<span class=\"title\">String</span>&gt;</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> String para;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RelData</span><span class=\"params\">(String para)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.para = para;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\t\tStringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</div><div class=\"line\">\t\t\t\tsb.append(para);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tThread.sleep(<span class=\"number\">500</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> sb.toString();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException, ExecutionException </span>&#123;</div><div class=\"line\">\t\tExecutorService es = Executors.newCachedThreadPool();</div><div class=\"line\">\t\tFutureTask&lt;String&gt; future = <span class=\"keyword\">new</span> FutureTask&lt;&gt;(<span class=\"keyword\">new</span> RelData(<span class=\"string\">\"hello\"</span>));</div><div class=\"line\">\t\tes.execute(future);</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"request finsh\"</span>);</div><div class=\"line\">\t\tThread.sleep(<span class=\"number\">2000</span>);</div><div class=\"line\">\t\tSystem.out.println(future.get());</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">request finsh</div><div class=\"line\">hellohellohello</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>Future模式的核心就是程序的异步。所谓程序的异步就是不再等待执行结果，而是开一个线程去执行并获得结果，而调用线程则继续向下执行<br>Future模式的角色组成 </p>\n<ul>\n<li>Main ： 系统启动，调用Client发出请求</li>\n<li>Client ：返回Data对象，立即返回FutureData对象，并开启线程装配RelData</li>\n<li>Data ：返回数据的接口</li>\n<li>FutureData ： Future数据，构造速度快，但是虚拟数据，需要装配RelData</li>\n<li>RelDate ：真实数据，构造速度慢</li>\n</ul>","more":"<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p>Data接口定义<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Data</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getResult</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>FutureData定义<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FutureData</span> <span class=\"keyword\">implements</span> <span class=\"title\">Data</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> RelData relData;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isReady = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setRelData</span><span class=\"params\">(RelData relData)</span> </span>&#123;                          </div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(isReady) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> ;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.relData = relData;</div><div class=\"line\">\t\tisReady = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\tnotifyAll();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getResult</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(!isReady) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\twait();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> relData.getResult();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>RelData定义<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RelData</span> <span class=\"keyword\">implements</span> <span class=\"title\">Data</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String result;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setResult</span><span class=\"params\">(String result)</span> </span>&#123;                                          </div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.result = result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RelData</span><span class=\"params\">(String request)</span> </span>&#123;</div><div class=\"line\">\t\tStringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</div><div class=\"line\">\t\t\tsb.append(request);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tThread.sleep(<span class=\"number\">500</span>);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tresult = sb.toString();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getResult</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Client定义<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Data <span class=\"title\">request</span><span class=\"params\">(String request)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">final</span> FutureData futureData = <span class=\"keyword\">new</span> FutureData();</div><div class=\"line\">\t\t<span class=\"keyword\">new</span> Thread() &#123;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\tRelData relData = <span class=\"keyword\">new</span> RelData(request);</div><div class=\"line\">\t\t\t\tfutureData.setRelData(relData);</div><div class=\"line\">\t\t\t&#125;;</div><div class=\"line\">\t\t&#125;.start();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> futureData;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Main<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">\tClient client = <span class=\"keyword\">new</span> Client();</div><div class=\"line\">\tData data = client.request(<span class=\"string\">\"name\"</span>);</div><div class=\"line\">\tSystem.out.println(<span class=\"string\">\"request finsh\"</span>);</div><div class=\"line\">\tThread.sleep(<span class=\"number\">2000</span>);</div><div class=\"line\">\tSystem.out.println(<span class=\"string\">\"data : \"</span> + data.getResult());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">request finsh</div><div class=\"line\">data : namenamename</div></pre></td></tr></table></figure></p>\n<h3 id=\"JDK中的Future模式\"><a href=\"#JDK中的Future模式\" class=\"headerlink\" title=\"JDK中的Future模式\"></a>JDK中的Future模式</h3><p>下面我们看下Future的源码架构<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">RunnableFuture</span>&lt;<span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Runnable</span>, <span class=\"title\">Future</span>&lt;<span class=\"title\">V</span>&gt; </span>&#123;&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FutureTask</span>&lt;<span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">RunnableFuture</span>&lt;<span class=\"title\">V</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//取消任务</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">cancel</span><span class=\"params\">(<span class=\"keyword\">boolean</span> mayInterruptIfRunning)</span> </span>&#123;&#125;</div><div class=\"line\">\t<span class=\"comment\">//是否已经取消</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isCancelled</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\">\t<span class=\"comment\">//是否已经完成</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isDone</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\">\t<span class=\"comment\">//返回取得对象</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">get</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException, ExecutionException </span>&#123;&#125;</div><div class=\"line\">\t<span class=\"comment\">//返回取得对象，设置超时时间</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">long</span> timeout, TimeUnit unit)</span> <span class=\"keyword\">throws</span> InterruptedException, ExecutionException, TimeoutException </span>&#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Callable</span>&lt;<span class=\"title\">V</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"function\">V <span class=\"title\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Callable接口中只有一个call(),它会返回需要构造的实际数据<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestFuture</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RelData</span> <span class=\"keyword\">implements</span> <span class=\"title\">Callable</span>&lt;<span class=\"title\">String</span>&gt;</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> String para;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RelData</span><span class=\"params\">(String para)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.para = para;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\t\tStringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</div><div class=\"line\">\t\t\t\tsb.append(para);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tThread.sleep(<span class=\"number\">500</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> sb.toString();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException, ExecutionException </span>&#123;</div><div class=\"line\">\t\tExecutorService es = Executors.newCachedThreadPool();</div><div class=\"line\">\t\tFutureTask&lt;String&gt; future = <span class=\"keyword\">new</span> FutureTask&lt;&gt;(<span class=\"keyword\">new</span> RelData(<span class=\"string\">\"hello\"</span>));</div><div class=\"line\">\t\tes.execute(future);</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"request finsh\"</span>);</div><div class=\"line\">\t\tThread.sleep(<span class=\"number\">2000</span>);</div><div class=\"line\">\t\tSystem.out.println(future.get());</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">request finsh</div><div class=\"line\">hellohellohello</div></pre></td></tr></table></figure></p>"},{"title":"并发编程（二十一）生产者-消费者模式","date":"2016-08-03T10:15:10.000Z","_content":"生产者与消费者是一个很典型的多线程问题，下面就看看生产者-消费者模式的基本角色\n- 任务数据 ：生产者和消费者所操作的数据结构\n- 生产者 ：用于提交用户请求，提取用户任务，并装入内存缓冲区\n- 消费者 ：在内存缓冲区中提取并处理任务\n- 内存缓冲区 ：缓存生产者任务，供消费者使用\n- Client ：使用客户端\n\n<!--more-->\n\n下面展示一个实例\n任务数据类型定义 ：\n``` java\n\tpublic static class Data {\n\t\tprivate static int count = 0;\n\t\tprivate int id;\n\t\tpublic Data() {\n\t\t\tid = count++ ;\n\t\t}\n\t\tpublic final int getId() {\n\t\t\treturn id;\n\t\t}\n\t\tpublic final void setId(int id) {\n\t\t\tthis.id = id;\n\t\t}\n\t\t\n\t}\n```\n生产者定义 ：\n``` java\n\tpublic static class Producer implements Runnable {\n\t\tprivate BlockingQueue<Data> bq;\n\t\t\n\t\tpublic Producer(BlockingQueue<Data> bq) {\n\t\t\tsuper();\n\t\t\tthis.bq = bq;\n\t\t}\n\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tRandom r = new Random();\n\t\t\twhile(true) {\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(r.nextInt(1000));\n\t\t\t\t\tData data = new Data();\n\t\t\t\t\tif(!bq.offer(data, 1, TimeUnit.SECONDS)) {\n\t\t\t\t\t\tSystem.out.println(\"produce fail\");\n\t\t\t\t\t}else {\n\t\t\t\t\t\tSystem.out.println(Thread.currentThread().getName() + \n\t\t\t\t\t\t\t\t\" produce \" + data.getId());\n\t\t\t\t\t}\n\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t\tThread.currentThread().interrupt();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n```\n消费者定义 ：\n``` java\n\tpublic static class Consumer implements Runnable {\n\t\tprivate BlockingQueue<Data> bq;\n\t\t\n\t\tpublic Consumer(BlockingQueue<Data> bq) {\n\t\t\tsuper();\n\t\t\tthis.bq = bq;\n\t\t}\n\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tRandom r = new Random();\n\t\t\twhile(true) {\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(r.nextInt(1000));\n\t\t\t\t\tData data = bq.take();\n\t\t\t\t\tif (data != null) {\n\t\t\t\t\t\tSystem.out.println(Thread.currentThread().getName() + \" consume \"\n\t\t\t\t\t\t\t\t+ data.getId());\n\t\t\t\t\t}\n\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n```\nClient :\n``` java\n\tpublic static void main(String[] args) {\n\t\tBlockingQueue<Data> bq = new ArrayBlockingQueue<>(10);\n\t\tExecutorService es = Executors.newCachedThreadPool();\n\t\tfor(int i = 0; i < 5; i++) {\n\t\t\tes.execute(new Producer(bq));\n\t\t\tes.execute(new Consumer(bq));\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\npool-1-thread-3 produce 0\npool-1-thread-7 produce 1\npool-1-thread-3 produce 2\npool-1-thread-7 produce 3\npool-1-thread-8 consume 0\npool-1-thread-2 consume 1\npool-1-thread-7 produce 4\npool-1-thread-6 consume 2\npool-1-thread-6 consume 3\npool-1-thread-3 produce 5\npool-1-thread-1 produce 6\npool-1-thread-3 produce 7\npool-1-thread-2 consume 4\npool-1-thread-5 produce 8\n```\n","source":"_posts/intercurrent_pattern_producter-consumer.md","raw":"---\ntitle: 并发编程（二十一）生产者-消费者模式\ndate: 2016-08-03 18:15:10\ntags:\n\t- 并发编程\n---\n生产者与消费者是一个很典型的多线程问题，下面就看看生产者-消费者模式的基本角色\n- 任务数据 ：生产者和消费者所操作的数据结构\n- 生产者 ：用于提交用户请求，提取用户任务，并装入内存缓冲区\n- 消费者 ：在内存缓冲区中提取并处理任务\n- 内存缓冲区 ：缓存生产者任务，供消费者使用\n- Client ：使用客户端\n\n<!--more-->\n\n下面展示一个实例\n任务数据类型定义 ：\n``` java\n\tpublic static class Data {\n\t\tprivate static int count = 0;\n\t\tprivate int id;\n\t\tpublic Data() {\n\t\t\tid = count++ ;\n\t\t}\n\t\tpublic final int getId() {\n\t\t\treturn id;\n\t\t}\n\t\tpublic final void setId(int id) {\n\t\t\tthis.id = id;\n\t\t}\n\t\t\n\t}\n```\n生产者定义 ：\n``` java\n\tpublic static class Producer implements Runnable {\n\t\tprivate BlockingQueue<Data> bq;\n\t\t\n\t\tpublic Producer(BlockingQueue<Data> bq) {\n\t\t\tsuper();\n\t\t\tthis.bq = bq;\n\t\t}\n\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tRandom r = new Random();\n\t\t\twhile(true) {\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(r.nextInt(1000));\n\t\t\t\t\tData data = new Data();\n\t\t\t\t\tif(!bq.offer(data, 1, TimeUnit.SECONDS)) {\n\t\t\t\t\t\tSystem.out.println(\"produce fail\");\n\t\t\t\t\t}else {\n\t\t\t\t\t\tSystem.out.println(Thread.currentThread().getName() + \n\t\t\t\t\t\t\t\t\" produce \" + data.getId());\n\t\t\t\t\t}\n\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t\tThread.currentThread().interrupt();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n```\n消费者定义 ：\n``` java\n\tpublic static class Consumer implements Runnable {\n\t\tprivate BlockingQueue<Data> bq;\n\t\t\n\t\tpublic Consumer(BlockingQueue<Data> bq) {\n\t\t\tsuper();\n\t\t\tthis.bq = bq;\n\t\t}\n\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tRandom r = new Random();\n\t\t\twhile(true) {\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(r.nextInt(1000));\n\t\t\t\t\tData data = bq.take();\n\t\t\t\t\tif (data != null) {\n\t\t\t\t\t\tSystem.out.println(Thread.currentThread().getName() + \" consume \"\n\t\t\t\t\t\t\t\t+ data.getId());\n\t\t\t\t\t}\n\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n```\nClient :\n``` java\n\tpublic static void main(String[] args) {\n\t\tBlockingQueue<Data> bq = new ArrayBlockingQueue<>(10);\n\t\tExecutorService es = Executors.newCachedThreadPool();\n\t\tfor(int i = 0; i < 5; i++) {\n\t\t\tes.execute(new Producer(bq));\n\t\t\tes.execute(new Consumer(bq));\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\npool-1-thread-3 produce 0\npool-1-thread-7 produce 1\npool-1-thread-3 produce 2\npool-1-thread-7 produce 3\npool-1-thread-8 consume 0\npool-1-thread-2 consume 1\npool-1-thread-7 produce 4\npool-1-thread-6 consume 2\npool-1-thread-6 consume 3\npool-1-thread-3 produce 5\npool-1-thread-1 produce 6\npool-1-thread-3 produce 7\npool-1-thread-2 consume 4\npool-1-thread-5 produce 8\n```\n","slug":"intercurrent_pattern_producter-consumer","published":1,"updated":"2017-03-08T11:06:16.460Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5d6001oqoq19kl0xfpo","content":"<p>生产者与消费者是一个很典型的多线程问题，下面就看看生产者-消费者模式的基本角色</p>\n<ul>\n<li>任务数据 ：生产者和消费者所操作的数据结构</li>\n<li>生产者 ：用于提交用户请求，提取用户任务，并装入内存缓冲区</li>\n<li>消费者 ：在内存缓冲区中提取并处理任务</li>\n<li>内存缓冲区 ：缓存生产者任务，供消费者使用</li>\n<li>Client ：使用客户端</li>\n</ul>\n<a id=\"more\"></a>\n<p>下面展示一个实例<br>任务数据类型定义 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Data</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Data</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tid = count++ ;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> id;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>生产者定义 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> BlockingQueue&lt;Data&gt; bq;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Producer</span><span class=\"params\">(BlockingQueue&lt;Data&gt; bq)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.bq = bq;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tRandom r = <span class=\"keyword\">new</span> Random();</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tThread.sleep(r.nextInt(<span class=\"number\">1000</span>));</div><div class=\"line\">\t\t\t\tData data = <span class=\"keyword\">new</span> Data();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(!bq.offer(data, <span class=\"number\">1</span>, TimeUnit.SECONDS)) &#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.println(<span class=\"string\">\"produce fail\"</span>);</div><div class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.println(Thread.currentThread().getName() + </div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"string\">\" produce \"</span> + data.getId());</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\tThread.currentThread().interrupt();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>消费者定义 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> BlockingQueue&lt;Data&gt; bq;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Consumer</span><span class=\"params\">(BlockingQueue&lt;Data&gt; bq)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.bq = bq;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tRandom r = <span class=\"keyword\">new</span> Random();</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tThread.sleep(r.nextInt(<span class=\"number\">1000</span>));</div><div class=\"line\">\t\t\t\tData data = bq.take();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (data != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\" consume \"</span></div><div class=\"line\">\t\t\t\t\t\t\t+ data.getId());</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Client :<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\tBlockingQueue&lt;Data&gt; bq = <span class=\"keyword\">new</span> ArrayBlockingQueue&lt;&gt;(<span class=\"number\">10</span>);</div><div class=\"line\">\tExecutorService es = Executors.newCachedThreadPool();</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">\t\tes.execute(<span class=\"keyword\">new</span> Producer(bq));</div><div class=\"line\">\t\tes.execute(<span class=\"keyword\">new</span> Consumer(bq));</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">3</span> produce <span class=\"number\">0</span></div><div class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">7</span> produce <span class=\"number\">1</span></div><div class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">3</span> produce <span class=\"number\">2</span></div><div class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">7</span> produce <span class=\"number\">3</span></div><div class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">8</span> consume <span class=\"number\">0</span></div><div class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">2</span> consume <span class=\"number\">1</span></div><div class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">7</span> produce <span class=\"number\">4</span></div><div class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">6</span> consume <span class=\"number\">2</span></div><div class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">6</span> consume <span class=\"number\">3</span></div><div class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">3</span> produce <span class=\"number\">5</span></div><div class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span> produce <span class=\"number\">6</span></div><div class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">3</span> produce <span class=\"number\">7</span></div><div class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">2</span> consume <span class=\"number\">4</span></div><div class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">5</span> produce <span class=\"number\">8</span></div></pre></td></tr></table></figure></p>\n","excerpt":"<p>生产者与消费者是一个很典型的多线程问题，下面就看看生产者-消费者模式的基本角色</p>\n<ul>\n<li>任务数据 ：生产者和消费者所操作的数据结构</li>\n<li>生产者 ：用于提交用户请求，提取用户任务，并装入内存缓冲区</li>\n<li>消费者 ：在内存缓冲区中提取并处理任务</li>\n<li>内存缓冲区 ：缓存生产者任务，供消费者使用</li>\n<li>Client ：使用客户端</li>\n</ul>","more":"<p>下面展示一个实例<br>任务数据类型定义 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Data</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Data</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tid = count++ ;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> id;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>生产者定义 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> BlockingQueue&lt;Data&gt; bq;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Producer</span><span class=\"params\">(BlockingQueue&lt;Data&gt; bq)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.bq = bq;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tRandom r = <span class=\"keyword\">new</span> Random();</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tThread.sleep(r.nextInt(<span class=\"number\">1000</span>));</div><div class=\"line\">\t\t\t\tData data = <span class=\"keyword\">new</span> Data();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(!bq.offer(data, <span class=\"number\">1</span>, TimeUnit.SECONDS)) &#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.println(<span class=\"string\">\"produce fail\"</span>);</div><div class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.println(Thread.currentThread().getName() + </div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"string\">\" produce \"</span> + data.getId());</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\tThread.currentThread().interrupt();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>消费者定义 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> BlockingQueue&lt;Data&gt; bq;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Consumer</span><span class=\"params\">(BlockingQueue&lt;Data&gt; bq)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.bq = bq;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tRandom r = <span class=\"keyword\">new</span> Random();</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tThread.sleep(r.nextInt(<span class=\"number\">1000</span>));</div><div class=\"line\">\t\t\t\tData data = bq.take();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (data != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\" consume \"</span></div><div class=\"line\">\t\t\t\t\t\t\t+ data.getId());</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Client :<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\tBlockingQueue&lt;Data&gt; bq = <span class=\"keyword\">new</span> ArrayBlockingQueue&lt;&gt;(<span class=\"number\">10</span>);</div><div class=\"line\">\tExecutorService es = Executors.newCachedThreadPool();</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">\t\tes.execute(<span class=\"keyword\">new</span> Producer(bq));</div><div class=\"line\">\t\tes.execute(<span class=\"keyword\">new</span> Consumer(bq));</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">3</span> produce <span class=\"number\">0</span></div><div class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">7</span> produce <span class=\"number\">1</span></div><div class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">3</span> produce <span class=\"number\">2</span></div><div class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">7</span> produce <span class=\"number\">3</span></div><div class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">8</span> consume <span class=\"number\">0</span></div><div class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">2</span> consume <span class=\"number\">1</span></div><div class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">7</span> produce <span class=\"number\">4</span></div><div class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">6</span> consume <span class=\"number\">2</span></div><div class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">6</span> consume <span class=\"number\">3</span></div><div class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">3</span> produce <span class=\"number\">5</span></div><div class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span> produce <span class=\"number\">6</span></div><div class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">3</span> produce <span class=\"number\">7</span></div><div class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">2</span> consume <span class=\"number\">4</span></div><div class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">5</span> produce <span class=\"number\">8</span></div></pre></td></tr></table></figure></p>"},{"title":"并发编程（十二）Semaphore与CountDownLatch","date":"2016-07-17T08:23:17.000Z","_content":"### Semaphore（信号量）\n\n通过前面，我们知道无论是ReentrantLock还是Synchronized，每一次都只允许一个线程访问一个资源，而有时候我们需要多个线程访问同一资源，这时候我们就可以使用信号量。\n``` java\n\tpublic Semaphore(int permits)\n\tpublic Semaphore(int permits, boolean fair)\n```\n\n<!--more-->\n\n通过上面的构造函数我们知道每次构造一个信号量必须指明其大小，也就是最多几个线程同时访问一个资源\n关于Semaphore常用函数\n``` java\n\tpublic void acquire() throws InterruptedException\n\tpublic void acquireUninterruptibly()\n\tpublic boolean tryAcquire()\n\tpublic boolean tryAcquire(long timeout, TimeUnit unit)\n\tpublic void release()\n```\n命名和前面重入锁差不多。acquire()获取准入，失败就线程等待。acquireUninterruptibly()不响应中断。tryAcquire()尝试获取准入，失败返回false。tryAcquire(long timeout, TimeUnit unit)，在规定时间内，尝试获取准入，失败就再次尝试直至时间结束且还未成功则返回false\n\n下面演示一个简单的示例 ：\n``` java\n\tpublic class TestSemaphone implements Runnable {\n\t\tprivate final Semaphore semaphore = new Semaphore(3);\n\t\t\n\t\t@Override\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tsemaphore.acquire();\n\t\t\t\tThread.sleep(2000);\n\t\t\t\tSystem.out.println(System.currentTimeMillis()/1000\n\t\t\t\t\t\t+ \" \" + Thread.currentThread().getName());            \n\t\t\t\tsemaphore.release();\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) {\n\t\t\tTestSemaphone test = new TestSemaphone();\n\t\t\tfor(int i = 0; i < 20; i++) {\n\t\t\t\tnew Thread(test).start();\n\t\t\t} \n\t\t}\n\t}\n```\n- 输出结果\n``` java\n1469447531 Thread-0\n1469447531 Thread-1\n1469447531 Thread-2\n1469447533 Thread-6\n1469447533 Thread-4\n1469447533 Thread-5\n1469447535 Thread-10\n1469447535 Thread-9\n1469447535 Thread-8\n1469447537 Thread-11\n1469447537 Thread-14\n1469447537 Thread-13\n1469447539 Thread-3\n1469447539 Thread-16\n1469447539 Thread-15\n1469447541 Thread-7\n1469447541 Thread-12\n1469447541 Thread-19\n1469447543 Thread-18\n1469447543 Thread-17\n```\n\n- 注意\n\t- 开启线程的方式要是实现Runnable接口，因为Thread这种方式targer = null\n\t- 多个线程的Runnable对象必须是同一个\n\n### CountDownLatch（倒计时器）\n\n与上面的信号量有点相似，信号量是指最多有多少个线程访问资源，倒计时器是指最少有多少个线程都满足时，才执行下一步，就像火箭发射一样，只有所有都检查就位时才能发射\nCountDownLatch常用方法\n``` java\n\tpublic void await() throws InterruptedException\n\tpublic boolean await(long timeout, TimeUnit unit)\n\tpublic void countDown()\n\tpublic long getCount()\n```\n- await() : 阻塞式等待\n- await(long timeout, TimeUnit unit) : 过了规定时间，无论是否都准备完毕都继续向下执行\n- countDown() 计数减少一个\n- getCount() 距离最小个数还差多少\n\n下面演示一个简单的示例 ：\n``` java\n\tpublic class TestCountDownLatch implements Runnable {\n\t\tprivate static CountDownLatch cdl = new CountDownLatch(10);\n\t\t@Override\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tThread.sleep(1000 * new Random().nextInt(5));\n\t\t\t\tSystem.out.println(System.currentTimeMillis() /1000 + \" \"            \n\t\t\t\t\t+ Thread.currentThread().getName() + \" complete\");\n\t\t\t\tcdl.countDown();\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) throws InterruptedException {      \n\t\t\tTestCountDownLatch  test = new TestCountDownLatch();\n\t\t\tfor(int i = 0; i < 10; i++) {\n\t\t\t\tnew Thread(test).start();\n\t\t\t}\n\t\t\tcdl.await();\n\t\t\tSystem.out.println(\"fire\");\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\n1469451326 Thread-4 complete\n1469451326 Thread-3 complete\n1469451326 Thread-8 complete\n1469451327 Thread-9 complete\n1469451327 Thread-6 complete\n1469451327 Thread-7 complete\n1469451329 Thread-1 complete\n1469451330 Thread-5 complete\n1469451330 Thread-2 complete\n1469451330 Thread-0 complete\nfire\n```","source":"_posts/intercurrent_semaphore-countdownlatch.md","raw":"---\ntitle: 并发编程（十二）Semaphore与CountDownLatch\ndate: 2016-07-17 16:23:17\ntags:\n\t- 并发编程\n---\n### Semaphore（信号量）\n\n通过前面，我们知道无论是ReentrantLock还是Synchronized，每一次都只允许一个线程访问一个资源，而有时候我们需要多个线程访问同一资源，这时候我们就可以使用信号量。\n``` java\n\tpublic Semaphore(int permits)\n\tpublic Semaphore(int permits, boolean fair)\n```\n\n<!--more-->\n\n通过上面的构造函数我们知道每次构造一个信号量必须指明其大小，也就是最多几个线程同时访问一个资源\n关于Semaphore常用函数\n``` java\n\tpublic void acquire() throws InterruptedException\n\tpublic void acquireUninterruptibly()\n\tpublic boolean tryAcquire()\n\tpublic boolean tryAcquire(long timeout, TimeUnit unit)\n\tpublic void release()\n```\n命名和前面重入锁差不多。acquire()获取准入，失败就线程等待。acquireUninterruptibly()不响应中断。tryAcquire()尝试获取准入，失败返回false。tryAcquire(long timeout, TimeUnit unit)，在规定时间内，尝试获取准入，失败就再次尝试直至时间结束且还未成功则返回false\n\n下面演示一个简单的示例 ：\n``` java\n\tpublic class TestSemaphone implements Runnable {\n\t\tprivate final Semaphore semaphore = new Semaphore(3);\n\t\t\n\t\t@Override\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tsemaphore.acquire();\n\t\t\t\tThread.sleep(2000);\n\t\t\t\tSystem.out.println(System.currentTimeMillis()/1000\n\t\t\t\t\t\t+ \" \" + Thread.currentThread().getName());            \n\t\t\t\tsemaphore.release();\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) {\n\t\t\tTestSemaphone test = new TestSemaphone();\n\t\t\tfor(int i = 0; i < 20; i++) {\n\t\t\t\tnew Thread(test).start();\n\t\t\t} \n\t\t}\n\t}\n```\n- 输出结果\n``` java\n1469447531 Thread-0\n1469447531 Thread-1\n1469447531 Thread-2\n1469447533 Thread-6\n1469447533 Thread-4\n1469447533 Thread-5\n1469447535 Thread-10\n1469447535 Thread-9\n1469447535 Thread-8\n1469447537 Thread-11\n1469447537 Thread-14\n1469447537 Thread-13\n1469447539 Thread-3\n1469447539 Thread-16\n1469447539 Thread-15\n1469447541 Thread-7\n1469447541 Thread-12\n1469447541 Thread-19\n1469447543 Thread-18\n1469447543 Thread-17\n```\n\n- 注意\n\t- 开启线程的方式要是实现Runnable接口，因为Thread这种方式targer = null\n\t- 多个线程的Runnable对象必须是同一个\n\n### CountDownLatch（倒计时器）\n\n与上面的信号量有点相似，信号量是指最多有多少个线程访问资源，倒计时器是指最少有多少个线程都满足时，才执行下一步，就像火箭发射一样，只有所有都检查就位时才能发射\nCountDownLatch常用方法\n``` java\n\tpublic void await() throws InterruptedException\n\tpublic boolean await(long timeout, TimeUnit unit)\n\tpublic void countDown()\n\tpublic long getCount()\n```\n- await() : 阻塞式等待\n- await(long timeout, TimeUnit unit) : 过了规定时间，无论是否都准备完毕都继续向下执行\n- countDown() 计数减少一个\n- getCount() 距离最小个数还差多少\n\n下面演示一个简单的示例 ：\n``` java\n\tpublic class TestCountDownLatch implements Runnable {\n\t\tprivate static CountDownLatch cdl = new CountDownLatch(10);\n\t\t@Override\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tThread.sleep(1000 * new Random().nextInt(5));\n\t\t\t\tSystem.out.println(System.currentTimeMillis() /1000 + \" \"            \n\t\t\t\t\t+ Thread.currentThread().getName() + \" complete\");\n\t\t\t\tcdl.countDown();\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) throws InterruptedException {      \n\t\t\tTestCountDownLatch  test = new TestCountDownLatch();\n\t\t\tfor(int i = 0; i < 10; i++) {\n\t\t\t\tnew Thread(test).start();\n\t\t\t}\n\t\t\tcdl.await();\n\t\t\tSystem.out.println(\"fire\");\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\n1469451326 Thread-4 complete\n1469451326 Thread-3 complete\n1469451326 Thread-8 complete\n1469451327 Thread-9 complete\n1469451327 Thread-6 complete\n1469451327 Thread-7 complete\n1469451329 Thread-1 complete\n1469451330 Thread-5 complete\n1469451330 Thread-2 complete\n1469451330 Thread-0 complete\nfire\n```","slug":"intercurrent_semaphore-countdownlatch","published":1,"updated":"2017-03-08T11:02:41.665Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5d9001rqoq1qdam2as6","content":"<h3 id=\"Semaphore（信号量）\"><a href=\"#Semaphore（信号量）\" class=\"headerlink\" title=\"Semaphore（信号量）\"></a>Semaphore（信号量）</h3><p>通过前面，我们知道无论是ReentrantLock还是Synchronized，每一次都只允许一个线程访问一个资源，而有时候我们需要多个线程访问同一资源，这时候我们就可以使用信号量。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Semaphore</span><span class=\"params\">(<span class=\"keyword\">int</span> permits)</span></span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"title\">Semaphore</span><span class=\"params\">(<span class=\"keyword\">int</span> permits, <span class=\"keyword\">boolean</span> fair)</span></div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>通过上面的构造函数我们知道每次构造一个信号量必须指明其大小，也就是最多几个线程同时访问一个资源<br>关于Semaphore常用函数<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">acquire</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">acquireUninterruptibly</span><span class=\"params\">()</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryAcquire</span><span class=\"params\">()</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryAcquire</span><span class=\"params\">(<span class=\"keyword\">long</span> timeout, TimeUnit unit)</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">release</span><span class=\"params\">()</span></div></pre></td></tr></table></figure></p>\n<p>命名和前面重入锁差不多。acquire()获取准入，失败就线程等待。acquireUninterruptibly()不响应中断。tryAcquire()尝试获取准入，失败返回false。tryAcquire(long timeout, TimeUnit unit)，在规定时间内，尝试获取准入，失败就再次尝试直至时间结束且还未成功则返回false</p>\n<p>下面演示一个简单的示例 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSemaphone</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Semaphore semaphore = <span class=\"keyword\">new</span> Semaphore(<span class=\"number\">3</span>);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tsemaphore.acquire();</div><div class=\"line\">\t\t\tThread.sleep(<span class=\"number\">2000</span>);</div><div class=\"line\">\t\t\tSystem.out.println(System.currentTimeMillis()/<span class=\"number\">1000</span></div><div class=\"line\">\t\t\t\t\t+ <span class=\"string\">\" \"</span> + Thread.currentThread().getName());            </div><div class=\"line\">\t\t\tsemaphore.release();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tTestSemaphone test = <span class=\"keyword\">new</span> TestSemaphone();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">new</span> Thread(test).start();</div><div class=\"line\">\t\t&#125; </div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li><p>输出结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1469447531</span> Thread-<span class=\"number\">0</span></div><div class=\"line\"><span class=\"number\">1469447531</span> Thread-<span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">1469447531</span> Thread-<span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">1469447533</span> Thread-<span class=\"number\">6</span></div><div class=\"line\"><span class=\"number\">1469447533</span> Thread-<span class=\"number\">4</span></div><div class=\"line\"><span class=\"number\">1469447533</span> Thread-<span class=\"number\">5</span></div><div class=\"line\"><span class=\"number\">1469447535</span> Thread-<span class=\"number\">10</span></div><div class=\"line\"><span class=\"number\">1469447535</span> Thread-<span class=\"number\">9</span></div><div class=\"line\"><span class=\"number\">1469447535</span> Thread-<span class=\"number\">8</span></div><div class=\"line\"><span class=\"number\">1469447537</span> Thread-<span class=\"number\">11</span></div><div class=\"line\"><span class=\"number\">1469447537</span> Thread-<span class=\"number\">14</span></div><div class=\"line\"><span class=\"number\">1469447537</span> Thread-<span class=\"number\">13</span></div><div class=\"line\"><span class=\"number\">1469447539</span> Thread-<span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">1469447539</span> Thread-<span class=\"number\">16</span></div><div class=\"line\"><span class=\"number\">1469447539</span> Thread-<span class=\"number\">15</span></div><div class=\"line\"><span class=\"number\">1469447541</span> Thread-<span class=\"number\">7</span></div><div class=\"line\"><span class=\"number\">1469447541</span> Thread-<span class=\"number\">12</span></div><div class=\"line\"><span class=\"number\">1469447541</span> Thread-<span class=\"number\">19</span></div><div class=\"line\"><span class=\"number\">1469447543</span> Thread-<span class=\"number\">18</span></div><div class=\"line\"><span class=\"number\">1469447543</span> Thread-<span class=\"number\">17</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>注意</p>\n<ul>\n<li>开启线程的方式要是实现Runnable接口，因为Thread这种方式targer = null</li>\n<li>多个线程的Runnable对象必须是同一个</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"CountDownLatch（倒计时器）\"><a href=\"#CountDownLatch（倒计时器）\" class=\"headerlink\" title=\"CountDownLatch（倒计时器）\"></a>CountDownLatch（倒计时器）</h3><p>与上面的信号量有点相似，信号量是指最多有多少个线程访问资源，倒计时器是指最少有多少个线程都满足时，才执行下一步，就像火箭发射一样，只有所有都检查就位时才能发射<br>CountDownLatch常用方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">await</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">await</span><span class=\"params\">(<span class=\"keyword\">long</span> timeout, TimeUnit unit)</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">countDown</span><span class=\"params\">()</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">getCount</span><span class=\"params\">()</span></div></pre></td></tr></table></figure></p>\n<ul>\n<li>await() : 阻塞式等待</li>\n<li>await(long timeout, TimeUnit unit) : 过了规定时间，无论是否都准备完毕都继续向下执行</li>\n<li>countDown() 计数减少一个</li>\n<li>getCount() 距离最小个数还差多少</li>\n</ul>\n<p>下面演示一个简单的示例 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestCountDownLatch</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> CountDownLatch cdl = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">10</span>);</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tThread.sleep(<span class=\"number\">1000</span> * <span class=\"keyword\">new</span> Random().nextInt(<span class=\"number\">5</span>));</div><div class=\"line\">\t\t\tSystem.out.println(System.currentTimeMillis() /<span class=\"number\">1000</span> + <span class=\"string\">\" \"</span>            </div><div class=\"line\">\t\t\t\t+ Thread.currentThread().getName() + <span class=\"string\">\" complete\"</span>);</div><div class=\"line\">\t\t\tcdl.countDown();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;      </div><div class=\"line\">\t\tTestCountDownLatch  test = <span class=\"keyword\">new</span> TestCountDownLatch();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">new</span> Thread(test).start();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tcdl.await();</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"fire\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1469451326</span> Thread-<span class=\"number\">4</span> complete</div><div class=\"line\"><span class=\"number\">1469451326</span> Thread-<span class=\"number\">3</span> complete</div><div class=\"line\"><span class=\"number\">1469451326</span> Thread-<span class=\"number\">8</span> complete</div><div class=\"line\"><span class=\"number\">1469451327</span> Thread-<span class=\"number\">9</span> complete</div><div class=\"line\"><span class=\"number\">1469451327</span> Thread-<span class=\"number\">6</span> complete</div><div class=\"line\"><span class=\"number\">1469451327</span> Thread-<span class=\"number\">7</span> complete</div><div class=\"line\"><span class=\"number\">1469451329</span> Thread-<span class=\"number\">1</span> complete</div><div class=\"line\"><span class=\"number\">1469451330</span> Thread-<span class=\"number\">5</span> complete</div><div class=\"line\"><span class=\"number\">1469451330</span> Thread-<span class=\"number\">2</span> complete</div><div class=\"line\"><span class=\"number\">1469451330</span> Thread-<span class=\"number\">0</span> complete</div><div class=\"line\">fire</div></pre></td></tr></table></figure></p>\n","excerpt":"<h3 id=\"Semaphore（信号量）\"><a href=\"#Semaphore（信号量）\" class=\"headerlink\" title=\"Semaphore（信号量）\"></a>Semaphore（信号量）</h3><p>通过前面，我们知道无论是ReentrantLock还是Synchronized，每一次都只允许一个线程访问一个资源，而有时候我们需要多个线程访问同一资源，这时候我们就可以使用信号量。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Semaphore</span><span class=\"params\">(<span class=\"keyword\">int</span> permits)</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"title\">Semaphore</span><span class=\"params\">(<span class=\"keyword\">int</span> permits, <span class=\"keyword\">boolean</span> fair)</span></span></div></pre></td></tr></table></figure></p>","more":"<p>通过上面的构造函数我们知道每次构造一个信号量必须指明其大小，也就是最多几个线程同时访问一个资源<br>关于Semaphore常用函数<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">acquire</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">acquireUninterruptibly</span><span class=\"params\">()</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryAcquire</span><span class=\"params\">()</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryAcquire</span><span class=\"params\">(<span class=\"keyword\">long</span> timeout, TimeUnit unit)</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">release</span><span class=\"params\">()</span></span></div></pre></td></tr></table></figure></p>\n<p>命名和前面重入锁差不多。acquire()获取准入，失败就线程等待。acquireUninterruptibly()不响应中断。tryAcquire()尝试获取准入，失败返回false。tryAcquire(long timeout, TimeUnit unit)，在规定时间内，尝试获取准入，失败就再次尝试直至时间结束且还未成功则返回false</p>\n<p>下面演示一个简单的示例 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSemaphone</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Semaphore semaphore = <span class=\"keyword\">new</span> Semaphore(<span class=\"number\">3</span>);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tsemaphore.acquire();</div><div class=\"line\">\t\t\tThread.sleep(<span class=\"number\">2000</span>);</div><div class=\"line\">\t\t\tSystem.out.println(System.currentTimeMillis()/<span class=\"number\">1000</span></div><div class=\"line\">\t\t\t\t\t+ <span class=\"string\">\" \"</span> + Thread.currentThread().getName());            </div><div class=\"line\">\t\t\tsemaphore.release();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tTestSemaphone test = <span class=\"keyword\">new</span> TestSemaphone();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">new</span> Thread(test).start();</div><div class=\"line\">\t\t&#125; </div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li><p>输出结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1469447531</span> Thread-<span class=\"number\">0</span></div><div class=\"line\"><span class=\"number\">1469447531</span> Thread-<span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">1469447531</span> Thread-<span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">1469447533</span> Thread-<span class=\"number\">6</span></div><div class=\"line\"><span class=\"number\">1469447533</span> Thread-<span class=\"number\">4</span></div><div class=\"line\"><span class=\"number\">1469447533</span> Thread-<span class=\"number\">5</span></div><div class=\"line\"><span class=\"number\">1469447535</span> Thread-<span class=\"number\">10</span></div><div class=\"line\"><span class=\"number\">1469447535</span> Thread-<span class=\"number\">9</span></div><div class=\"line\"><span class=\"number\">1469447535</span> Thread-<span class=\"number\">8</span></div><div class=\"line\"><span class=\"number\">1469447537</span> Thread-<span class=\"number\">11</span></div><div class=\"line\"><span class=\"number\">1469447537</span> Thread-<span class=\"number\">14</span></div><div class=\"line\"><span class=\"number\">1469447537</span> Thread-<span class=\"number\">13</span></div><div class=\"line\"><span class=\"number\">1469447539</span> Thread-<span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">1469447539</span> Thread-<span class=\"number\">16</span></div><div class=\"line\"><span class=\"number\">1469447539</span> Thread-<span class=\"number\">15</span></div><div class=\"line\"><span class=\"number\">1469447541</span> Thread-<span class=\"number\">7</span></div><div class=\"line\"><span class=\"number\">1469447541</span> Thread-<span class=\"number\">12</span></div><div class=\"line\"><span class=\"number\">1469447541</span> Thread-<span class=\"number\">19</span></div><div class=\"line\"><span class=\"number\">1469447543</span> Thread-<span class=\"number\">18</span></div><div class=\"line\"><span class=\"number\">1469447543</span> Thread-<span class=\"number\">17</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>注意</p>\n<ul>\n<li>开启线程的方式要是实现Runnable接口，因为Thread这种方式targer = null</li>\n<li>多个线程的Runnable对象必须是同一个</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"CountDownLatch（倒计时器）\"><a href=\"#CountDownLatch（倒计时器）\" class=\"headerlink\" title=\"CountDownLatch（倒计时器）\"></a>CountDownLatch（倒计时器）</h3><p>与上面的信号量有点相似，信号量是指最多有多少个线程访问资源，倒计时器是指最少有多少个线程都满足时，才执行下一步，就像火箭发射一样，只有所有都检查就位时才能发射<br>CountDownLatch常用方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">await</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">await</span><span class=\"params\">(<span class=\"keyword\">long</span> timeout, TimeUnit unit)</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">countDown</span><span class=\"params\">()</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">getCount</span><span class=\"params\">()</span></span></div></pre></td></tr></table></figure></p>\n<ul>\n<li>await() : 阻塞式等待</li>\n<li>await(long timeout, TimeUnit unit) : 过了规定时间，无论是否都准备完毕都继续向下执行</li>\n<li>countDown() 计数减少一个</li>\n<li>getCount() 距离最小个数还差多少</li>\n</ul>\n<p>下面演示一个简单的示例 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestCountDownLatch</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> CountDownLatch cdl = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">10</span>);</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tThread.sleep(<span class=\"number\">1000</span> * <span class=\"keyword\">new</span> Random().nextInt(<span class=\"number\">5</span>));</div><div class=\"line\">\t\t\tSystem.out.println(System.currentTimeMillis() /<span class=\"number\">1000</span> + <span class=\"string\">\" \"</span>            </div><div class=\"line\">\t\t\t\t+ Thread.currentThread().getName() + <span class=\"string\">\" complete\"</span>);</div><div class=\"line\">\t\t\tcdl.countDown();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;      </div><div class=\"line\">\t\tTestCountDownLatch  test = <span class=\"keyword\">new</span> TestCountDownLatch();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">new</span> Thread(test).start();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tcdl.await();</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"fire\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1469451326</span> Thread-<span class=\"number\">4</span> complete</div><div class=\"line\"><span class=\"number\">1469451326</span> Thread-<span class=\"number\">3</span> complete</div><div class=\"line\"><span class=\"number\">1469451326</span> Thread-<span class=\"number\">8</span> complete</div><div class=\"line\"><span class=\"number\">1469451327</span> Thread-<span class=\"number\">9</span> complete</div><div class=\"line\"><span class=\"number\">1469451327</span> Thread-<span class=\"number\">6</span> complete</div><div class=\"line\"><span class=\"number\">1469451327</span> Thread-<span class=\"number\">7</span> complete</div><div class=\"line\"><span class=\"number\">1469451329</span> Thread-<span class=\"number\">1</span> complete</div><div class=\"line\"><span class=\"number\">1469451330</span> Thread-<span class=\"number\">5</span> complete</div><div class=\"line\"><span class=\"number\">1469451330</span> Thread-<span class=\"number\">2</span> complete</div><div class=\"line\"><span class=\"number\">1469451330</span> Thread-<span class=\"number\">0</span> complete</div><div class=\"line\">fire</div></pre></td></tr></table></figure></p>"},{"title":"并发编程（十）重入锁","date":"2016-07-05T06:04:45.000Z","_content":"同步控制是并发编程的重要手段，前面讲到的一直都是使用synchronized，同样它也有一个替代品，那就是java.util.concurrent.locks.ReentrantLock\n关于两者的性能，在JDK 5.0前，ReentranLock明显好于synchronized。但从JDK 6.0后对synchronized做了较大的优化，使得两者性能差不多  <!--more-->\n\n``` java\n\tpublic class TestReentrantLock implements Runnable {\n\n\t\tprivate static int i = 0;\n\t\tprivate static ReentrantLock lock = new ReentrantLock();\n\t\t\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tfor(int k = 0; k < 10000; k++) {\n\t\t\t\tlock.lock();\n\t\t\t\tlock.lock();\n\t\t\t\ttry {\n\t\t\t\t\ti++;\n\t\t\t\t}finally {\n\t\t\t\t\tlock.unlock();\n\t\t\t\t\tlock.unlock();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) throws InterruptedException {                  \n\t\t\tThread t1 = new Thread(new TestReentrantLock());\n\t\t\tThread t2 = new Thread(new TestReentrantLock());\n\t\t\tt1.start();\n\t\t\tt2.start();\n\t\t\tt1.join();\n\t\t\tt2.join();\n\t\t\tSystem.out.println(i);\n\t\t}\n\t}\n```\n多次输出结果都是 20000 可以看出\n- 可以看出ReentrantLock锁定的方式是对类对象实例和类同时锁定\n- 使用ReentrantLock，由程序员手动控制何时加锁，释放锁。但一定要注意： 一定要释放锁\n- ReentrantLock支持锁中锁，但一定要注意释放锁的次数\n\n### 中断响应\n\n除了上面所展示的，ReentrantLock还提供中断处理的能力\n我们知道对于synchronized来说，如果一个线程等待锁，那么就有两种结果，要么获得，要么等待。但是ReentrantLock提供了第三种可能，那就是线程可以被中断。线程可以根据需要取消对锁的请求。下面展示一个用ReentrantLock解决死锁问题的小程序\n``` java\n\tpublic class TestReentrantLock implements Runnable {\n\t\tprivate static ReentrantLock lock1 = new ReentrantLock();\n\t\tprivate static ReentrantLock lock2 = new ReentrantLock();\n\t\t\n\t\tprivate int lock;\n\t\t//控制加锁顺序，方便形成死锁\n\t\tpublic TestReentrantLock(int lock) {\n\t\t\tthis.lock = lock;\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tif(lock == 1) {\n\t\t\t\t\tlock1.lockInterruptibly();\n\t\t\t\t\ttry {\n\t\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t\t}catch (InterruptedException e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\tlock2.lockInterruptibly();\n\t\t\t\t\t}\n\t\t\t\t} else{\n\t\t\t\t\tlock2.lockInterruptibly();\n\t\t\t\t\ttry {\n\t\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t\t}catch (InterruptedException e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\tlock1.lockInterruptibly();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}finally {\n\t\t\t\tif(lock1.isHeldByCurrentThread()) {\n\t\t\t\t\tlock1.unlock();\n\t\t\t\t}\n\t\t\t\tif (lock2.isHeldByCurrentThread()) {\n\t\t\t\t\tlock2.unlock();\n\t\t\t\t}\n\t\t\t\tSystem.out.println(Thread.currentThread().getName() + \": exit\");      \n\t\t\t}\n\t\t}\n\n\t\tpublic static void main(String[] args) throws InterruptedException {\n\t\t\tThread t1 = new Thread(new TestReentrantLock(1));\n\t\t\tThread t2 = new Thread(new TestReentrantLock(2));\n\t\t\tt1.start();\n\t\t\tt2.start();\n\t\t\tThread.sleep(1000);\n\t\t\tt1.interrupt();\n\t\t}\n\t}\n```\n输出结果\n``` java\nThread-0: exit\nThread-1: exit\n```\n值得注意的：\n- 不要将所有的Exception都放在一个try里面，这样虽然简洁，但是捕捉到Exception就不会执行其它，掩饰了其它错误\n- 这里用的是ReentrantLock.lockInterruptibly()，而不是ReentrantLock.lock()\n- finnally里面一定要记得检查是否还存在锁再去释放，否则会抛java.lang.IllegalMonitorStateException\n\n### 申请等待限时\n\nReentrantLock避免死锁，还有另一种方式，那就是限时等待。也就是说在规定时间内获取不到锁，就放弃\n``` java\n\tpublic boolean tryLock()\n\tpublic boolean tryLock(long timeout, TimeUnit unit)\n```\n上面是JDK提供的两个重载方法。不带参数的，当前线程会尝试获取，成功返回true，失败，不等待，立即返回false。带参数就是在获取失败不立即返回，而是在规定时间内多次获取，当时间到了并还是失败就返回false\n``` java\n\tpublic class TestReenrantLock implements Runnable {\n\t\tprivate static ReentrantLock lock1 = new ReentrantLock();\n\t\tprivate static ReentrantLock lock2 = new ReentrantLock();\n\t\t\n\t\tprivate int lock;\n\t\t\n\t\tpublic TestReenrantLock(int lock) {\n\t\t\tthis.lock = lock;\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tif(lock == 1) {\n\t\t\t\twhile(true) {\n\t\t\t\t\tif(lock1.tryLock()) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(lock2.tryLock()) {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tSystem.out.println(Thread.currentThread().getName()\n\t\t\t\t\t\t\t\t\t\t\t+ \": work done\");\n\t\t\t\t\t\t\t\t\treturn ;\n\t\t\t\t\t\t\t\t}finally {\n\t\t\t\t\t\t\t\t\tlock2.unlock();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}finally {\n\t\t\t\t\t\t\tlock1.unlock();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\twhile(true) {\n\t\t\t\t\tif(lock2.tryLock()) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(lock1.tryLock()) {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tSystem.out.println(Thread.currentThread().getName()\n\t\t\t\t\t\t\t\t\t\t\t+ \": work done\");\n\t\t\t\t\t\t\t\t\treturn ;\n\t\t\t\t\t\t\t\t}finally {\n\t\t\t\t\t\t\t\t\tlock1.unlock();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}finally {\n\t\t\t\t\t\t\tlock2.unlock();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\n\t\t\t\t\t\n\t\t\n\t\tpublic static void main(String[] args) {\n\t\t\tThread t1 = new Thread(new TestReenrantLock(1));\n\t\t\tThread t2 = new Thread(new TestReenrantLock(2));\n\t\t\tt1.start();\n\t\t\tt2.start();\n\t\t}\n\t}\n\n```\n输出结果 ：\n``` java\nThread-0: work done\nThread-1: work done\n```\n\n### 公平锁\n``` java\n\tprivate static ReentrantLock lock1 = new ReentrantLock()\n\tpublic ReentrantLock(boolean fair) {\n        sync = fair ? new FairSync() : new NonfairSync();\n    }\n```\n在计算机中，一般公平就是指先来先服务。公平锁就是谁先申请就给谁使用\n在这个弱肉强食，适者生存的社会，公平就有点显得……，再说维系公平需要太大的消耗，会降低性能。除特殊情况不要使用\n\n","source":"_posts/intercurrent_reentrantlock.md","raw":"---\ntitle: 并发编程（十）重入锁\ndate: 2016-07-05 14:04:45\ntags:\n\t- 并发编程\n---\n同步控制是并发编程的重要手段，前面讲到的一直都是使用synchronized，同样它也有一个替代品，那就是java.util.concurrent.locks.ReentrantLock\n关于两者的性能，在JDK 5.0前，ReentranLock明显好于synchronized。但从JDK 6.0后对synchronized做了较大的优化，使得两者性能差不多  <!--more-->\n\n``` java\n\tpublic class TestReentrantLock implements Runnable {\n\n\t\tprivate static int i = 0;\n\t\tprivate static ReentrantLock lock = new ReentrantLock();\n\t\t\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tfor(int k = 0; k < 10000; k++) {\n\t\t\t\tlock.lock();\n\t\t\t\tlock.lock();\n\t\t\t\ttry {\n\t\t\t\t\ti++;\n\t\t\t\t}finally {\n\t\t\t\t\tlock.unlock();\n\t\t\t\t\tlock.unlock();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) throws InterruptedException {                  \n\t\t\tThread t1 = new Thread(new TestReentrantLock());\n\t\t\tThread t2 = new Thread(new TestReentrantLock());\n\t\t\tt1.start();\n\t\t\tt2.start();\n\t\t\tt1.join();\n\t\t\tt2.join();\n\t\t\tSystem.out.println(i);\n\t\t}\n\t}\n```\n多次输出结果都是 20000 可以看出\n- 可以看出ReentrantLock锁定的方式是对类对象实例和类同时锁定\n- 使用ReentrantLock，由程序员手动控制何时加锁，释放锁。但一定要注意： 一定要释放锁\n- ReentrantLock支持锁中锁，但一定要注意释放锁的次数\n\n### 中断响应\n\n除了上面所展示的，ReentrantLock还提供中断处理的能力\n我们知道对于synchronized来说，如果一个线程等待锁，那么就有两种结果，要么获得，要么等待。但是ReentrantLock提供了第三种可能，那就是线程可以被中断。线程可以根据需要取消对锁的请求。下面展示一个用ReentrantLock解决死锁问题的小程序\n``` java\n\tpublic class TestReentrantLock implements Runnable {\n\t\tprivate static ReentrantLock lock1 = new ReentrantLock();\n\t\tprivate static ReentrantLock lock2 = new ReentrantLock();\n\t\t\n\t\tprivate int lock;\n\t\t//控制加锁顺序，方便形成死锁\n\t\tpublic TestReentrantLock(int lock) {\n\t\t\tthis.lock = lock;\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tif(lock == 1) {\n\t\t\t\t\tlock1.lockInterruptibly();\n\t\t\t\t\ttry {\n\t\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t\t}catch (InterruptedException e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\tlock2.lockInterruptibly();\n\t\t\t\t\t}\n\t\t\t\t} else{\n\t\t\t\t\tlock2.lockInterruptibly();\n\t\t\t\t\ttry {\n\t\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t\t}catch (InterruptedException e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\tlock1.lockInterruptibly();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}finally {\n\t\t\t\tif(lock1.isHeldByCurrentThread()) {\n\t\t\t\t\tlock1.unlock();\n\t\t\t\t}\n\t\t\t\tif (lock2.isHeldByCurrentThread()) {\n\t\t\t\t\tlock2.unlock();\n\t\t\t\t}\n\t\t\t\tSystem.out.println(Thread.currentThread().getName() + \": exit\");      \n\t\t\t}\n\t\t}\n\n\t\tpublic static void main(String[] args) throws InterruptedException {\n\t\t\tThread t1 = new Thread(new TestReentrantLock(1));\n\t\t\tThread t2 = new Thread(new TestReentrantLock(2));\n\t\t\tt1.start();\n\t\t\tt2.start();\n\t\t\tThread.sleep(1000);\n\t\t\tt1.interrupt();\n\t\t}\n\t}\n```\n输出结果\n``` java\nThread-0: exit\nThread-1: exit\n```\n值得注意的：\n- 不要将所有的Exception都放在一个try里面，这样虽然简洁，但是捕捉到Exception就不会执行其它，掩饰了其它错误\n- 这里用的是ReentrantLock.lockInterruptibly()，而不是ReentrantLock.lock()\n- finnally里面一定要记得检查是否还存在锁再去释放，否则会抛java.lang.IllegalMonitorStateException\n\n### 申请等待限时\n\nReentrantLock避免死锁，还有另一种方式，那就是限时等待。也就是说在规定时间内获取不到锁，就放弃\n``` java\n\tpublic boolean tryLock()\n\tpublic boolean tryLock(long timeout, TimeUnit unit)\n```\n上面是JDK提供的两个重载方法。不带参数的，当前线程会尝试获取，成功返回true，失败，不等待，立即返回false。带参数就是在获取失败不立即返回，而是在规定时间内多次获取，当时间到了并还是失败就返回false\n``` java\n\tpublic class TestReenrantLock implements Runnable {\n\t\tprivate static ReentrantLock lock1 = new ReentrantLock();\n\t\tprivate static ReentrantLock lock2 = new ReentrantLock();\n\t\t\n\t\tprivate int lock;\n\t\t\n\t\tpublic TestReenrantLock(int lock) {\n\t\t\tthis.lock = lock;\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tif(lock == 1) {\n\t\t\t\twhile(true) {\n\t\t\t\t\tif(lock1.tryLock()) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(lock2.tryLock()) {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tSystem.out.println(Thread.currentThread().getName()\n\t\t\t\t\t\t\t\t\t\t\t+ \": work done\");\n\t\t\t\t\t\t\t\t\treturn ;\n\t\t\t\t\t\t\t\t}finally {\n\t\t\t\t\t\t\t\t\tlock2.unlock();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}finally {\n\t\t\t\t\t\t\tlock1.unlock();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\twhile(true) {\n\t\t\t\t\tif(lock2.tryLock()) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(lock1.tryLock()) {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tSystem.out.println(Thread.currentThread().getName()\n\t\t\t\t\t\t\t\t\t\t\t+ \": work done\");\n\t\t\t\t\t\t\t\t\treturn ;\n\t\t\t\t\t\t\t\t}finally {\n\t\t\t\t\t\t\t\t\tlock1.unlock();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}finally {\n\t\t\t\t\t\t\tlock2.unlock();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\n\t\t\t\t\t\n\t\t\n\t\tpublic static void main(String[] args) {\n\t\t\tThread t1 = new Thread(new TestReenrantLock(1));\n\t\t\tThread t2 = new Thread(new TestReenrantLock(2));\n\t\t\tt1.start();\n\t\t\tt2.start();\n\t\t}\n\t}\n\n```\n输出结果 ：\n``` java\nThread-0: work done\nThread-1: work done\n```\n\n### 公平锁\n``` java\n\tprivate static ReentrantLock lock1 = new ReentrantLock()\n\tpublic ReentrantLock(boolean fair) {\n        sync = fair ? new FairSync() : new NonfairSync();\n    }\n```\n在计算机中，一般公平就是指先来先服务。公平锁就是谁先申请就给谁使用\n在这个弱肉强食，适者生存的社会，公平就有点显得……，再说维系公平需要太大的消耗，会降低性能。除特殊情况不要使用\n\n","slug":"intercurrent_reentrantlock","published":1,"updated":"2017-03-08T11:01:50.603Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5db001tqoq1vlc36roh","content":"<p>同步控制是并发编程的重要手段，前面讲到的一直都是使用synchronized，同样它也有一个替代品，那就是java.util.concurrent.locks.ReentrantLock<br>关于两者的性能，在JDK 5.0前，ReentranLock明显好于synchronized。但从JDK 6.0后对synchronized做了较大的优化，使得两者性能差不多  <a id=\"more\"></a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestReentrantLock</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ReentrantLock lock = <span class=\"keyword\">new</span> ReentrantLock();</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">10000</span>; k++) &#123;</div><div class=\"line\">\t\t\tlock.lock();</div><div class=\"line\">\t\t\tlock.lock();</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\ti++;</div><div class=\"line\">\t\t\t&#125;<span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t\tlock.unlock();</div><div class=\"line\">\t\t\t\tlock.unlock();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;                  </div><div class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> TestReentrantLock());</div><div class=\"line\">\t\tThread t2 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> TestReentrantLock());</div><div class=\"line\">\t\tt1.start();</div><div class=\"line\">\t\tt2.start();</div><div class=\"line\">\t\tt1.join();</div><div class=\"line\">\t\tt2.join();</div><div class=\"line\">\t\tSystem.out.println(i);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>多次输出结果都是 20000 可以看出</p>\n<ul>\n<li>可以看出ReentrantLock锁定的方式是对类对象实例和类同时锁定</li>\n<li>使用ReentrantLock，由程序员手动控制何时加锁，释放锁。但一定要注意： 一定要释放锁</li>\n<li>ReentrantLock支持锁中锁，但一定要注意释放锁的次数</li>\n</ul>\n<h3 id=\"中断响应\"><a href=\"#中断响应\" class=\"headerlink\" title=\"中断响应\"></a>中断响应</h3><p>除了上面所展示的，ReentrantLock还提供中断处理的能力<br>我们知道对于synchronized来说，如果一个线程等待锁，那么就有两种结果，要么获得，要么等待。但是ReentrantLock提供了第三种可能，那就是线程可以被中断。线程可以根据需要取消对锁的请求。下面展示一个用ReentrantLock解决死锁问题的小程序<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestReentrantLock</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ReentrantLock lock1 = <span class=\"keyword\">new</span> ReentrantLock();</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ReentrantLock lock2 = <span class=\"keyword\">new</span> ReentrantLock();</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> lock;</div><div class=\"line\">\t<span class=\"comment\">//控制加锁顺序，方便形成死锁</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestReentrantLock</span><span class=\"params\">(<span class=\"keyword\">int</span> lock)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.lock = lock;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(lock == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t\t\t\tlock1.lockInterruptibly();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\tThread.sleep(<span class=\"number\">1000</span>);</div><div class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t\tlock2.lockInterruptibly();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\t\tlock2.lockInterruptibly();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\tThread.sleep(<span class=\"number\">1000</span>);</div><div class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t\tlock1.lockInterruptibly();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(lock1.isHeldByCurrentThread()) &#123;</div><div class=\"line\">\t\t\t\tlock1.unlock();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (lock2.isHeldByCurrentThread()) &#123;</div><div class=\"line\">\t\t\t\tlock2.unlock();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\": exit\"</span>);      </div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> TestReentrantLock(<span class=\"number\">1</span>));</div><div class=\"line\">\t\tThread t2 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> TestReentrantLock(<span class=\"number\">2</span>));</div><div class=\"line\">\t\tt1.start();</div><div class=\"line\">\t\tt2.start();</div><div class=\"line\">\t\tThread.sleep(<span class=\"number\">1000</span>);</div><div class=\"line\">\t\tt1.interrupt();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Thread-<span class=\"number\">0</span>: exit</div><div class=\"line\">Thread-<span class=\"number\">1</span>: exit</div></pre></td></tr></table></figure></p>\n<p>值得注意的：</p>\n<ul>\n<li>不要将所有的Exception都放在一个try里面，这样虽然简洁，但是捕捉到Exception就不会执行其它，掩饰了其它错误</li>\n<li>这里用的是ReentrantLock.lockInterruptibly()，而不是ReentrantLock.lock()</li>\n<li>finnally里面一定要记得检查是否还存在锁再去释放，否则会抛java.lang.IllegalMonitorStateException</li>\n</ul>\n<h3 id=\"申请等待限时\"><a href=\"#申请等待限时\" class=\"headerlink\" title=\"申请等待限时\"></a>申请等待限时</h3><p>ReentrantLock避免死锁，还有另一种方式，那就是限时等待。也就是说在规定时间内获取不到锁，就放弃<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryLock</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryLock</span><span class=\"params\">(<span class=\"keyword\">long</span> timeout, TimeUnit unit)</span></div></pre></td></tr></table></figure></p>\n<p>上面是JDK提供的两个重载方法。不带参数的，当前线程会尝试获取，成功返回true，失败，不等待，立即返回false。带参数就是在获取失败不立即返回，而是在规定时间内多次获取，当时间到了并还是失败就返回false<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestReenrantLock</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ReentrantLock lock1 = <span class=\"keyword\">new</span> ReentrantLock();</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ReentrantLock lock2 = <span class=\"keyword\">new</span> ReentrantLock();</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> lock;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestReenrantLock</span><span class=\"params\">(<span class=\"keyword\">int</span> lock)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.lock = lock;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(lock == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(lock1.tryLock()) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\t\t\tThread.sleep(<span class=\"number\">1000</span>);</div><div class=\"line\">\t\t\t\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span>(lock2.tryLock()) &#123;</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\t\t\t\tSystem.out.println(Thread.currentThread().getName()</div><div class=\"line\">\t\t\t\t\t\t\t\t\t\t+ <span class=\"string\">\": work done\"</span>);</div><div class=\"line\">\t\t\t\t\t\t\t\t<span class=\"keyword\">return</span> ;</div><div class=\"line\">\t\t\t\t\t\t\t&#125;<span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t\t\t\t\t\tlock2.unlock();</div><div class=\"line\">\t\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t&#125;<span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t\t\t\tlock1.unlock();</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(lock2.tryLock()) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\t\t\tThread.sleep(<span class=\"number\">1000</span>);</div><div class=\"line\">\t\t\t\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span>(lock1.tryLock()) &#123;</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\t\t\t\tSystem.out.println(Thread.currentThread().getName()</div><div class=\"line\">\t\t\t\t\t\t\t\t\t\t+ <span class=\"string\">\": work done\"</span>);</div><div class=\"line\">\t\t\t\t\t\t\t\t<span class=\"keyword\">return</span> ;</div><div class=\"line\">\t\t\t\t\t\t\t&#125;<span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t\t\t\t\t\tlock1.unlock();</div><div class=\"line\">\t\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t&#125;<span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t\t\t\tlock2.unlock();</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;\t</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> TestReenrantLock(<span class=\"number\">1</span>));</div><div class=\"line\">\t\tThread t2 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> TestReenrantLock(<span class=\"number\">2</span>));</div><div class=\"line\">\t\tt1.start();</div><div class=\"line\">\t\tt2.start();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Thread-<span class=\"number\">0</span>: work done</div><div class=\"line\">Thread-<span class=\"number\">1</span>: work done</div></pre></td></tr></table></figure></p>\n<h3 id=\"公平锁\"><a href=\"#公平锁\" class=\"headerlink\" title=\"公平锁\"></a>公平锁</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ReentrantLock lock1 = <span class=\"keyword\">new</span> ReentrantLock()</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ReentrantLock</span><span class=\"params\">(<span class=\"keyword\">boolean</span> fair)</span> </span>&#123;</div><div class=\"line\">       sync = fair ? <span class=\"keyword\">new</span> FairSync() : <span class=\"keyword\">new</span> NonfairSync();</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>在计算机中，一般公平就是指先来先服务。公平锁就是谁先申请就给谁使用<br>在这个弱肉强食，适者生存的社会，公平就有点显得……，再说维系公平需要太大的消耗，会降低性能。除特殊情况不要使用</p>\n","excerpt":"<p>同步控制是并发编程的重要手段，前面讲到的一直都是使用synchronized，同样它也有一个替代品，那就是java.util.concurrent.locks.ReentrantLock<br>关于两者的性能，在JDK 5.0前，ReentranLock明显好于synchronized。但从JDK 6.0后对synchronized做了较大的优化，使得两者性能差不多","more":"</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestReentrantLock</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ReentrantLock lock = <span class=\"keyword\">new</span> ReentrantLock();</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">10000</span>; k++) &#123;</div><div class=\"line\">\t\t\tlock.lock();</div><div class=\"line\">\t\t\tlock.lock();</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\ti++;</div><div class=\"line\">\t\t\t&#125;<span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t\tlock.unlock();</div><div class=\"line\">\t\t\t\tlock.unlock();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;                  </div><div class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> TestReentrantLock());</div><div class=\"line\">\t\tThread t2 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> TestReentrantLock());</div><div class=\"line\">\t\tt1.start();</div><div class=\"line\">\t\tt2.start();</div><div class=\"line\">\t\tt1.join();</div><div class=\"line\">\t\tt2.join();</div><div class=\"line\">\t\tSystem.out.println(i);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>多次输出结果都是 20000 可以看出</p>\n<ul>\n<li>可以看出ReentrantLock锁定的方式是对类对象实例和类同时锁定</li>\n<li>使用ReentrantLock，由程序员手动控制何时加锁，释放锁。但一定要注意： 一定要释放锁</li>\n<li>ReentrantLock支持锁中锁，但一定要注意释放锁的次数</li>\n</ul>\n<h3 id=\"中断响应\"><a href=\"#中断响应\" class=\"headerlink\" title=\"中断响应\"></a>中断响应</h3><p>除了上面所展示的，ReentrantLock还提供中断处理的能力<br>我们知道对于synchronized来说，如果一个线程等待锁，那么就有两种结果，要么获得，要么等待。但是ReentrantLock提供了第三种可能，那就是线程可以被中断。线程可以根据需要取消对锁的请求。下面展示一个用ReentrantLock解决死锁问题的小程序<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestReentrantLock</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ReentrantLock lock1 = <span class=\"keyword\">new</span> ReentrantLock();</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ReentrantLock lock2 = <span class=\"keyword\">new</span> ReentrantLock();</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> lock;</div><div class=\"line\">\t<span class=\"comment\">//控制加锁顺序，方便形成死锁</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestReentrantLock</span><span class=\"params\">(<span class=\"keyword\">int</span> lock)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.lock = lock;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(lock == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t\t\t\tlock1.lockInterruptibly();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\tThread.sleep(<span class=\"number\">1000</span>);</div><div class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t\tlock2.lockInterruptibly();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\t\tlock2.lockInterruptibly();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\tThread.sleep(<span class=\"number\">1000</span>);</div><div class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t\tlock1.lockInterruptibly();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(lock1.isHeldByCurrentThread()) &#123;</div><div class=\"line\">\t\t\t\tlock1.unlock();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (lock2.isHeldByCurrentThread()) &#123;</div><div class=\"line\">\t\t\t\tlock2.unlock();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\": exit\"</span>);      </div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> TestReentrantLock(<span class=\"number\">1</span>));</div><div class=\"line\">\t\tThread t2 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> TestReentrantLock(<span class=\"number\">2</span>));</div><div class=\"line\">\t\tt1.start();</div><div class=\"line\">\t\tt2.start();</div><div class=\"line\">\t\tThread.sleep(<span class=\"number\">1000</span>);</div><div class=\"line\">\t\tt1.interrupt();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Thread-<span class=\"number\">0</span>: exit</div><div class=\"line\">Thread-<span class=\"number\">1</span>: exit</div></pre></td></tr></table></figure></p>\n<p>值得注意的：</p>\n<ul>\n<li>不要将所有的Exception都放在一个try里面，这样虽然简洁，但是捕捉到Exception就不会执行其它，掩饰了其它错误</li>\n<li>这里用的是ReentrantLock.lockInterruptibly()，而不是ReentrantLock.lock()</li>\n<li>finnally里面一定要记得检查是否还存在锁再去释放，否则会抛java.lang.IllegalMonitorStateException</li>\n</ul>\n<h3 id=\"申请等待限时\"><a href=\"#申请等待限时\" class=\"headerlink\" title=\"申请等待限时\"></a>申请等待限时</h3><p>ReentrantLock避免死锁，还有另一种方式，那就是限时等待。也就是说在规定时间内获取不到锁，就放弃<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryLock</span><span class=\"params\">()</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryLock</span><span class=\"params\">(<span class=\"keyword\">long</span> timeout, TimeUnit unit)</span></span></div></pre></td></tr></table></figure></p>\n<p>上面是JDK提供的两个重载方法。不带参数的，当前线程会尝试获取，成功返回true，失败，不等待，立即返回false。带参数就是在获取失败不立即返回，而是在规定时间内多次获取，当时间到了并还是失败就返回false<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestReenrantLock</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ReentrantLock lock1 = <span class=\"keyword\">new</span> ReentrantLock();</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ReentrantLock lock2 = <span class=\"keyword\">new</span> ReentrantLock();</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> lock;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestReenrantLock</span><span class=\"params\">(<span class=\"keyword\">int</span> lock)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.lock = lock;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(lock == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(lock1.tryLock()) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\t\t\tThread.sleep(<span class=\"number\">1000</span>);</div><div class=\"line\">\t\t\t\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span>(lock2.tryLock()) &#123;</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\t\t\t\tSystem.out.println(Thread.currentThread().getName()</div><div class=\"line\">\t\t\t\t\t\t\t\t\t\t+ <span class=\"string\">\": work done\"</span>);</div><div class=\"line\">\t\t\t\t\t\t\t\t<span class=\"keyword\">return</span> ;</div><div class=\"line\">\t\t\t\t\t\t\t&#125;<span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t\t\t\t\t\tlock2.unlock();</div><div class=\"line\">\t\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t&#125;<span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t\t\t\tlock1.unlock();</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(lock2.tryLock()) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\t\t\tThread.sleep(<span class=\"number\">1000</span>);</div><div class=\"line\">\t\t\t\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span>(lock1.tryLock()) &#123;</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\t\t\t\tSystem.out.println(Thread.currentThread().getName()</div><div class=\"line\">\t\t\t\t\t\t\t\t\t\t+ <span class=\"string\">\": work done\"</span>);</div><div class=\"line\">\t\t\t\t\t\t\t\t<span class=\"keyword\">return</span> ;</div><div class=\"line\">\t\t\t\t\t\t\t&#125;<span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t\t\t\t\t\tlock1.unlock();</div><div class=\"line\">\t\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t&#125;<span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t\t\t\tlock2.unlock();</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;\t</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> TestReenrantLock(<span class=\"number\">1</span>));</div><div class=\"line\">\t\tThread t2 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> TestReenrantLock(<span class=\"number\">2</span>));</div><div class=\"line\">\t\tt1.start();</div><div class=\"line\">\t\tt2.start();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Thread-<span class=\"number\">0</span>: work done</div><div class=\"line\">Thread-<span class=\"number\">1</span>: work done</div></pre></td></tr></table></figure></p>\n<h3 id=\"公平锁\"><a href=\"#公平锁\" class=\"headerlink\" title=\"公平锁\"></a>公平锁</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ReentrantLock lock1 = <span class=\"keyword\">new</span> ReentrantLock()</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ReentrantLock</span><span class=\"params\">(<span class=\"keyword\">boolean</span> fair)</span> </span>&#123;</div><div class=\"line\">       sync = fair ? <span class=\"keyword\">new</span> FairSync() : <span class=\"keyword\">new</span> NonfairSync();</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>在计算机中，一般公平就是指先来先服务。公平锁就是谁先申请就给谁使用<br>在这个弱肉强食，适者生存的社会，公平就有点显得……，再说维系公平需要太大的消耗，会降低性能。除特殊情况不要使用</p>"},{"title":"并发编程（一）线程的创建与销毁","date":"2016-06-02T14:38:43.000Z","_content":"\n### 线程创建\n\n#### 继承java.lang.Thread\n\n``` java\npublic class CreateThread extends Thread{\n\tpublic void run() {\n\t\twhile(true) {\n\t\t\tSystem.out.println(\"HelloWorld\");\n\t\t}\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tnew CreateThread().start();\n\t}\n}\n```\n\n<!--more-->\n\n#### 实现java.lang.Runnable\n\n``` java\npublic class CreateThread implements Runnable{\n\tpublic void run() {\n\t\twhile(true) {\n\t\t\tSystem.out.println(\"HelloWorld\");\n\t\t}\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tnew Thread(new CreateThread()).start();\n\t}\n}\n```\n\njava.lang.Thread 为我们提供了一个Thread(Runnable targe)的构造方法，而查看源码会发现Thread的run()的实现如下 :\n\n``` java \n@Override\n    public void run() {\n        if (target != null) {\n            target.run();\n        }\n    }\n```\n也就是说start0()中对这两种不同实现方式的run()的调用也是不一样的\n\n``` java\n\tpublic Thread() {\n        init(null, null, \"Thread-\" + nextThreadNum(), 0);\n    }\n\t public Thread(Runnable target) {\n        init(null, target, \"Thread-\" + nextThreadNum(), 0);\n    }\n\tprivate void init(ThreadGroup g, Runnable target, String name,\n                      long stackSize)\n```\nextends Thread这种方式target = null\n\n#### 两种创建方法的比较\nextends Thread : 简单，易理解\nimplements Runnable ： java单继承，节约继承资源，更符合面向对象的思想\n\n#### 关于run()和start()的比较\n\nrun() : 在当前线程调用对象方法\nstart() : 重新开启一个线程调用对象方法，\n\n### 线程销毁\n\n####stop() 已经被废弃\n\nstop()是粗暴的将线程线程终止，这就有可能引起线程安全问题。\n\n``` java\npublic class StopThread {\n\t\n\tprivate static User user = new User();\n\t\n\tpublic static class User {\n\t\tprivate String name;\n\t\tprivate int id;\n\t\t\n\t\tpublic User() {\n\t\t\tid = 0;\n\t\t\tname = \"0\";\n\t\t}\n\t\t\n\t\tpublic final String getName() {\n\t\t\treturn name;\n\t\t}\n\t\tpublic final void setName(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\t\tpublic final int getId() {\n\t\t\treturn id;\n\t\t}\n\t\tpublic final void setId(int id) {\n\t\t\tthis.id = id;\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn \"User [name=\" + name + \", id=\" + id + \"]\";\n\t\t}\n\t\n\t}\n\t\n\tpublic static class WriteThread extends Thread {\n\t\t\n\t\t@Override\n\t\tpublic void run() {\n\t\t\twhile(true) {\t\n\t\t\t\tsynchronized (user) {\n\t\t\t\t\tint num = (int) (System.currentTimeMillis()/1000);\n\t\t\t\t\tuser.setId(num);\n\t\t\t\t\ttry {\n\t\t\t\t\t\tThread.sleep(100);\n\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t\tuser.setName(String.valueOf(num));\n\t\t\t\t}\n\t\t\t\tThread.yield();\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic static class ReadThread extends Thread {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\twhile(true) {\n\t\t\t\tsynchronized (user) {\n\t\t\t\t\twhile(user.getId() != Integer.parseInt(user.getName())) {\n\t\t\t\t\t\tSystem.out.println(user);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tThread.yield();\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(System.currentTimeMillis()/1000);\n\t\tnew ReadThread().start();\n\t\twhile(true) {\n\t\t\tWriteThread write = new WriteThread();\n\t\t\twrite.start();\n\t\t\ttry {\n\t\t\t\tThread.sleep(100);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\twrite.stop();\n\t\t}\n\t}\n}\n```\n\n截取部分结果如下\n``` java\nUser [name=1468850323, id=1468850324]\nUser [name=1468850324, id=1468850325]\n```\n\n产生原因 ：\nThread.stop()会在线程结束时，直接终止线程，并释放所有锁，而这些锁恰恰是维持对象一致性的。如果此时写线程写数据写到一半时，被强行终止，那么对象就会被写坏。同时，由于锁被释放，读线程顺理成章的读到不一致的数据。\n\n解决方法 ： \n我们设置一个标记变量来表示线程是否需要退出。\n``` java\npublic static class WriteThread extends Thread {\n\tprivate boolean stop = false;\n\t\n\tpublic void stopMe() {\n\t\tstop = true;\n\t}\n\t\n\t@Override\n\tpublic void run() {\n\t\twhile(true) {\n\t\t\t\n\t\t\tif(stop) {\n\t\t\t\tSystem.out.println(\"exit\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tsynchronized (user) {\n\t\t\t\tint num = (int) (System.currentTimeMillis()/1000);           \n\t\t\t\tuser.setId(num);\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(100);\n\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\tuser.setName(String.valueOf(num));\n\t\t\t}\n\t\t\tThread.yield();\n\t\t}\n\t}\n}\n```","source":"_posts/intercurrent_thread_create-stop.md","raw":"---\ntitle: 并发编程（一）线程的创建与销毁\ndate: 2016-06-02 22:38:43\ntags: \n\t- 并发编程\n---\n\n### 线程创建\n\n#### 继承java.lang.Thread\n\n``` java\npublic class CreateThread extends Thread{\n\tpublic void run() {\n\t\twhile(true) {\n\t\t\tSystem.out.println(\"HelloWorld\");\n\t\t}\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tnew CreateThread().start();\n\t}\n}\n```\n\n<!--more-->\n\n#### 实现java.lang.Runnable\n\n``` java\npublic class CreateThread implements Runnable{\n\tpublic void run() {\n\t\twhile(true) {\n\t\t\tSystem.out.println(\"HelloWorld\");\n\t\t}\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tnew Thread(new CreateThread()).start();\n\t}\n}\n```\n\njava.lang.Thread 为我们提供了一个Thread(Runnable targe)的构造方法，而查看源码会发现Thread的run()的实现如下 :\n\n``` java \n@Override\n    public void run() {\n        if (target != null) {\n            target.run();\n        }\n    }\n```\n也就是说start0()中对这两种不同实现方式的run()的调用也是不一样的\n\n``` java\n\tpublic Thread() {\n        init(null, null, \"Thread-\" + nextThreadNum(), 0);\n    }\n\t public Thread(Runnable target) {\n        init(null, target, \"Thread-\" + nextThreadNum(), 0);\n    }\n\tprivate void init(ThreadGroup g, Runnable target, String name,\n                      long stackSize)\n```\nextends Thread这种方式target = null\n\n#### 两种创建方法的比较\nextends Thread : 简单，易理解\nimplements Runnable ： java单继承，节约继承资源，更符合面向对象的思想\n\n#### 关于run()和start()的比较\n\nrun() : 在当前线程调用对象方法\nstart() : 重新开启一个线程调用对象方法，\n\n### 线程销毁\n\n####stop() 已经被废弃\n\nstop()是粗暴的将线程线程终止，这就有可能引起线程安全问题。\n\n``` java\npublic class StopThread {\n\t\n\tprivate static User user = new User();\n\t\n\tpublic static class User {\n\t\tprivate String name;\n\t\tprivate int id;\n\t\t\n\t\tpublic User() {\n\t\t\tid = 0;\n\t\t\tname = \"0\";\n\t\t}\n\t\t\n\t\tpublic final String getName() {\n\t\t\treturn name;\n\t\t}\n\t\tpublic final void setName(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\t\tpublic final int getId() {\n\t\t\treturn id;\n\t\t}\n\t\tpublic final void setId(int id) {\n\t\t\tthis.id = id;\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn \"User [name=\" + name + \", id=\" + id + \"]\";\n\t\t}\n\t\n\t}\n\t\n\tpublic static class WriteThread extends Thread {\n\t\t\n\t\t@Override\n\t\tpublic void run() {\n\t\t\twhile(true) {\t\n\t\t\t\tsynchronized (user) {\n\t\t\t\t\tint num = (int) (System.currentTimeMillis()/1000);\n\t\t\t\t\tuser.setId(num);\n\t\t\t\t\ttry {\n\t\t\t\t\t\tThread.sleep(100);\n\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t\tuser.setName(String.valueOf(num));\n\t\t\t\t}\n\t\t\t\tThread.yield();\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic static class ReadThread extends Thread {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\twhile(true) {\n\t\t\t\tsynchronized (user) {\n\t\t\t\t\twhile(user.getId() != Integer.parseInt(user.getName())) {\n\t\t\t\t\t\tSystem.out.println(user);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tThread.yield();\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(System.currentTimeMillis()/1000);\n\t\tnew ReadThread().start();\n\t\twhile(true) {\n\t\t\tWriteThread write = new WriteThread();\n\t\t\twrite.start();\n\t\t\ttry {\n\t\t\t\tThread.sleep(100);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\twrite.stop();\n\t\t}\n\t}\n}\n```\n\n截取部分结果如下\n``` java\nUser [name=1468850323, id=1468850324]\nUser [name=1468850324, id=1468850325]\n```\n\n产生原因 ：\nThread.stop()会在线程结束时，直接终止线程，并释放所有锁，而这些锁恰恰是维持对象一致性的。如果此时写线程写数据写到一半时，被强行终止，那么对象就会被写坏。同时，由于锁被释放，读线程顺理成章的读到不一致的数据。\n\n解决方法 ： \n我们设置一个标记变量来表示线程是否需要退出。\n``` java\npublic static class WriteThread extends Thread {\n\tprivate boolean stop = false;\n\t\n\tpublic void stopMe() {\n\t\tstop = true;\n\t}\n\t\n\t@Override\n\tpublic void run() {\n\t\twhile(true) {\n\t\t\t\n\t\t\tif(stop) {\n\t\t\t\tSystem.out.println(\"exit\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tsynchronized (user) {\n\t\t\t\tint num = (int) (System.currentTimeMillis()/1000);           \n\t\t\t\tuser.setId(num);\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(100);\n\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\tuser.setName(String.valueOf(num));\n\t\t\t}\n\t\t\tThread.yield();\n\t\t}\n\t}\n}\n```","slug":"intercurrent_thread_create-stop","published":1,"updated":"2017-03-08T10:58:05.541Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5de001wqoq1ym0xu4ri","content":"<h3 id=\"线程创建\"><a href=\"#线程创建\" class=\"headerlink\" title=\"线程创建\"></a>线程创建</h3><h4 id=\"继承java-lang-Thread\"><a href=\"#继承java-lang-Thread\" class=\"headerlink\" title=\"继承java.lang.Thread\"></a>继承java.lang.Thread</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CreateThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"HelloWorld\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">new</span> CreateThread().start();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h4 id=\"实现java-lang-Runnable\"><a href=\"#实现java-lang-Runnable\" class=\"headerlink\" title=\"实现java.lang.Runnable\"></a>实现java.lang.Runnable</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CreateThread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"HelloWorld\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> CreateThread()).start();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>java.lang.Thread 为我们提供了一个Thread(Runnable targe)的构造方法，而查看源码会发现Thread的run()的实现如下 :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (target != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            target.run();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>也就是说start0()中对这两种不同实现方式的run()的调用也是不一样的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Thread</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       init(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"string\">\"Thread-\"</span> + nextThreadNum(), <span class=\"number\">0</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Thread</span><span class=\"params\">(Runnable target)</span> </span>&#123;</div><div class=\"line\">       init(<span class=\"keyword\">null</span>, target, <span class=\"string\">\"Thread-\"</span> + nextThreadNum(), <span class=\"number\">0</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(ThreadGroup g, Runnable target, String name,</span></span></div><div class=\"line\">                     <span class=\"keyword\">long</span> stackSize)</div></pre></td></tr></table></figure>\n<p>extends Thread这种方式target = null</p>\n<h4 id=\"两种创建方法的比较\"><a href=\"#两种创建方法的比较\" class=\"headerlink\" title=\"两种创建方法的比较\"></a>两种创建方法的比较</h4><p>extends Thread : 简单，易理解<br>implements Runnable ： java单继承，节约继承资源，更符合面向对象的思想</p>\n<h4 id=\"关于run-和start-的比较\"><a href=\"#关于run-和start-的比较\" class=\"headerlink\" title=\"关于run()和start()的比较\"></a>关于run()和start()的比较</h4><p>run() : 在当前线程调用对象方法<br>start() : 重新开启一个线程调用对象方法，</p>\n<h3 id=\"线程销毁\"><a href=\"#线程销毁\" class=\"headerlink\" title=\"线程销毁\"></a>线程销毁</h3><p>####stop() 已经被废弃</p>\n<p>stop()是粗暴的将线程线程终止，这就有可能引起线程安全问题。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StopThread</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> User user = <span class=\"keyword\">new</span> User();</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> String name;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\tid = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\tname = <span class=\"string\">\"0\"</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> name;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> id;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"User [name=\"</span> + name + <span class=\"string\">\", id=\"</span> + id + <span class=\"string\">\"]\"</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WriteThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;\t</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">synchronized</span> (user) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> num = (<span class=\"keyword\">int</span>) (System.currentTimeMillis()/<span class=\"number\">1000</span>);</div><div class=\"line\">\t\t\t\t\tuser.setId(num);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\t\tThread.sleep(<span class=\"number\">100</span>);</div><div class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\tuser.setName(String.valueOf(num));</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tThread.yield();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReadThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">synchronized</span> (user) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">while</span>(user.getId() != Integer.parseInt(user.getName())) &#123;</div><div class=\"line\">\t\t\t\t\t\tSystem.out.println(user);</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tThread.yield();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(System.currentTimeMillis()/<span class=\"number\">1000</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">new</span> ReadThread().start();</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\tWriteThread write = <span class=\"keyword\">new</span> WriteThread();</div><div class=\"line\">\t\t\twrite.start();</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tThread.sleep(<span class=\"number\">100</span>);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\twrite.stop();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>截取部分结果如下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">User [name=<span class=\"number\">1468850323</span>, id=<span class=\"number\">1468850324</span>]</div><div class=\"line\">User [name=<span class=\"number\">1468850324</span>, id=<span class=\"number\">1468850325</span>]</div></pre></td></tr></table></figure></p>\n<p>产生原因 ：<br>Thread.stop()会在线程结束时，直接终止线程，并释放所有锁，而这些锁恰恰是维持对象一致性的。如果此时写线程写数据写到一半时，被强行终止，那么对象就会被写坏。同时，由于锁被释放，读线程顺理成章的读到不一致的数据。</p>\n<p>解决方法 ：<br>我们设置一个标记变量来表示线程是否需要退出。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WriteThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> stop = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stopMe</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tstop = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(stop) &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"exit\"</span>);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span> (user) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> num = (<span class=\"keyword\">int</span>) (System.currentTimeMillis()/<span class=\"number\">1000</span>);           </div><div class=\"line\">\t\t\t\tuser.setId(num);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\tThread.sleep(<span class=\"number\">100</span>);</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tuser.setName(String.valueOf(num));</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tThread.yield();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<h3 id=\"线程创建\"><a href=\"#线程创建\" class=\"headerlink\" title=\"线程创建\"></a>线程创建</h3><h4 id=\"继承java-lang-Thread\"><a href=\"#继承java-lang-Thread\" class=\"headerlink\" title=\"继承java.lang.Thread\"></a>继承java.lang.Thread</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CreateThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"HelloWorld\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">new</span> CreateThread().start();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","more":"<h4 id=\"实现java-lang-Runnable\"><a href=\"#实现java-lang-Runnable\" class=\"headerlink\" title=\"实现java.lang.Runnable\"></a>实现java.lang.Runnable</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CreateThread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"HelloWorld\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> CreateThread()).start();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>java.lang.Thread 为我们提供了一个Thread(Runnable targe)的构造方法，而查看源码会发现Thread的run()的实现如下 :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (target != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            target.run();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>也就是说start0()中对这两种不同实现方式的run()的调用也是不一样的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Thread</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       init(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"string\">\"Thread-\"</span> + nextThreadNum(), <span class=\"number\">0</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Thread</span><span class=\"params\">(Runnable target)</span> </span>&#123;</div><div class=\"line\">       init(<span class=\"keyword\">null</span>, target, <span class=\"string\">\"Thread-\"</span> + nextThreadNum(), <span class=\"number\">0</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(ThreadGroup g, Runnable target, String name,</div><div class=\"line\">                     <span class=\"keyword\">long</span> stackSize)</span></span></div></pre></td></tr></table></figure>\n<p>extends Thread这种方式target = null</p>\n<h4 id=\"两种创建方法的比较\"><a href=\"#两种创建方法的比较\" class=\"headerlink\" title=\"两种创建方法的比较\"></a>两种创建方法的比较</h4><p>extends Thread : 简单，易理解<br>implements Runnable ： java单继承，节约继承资源，更符合面向对象的思想</p>\n<h4 id=\"关于run-和start-的比较\"><a href=\"#关于run-和start-的比较\" class=\"headerlink\" title=\"关于run()和start()的比较\"></a>关于run()和start()的比较</h4><p>run() : 在当前线程调用对象方法<br>start() : 重新开启一个线程调用对象方法，</p>\n<h3 id=\"线程销毁\"><a href=\"#线程销毁\" class=\"headerlink\" title=\"线程销毁\"></a>线程销毁</h3><p>####stop() 已经被废弃</p>\n<p>stop()是粗暴的将线程线程终止，这就有可能引起线程安全问题。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StopThread</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> User user = <span class=\"keyword\">new</span> User();</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> String name;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\tid = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\tname = <span class=\"string\">\"0\"</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> name;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> id;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"User [name=\"</span> + name + <span class=\"string\">\", id=\"</span> + id + <span class=\"string\">\"]\"</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WriteThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;\t</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">synchronized</span> (user) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> num = (<span class=\"keyword\">int</span>) (System.currentTimeMillis()/<span class=\"number\">1000</span>);</div><div class=\"line\">\t\t\t\t\tuser.setId(num);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\t\tThread.sleep(<span class=\"number\">100</span>);</div><div class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\tuser.setName(String.valueOf(num));</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tThread.yield();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReadThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">synchronized</span> (user) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">while</span>(user.getId() != Integer.parseInt(user.getName())) &#123;</div><div class=\"line\">\t\t\t\t\t\tSystem.out.println(user);</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tThread.yield();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(System.currentTimeMillis()/<span class=\"number\">1000</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">new</span> ReadThread().start();</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\tWriteThread write = <span class=\"keyword\">new</span> WriteThread();</div><div class=\"line\">\t\t\twrite.start();</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tThread.sleep(<span class=\"number\">100</span>);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\twrite.stop();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>截取部分结果如下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">User [name=<span class=\"number\">1468850323</span>, id=<span class=\"number\">1468850324</span>]</div><div class=\"line\">User [name=<span class=\"number\">1468850324</span>, id=<span class=\"number\">1468850325</span>]</div></pre></td></tr></table></figure></p>\n<p>产生原因 ：<br>Thread.stop()会在线程结束时，直接终止线程，并释放所有锁，而这些锁恰恰是维持对象一致性的。如果此时写线程写数据写到一半时，被强行终止，那么对象就会被写坏。同时，由于锁被释放，读线程顺理成章的读到不一致的数据。</p>\n<p>解决方法 ：<br>我们设置一个标记变量来表示线程是否需要退出。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WriteThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> stop = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stopMe</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tstop = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(stop) &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"exit\"</span>);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span> (user) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> num = (<span class=\"keyword\">int</span>) (System.currentTimeMillis()/<span class=\"number\">1000</span>);           </div><div class=\"line\">\t\t\t\tuser.setId(num);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\tThread.sleep(<span class=\"number\">100</span>);</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tuser.setName(String.valueOf(num));</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tThread.yield();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"并发编程（四）线程的休眠与中断","date":"2016-06-11T14:58:12.000Z","_content":"\n### 线程休眠\n\n``` java\n\tpublic static native void sleep(long millis) throws InterruptedException;\n```\n\n### 线程中断\n\n前面我们说到了线程销毁stop(),但由于会释放所有资源，引起线程安全问题而被废弃。那么在JDK中是有一套强大的支持能避免这个问题呢？答案是肯定的，那就是线程中断。\n严格地说，线程中断并没有直接退出，而是给目标线程发送通知，至于目标线程怎么处理，则是目标线程的事了。\njava中与线程中断有关的主要是以下三个方法 ：\n\n<!--more-->\n\n``` java\n\tpublic void interrupt()  //设置中断标志位\n\tpublic boolean isInterrupted() //检查是否中断\n\tpublic static boolean interrupted() //检查是否中断，并清除终端状态\n```\n\n下面的代码对t1进行中断，那么中断后，t1就真的会停止吗？\n\n``` java\n\tpublic class InterruptThread {\n\t\tpublic static void main(String[] args) throws InterruptedException {\n\t\t\tThread t = new Thread() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\twhile(true) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tThread.sleep(200);\n\t\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t\tSystem.out.println(\"Interrupted when sleeping\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tThread.yield();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t\tt.start();\n\t\t\tThread.sleep(200);\n\t\t\tt.interrupt();\n\t\t}\n\t}\n```\n答案是否定的。虽然t1设置了中断位置，却没有什么作用。那么应该怎么做呢？\n有两种实现方法。\n- 捕获到异常时直接退出。\n- 如下程序\n\n``` java\n\tpublic class InterruptThread {\n\t\tpublic static void main(String[] args) throws InterruptedException {\n\t\t\tThread t1 = new Thread() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\twhile(true) {\n\t\t\t\t\t\tif(Thread.currentThread().isInterrupted()) {\n\t\t\t\t\t\t\tSystem.out.println(\"Interrupted !\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tThread.sleep(200);\n\t\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t\tSystem.out.println(\"Interrupted when sleeping\");\n\t\t\t\t\t\t\tThread.currentThread().interrupt();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tThread.yield();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t\tt1.start();\n\t\t\tThread.sleep(200);\n\t\t\tt1.interrupt();\n\t\t}\n\t}\n\n```\nThread.sleep()因中断而抛出异常，异常会清楚中断标志位，所以必须重新设置中断标志位。","source":"_posts/intercurrent_thread_interrupt-sleep.md","raw":"---\ntitle: 并发编程（四）线程的休眠与中断\ndate: 2016-06-11 22:58:12\ntags:\n\t- 并发编程\n---\n\n### 线程休眠\n\n``` java\n\tpublic static native void sleep(long millis) throws InterruptedException;\n```\n\n### 线程中断\n\n前面我们说到了线程销毁stop(),但由于会释放所有资源，引起线程安全问题而被废弃。那么在JDK中是有一套强大的支持能避免这个问题呢？答案是肯定的，那就是线程中断。\n严格地说，线程中断并没有直接退出，而是给目标线程发送通知，至于目标线程怎么处理，则是目标线程的事了。\njava中与线程中断有关的主要是以下三个方法 ：\n\n<!--more-->\n\n``` java\n\tpublic void interrupt()  //设置中断标志位\n\tpublic boolean isInterrupted() //检查是否中断\n\tpublic static boolean interrupted() //检查是否中断，并清除终端状态\n```\n\n下面的代码对t1进行中断，那么中断后，t1就真的会停止吗？\n\n``` java\n\tpublic class InterruptThread {\n\t\tpublic static void main(String[] args) throws InterruptedException {\n\t\t\tThread t = new Thread() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\twhile(true) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tThread.sleep(200);\n\t\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t\tSystem.out.println(\"Interrupted when sleeping\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tThread.yield();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t\tt.start();\n\t\t\tThread.sleep(200);\n\t\t\tt.interrupt();\n\t\t}\n\t}\n```\n答案是否定的。虽然t1设置了中断位置，却没有什么作用。那么应该怎么做呢？\n有两种实现方法。\n- 捕获到异常时直接退出。\n- 如下程序\n\n``` java\n\tpublic class InterruptThread {\n\t\tpublic static void main(String[] args) throws InterruptedException {\n\t\t\tThread t1 = new Thread() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\twhile(true) {\n\t\t\t\t\t\tif(Thread.currentThread().isInterrupted()) {\n\t\t\t\t\t\t\tSystem.out.println(\"Interrupted !\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tThread.sleep(200);\n\t\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t\tSystem.out.println(\"Interrupted when sleeping\");\n\t\t\t\t\t\t\tThread.currentThread().interrupt();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tThread.yield();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t\tt1.start();\n\t\t\tThread.sleep(200);\n\t\t\tt1.interrupt();\n\t\t}\n\t}\n\n```\nThread.sleep()因中断而抛出异常，异常会清楚中断标志位，所以必须重新设置中断标志位。","slug":"intercurrent_thread_interrupt-sleep","published":1,"updated":"2017-03-08T10:57:54.545Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5dj001yqoq1nb27n47i","content":"<h3 id=\"线程休眠\"><a href=\"#线程休眠\" class=\"headerlink\" title=\"线程休眠\"></a>线程休眠</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">sleep</span><span class=\"params\">(<span class=\"keyword\">long</span> millis)</span> <span class=\"keyword\">throws</span> InterruptedException</span>;</div></pre></td></tr></table></figure>\n<h3 id=\"线程中断\"><a href=\"#线程中断\" class=\"headerlink\" title=\"线程中断\"></a>线程中断</h3><p>前面我们说到了线程销毁stop(),但由于会释放所有资源，引起线程安全问题而被废弃。那么在JDK中是有一套强大的支持能避免这个问题呢？答案是肯定的，那就是线程中断。<br>严格地说，线程中断并没有直接退出，而是给目标线程发送通知，至于目标线程怎么处理，则是目标线程的事了。<br>java中与线程中断有关的主要是以下三个方法 ：</p>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">interrupt</span><span class=\"params\">()</span>  <span class=\"comment\">//设置中断标志位</span></span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isInterrupted</span><span class=\"params\">()</span> <span class=\"comment\">//检查是否中断</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">interrupted</span><span class=\"params\">()</span> <span class=\"comment\">//检查是否中断，并清除终端状态</span></div></pre></td></tr></table></figure>\n<p>下面的代码对t1进行中断，那么中断后，t1就真的会停止吗？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InterruptThread</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">\t\tThread t = <span class=\"keyword\">new</span> Thread() &#123;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\t\tThread.sleep(<span class=\"number\">200</span>);</div><div class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t\t\tSystem.out.println(<span class=\"string\">\"Interrupted when sleeping\"</span>);</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\tThread.yield();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tt.start();</div><div class=\"line\">\t\tThread.sleep(<span class=\"number\">200</span>);</div><div class=\"line\">\t\tt.interrupt();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>答案是否定的。虽然t1设置了中断位置，却没有什么作用。那么应该怎么做呢？<br>有两种实现方法。</p>\n<ul>\n<li>捕获到异常时直接退出。</li>\n<li>如下程序</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InterruptThread</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread() &#123;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(Thread.currentThread().isInterrupted()) &#123;</div><div class=\"line\">\t\t\t\t\t\tSystem.out.println(<span class=\"string\">\"Interrupted !\"</span>);</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\t\tThread.sleep(<span class=\"number\">200</span>);</div><div class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t\t\tSystem.out.println(<span class=\"string\">\"Interrupted when sleeping\"</span>);</div><div class=\"line\">\t\t\t\t\t\tThread.currentThread().interrupt();</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\tThread.yield();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tt1.start();</div><div class=\"line\">\t\tThread.sleep(<span class=\"number\">200</span>);</div><div class=\"line\">\t\tt1.interrupt();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Thread.sleep()因中断而抛出异常，异常会清楚中断标志位，所以必须重新设置中断标志位。</p>\n","excerpt":"<h3 id=\"线程休眠\"><a href=\"#线程休眠\" class=\"headerlink\" title=\"线程休眠\"></a>线程休眠</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">sleep</span><span class=\"params\">(<span class=\"keyword\">long</span> millis)</span> <span class=\"keyword\">throws</span> InterruptedException</span>;</div></pre></td></tr></table></figure>\n<h3 id=\"线程中断\"><a href=\"#线程中断\" class=\"headerlink\" title=\"线程中断\"></a>线程中断</h3><p>前面我们说到了线程销毁stop(),但由于会释放所有资源，引起线程安全问题而被废弃。那么在JDK中是有一套强大的支持能避免这个问题呢？答案是肯定的，那就是线程中断。<br>严格地说，线程中断并没有直接退出，而是给目标线程发送通知，至于目标线程怎么处理，则是目标线程的事了。<br>java中与线程中断有关的主要是以下三个方法 ：</p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">interrupt</span><span class=\"params\">()</span>  <span class=\"comment\">//设置中断标志位</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isInterrupted</span><span class=\"params\">()</span> <span class=\"comment\">//检查是否中断</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">interrupted</span><span class=\"params\">()</span> <span class=\"comment\">//检查是否中断，并清除终端状态</span></span></div></pre></td></tr></table></figure>\n<p>下面的代码对t1进行中断，那么中断后，t1就真的会停止吗？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InterruptThread</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">\t\tThread t = <span class=\"keyword\">new</span> Thread() &#123;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\t\tThread.sleep(<span class=\"number\">200</span>);</div><div class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t\t\tSystem.out.println(<span class=\"string\">\"Interrupted when sleeping\"</span>);</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\tThread.yield();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tt.start();</div><div class=\"line\">\t\tThread.sleep(<span class=\"number\">200</span>);</div><div class=\"line\">\t\tt.interrupt();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>答案是否定的。虽然t1设置了中断位置，却没有什么作用。那么应该怎么做呢？<br>有两种实现方法。</p>\n<ul>\n<li>捕获到异常时直接退出。</li>\n<li>如下程序</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InterruptThread</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread() &#123;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(Thread.currentThread().isInterrupted()) &#123;</div><div class=\"line\">\t\t\t\t\t\tSystem.out.println(<span class=\"string\">\"Interrupted !\"</span>);</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\t\tThread.sleep(<span class=\"number\">200</span>);</div><div class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t\t\tSystem.out.println(<span class=\"string\">\"Interrupted when sleeping\"</span>);</div><div class=\"line\">\t\t\t\t\t\tThread.currentThread().interrupt();</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\tThread.yield();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tt1.start();</div><div class=\"line\">\t\tThread.sleep(<span class=\"number\">200</span>);</div><div class=\"line\">\t\tt1.interrupt();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Thread.sleep()因中断而抛出异常，异常会清楚中断标志位，所以必须重新设置中断标志位。</p>"},{"title":"并发编程（七）守护线程与优先级","date":"2016-06-22T07:32:07.000Z","_content":"### 什么是守护线程\n\n守护线程又被称为精灵线程，当所有的用户线程结束后，守护线程会自动退出，程序结束。\n\t\n``` java\n\tpublic class DaemonThread extends Thread {\n\t\t@Override\n\t\tpublic void run() {\n\t\n\t\t\twhile(true) {\n\t\t\t\tSystem.out.println(\"HelloWorld\");\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(100);\n\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) throws InterruptedException {                  \n\t\t\tThread t = new DaemonThread();\n\t\t\tt.start();\n\t\t\tt.setDaemon(true);\n\t\t\tThread.sleep(1000);\n\t\t\tSystem.out.println(\"MainThread end\");\n\t\t}\n\t}\n```\n\n### 守护线程应该注意什么 <!--more-->\n\t\n- Thread.setDaemon(true)必须在Thread.start()之前，否则会抛出java.lang.IllegalThreadStateException\n- 守护线程里面所产生的线程都是守护线程\n- 不是所用应用都可以使用守护线程，例如文件读写。\n\n### 线程优先级\n\n线程的优先级从1到10，数字越大，优先级越高，获取CPU的概率越大，但不代表优先级高就一定要比优先级低的先执行\n``` java\n\tpublic class PriorityThread {\n\t\tpublic static class HighPriority extends Thread {\n\t\t\tprivate static int i = 0;\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\twhile(true) {\n\t\t\t\t\tsynchronized (LowPriority.class) {\n\t\t\t\t\t\tif(i > 10000) {\n\t\t\t\t\t\t\tSystem.out.println(\"HighPriority complete\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static class LowPriority extends Thread {\n\t\t\tprivate static int i = 0;\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\twhile(true) {\n\t\t\t\t\tsynchronized (LowPriority.class) {\n\t\t\t\t\t\tif(i > 10000) {\n\t\t\t\t\t\t\tSystem.out.println(\"LowPriority complete\");  \n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) {\n\t\t\tThread t1 = new HighPriority();\n\t\t\tThread t2 = new LowPriority();\n\t\t\tt1.setPriority(Thread.MAX_PRIORITY);\n\t\t\tt2.setPriority(Thread.MIN_PRIORITY);\n\t\t\tt1.start();\n\t\t\tt2.start();\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\nHighPriority complete\nLowPriority complete\n```\n","source":"_posts/intercurrent_thread_priority-daemon.md","raw":"---\ntitle: 并发编程（七）守护线程与优先级\ndate: 2016-06-22 15:32:07\ntags:\n\t- 并发编程\n---\n### 什么是守护线程\n\n守护线程又被称为精灵线程，当所有的用户线程结束后，守护线程会自动退出，程序结束。\n\t\n``` java\n\tpublic class DaemonThread extends Thread {\n\t\t@Override\n\t\tpublic void run() {\n\t\n\t\t\twhile(true) {\n\t\t\t\tSystem.out.println(\"HelloWorld\");\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(100);\n\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) throws InterruptedException {                  \n\t\t\tThread t = new DaemonThread();\n\t\t\tt.start();\n\t\t\tt.setDaemon(true);\n\t\t\tThread.sleep(1000);\n\t\t\tSystem.out.println(\"MainThread end\");\n\t\t}\n\t}\n```\n\n### 守护线程应该注意什么 <!--more-->\n\t\n- Thread.setDaemon(true)必须在Thread.start()之前，否则会抛出java.lang.IllegalThreadStateException\n- 守护线程里面所产生的线程都是守护线程\n- 不是所用应用都可以使用守护线程，例如文件读写。\n\n### 线程优先级\n\n线程的优先级从1到10，数字越大，优先级越高，获取CPU的概率越大，但不代表优先级高就一定要比优先级低的先执行\n``` java\n\tpublic class PriorityThread {\n\t\tpublic static class HighPriority extends Thread {\n\t\t\tprivate static int i = 0;\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\twhile(true) {\n\t\t\t\t\tsynchronized (LowPriority.class) {\n\t\t\t\t\t\tif(i > 10000) {\n\t\t\t\t\t\t\tSystem.out.println(\"HighPriority complete\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static class LowPriority extends Thread {\n\t\t\tprivate static int i = 0;\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\twhile(true) {\n\t\t\t\t\tsynchronized (LowPriority.class) {\n\t\t\t\t\t\tif(i > 10000) {\n\t\t\t\t\t\t\tSystem.out.println(\"LowPriority complete\");  \n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) {\n\t\t\tThread t1 = new HighPriority();\n\t\t\tThread t2 = new LowPriority();\n\t\t\tt1.setPriority(Thread.MAX_PRIORITY);\n\t\t\tt2.setPriority(Thread.MIN_PRIORITY);\n\t\t\tt1.start();\n\t\t\tt2.start();\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\nHighPriority complete\nLowPriority complete\n```\n","slug":"intercurrent_thread_priority-daemon","published":1,"updated":"2017-03-08T10:56:32.452Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5dl0021qoq1cwh52293","content":"<h3 id=\"什么是守护线程\"><a href=\"#什么是守护线程\" class=\"headerlink\" title=\"什么是守护线程\"></a>什么是守护线程</h3><p>守护线程又被称为精灵线程，当所有的用户线程结束后，守护线程会自动退出，程序结束。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DaemonThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"HelloWorld\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tThread.sleep(<span class=\"number\">100</span>);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;                  </div><div class=\"line\">\t\tThread t = <span class=\"keyword\">new</span> DaemonThread();</div><div class=\"line\">\t\tt.start();</div><div class=\"line\">\t\tt.setDaemon(<span class=\"keyword\">true</span>);</div><div class=\"line\">\t\tThread.sleep(<span class=\"number\">1000</span>);</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"MainThread end\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"守护线程应该注意什么\"><a href=\"#守护线程应该注意什么\" class=\"headerlink\" title=\"守护线程应该注意什么 \"></a>守护线程应该注意什么 <a id=\"more\"></a></h3><ul>\n<li>Thread.setDaemon(true)必须在Thread.start()之前，否则会抛出java.lang.IllegalThreadStateException</li>\n<li>守护线程里面所产生的线程都是守护线程</li>\n<li>不是所用应用都可以使用守护线程，例如文件读写。</li>\n</ul>\n<h3 id=\"线程优先级\"><a href=\"#线程优先级\" class=\"headerlink\" title=\"线程优先级\"></a>线程优先级</h3><p>线程的优先级从1到10，数字越大，优先级越高，获取CPU的概率越大，但不代表优先级高就一定要比优先级低的先执行<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PriorityThread</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HighPriority</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">synchronized</span> (LowPriority.class) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(i &gt; <span class=\"number\">10000</span>) &#123;</div><div class=\"line\">\t\t\t\t\t\tSystem.out.println(<span class=\"string\">\"HighPriority complete\"</span>);</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\ti++;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LowPriority</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">synchronized</span> (LowPriority.class) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(i &gt; <span class=\"number\">10000</span>) &#123;</div><div class=\"line\">\t\t\t\t\t\tSystem.out.println(<span class=\"string\">\"LowPriority complete\"</span>);  </div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\ti++;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> HighPriority();</div><div class=\"line\">\t\tThread t2 = <span class=\"keyword\">new</span> LowPriority();</div><div class=\"line\">\t\tt1.setPriority(Thread.MAX_PRIORITY);</div><div class=\"line\">\t\tt2.setPriority(Thread.MIN_PRIORITY);</div><div class=\"line\">\t\tt1.start();</div><div class=\"line\">\t\tt2.start();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">HighPriority complete</div><div class=\"line\">LowPriority complete</div></pre></td></tr></table></figure></p>\n","excerpt":"<h3 id=\"什么是守护线程\"><a href=\"#什么是守护线程\" class=\"headerlink\" title=\"什么是守护线程\"></a>什么是守护线程</h3><p>守护线程又被称为精灵线程，当所有的用户线程结束后，守护线程会自动退出，程序结束。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DaemonThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"HelloWorld\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tThread.sleep(<span class=\"number\">100</span>);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;                  </div><div class=\"line\">\t\tThread t = <span class=\"keyword\">new</span> DaemonThread();</div><div class=\"line\">\t\tt.start();</div><div class=\"line\">\t\tt.setDaemon(<span class=\"keyword\">true</span>);</div><div class=\"line\">\t\tThread.sleep(<span class=\"number\">1000</span>);</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"MainThread end\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"守护线程应该注意什么\"><a href=\"#守护线程应该注意什么\" class=\"headerlink\" title=\"守护线程应该注意什么 \"></a>守护线程应该注意什么","more":"</h3><ul>\n<li>Thread.setDaemon(true)必须在Thread.start()之前，否则会抛出java.lang.IllegalThreadStateException</li>\n<li>守护线程里面所产生的线程都是守护线程</li>\n<li>不是所用应用都可以使用守护线程，例如文件读写。</li>\n</ul>\n<h3 id=\"线程优先级\"><a href=\"#线程优先级\" class=\"headerlink\" title=\"线程优先级\"></a>线程优先级</h3><p>线程的优先级从1到10，数字越大，优先级越高，获取CPU的概率越大，但不代表优先级高就一定要比优先级低的先执行<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PriorityThread</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HighPriority</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">synchronized</span> (LowPriority.class) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(i &gt; <span class=\"number\">10000</span>) &#123;</div><div class=\"line\">\t\t\t\t\t\tSystem.out.println(<span class=\"string\">\"HighPriority complete\"</span>);</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\ti++;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LowPriority</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">synchronized</span> (LowPriority.class) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(i &gt; <span class=\"number\">10000</span>) &#123;</div><div class=\"line\">\t\t\t\t\t\tSystem.out.println(<span class=\"string\">\"LowPriority complete\"</span>);  </div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\ti++;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> HighPriority();</div><div class=\"line\">\t\tThread t2 = <span class=\"keyword\">new</span> LowPriority();</div><div class=\"line\">\t\tt1.setPriority(Thread.MAX_PRIORITY);</div><div class=\"line\">\t\tt2.setPriority(Thread.MIN_PRIORITY);</div><div class=\"line\">\t\tt1.start();</div><div class=\"line\">\t\tt2.start();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">HighPriority complete</div><div class=\"line\">LowPriority complete</div></pre></td></tr></table></figure></p>"},{"title":"并发编程（五）线程的挂起与线程恢复","date":"2016-06-14T06:30:18.000Z","_content":"### 什么是线程挂起\n\n线程挂起就是就是使线程处于不可执行状态。那不可执行状态又有哪些呢？\n- Thread.sleep(1000) 在这1000ms中处于不可执行状态\n- Thread.join()\n- Thread.wait()\n\n<!--more-->\n\n``` java\n\t@Deprecated\n    public final void suspend()\n```\n\n### 什么是线程恢复\n\n线程恢复就是就是使挂起线程再重新处于可执行状态。\n``` java\n\t@Deprecated\n    public final void resume()\n```\n\n### 为什么挂起和恢复会被废弃\n\n线程挂起的时候，并不会释放资源，其他任何线程想要访问被他占有的锁都会收到牵连，导致程序不能正常运行。直到对应线程上进行resume()操作，被挂起的线程才能继续。有人说这没什么啊，只是多等待一会啊。\n可是最关键的是一旦在resume()操作在suspend()前执行，那么挂起的县城很难有机会再执行，严重的话，它可能导致整个系统都崩溃。\n\n### 解决方案\n\n- 像之前stop()一样，增加一个标志性变量\n- 使用wait()和notify()代替suspend()和resume()","source":"_posts/intercurrent_thread_suspend-resune.md","raw":"---\ntitle: 并发编程（五）线程的挂起与线程恢复\ndate: 2016-06-14 14:30:18\ntags:\n\t- 并发编程\n---\n### 什么是线程挂起\n\n线程挂起就是就是使线程处于不可执行状态。那不可执行状态又有哪些呢？\n- Thread.sleep(1000) 在这1000ms中处于不可执行状态\n- Thread.join()\n- Thread.wait()\n\n<!--more-->\n\n``` java\n\t@Deprecated\n    public final void suspend()\n```\n\n### 什么是线程恢复\n\n线程恢复就是就是使挂起线程再重新处于可执行状态。\n``` java\n\t@Deprecated\n    public final void resume()\n```\n\n### 为什么挂起和恢复会被废弃\n\n线程挂起的时候，并不会释放资源，其他任何线程想要访问被他占有的锁都会收到牵连，导致程序不能正常运行。直到对应线程上进行resume()操作，被挂起的线程才能继续。有人说这没什么啊，只是多等待一会啊。\n可是最关键的是一旦在resume()操作在suspend()前执行，那么挂起的县城很难有机会再执行，严重的话，它可能导致整个系统都崩溃。\n\n### 解决方案\n\n- 像之前stop()一样，增加一个标志性变量\n- 使用wait()和notify()代替suspend()和resume()","slug":"intercurrent_thread_suspend-resune","published":1,"updated":"2017-03-08T10:56:22.721Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5dm0023qoq14vgvab3f","content":"<h3 id=\"什么是线程挂起\"><a href=\"#什么是线程挂起\" class=\"headerlink\" title=\"什么是线程挂起\"></a>什么是线程挂起</h3><p>线程挂起就是就是使线程处于不可执行状态。那不可执行状态又有哪些呢？</p>\n<ul>\n<li>Thread.sleep(1000) 在这1000ms中处于不可执行状态</li>\n<li>Thread.join()</li>\n<li>Thread.wait()</li>\n</ul>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Deprecated</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">suspend</span><span class=\"params\">()</span></span></div></pre></td></tr></table></figure>\n<h3 id=\"什么是线程恢复\"><a href=\"#什么是线程恢复\" class=\"headerlink\" title=\"什么是线程恢复\"></a>什么是线程恢复</h3><p>线程恢复就是就是使挂起线程再重新处于可执行状态。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Deprecated</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">resume</span><span class=\"params\">()</span></span></div></pre></td></tr></table></figure></p>\n<h3 id=\"为什么挂起和恢复会被废弃\"><a href=\"#为什么挂起和恢复会被废弃\" class=\"headerlink\" title=\"为什么挂起和恢复会被废弃\"></a>为什么挂起和恢复会被废弃</h3><p>线程挂起的时候，并不会释放资源，其他任何线程想要访问被他占有的锁都会收到牵连，导致程序不能正常运行。直到对应线程上进行resume()操作，被挂起的线程才能继续。有人说这没什么啊，只是多等待一会啊。<br>可是最关键的是一旦在resume()操作在suspend()前执行，那么挂起的县城很难有机会再执行，严重的话，它可能导致整个系统都崩溃。</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><ul>\n<li>像之前stop()一样，增加一个标志性变量</li>\n<li>使用wait()和notify()代替suspend()和resume()</li>\n</ul>\n","excerpt":"<h3 id=\"什么是线程挂起\"><a href=\"#什么是线程挂起\" class=\"headerlink\" title=\"什么是线程挂起\"></a>什么是线程挂起</h3><p>线程挂起就是就是使线程处于不可执行状态。那不可执行状态又有哪些呢？</p>\n<ul>\n<li>Thread.sleep(1000) 在这1000ms中处于不可执行状态</li>\n<li>Thread.join()</li>\n<li>Thread.wait()</li>\n</ul>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Deprecated</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">suspend</span><span class=\"params\">()</span></span></div></pre></td></tr></table></figure>\n<h3 id=\"什么是线程恢复\"><a href=\"#什么是线程恢复\" class=\"headerlink\" title=\"什么是线程恢复\"></a>什么是线程恢复</h3><p>线程恢复就是就是使挂起线程再重新处于可执行状态。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Deprecated</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">resume</span><span class=\"params\">()</span></span></div></pre></td></tr></table></figure></p>\n<h3 id=\"为什么挂起和恢复会被废弃\"><a href=\"#为什么挂起和恢复会被废弃\" class=\"headerlink\" title=\"为什么挂起和恢复会被废弃\"></a>为什么挂起和恢复会被废弃</h3><p>线程挂起的时候，并不会释放资源，其他任何线程想要访问被他占有的锁都会收到牵连，导致程序不能正常运行。直到对应线程上进行resume()操作，被挂起的线程才能继续。有人说这没什么啊，只是多等待一会啊。<br>可是最关键的是一旦在resume()操作在suspend()前执行，那么挂起的县城很难有机会再执行，严重的话，它可能导致整个系统都崩溃。</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><ul>\n<li>像之前stop()一样，增加一个标志性变量</li>\n<li>使用wait()和notify()代替suspend()和resume()</li>\n</ul>"},{"title":"并发编程（三）线程的等待与通知","date":"2016-06-08T13:45:25.000Z","_content":"为了支持多线程之间的通讯，JDK提供了wait()和notify()两个重要的方法。但请注意这两个方法都不是Thread类所拥有的，而是Object类所提供的。这就意味着所有的对象都可以调用这个方法。\n``` java \n\tpublic final void wait() throws InterruptedException\n\tpublic final native void notify()\n```\n\n<!--more-->\n\n当对象调用wait()后，当前线程则会停止继续执行，转换为等待状态，直到有对象将其唤醒，此线程才继续向下执行\n当对象调用notify()后，它就会进入Object等待队列随机唤醒一个线程，注意这里不是唤醒优先级高的，更不是唤醒先来的。\nnotify()相似的方法notifyAll()，它是将Object等待队列中所有的线程全部唤醒。\n\nObject.wait()和Object.notify()并不是所有地方都可以调用，它必须包含在对应的synchronized语句中，否则会抛出java.lang.IllegalMonitorStateException。\n\n当notify()将其它线程唤醒，被唤醒的线程也不能立即向下执行，它必须获取Object的监视器才能向下执行。下面我就给出一个小小的示例 ：\n``` java\n\tpublic class ThreadWN {\n\t\tprivate static Object obj = new Object();\n\t\t\n\t\tpublic static class WaitThread extends Thread {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tsynchronized (obj) {\n\t\t\t\t\tSystem.out.println(System.currentTimeMillis() +\n\t\t\t\t\t\" WaitThread start\");\n\t\t\t\t\ttry {\n\t\t\t\t\t\tobj.wait();\n\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.println(System.currentTimeMillis() +               \n\t\t\t\t\t\" WaitThread end\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static class NotifyThread extends Thread {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tsynchronized (obj) {\n\t\t\t\t\tSystem.out.println(System.currentTimeMillis() + \n\t\t\t\t\t\" NotifyThread start\");\n\t\t\t\t\tobj.notify();\n\t\t\t\t\tSystem.out.println(System.currentTimeMillis() + \n\t\t\t\t\t\" NotifyThread end\");\n\t\t\t\t\ttry {\n\t\t\t\t\t\tThread.sleep(2000);\n\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) {\n\t\t\tWaitThread wt = new WaitThread();\n\t\t\twt.start();\n\t\t\tNotifyThread nt = new NotifyThread();\n\t\t\tnt.start();\n\t\t}\t\n\t}\n```\n输出结果如下 ：\n``` java\n1469168734181 WaitThread start\n1469168734181 NotifyThread start\n1469168734181 NotifyThread end\n1469168736183 WaitThread end\n```\n","source":"_posts/intercurrent_thread_wait-notify.md","raw":"---\ntitle: 并发编程（三）线程的等待与通知\ndate: 2016-06-08 21:45:25\ntags:\n\t- 并发编程\n---\n为了支持多线程之间的通讯，JDK提供了wait()和notify()两个重要的方法。但请注意这两个方法都不是Thread类所拥有的，而是Object类所提供的。这就意味着所有的对象都可以调用这个方法。\n``` java \n\tpublic final void wait() throws InterruptedException\n\tpublic final native void notify()\n```\n\n<!--more-->\n\n当对象调用wait()后，当前线程则会停止继续执行，转换为等待状态，直到有对象将其唤醒，此线程才继续向下执行\n当对象调用notify()后，它就会进入Object等待队列随机唤醒一个线程，注意这里不是唤醒优先级高的，更不是唤醒先来的。\nnotify()相似的方法notifyAll()，它是将Object等待队列中所有的线程全部唤醒。\n\nObject.wait()和Object.notify()并不是所有地方都可以调用，它必须包含在对应的synchronized语句中，否则会抛出java.lang.IllegalMonitorStateException。\n\n当notify()将其它线程唤醒，被唤醒的线程也不能立即向下执行，它必须获取Object的监视器才能向下执行。下面我就给出一个小小的示例 ：\n``` java\n\tpublic class ThreadWN {\n\t\tprivate static Object obj = new Object();\n\t\t\n\t\tpublic static class WaitThread extends Thread {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tsynchronized (obj) {\n\t\t\t\t\tSystem.out.println(System.currentTimeMillis() +\n\t\t\t\t\t\" WaitThread start\");\n\t\t\t\t\ttry {\n\t\t\t\t\t\tobj.wait();\n\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.println(System.currentTimeMillis() +               \n\t\t\t\t\t\" WaitThread end\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static class NotifyThread extends Thread {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tsynchronized (obj) {\n\t\t\t\t\tSystem.out.println(System.currentTimeMillis() + \n\t\t\t\t\t\" NotifyThread start\");\n\t\t\t\t\tobj.notify();\n\t\t\t\t\tSystem.out.println(System.currentTimeMillis() + \n\t\t\t\t\t\" NotifyThread end\");\n\t\t\t\t\ttry {\n\t\t\t\t\t\tThread.sleep(2000);\n\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) {\n\t\t\tWaitThread wt = new WaitThread();\n\t\t\twt.start();\n\t\t\tNotifyThread nt = new NotifyThread();\n\t\t\tnt.start();\n\t\t}\t\n\t}\n```\n输出结果如下 ：\n``` java\n1469168734181 WaitThread start\n1469168734181 NotifyThread start\n1469168734181 NotifyThread end\n1469168736183 WaitThread end\n```\n","slug":"intercurrent_thread_wait-notify","published":1,"updated":"2017-03-08T10:55:05.231Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5dp0026qoq1l812bwm1","content":"<p>为了支持多线程之间的通讯，JDK提供了wait()和notify()两个重要的方法。但请注意这两个方法都不是Thread类所拥有的，而是Object类所提供的。这就意味着所有的对象都可以调用这个方法。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">wait</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">notify</span><span class=\"params\">()</span></div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>当对象调用wait()后，当前线程则会停止继续执行，转换为等待状态，直到有对象将其唤醒，此线程才继续向下执行<br>当对象调用notify()后，它就会进入Object等待队列随机唤醒一个线程，注意这里不是唤醒优先级高的，更不是唤醒先来的。<br>notify()相似的方法notifyAll()，它是将Object等待队列中所有的线程全部唤醒。</p>\n<p>Object.wait()和Object.notify()并不是所有地方都可以调用，它必须包含在对应的synchronized语句中，否则会抛出java.lang.IllegalMonitorStateException。</p>\n<p>当notify()将其它线程唤醒，被唤醒的线程也不能立即向下执行，它必须获取Object的监视器才能向下执行。下面我就给出一个小小的示例 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadWN</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Object obj = <span class=\"keyword\">new</span> Object();</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WaitThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span> (obj) &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(System.currentTimeMillis() +</div><div class=\"line\">\t\t\t\t<span class=\"string\">\" WaitThread start\"</span>);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\tobj.wait();</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tSystem.out.println(System.currentTimeMillis() +               </div><div class=\"line\">\t\t\t\t<span class=\"string\">\" WaitThread end\"</span>);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NotifyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span> (obj) &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(System.currentTimeMillis() + </div><div class=\"line\">\t\t\t\t<span class=\"string\">\" NotifyThread start\"</span>);</div><div class=\"line\">\t\t\t\tobj.notify();</div><div class=\"line\">\t\t\t\tSystem.out.println(System.currentTimeMillis() + </div><div class=\"line\">\t\t\t\t<span class=\"string\">\" NotifyThread end\"</span>);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\tThread.sleep(<span class=\"number\">2000</span>);</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tWaitThread wt = <span class=\"keyword\">new</span> WaitThread();</div><div class=\"line\">\t\twt.start();</div><div class=\"line\">\t\tNotifyThread nt = <span class=\"keyword\">new</span> NotifyThread();</div><div class=\"line\">\t\tnt.start();</div><div class=\"line\">\t&#125;\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果如下 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1469168734181</span> WaitThread start</div><div class=\"line\"><span class=\"number\">1469168734181</span> NotifyThread start</div><div class=\"line\"><span class=\"number\">1469168734181</span> NotifyThread end</div><div class=\"line\"><span class=\"number\">1469168736183</span> WaitThread end</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>为了支持多线程之间的通讯，JDK提供了wait()和notify()两个重要的方法。但请注意这两个方法都不是Thread类所拥有的，而是Object类所提供的。这就意味着所有的对象都可以调用这个方法。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">wait</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">notify</span><span class=\"params\">()</span></span></div></pre></td></tr></table></figure></p>","more":"<p>当对象调用wait()后，当前线程则会停止继续执行，转换为等待状态，直到有对象将其唤醒，此线程才继续向下执行<br>当对象调用notify()后，它就会进入Object等待队列随机唤醒一个线程，注意这里不是唤醒优先级高的，更不是唤醒先来的。<br>notify()相似的方法notifyAll()，它是将Object等待队列中所有的线程全部唤醒。</p>\n<p>Object.wait()和Object.notify()并不是所有地方都可以调用，它必须包含在对应的synchronized语句中，否则会抛出java.lang.IllegalMonitorStateException。</p>\n<p>当notify()将其它线程唤醒，被唤醒的线程也不能立即向下执行，它必须获取Object的监视器才能向下执行。下面我就给出一个小小的示例 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadWN</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Object obj = <span class=\"keyword\">new</span> Object();</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WaitThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span> (obj) &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(System.currentTimeMillis() +</div><div class=\"line\">\t\t\t\t<span class=\"string\">\" WaitThread start\"</span>);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\tobj.wait();</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tSystem.out.println(System.currentTimeMillis() +               </div><div class=\"line\">\t\t\t\t<span class=\"string\">\" WaitThread end\"</span>);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NotifyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span> (obj) &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(System.currentTimeMillis() + </div><div class=\"line\">\t\t\t\t<span class=\"string\">\" NotifyThread start\"</span>);</div><div class=\"line\">\t\t\t\tobj.notify();</div><div class=\"line\">\t\t\t\tSystem.out.println(System.currentTimeMillis() + </div><div class=\"line\">\t\t\t\t<span class=\"string\">\" NotifyThread end\"</span>);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\tThread.sleep(<span class=\"number\">2000</span>);</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tWaitThread wt = <span class=\"keyword\">new</span> WaitThread();</div><div class=\"line\">\t\twt.start();</div><div class=\"line\">\t\tNotifyThread nt = <span class=\"keyword\">new</span> NotifyThread();</div><div class=\"line\">\t\tnt.start();</div><div class=\"line\">\t&#125;\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果如下 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1469168734181</span> WaitThread start</div><div class=\"line\"><span class=\"number\">1469168734181</span> NotifyThread start</div><div class=\"line\"><span class=\"number\">1469168734181</span> NotifyThread end</div><div class=\"line\"><span class=\"number\">1469168736183</span> WaitThread end</div></pre></td></tr></table></figure></p>"},{"title":"并发编程（八）线程组","date":"2016-06-28T07:01:52.000Z","_content":"线程组顾名思义就是将相同功能的线程放在一起。\n### 构造函数\n``` java \n\tpublic ThreadGroup(String name)\n\tpublic ThreadGroup(ThreadGroup parent, String name)\n\n\tprivate ThreadGroup() {     // called from C code\n        this.name = \"system\";\n        this.maxPriority = Thread.MAX_PRIORITY;\n        this.parent = null;\n    }\n```\n\t\n从上面可以看出不添加线程组的名称，则会默认看作system  <!--more-->\n``` java \n\tpublic class GroupThread {\n\t\n\t\tpublic static class HelloWorldPrint implements Runnable {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tsynchronized (this) {\n\t\t\t\t\tSystem.out.println(\"HelloWorld\");\n\t\t\t\t\tSystem.out.println(Thread.currentThread().getThreadGroup().getName() + \" \"\n\t\t\t\t\t\t\t+ Thread.currentThread().getName());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static class NiHaoPrint implements Runnable {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tsynchronized (this) {\n\t\t\t\t\tSystem.out.println(\"Nihao\");\n\t\t\t\t\tSystem.out.println(Thread.currentThread().getThreadGroup().getName() + \" \"\n\t\t\t\t\t\t\t+ Thread.currentThread().getName());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) {\n\t\t\tThreadGroup tg= new ThreadGroup(\"print\");\n\t\t\tThread t1 = new Thread(tg,new HelloWorldPrint(),\"helloWorld\");\n\t\t\tThread t2 = new Thread(tg,new NiHaoPrint(),\"nihao\");\n\t\t\tt1.start();\n\t\t\tt2.start();\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\nNihao\nprint nihao\nHelloWorld\nprint helloWorld\n```\n","source":"_posts/intercurrent_threadgroup.md","raw":"---\ntitle: 并发编程（八）线程组\ndate: 2016-06-28 15:01:52\ntags:\n\t- 并发编程\n---\n线程组顾名思义就是将相同功能的线程放在一起。\n### 构造函数\n``` java \n\tpublic ThreadGroup(String name)\n\tpublic ThreadGroup(ThreadGroup parent, String name)\n\n\tprivate ThreadGroup() {     // called from C code\n        this.name = \"system\";\n        this.maxPriority = Thread.MAX_PRIORITY;\n        this.parent = null;\n    }\n```\n\t\n从上面可以看出不添加线程组的名称，则会默认看作system  <!--more-->\n``` java \n\tpublic class GroupThread {\n\t\n\t\tpublic static class HelloWorldPrint implements Runnable {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tsynchronized (this) {\n\t\t\t\t\tSystem.out.println(\"HelloWorld\");\n\t\t\t\t\tSystem.out.println(Thread.currentThread().getThreadGroup().getName() + \" \"\n\t\t\t\t\t\t\t+ Thread.currentThread().getName());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static class NiHaoPrint implements Runnable {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tsynchronized (this) {\n\t\t\t\t\tSystem.out.println(\"Nihao\");\n\t\t\t\t\tSystem.out.println(Thread.currentThread().getThreadGroup().getName() + \" \"\n\t\t\t\t\t\t\t+ Thread.currentThread().getName());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) {\n\t\t\tThreadGroup tg= new ThreadGroup(\"print\");\n\t\t\tThread t1 = new Thread(tg,new HelloWorldPrint(),\"helloWorld\");\n\t\t\tThread t2 = new Thread(tg,new NiHaoPrint(),\"nihao\");\n\t\t\tt1.start();\n\t\t\tt2.start();\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\nNihao\nprint nihao\nHelloWorld\nprint helloWorld\n```\n","slug":"intercurrent_threadgroup","published":1,"updated":"2017-03-08T10:56:39.271Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5ds0028qoq1mxpxwuk6","content":"<p>线程组顾名思义就是将相同功能的线程放在一起。</p>\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadGroup</span><span class=\"params\">(String name)</span></span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadGroup</span><span class=\"params\">(ThreadGroup parent, String name)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"title\">ThreadGroup</span><span class=\"params\">()</span> &#123;     <span class=\"comment\">// called from C code</span></div><div class=\"line\">       <span class=\"keyword\">this</span>.name = <span class=\"string\">\"system\"</span>;</div><div class=\"line\">       <span class=\"keyword\">this</span>.maxPriority = Thread.MAX_PRIORITY;</div><div class=\"line\">       <span class=\"keyword\">this</span>.parent = <span class=\"keyword\">null</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>从上面可以看出不添加线程组的名称，则会默认看作system  <a id=\"more\"></a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GroupThread</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorldPrint</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"HelloWorld\"</span>);</div><div class=\"line\">\t\t\t\tSystem.out.println(Thread.currentThread().getThreadGroup().getName() + <span class=\"string\">\" \"</span></div><div class=\"line\">\t\t\t\t\t\t+ Thread.currentThread().getName());</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NiHaoPrint</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"Nihao\"</span>);</div><div class=\"line\">\t\t\t\tSystem.out.println(Thread.currentThread().getThreadGroup().getName() + <span class=\"string\">\" \"</span></div><div class=\"line\">\t\t\t\t\t\t+ Thread.currentThread().getName());</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tThreadGroup tg= <span class=\"keyword\">new</span> ThreadGroup(<span class=\"string\">\"print\"</span>);</div><div class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(tg,<span class=\"keyword\">new</span> HelloWorldPrint(),<span class=\"string\">\"helloWorld\"</span>);</div><div class=\"line\">\t\tThread t2 = <span class=\"keyword\">new</span> Thread(tg,<span class=\"keyword\">new</span> NiHaoPrint(),<span class=\"string\">\"nihao\"</span>);</div><div class=\"line\">\t\tt1.start();</div><div class=\"line\">\t\tt2.start();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Nihao</div><div class=\"line\">print nihao</div><div class=\"line\">HelloWorld</div><div class=\"line\">print helloWorld</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>线程组顾名思义就是将相同功能的线程放在一起。</p>\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadGroup</span><span class=\"params\">(String name)</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadGroup</span><span class=\"params\">(ThreadGroup parent, String name)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"title\">ThreadGroup</span><span class=\"params\">()</span> </span>&#123;     <span class=\"comment\">// called from C code</span></div><div class=\"line\">       <span class=\"keyword\">this</span>.name = <span class=\"string\">\"system\"</span>;</div><div class=\"line\">       <span class=\"keyword\">this</span>.maxPriority = Thread.MAX_PRIORITY;</div><div class=\"line\">       <span class=\"keyword\">this</span>.parent = <span class=\"keyword\">null</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>从上面可以看出不添加线程组的名称，则会默认看作system","more":"<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GroupThread</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorldPrint</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"HelloWorld\"</span>);</div><div class=\"line\">\t\t\t\tSystem.out.println(Thread.currentThread().getThreadGroup().getName() + <span class=\"string\">\" \"</span></div><div class=\"line\">\t\t\t\t\t\t+ Thread.currentThread().getName());</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NiHaoPrint</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"Nihao\"</span>);</div><div class=\"line\">\t\t\t\tSystem.out.println(Thread.currentThread().getThreadGroup().getName() + <span class=\"string\">\" \"</span></div><div class=\"line\">\t\t\t\t\t\t+ Thread.currentThread().getName());</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tThreadGroup tg= <span class=\"keyword\">new</span> ThreadGroup(<span class=\"string\">\"print\"</span>);</div><div class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(tg,<span class=\"keyword\">new</span> HelloWorldPrint(),<span class=\"string\">\"helloWorld\"</span>);</div><div class=\"line\">\t\tThread t2 = <span class=\"keyword\">new</span> Thread(tg,<span class=\"keyword\">new</span> NiHaoPrint(),<span class=\"string\">\"nihao\"</span>);</div><div class=\"line\">\t\tt1.start();</div><div class=\"line\">\t\tt2.start();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Nihao</div><div class=\"line\">print nihao</div><div class=\"line\">HelloWorld</div><div class=\"line\">print helloWorld</div></pre></td></tr></table></figure></p>"},{"title":"并发编程(十八)ThreadLocal","date":"2016-07-28T12:35:12.000Z","_content":"ThreadLocal从名字就可以看出，这是个线程局部变量，也就是说只有当前线程可以访问，这也就不存在什么线程安全的问题\n\n<!--more-->\n\n``` java\n\tpublic class TestThreadLocal {\n\t\tprivate static ThreadLocal<Integer> tl = new ThreadLocal<>();\n\t\tpublic static class ThreadA {\n\n\t\t\tpublic void get() {\n\t\t\t\tint data = tl.get();\n\t\t\t\tSystem.out.println(\"A : \"+ Thread.currentThread().getName() + data);\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static class ThreadB {\n\t\t\tpublic void get() {\n\t\t\t\tint data = tl.get();\n\t\t\t\tSystem.out.println(\"B : \"+ Thread.currentThread().getName() + data);\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) {\n\t\t\tfor(int i = 0; i < 2; i++) {\n\t\t\t\tnew Thread(new Runnable() {\n\t\t\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tint data = new Random().nextInt();\n\t\t\t\t\t\tSystem.out.println(Thread.currentThread().getName() + \" put \" + data);\n\t\t\t\t\t\ttl.set(data);\n\t\t\t\t\t\tnew ThreadA().get();\n\t\t\t\t\t\tnew ThreadB().get();\n\t\t\t\t\t}\n\t\t\t\t}).start();\n\t\t\t}\n\t\t}\t\n\t}\n```\n输出结果 ：\n``` java\nThread-0 put 897133741\nThread-1 put 1679577368\nA : Thread-0897133741\nA : Thread-11679577368\nB : Thread-11679577368\nB : Thread-0897133741\n```\n\n\n### ThreadLocal实现原理\n\n``` java\n\tpublic class ThreadLocal<T> {\n\t\tstatic class ThreadLocalMap {}\n\t\tprotected T initialValue() {\n\t\t\treturn null;\n\t\t}\n\n\t\tpublic T get() {\n\t\t\tThread t = Thread.currentThread();\n\t\t\tThreadLocalMap map = getMap(t);\n\t\t\tif (map != null) {\n\t\t\t\tThreadLocalMap.Entry e = map.getEntry(this);                          \n\t\t\t\tif (e != null) {\n\t\t\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t\t\tT result = (T)e.value;\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn setInitialValue();\n\t\t}\n\n\t\tpublic void set(T value) {\n\t\t\tThread t = Thread.currentThread();\n\t\t\tThreadLocalMap map = getMap(t);\n\t\t\tif (map != null)\n\t\t\t\tmap.set(this, value);\n\t\t\telse\n\t\t\t\tcreateMap(t, value);\n\t\t}\n\t}\n\t\n```\n从上面可以看出ThreadLocal.ThreadLocalMap是非常关键的存储单个数据只是存储Map的一个特例，这里要注意的是\n- ThreadLocal.ThreadLocalMap类似于WeekHashMap,其中的Entry都是若引用，只要JVM检测到就会将其回收\n- 使用线程池时，要注意ThreadLocal对象数据的清除\n- 就单数据而言，可以用Map代替ThreadLocal\n``` java\n\tpublic class TestThreadLocal {\n\t\tprivate static Map<Thread,Integer> map = new HashMap<>();\n\t\tpublic static class ThreadA {\n\t\t\tpublic void get() {\n\t\t\t\tint data = map.get(Thread.currentThread());\n\t\t\t\tSystem.out.println(\"A : \"+ Thread.currentThread().getName() + \" \" + data);\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static class ThreadB {\n\t\t\tpublic void get() {\n\t\t\t\tint data = map.get(Thread.currentThread());\n\t\t\t\tSystem.out.println(\"B : \"+ Thread.currentThread().getName() + \" \" + data);\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) {\n\t\t\tfor(int i = 0; i < 2; i++) {\n\t\t\t\tnew Thread(new Runnable() {\n\t\t\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tint data = new Random().nextInt();\n\t\t\t\t\t\tSystem.out.println(Thread.currentThread().getName() + \" put \" + data);\n\t\t\t\t\t\tmap.put(Thread.currentThread(), data);\n\t\t\t\t\t\tnew ThreadA().get();\n\t\t\t\t\t\tnew ThreadB().get();\n\t\t\t\t\t}\n\t\t\t\t}).start();\n\t\t\t}\n\t\t}\n\t}\n\n```\n输出结果 ：\n``` java\nThread-1 put -1497402079\nThread-0 put 1606205752\nA : Thread-0 1606205752\nA : Thread-1 -1497402079\nB : Thread-1 -1497402079\nB : Thread-0 1606205752\n```\n","source":"_posts/intercurrent_threadlocal.md","raw":"---\ntitle: 并发编程(十八)ThreadLocal\ndate: 2016-07-28 20:35:12\ntags:\n\t- 并发编程\n---\nThreadLocal从名字就可以看出，这是个线程局部变量，也就是说只有当前线程可以访问，这也就不存在什么线程安全的问题\n\n<!--more-->\n\n``` java\n\tpublic class TestThreadLocal {\n\t\tprivate static ThreadLocal<Integer> tl = new ThreadLocal<>();\n\t\tpublic static class ThreadA {\n\n\t\t\tpublic void get() {\n\t\t\t\tint data = tl.get();\n\t\t\t\tSystem.out.println(\"A : \"+ Thread.currentThread().getName() + data);\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static class ThreadB {\n\t\t\tpublic void get() {\n\t\t\t\tint data = tl.get();\n\t\t\t\tSystem.out.println(\"B : \"+ Thread.currentThread().getName() + data);\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) {\n\t\t\tfor(int i = 0; i < 2; i++) {\n\t\t\t\tnew Thread(new Runnable() {\n\t\t\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tint data = new Random().nextInt();\n\t\t\t\t\t\tSystem.out.println(Thread.currentThread().getName() + \" put \" + data);\n\t\t\t\t\t\ttl.set(data);\n\t\t\t\t\t\tnew ThreadA().get();\n\t\t\t\t\t\tnew ThreadB().get();\n\t\t\t\t\t}\n\t\t\t\t}).start();\n\t\t\t}\n\t\t}\t\n\t}\n```\n输出结果 ：\n``` java\nThread-0 put 897133741\nThread-1 put 1679577368\nA : Thread-0897133741\nA : Thread-11679577368\nB : Thread-11679577368\nB : Thread-0897133741\n```\n\n\n### ThreadLocal实现原理\n\n``` java\n\tpublic class ThreadLocal<T> {\n\t\tstatic class ThreadLocalMap {}\n\t\tprotected T initialValue() {\n\t\t\treturn null;\n\t\t}\n\n\t\tpublic T get() {\n\t\t\tThread t = Thread.currentThread();\n\t\t\tThreadLocalMap map = getMap(t);\n\t\t\tif (map != null) {\n\t\t\t\tThreadLocalMap.Entry e = map.getEntry(this);                          \n\t\t\t\tif (e != null) {\n\t\t\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t\t\tT result = (T)e.value;\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn setInitialValue();\n\t\t}\n\n\t\tpublic void set(T value) {\n\t\t\tThread t = Thread.currentThread();\n\t\t\tThreadLocalMap map = getMap(t);\n\t\t\tif (map != null)\n\t\t\t\tmap.set(this, value);\n\t\t\telse\n\t\t\t\tcreateMap(t, value);\n\t\t}\n\t}\n\t\n```\n从上面可以看出ThreadLocal.ThreadLocalMap是非常关键的存储单个数据只是存储Map的一个特例，这里要注意的是\n- ThreadLocal.ThreadLocalMap类似于WeekHashMap,其中的Entry都是若引用，只要JVM检测到就会将其回收\n- 使用线程池时，要注意ThreadLocal对象数据的清除\n- 就单数据而言，可以用Map代替ThreadLocal\n``` java\n\tpublic class TestThreadLocal {\n\t\tprivate static Map<Thread,Integer> map = new HashMap<>();\n\t\tpublic static class ThreadA {\n\t\t\tpublic void get() {\n\t\t\t\tint data = map.get(Thread.currentThread());\n\t\t\t\tSystem.out.println(\"A : \"+ Thread.currentThread().getName() + \" \" + data);\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static class ThreadB {\n\t\t\tpublic void get() {\n\t\t\t\tint data = map.get(Thread.currentThread());\n\t\t\t\tSystem.out.println(\"B : \"+ Thread.currentThread().getName() + \" \" + data);\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) {\n\t\t\tfor(int i = 0; i < 2; i++) {\n\t\t\t\tnew Thread(new Runnable() {\n\t\t\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tint data = new Random().nextInt();\n\t\t\t\t\t\tSystem.out.println(Thread.currentThread().getName() + \" put \" + data);\n\t\t\t\t\t\tmap.put(Thread.currentThread(), data);\n\t\t\t\t\t\tnew ThreadA().get();\n\t\t\t\t\t\tnew ThreadB().get();\n\t\t\t\t\t}\n\t\t\t\t}).start();\n\t\t\t}\n\t\t}\n\t}\n\n```\n输出结果 ：\n``` java\nThread-1 put -1497402079\nThread-0 put 1606205752\nA : Thread-0 1606205752\nA : Thread-1 -1497402079\nB : Thread-1 -1497402079\nB : Thread-0 1606205752\n```\n","slug":"intercurrent_threadlocal","published":1,"updated":"2017-03-08T11:05:35.229Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5dx002aqoq1uhg0zzut","content":"<p>ThreadLocal从名字就可以看出，这是个线程局部变量，也就是说只有当前线程可以访问，这也就不存在什么线程安全的问题</p>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestThreadLocal</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ThreadLocal&lt;Integer&gt; tl = <span class=\"keyword\">new</span> ThreadLocal&lt;&gt;();</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadA</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> data = tl.get();</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"A : \"</span>+ Thread.currentThread().getName() + data);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadB</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> data = tl.get();</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"B : \"</span>+ Thread.currentThread().getName() + data);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t</div><div class=\"line\">\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> data = <span class=\"keyword\">new</span> Random().nextInt();</div><div class=\"line\">\t\t\t\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\" put \"</span> + data);</div><div class=\"line\">\t\t\t\t\ttl.set(data);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">new</span> ThreadA().get();</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">new</span> ThreadB().get();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;).start();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Thread-<span class=\"number\">0</span> put <span class=\"number\">897133741</span></div><div class=\"line\">Thread-<span class=\"number\">1</span> put <span class=\"number\">1679577368</span></div><div class=\"line\">A : Thread-<span class=\"number\">0897133741</span></div><div class=\"line\">A : Thread-<span class=\"number\">11679577368</span></div><div class=\"line\">B : Thread-<span class=\"number\">11679577368</span></div><div class=\"line\">B : Thread-<span class=\"number\">0897133741</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"ThreadLocal实现原理\"><a href=\"#ThreadLocal实现原理\" class=\"headerlink\" title=\"ThreadLocal实现原理\"></a>ThreadLocal实现原理</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadLocal</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadLocalMap</span> </span>&#123;&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> T <span class=\"title\">initialValue</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tThread t = Thread.currentThread();</div><div class=\"line\">\t\tThreadLocalMap map = getMap(t);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (map != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\tThreadLocalMap.Entry e = map.getEntry(<span class=\"keyword\">this</span>);                          </div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (e != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">\t\t\t\tT result = (T)e.value;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> setInitialValue();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(T value)</span> </span>&#123;</div><div class=\"line\">\t\tThread t = Thread.currentThread();</div><div class=\"line\">\t\tThreadLocalMap map = getMap(t);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (map != <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\tmap.set(<span class=\"keyword\">this</span>, value);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\tcreateMap(t, value);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>从上面可以看出ThreadLocal.ThreadLocalMap是非常关键的存储单个数据只是存储Map的一个特例，这里要注意的是</p>\n<ul>\n<li>ThreadLocal.ThreadLocalMap类似于WeekHashMap,其中的Entry都是若引用，只要JVM检测到就会将其回收</li>\n<li>使用线程池时，要注意ThreadLocal对象数据的清除</li>\n<li>就单数据而言，可以用Map代替ThreadLocal<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestThreadLocal</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Map&lt;Thread,Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadA</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> data = map.get(Thread.currentThread());</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"A : \"</span>+ Thread.currentThread().getName() + <span class=\"string\">\" \"</span> + data);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadB</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> data = map.get(Thread.currentThread());</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"B : \"</span>+ Thread.currentThread().getName() + <span class=\"string\">\" \"</span> + data);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t</div><div class=\"line\">\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> data = <span class=\"keyword\">new</span> Random().nextInt();</div><div class=\"line\">\t\t\t\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\" put \"</span> + data);</div><div class=\"line\">\t\t\t\t\tmap.put(Thread.currentThread(), data);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">new</span> ThreadA().get();</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">new</span> ThreadB().get();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;).start();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Thread-<span class=\"number\">1</span> put -<span class=\"number\">1497402079</span></div><div class=\"line\">Thread-<span class=\"number\">0</span> put <span class=\"number\">1606205752</span></div><div class=\"line\">A : Thread-<span class=\"number\">0</span> <span class=\"number\">1606205752</span></div><div class=\"line\">A : Thread-<span class=\"number\">1</span> -<span class=\"number\">1497402079</span></div><div class=\"line\">B : Thread-<span class=\"number\">1</span> -<span class=\"number\">1497402079</span></div><div class=\"line\">B : Thread-<span class=\"number\">0</span> <span class=\"number\">1606205752</span></div></pre></td></tr></table></figure></p>\n","excerpt":"<p>ThreadLocal从名字就可以看出，这是个线程局部变量，也就是说只有当前线程可以访问，这也就不存在什么线程安全的问题</p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestThreadLocal</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ThreadLocal&lt;Integer&gt; tl = <span class=\"keyword\">new</span> ThreadLocal&lt;&gt;();</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadA</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> data = tl.get();</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"A : \"</span>+ Thread.currentThread().getName() + data);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadB</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> data = tl.get();</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"B : \"</span>+ Thread.currentThread().getName() + data);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t</div><div class=\"line\">\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> data = <span class=\"keyword\">new</span> Random().nextInt();</div><div class=\"line\">\t\t\t\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\" put \"</span> + data);</div><div class=\"line\">\t\t\t\t\ttl.set(data);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">new</span> ThreadA().get();</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">new</span> ThreadB().get();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;).start();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Thread-<span class=\"number\">0</span> put <span class=\"number\">897133741</span></div><div class=\"line\">Thread-<span class=\"number\">1</span> put <span class=\"number\">1679577368</span></div><div class=\"line\">A : Thread-<span class=\"number\">0897133741</span></div><div class=\"line\">A : Thread-<span class=\"number\">11679577368</span></div><div class=\"line\">B : Thread-<span class=\"number\">11679577368</span></div><div class=\"line\">B : Thread-<span class=\"number\">0897133741</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"ThreadLocal实现原理\"><a href=\"#ThreadLocal实现原理\" class=\"headerlink\" title=\"ThreadLocal实现原理\"></a>ThreadLocal实现原理</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadLocal</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadLocalMap</span> </span>&#123;&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> T <span class=\"title\">initialValue</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tThread t = Thread.currentThread();</div><div class=\"line\">\t\tThreadLocalMap map = getMap(t);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (map != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\tThreadLocalMap.Entry e = map.getEntry(<span class=\"keyword\">this</span>);                          </div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (e != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">\t\t\t\tT result = (T)e.value;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> setInitialValue();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(T value)</span> </span>&#123;</div><div class=\"line\">\t\tThread t = Thread.currentThread();</div><div class=\"line\">\t\tThreadLocalMap map = getMap(t);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (map != <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\tmap.set(<span class=\"keyword\">this</span>, value);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\tcreateMap(t, value);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>从上面可以看出ThreadLocal.ThreadLocalMap是非常关键的存储单个数据只是存储Map的一个特例，这里要注意的是</p>\n<ul>\n<li>ThreadLocal.ThreadLocalMap类似于WeekHashMap,其中的Entry都是若引用，只要JVM检测到就会将其回收</li>\n<li>使用线程池时，要注意ThreadLocal对象数据的清除</li>\n<li>就单数据而言，可以用Map代替ThreadLocal<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestThreadLocal</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Map&lt;Thread,Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadA</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> data = map.get(Thread.currentThread());</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"A : \"</span>+ Thread.currentThread().getName() + <span class=\"string\">\" \"</span> + data);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadB</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> data = map.get(Thread.currentThread());</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"B : \"</span>+ Thread.currentThread().getName() + <span class=\"string\">\" \"</span> + data);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t</div><div class=\"line\">\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> data = <span class=\"keyword\">new</span> Random().nextInt();</div><div class=\"line\">\t\t\t\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\" put \"</span> + data);</div><div class=\"line\">\t\t\t\t\tmap.put(Thread.currentThread(), data);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">new</span> ThreadA().get();</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">new</span> ThreadB().get();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;).start();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Thread-<span class=\"number\">1</span> put -<span class=\"number\">1497402079</span></div><div class=\"line\">Thread-<span class=\"number\">0</span> put <span class=\"number\">1606205752</span></div><div class=\"line\">A : Thread-<span class=\"number\">0</span> <span class=\"number\">1606205752</span></div><div class=\"line\">A : Thread-<span class=\"number\">1</span> -<span class=\"number\">1497402079</span></div><div class=\"line\">B : Thread-<span class=\"number\">1</span> -<span class=\"number\">1497402079</span></div><div class=\"line\">B : Thread-<span class=\"number\">0</span> <span class=\"number\">1606205752</span></div></pre></td></tr></table></figure></p>"},{"title":"并发编程（十四）线程池（一）","date":"2016-07-20T16:13:41.000Z","_content":"### 什么是线程池\n\n在应用程序中增加线程个数会提高明显提高系统的吞吐量，但是滥用线程则会拖垮应用程序。我们知道在线程的使用中，线程的创建占了很大一部分时间。为了提高性能，我们是不是可以先创建一批线程出来，然后需要的时候，从中取出，用完之后，再放回去。存放这些线程的就是线程池\n\n### JDK对线程池的支持\n\n<!--more-->\n\n与线程池有关的类或接口有：\n \nInterface : \n``` java\n\tpublic interface Executor {\n\t\t//实现对Runnable对象的调度\n\t\tvoid execute(Runnable command);\n\t}\n\tpublic interface ExecutorService extends Executor {\n\t\tvoid shutdown();\n\t\t//有返回值的调度\n\t\t<T> Future<T> submit(Callable<T> task);\n\t\tFuture<?> submit(Runnable task);\n\t}\n\t// 处理与时间有关的调度\n\tpublic interface ScheduledExecutorService extends ExecutorService {\n\t\tpublic ScheduledFuture<?> schedule(Runnable command,long delay, TimeUnit unit);\n\t\t\n\t\tpublic ScheduledFuture<?> scheduleAtFixedRate(Runnable command, long initialDelay, long period,TimeUnit unit);\n                                                                                          \n\t\tpublic ScheduledFuture<?> scheduleWithFixedDelay(Runnable command, long initialDelay,long delay,TimeUnit unit);\n```\nClass\n``` java\n\t//线程池\n\tpublic class ThreadPoolExecutor extends AbstractExecutorService {}\n\tpublic abstract class AbstractExecutorService implements ExecutorService {}\n\t//线程工厂\n\tpublic class Executors {\n\t\tpublic static ExecutorService newFixedThreadPool(int nThreads) {}\n\t\tpublic static ExecutorService newSingleThreadExecutor()　{}\n\t\tpublic static ExecutorService newCachedThreadPool()　{}\n\t\tpublic static ScheduledExecutorService newSingleThreadScheduledExecutor()　{}\n\t\tpublic static ScheduledExecutorService newScheduledThreadPool(int corePoolSize)　{}\n\t}\n```\n下面就线程工厂各种产生线程池的方法加以说明 ：\n- newFixedThreadPool() : 产生一个固定线程数量的线程池，数量始终不变\n- newSingleThreadExecutor() : 产生只有一个线程的线程池，多余一个，任务会保存在任务队列中，待线程空闲，以先进先出的顺序执行队列中的任务\n- newCachedThreadPool() : 产生一个线程数量根据实际情况调整的线程池，任务进入，优先使用空闲线程，没有则创造线程，该线程完成后，返回线程池进行复用\n- newScheduledThreadPool() : 产生一个确定线程数量的ScheduledExecutorService\n- newSingleThreadScheduledExecutor() : 产生一个线程数量为1的ScheduledExecutorService\n\n下面展示一个测试程序 \n``` java\n\tpublic class ThreadPool implements Runnable {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tSystem.out.println(System.currentTimeMillis()/1000 + \" \"                      \n\t\t\t\t\t+ Thread.currentThread().getName());\n\t\t\ttry {\n\t\t\t\tThread.sleep(1000);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) {\n\t\t\tExecutorService es1 = Executors.newFixedThreadPool(2);\n\t\t\tExecutorService es2 = Executors.newSingleThreadExecutor();\n\t\t\tExecutorService es3 = Executors.newCachedThreadPool();\n\t\t\t\n\t\t\tThreadPool tp = new ThreadPool();\n\t\t\t\n\t\t\tfor(int i = 0; i < 3; i++) {\n\t\t\t\tes1.execute(tp);\n\t\t\t\t//es2.execute(tp);\n\t\t\t\t//es3.execute(tp);\n\t\t\t}\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\n// 使用es1 ：\n1469521145 pool-1-thread-2\n1469521145 pool-1-thread-1\n1469521146 pool-1-thread-2\n\n// 使用es2 ：\n1469521325 pool-2-thread-1\n1469521326 pool-2-thread-1\n1469521327 pool-2-thread-1\n\n// 使用es3 ：\n1469521363 pool-3-thread-2\n1469521363 pool-3-thread-3\n1469521363 pool-3-thread-1\n```\n\n下面展示一个关于时间调度的测试程序\n``` java\n\tpublic class TestScheduledExecutorService {\n\t\tpublic static void main(String[] args) {\n\t\t\tScheduledExecutorService ses = Executors.newScheduledThreadPool(5);           \n\t\t\tses.scheduleWithFixedDelay(new Runnable() {\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tSystem.out.println(System.currentTimeMillis()/100 + \" \"\n\t\t\t\t\t\t\t+ Thread.currentThread().getName());\n\t\t\t\t\ttry {\n\t\t\t\t\t\tThread.sleep(1500);\n\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, 0, 2, TimeUnit.SECONDS);\n\t\t\t\n\t\t/*ses.scheduleAtFixedRate(new Runnable() {\n\t\t\t\t\t\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tSystem.out.println(System.currentTimeMillis()/100 + \" \"\n\t\t\t\t\t\t\t\t+ Thread.currentThread().getName());\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tThread.sleep(1500);\n\t\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, 0, 2, TimeUnit.SECONDS);*/\n\t\t}\n\t}\n```\n \n输出结果截取部分如下 ：\n\n``` java\n// ses.scheduleWithFixedDelay() :\n14695233533 pool-1-thread-1\n14695233568 pool-1-thread-1\n14695233603 pool-1-thread-2\n\n// ses.scheduleAtFixedRate() :\n14695234096 pool-1-thread-1\n14695234116 pool-1-thread-1\n14695234136 pool-1-thread-2\n14695234156 pool-1-thread-1\n```\n\n### 关于scheduleAtFixedRate()和scheduleWithFixedDelay()的区别\n \n- 对于scheduleAtFixedRate()来说，频率是一定的，它是以上个任务开始为起点，之后的period时间，调度下一次任务\n- 而scheduleWithFixedDelay(),间隔时间是一定的，它是以上一个任务结束为起点\n\n### 线程池的内部实现\n\n我们通过查看源码发现无论是newSingleThreadExecutor(),Executors.newSingleThreadExecutor()还是Executors.newCachedThreadPool()都是使用调用ThreadPoolExecutor的构造方法\n``` java\n\tpublic static ExecutorService newFixedThreadPool(int nThreads) {\n        return new ThreadPoolExecutor(nThreads, nThreads,\n                                      0L, TimeUnit.MILLISECONDS,\n                                      new LinkedBlockingQueue<Runnable>());\n    }\n\tpublic static ExecutorService newSingleThreadExecutor() {\n        return new FinalizableDelegatedExecutorService\n            (new ThreadPoolExecutor(1, 1,\n                                    0L, TimeUnit.MILLISECONDS,\n                                    new LinkedBlockingQueue<Runnable>()));\n    }\n\tpublic static ExecutorService newCachedThreadPool() {\n        return new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n                                      60L, TimeUnit.SECONDS,\n                                      new SynchronousQueue<Runnable>());\n    }\n```\n那么我们看一下这个最原始的构造方法\n``` java\n\t public ThreadPoolExecutor(int corePoolSize,\n                              int maximumPoolSize,\n                              long keepAliveTime,\n                              TimeUnit unit,\n                              BlockingQueue<Runnable> workQueue,\n                              ThreadFactory threadFactory,\n                              RejectedExecutionHandler handler)\n```\n函数的参数含义如下 ：\n- corePoolSize ：线程池中的线程数量\n- maximumPoolSize ：线程池中的最大线程数量\n- keepAliveTime ：线程数量超过corePoolSize，多余线程的最大存活时间\n- unit ：keepAliveTime的时间单位\n- workQueue ： 任务队列\n- threadFactory ： 线程工厂\n- handler ：拒绝策略\n\n这里给出ThreadPoolExecutor的核心调度代码：\n``` java\n\tpublic void execute(Runnable command) {\n        if (command == null)\n            throw new NullPointerException();\n        /*\n         * Proceed in 3 steps:\n         *\n         * 1. If fewer than corePoolSize threads are running, try to\n         * start a new thread with the given command as its first\n         * task.  The call to addWorker atomically checks runState and\n         * workerCount, and so prevents false alarms that would add\n         * threads when it shouldn't, by returning false.\n         *\n         * 2. If a task can be successfully queued, then we still need\n         * to double-check whether we should have added a thread\n         * (because existing ones died since last checking) or that\n         * the pool shut down since entry into this method. So we\n         * recheck state and if necessary roll back the enqueuing if\n         * stopped, or start a new thread if there are none.\n         *\n         * 3. If we cannot queue task, then we try to add a new\n         * thread.  If it fails, we know we are shut down or saturated                         \n         * and so reject the task.\n         */\n        int c = ctl.get();\n        if (workerCountOf(c) < corePoolSize) {\n            if (addWorker(command, true))\n                return;\n            c = ctl.get();\n        }\n        if (isRunning(c) && workQueue.offer(command)) {\n            int recheck = ctl.get();\n            if (! isRunning(recheck) && remove(command))\n                reject(command);\n            else if (workerCountOf(recheck) == 0)\n                addWorker(null, false);\n        }\n        else if (!addWorker(command, false))\n            reject(command);\n    }\n```\n\n### 线程池的拒绝策略\n\n当队列中以排满，再也塞不下其它任务，那么我们就需要提供一套机制来处理这个问题。\nJDK内置了四种拒绝策略\n- AbortPolicy策略 ： 该策略直接抛出异常，阻止系统正常工作\n- CallerRunsPolicy策略 ： 只要线程池未关闭，运行当前被丢弃的任务\n- DiscardOledestPolicy策略 : 丢弃最老的任务\n- DiscardPolicy策略 ；不做任何处理\n\n同样的，我们也可以自己写处理方案，只需要实现RejectedExecutionHandler接口\n``` java\n\tpublic interface RejectedExecutionHandler {\n\t\tvoid rejectedExecution(Runnable r, ThreadPoolExecutor executor);\n\t}\n```\n下面展示一个测试程序\n``` java\n\tpublic class RejectPolicy implements Runnable {\n\t\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tSystem.out.println(System.currentTimeMillis()/1000 + \" \"\n\t\t\t\t\t+ Thread.currentThread().getName());\n\t\t\ttry {\n\t\t\t\tThread.sleep(1000);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tpublic static void main(String[] args) throws InterruptedException {\n\t\t\tRejectPolicy rp = new RejectPolicy();\n\t\t\tExecutorService es = new ThreadPoolExecutor(5, 5, \n\t\t\t\t\t0L, TimeUnit.SECONDS, \n\t\t\t\t\tnew LinkedBlockingQueue<Runnable>(10),\n\t\t\t\t\tExecutors.defaultThreadFactory(),\n\t\t\t\t\tnew RejectedExecutionHandler() {\n\t\t\t\t\t\t\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {\n\t\t\t\t\t\t\tSystem.out.println(r.toString() + \"is discard\");\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\tfor(int i = 0; i < Integer.MAX_VALUE; i++) {\n\t\t\t\tes.submit(rp);\n\t\t\t\tThread.sleep(100);\n\t\t\t}\n\t\t}\n\t\t\n\t}\n```\n截取部分输出如下 ：\n``` java\n1469533427 pool-1-thread-1\n1469533427 pool-1-thread-2\n1469533428 pool-1-thread-3\n1469533428 pool-1-thread-4\n1469533428 pool-1-thread-5\njava.util.concurrent.FutureTask@55f96302is discard\njava.util.concurrent.FutureTask@3d4eac69is discard\njava.util.concurrent.FutureTask@42a57993is discard\njava.util.concurrent.FutureTask@75b84c92is discard\njava.util.concurrent.FutureTask@6bc7c054is discard\n1469533428 pool-1-thread-1\n```","source":"_posts/intercurrent_threadpool_1.md","raw":"---\ntitle: 并发编程（十四）线程池（一）\ndate: 2016-07-21 00:13:41\ntags:\n\t- 并发编程\n---\n### 什么是线程池\n\n在应用程序中增加线程个数会提高明显提高系统的吞吐量，但是滥用线程则会拖垮应用程序。我们知道在线程的使用中，线程的创建占了很大一部分时间。为了提高性能，我们是不是可以先创建一批线程出来，然后需要的时候，从中取出，用完之后，再放回去。存放这些线程的就是线程池\n\n### JDK对线程池的支持\n\n<!--more-->\n\n与线程池有关的类或接口有：\n \nInterface : \n``` java\n\tpublic interface Executor {\n\t\t//实现对Runnable对象的调度\n\t\tvoid execute(Runnable command);\n\t}\n\tpublic interface ExecutorService extends Executor {\n\t\tvoid shutdown();\n\t\t//有返回值的调度\n\t\t<T> Future<T> submit(Callable<T> task);\n\t\tFuture<?> submit(Runnable task);\n\t}\n\t// 处理与时间有关的调度\n\tpublic interface ScheduledExecutorService extends ExecutorService {\n\t\tpublic ScheduledFuture<?> schedule(Runnable command,long delay, TimeUnit unit);\n\t\t\n\t\tpublic ScheduledFuture<?> scheduleAtFixedRate(Runnable command, long initialDelay, long period,TimeUnit unit);\n                                                                                          \n\t\tpublic ScheduledFuture<?> scheduleWithFixedDelay(Runnable command, long initialDelay,long delay,TimeUnit unit);\n```\nClass\n``` java\n\t//线程池\n\tpublic class ThreadPoolExecutor extends AbstractExecutorService {}\n\tpublic abstract class AbstractExecutorService implements ExecutorService {}\n\t//线程工厂\n\tpublic class Executors {\n\t\tpublic static ExecutorService newFixedThreadPool(int nThreads) {}\n\t\tpublic static ExecutorService newSingleThreadExecutor()　{}\n\t\tpublic static ExecutorService newCachedThreadPool()　{}\n\t\tpublic static ScheduledExecutorService newSingleThreadScheduledExecutor()　{}\n\t\tpublic static ScheduledExecutorService newScheduledThreadPool(int corePoolSize)　{}\n\t}\n```\n下面就线程工厂各种产生线程池的方法加以说明 ：\n- newFixedThreadPool() : 产生一个固定线程数量的线程池，数量始终不变\n- newSingleThreadExecutor() : 产生只有一个线程的线程池，多余一个，任务会保存在任务队列中，待线程空闲，以先进先出的顺序执行队列中的任务\n- newCachedThreadPool() : 产生一个线程数量根据实际情况调整的线程池，任务进入，优先使用空闲线程，没有则创造线程，该线程完成后，返回线程池进行复用\n- newScheduledThreadPool() : 产生一个确定线程数量的ScheduledExecutorService\n- newSingleThreadScheduledExecutor() : 产生一个线程数量为1的ScheduledExecutorService\n\n下面展示一个测试程序 \n``` java\n\tpublic class ThreadPool implements Runnable {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tSystem.out.println(System.currentTimeMillis()/1000 + \" \"                      \n\t\t\t\t\t+ Thread.currentThread().getName());\n\t\t\ttry {\n\t\t\t\tThread.sleep(1000);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) {\n\t\t\tExecutorService es1 = Executors.newFixedThreadPool(2);\n\t\t\tExecutorService es2 = Executors.newSingleThreadExecutor();\n\t\t\tExecutorService es3 = Executors.newCachedThreadPool();\n\t\t\t\n\t\t\tThreadPool tp = new ThreadPool();\n\t\t\t\n\t\t\tfor(int i = 0; i < 3; i++) {\n\t\t\t\tes1.execute(tp);\n\t\t\t\t//es2.execute(tp);\n\t\t\t\t//es3.execute(tp);\n\t\t\t}\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\n// 使用es1 ：\n1469521145 pool-1-thread-2\n1469521145 pool-1-thread-1\n1469521146 pool-1-thread-2\n\n// 使用es2 ：\n1469521325 pool-2-thread-1\n1469521326 pool-2-thread-1\n1469521327 pool-2-thread-1\n\n// 使用es3 ：\n1469521363 pool-3-thread-2\n1469521363 pool-3-thread-3\n1469521363 pool-3-thread-1\n```\n\n下面展示一个关于时间调度的测试程序\n``` java\n\tpublic class TestScheduledExecutorService {\n\t\tpublic static void main(String[] args) {\n\t\t\tScheduledExecutorService ses = Executors.newScheduledThreadPool(5);           \n\t\t\tses.scheduleWithFixedDelay(new Runnable() {\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tSystem.out.println(System.currentTimeMillis()/100 + \" \"\n\t\t\t\t\t\t\t+ Thread.currentThread().getName());\n\t\t\t\t\ttry {\n\t\t\t\t\t\tThread.sleep(1500);\n\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, 0, 2, TimeUnit.SECONDS);\n\t\t\t\n\t\t/*ses.scheduleAtFixedRate(new Runnable() {\n\t\t\t\t\t\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tSystem.out.println(System.currentTimeMillis()/100 + \" \"\n\t\t\t\t\t\t\t\t+ Thread.currentThread().getName());\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tThread.sleep(1500);\n\t\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, 0, 2, TimeUnit.SECONDS);*/\n\t\t}\n\t}\n```\n \n输出结果截取部分如下 ：\n\n``` java\n// ses.scheduleWithFixedDelay() :\n14695233533 pool-1-thread-1\n14695233568 pool-1-thread-1\n14695233603 pool-1-thread-2\n\n// ses.scheduleAtFixedRate() :\n14695234096 pool-1-thread-1\n14695234116 pool-1-thread-1\n14695234136 pool-1-thread-2\n14695234156 pool-1-thread-1\n```\n\n### 关于scheduleAtFixedRate()和scheduleWithFixedDelay()的区别\n \n- 对于scheduleAtFixedRate()来说，频率是一定的，它是以上个任务开始为起点，之后的period时间，调度下一次任务\n- 而scheduleWithFixedDelay(),间隔时间是一定的，它是以上一个任务结束为起点\n\n### 线程池的内部实现\n\n我们通过查看源码发现无论是newSingleThreadExecutor(),Executors.newSingleThreadExecutor()还是Executors.newCachedThreadPool()都是使用调用ThreadPoolExecutor的构造方法\n``` java\n\tpublic static ExecutorService newFixedThreadPool(int nThreads) {\n        return new ThreadPoolExecutor(nThreads, nThreads,\n                                      0L, TimeUnit.MILLISECONDS,\n                                      new LinkedBlockingQueue<Runnable>());\n    }\n\tpublic static ExecutorService newSingleThreadExecutor() {\n        return new FinalizableDelegatedExecutorService\n            (new ThreadPoolExecutor(1, 1,\n                                    0L, TimeUnit.MILLISECONDS,\n                                    new LinkedBlockingQueue<Runnable>()));\n    }\n\tpublic static ExecutorService newCachedThreadPool() {\n        return new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n                                      60L, TimeUnit.SECONDS,\n                                      new SynchronousQueue<Runnable>());\n    }\n```\n那么我们看一下这个最原始的构造方法\n``` java\n\t public ThreadPoolExecutor(int corePoolSize,\n                              int maximumPoolSize,\n                              long keepAliveTime,\n                              TimeUnit unit,\n                              BlockingQueue<Runnable> workQueue,\n                              ThreadFactory threadFactory,\n                              RejectedExecutionHandler handler)\n```\n函数的参数含义如下 ：\n- corePoolSize ：线程池中的线程数量\n- maximumPoolSize ：线程池中的最大线程数量\n- keepAliveTime ：线程数量超过corePoolSize，多余线程的最大存活时间\n- unit ：keepAliveTime的时间单位\n- workQueue ： 任务队列\n- threadFactory ： 线程工厂\n- handler ：拒绝策略\n\n这里给出ThreadPoolExecutor的核心调度代码：\n``` java\n\tpublic void execute(Runnable command) {\n        if (command == null)\n            throw new NullPointerException();\n        /*\n         * Proceed in 3 steps:\n         *\n         * 1. If fewer than corePoolSize threads are running, try to\n         * start a new thread with the given command as its first\n         * task.  The call to addWorker atomically checks runState and\n         * workerCount, and so prevents false alarms that would add\n         * threads when it shouldn't, by returning false.\n         *\n         * 2. If a task can be successfully queued, then we still need\n         * to double-check whether we should have added a thread\n         * (because existing ones died since last checking) or that\n         * the pool shut down since entry into this method. So we\n         * recheck state and if necessary roll back the enqueuing if\n         * stopped, or start a new thread if there are none.\n         *\n         * 3. If we cannot queue task, then we try to add a new\n         * thread.  If it fails, we know we are shut down or saturated                         \n         * and so reject the task.\n         */\n        int c = ctl.get();\n        if (workerCountOf(c) < corePoolSize) {\n            if (addWorker(command, true))\n                return;\n            c = ctl.get();\n        }\n        if (isRunning(c) && workQueue.offer(command)) {\n            int recheck = ctl.get();\n            if (! isRunning(recheck) && remove(command))\n                reject(command);\n            else if (workerCountOf(recheck) == 0)\n                addWorker(null, false);\n        }\n        else if (!addWorker(command, false))\n            reject(command);\n    }\n```\n\n### 线程池的拒绝策略\n\n当队列中以排满，再也塞不下其它任务，那么我们就需要提供一套机制来处理这个问题。\nJDK内置了四种拒绝策略\n- AbortPolicy策略 ： 该策略直接抛出异常，阻止系统正常工作\n- CallerRunsPolicy策略 ： 只要线程池未关闭，运行当前被丢弃的任务\n- DiscardOledestPolicy策略 : 丢弃最老的任务\n- DiscardPolicy策略 ；不做任何处理\n\n同样的，我们也可以自己写处理方案，只需要实现RejectedExecutionHandler接口\n``` java\n\tpublic interface RejectedExecutionHandler {\n\t\tvoid rejectedExecution(Runnable r, ThreadPoolExecutor executor);\n\t}\n```\n下面展示一个测试程序\n``` java\n\tpublic class RejectPolicy implements Runnable {\n\t\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tSystem.out.println(System.currentTimeMillis()/1000 + \" \"\n\t\t\t\t\t+ Thread.currentThread().getName());\n\t\t\ttry {\n\t\t\t\tThread.sleep(1000);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tpublic static void main(String[] args) throws InterruptedException {\n\t\t\tRejectPolicy rp = new RejectPolicy();\n\t\t\tExecutorService es = new ThreadPoolExecutor(5, 5, \n\t\t\t\t\t0L, TimeUnit.SECONDS, \n\t\t\t\t\tnew LinkedBlockingQueue<Runnable>(10),\n\t\t\t\t\tExecutors.defaultThreadFactory(),\n\t\t\t\t\tnew RejectedExecutionHandler() {\n\t\t\t\t\t\t\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {\n\t\t\t\t\t\t\tSystem.out.println(r.toString() + \"is discard\");\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\tfor(int i = 0; i < Integer.MAX_VALUE; i++) {\n\t\t\t\tes.submit(rp);\n\t\t\t\tThread.sleep(100);\n\t\t\t}\n\t\t}\n\t\t\n\t}\n```\n截取部分输出如下 ：\n``` java\n1469533427 pool-1-thread-1\n1469533427 pool-1-thread-2\n1469533428 pool-1-thread-3\n1469533428 pool-1-thread-4\n1469533428 pool-1-thread-5\njava.util.concurrent.FutureTask@55f96302is discard\njava.util.concurrent.FutureTask@3d4eac69is discard\njava.util.concurrent.FutureTask@42a57993is discard\njava.util.concurrent.FutureTask@75b84c92is discard\njava.util.concurrent.FutureTask@6bc7c054is discard\n1469533428 pool-1-thread-1\n```","slug":"intercurrent_threadpool_1","published":1,"updated":"2017-03-08T11:03:06.902Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5dz002cqoq12ltzkytp","content":"<h3 id=\"什么是线程池\"><a href=\"#什么是线程池\" class=\"headerlink\" title=\"什么是线程池\"></a>什么是线程池</h3><p>在应用程序中增加线程个数会提高明显提高系统的吞吐量，但是滥用线程则会拖垮应用程序。我们知道在线程的使用中，线程的创建占了很大一部分时间。为了提高性能，我们是不是可以先创建一批线程出来，然后需要的时候，从中取出，用完之后，再放回去。存放这些线程的就是线程池</p>\n<h3 id=\"JDK对线程池的支持\"><a href=\"#JDK对线程池的支持\" class=\"headerlink\" title=\"JDK对线程池的支持\"></a>JDK对线程池的支持</h3><a id=\"more\"></a>\n<p>与线程池有关的类或接口有：</p>\n<p>Interface :<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Executor</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//实现对Runnable对象的调度</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(Runnable command)</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ExecutorService</span> <span class=\"keyword\">extends</span> <span class=\"title\">Executor</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shutdown</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"comment\">//有返回值的调度</span></div><div class=\"line\">\t&lt;T&gt; <span class=\"function\">Future&lt;T&gt; <span class=\"title\">submit</span><span class=\"params\">(Callable&lt;T&gt; task)</span></span>;</div><div class=\"line\">\tFuture&lt;?&gt; submit(Runnable task);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 处理与时间有关的调度</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ScheduledExecutorService</span> <span class=\"keyword\">extends</span> <span class=\"title\">ExecutorService</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> ScheduledFuture&lt;?&gt; schedule(Runnable command,<span class=\"keyword\">long</span> delay, TimeUnit unit);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> ScheduledFuture&lt;?&gt; scheduleAtFixedRate(Runnable command, <span class=\"keyword\">long</span> initialDelay, <span class=\"keyword\">long</span> period,TimeUnit unit);</div><div class=\"line\">                                                                                         </div><div class=\"line\">\t<span class=\"keyword\">public</span> ScheduledFuture&lt;?&gt; scheduleWithFixedDelay(Runnable command, <span class=\"keyword\">long</span> initialDelay,<span class=\"keyword\">long</span> delay,TimeUnit unit);</div></pre></td></tr></table></figure></p>\n<p>Class<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//线程池</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadPoolExecutor</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractExecutorService</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractExecutorService</span> <span class=\"keyword\">implements</span> <span class=\"title\">ExecutorService</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"comment\">//线程工厂</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Executors</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newFixedThreadPool</span><span class=\"params\">(<span class=\"keyword\">int</span> nThreads)</span> </span>&#123;&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newSingleThreadExecutor</span><span class=\"params\">()</span>　</span>&#123;&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newCachedThreadPool</span><span class=\"params\">()</span>　</span>&#123;&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ScheduledExecutorService <span class=\"title\">newSingleThreadScheduledExecutor</span><span class=\"params\">()</span>　</span>&#123;&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ScheduledExecutorService <span class=\"title\">newScheduledThreadPool</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize)</span>　</span>&#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下面就线程工厂各种产生线程池的方法加以说明 ：</p>\n<ul>\n<li>newFixedThreadPool() : 产生一个固定线程数量的线程池，数量始终不变</li>\n<li>newSingleThreadExecutor() : 产生只有一个线程的线程池，多余一个，任务会保存在任务队列中，待线程空闲，以先进先出的顺序执行队列中的任务</li>\n<li>newCachedThreadPool() : 产生一个线程数量根据实际情况调整的线程池，任务进入，优先使用空闲线程，没有则创造线程，该线程完成后，返回线程池进行复用</li>\n<li>newScheduledThreadPool() : 产生一个确定线程数量的ScheduledExecutorService</li>\n<li>newSingleThreadScheduledExecutor() : 产生一个线程数量为1的ScheduledExecutorService</li>\n</ul>\n<p>下面展示一个测试程序<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadPool</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(System.currentTimeMillis()/<span class=\"number\">1000</span> + <span class=\"string\">\" \"</span>                      </div><div class=\"line\">\t\t\t\t+ Thread.currentThread().getName());</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tThread.sleep(<span class=\"number\">1000</span>);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tExecutorService es1 = Executors.newFixedThreadPool(<span class=\"number\">2</span>);</div><div class=\"line\">\t\tExecutorService es2 = Executors.newSingleThreadExecutor();</div><div class=\"line\">\t\tExecutorService es3 = Executors.newCachedThreadPool();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tThreadPool tp = <span class=\"keyword\">new</span> ThreadPool();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</div><div class=\"line\">\t\t\tes1.execute(tp);</div><div class=\"line\">\t\t\t<span class=\"comment\">//es2.execute(tp);</span></div><div class=\"line\">\t\t\t<span class=\"comment\">//es3.execute(tp);</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 使用es1 ：</span></div><div class=\"line\"><span class=\"number\">1469521145</span> pool-<span class=\"number\">1</span>-thread-<span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">1469521145</span> pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">1469521146</span> pool-<span class=\"number\">1</span>-thread-<span class=\"number\">2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用es2 ：</span></div><div class=\"line\"><span class=\"number\">1469521325</span> pool-<span class=\"number\">2</span>-thread-<span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">1469521326</span> pool-<span class=\"number\">2</span>-thread-<span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">1469521327</span> pool-<span class=\"number\">2</span>-thread-<span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用es3 ：</span></div><div class=\"line\"><span class=\"number\">1469521363</span> pool-<span class=\"number\">3</span>-thread-<span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">1469521363</span> pool-<span class=\"number\">3</span>-thread-<span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">1469521363</span> pool-<span class=\"number\">3</span>-thread-<span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n<p>下面展示一个关于时间调度的测试程序<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestScheduledExecutorService</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScheduledExecutorService ses = Executors.newScheduledThreadPool(<span class=\"number\">5</span>);           </div><div class=\"line\">\t\tses.scheduleWithFixedDelay(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(System.currentTimeMillis()/<span class=\"number\">100</span> + <span class=\"string\">\" \"</span></div><div class=\"line\">\t\t\t\t\t\t+ Thread.currentThread().getName());</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\tThread.sleep(<span class=\"number\">1500</span>);</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;, <span class=\"number\">0</span>, <span class=\"number\">2</span>, TimeUnit.SECONDS);</div><div class=\"line\">\t\t</div><div class=\"line\">\t<span class=\"comment\">/*ses.scheduleAtFixedRate(new Runnable() &#123;</span></div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\t@Override</div><div class=\"line\">\t\t\t\tpublic void run() &#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.println(System.currentTimeMillis()/100 + \" \"</div><div class=\"line\">\t\t\t\t\t\t\t+ Thread.currentThread().getName());</div><div class=\"line\">\t\t\t\t\ttry &#123;</div><div class=\"line\">\t\t\t\t\t\tThread.sleep(1500);</div><div class=\"line\">\t\t\t\t\t&#125; catch (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t\t\t// TODO Auto-generated catch block</div><div class=\"line\">\t\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;, 0, 2, TimeUnit.SECONDS);*/</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果截取部分如下 ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ses.scheduleWithFixedDelay() :</span></div><div class=\"line\"><span class=\"number\">14695233533</span> pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">14695233568</span> pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">14695233603</span> pool-<span class=\"number\">1</span>-thread-<span class=\"number\">2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ses.scheduleAtFixedRate() :</span></div><div class=\"line\"><span class=\"number\">14695234096</span> pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">14695234116</span> pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">14695234136</span> pool-<span class=\"number\">1</span>-thread-<span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">14695234156</span> pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<h3 id=\"关于scheduleAtFixedRate-和scheduleWithFixedDelay-的区别\"><a href=\"#关于scheduleAtFixedRate-和scheduleWithFixedDelay-的区别\" class=\"headerlink\" title=\"关于scheduleAtFixedRate()和scheduleWithFixedDelay()的区别\"></a>关于scheduleAtFixedRate()和scheduleWithFixedDelay()的区别</h3><ul>\n<li>对于scheduleAtFixedRate()来说，频率是一定的，它是以上个任务开始为起点，之后的period时间，调度下一次任务</li>\n<li>而scheduleWithFixedDelay(),间隔时间是一定的，它是以上一个任务结束为起点</li>\n</ul>\n<h3 id=\"线程池的内部实现\"><a href=\"#线程池的内部实现\" class=\"headerlink\" title=\"线程池的内部实现\"></a>线程池的内部实现</h3><p>我们通过查看源码发现无论是newSingleThreadExecutor(),Executors.newSingleThreadExecutor()还是Executors.newCachedThreadPool()都是使用调用ThreadPoolExecutor的构造方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newFixedThreadPool</span><span class=\"params\">(<span class=\"keyword\">int</span> nThreads)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(nThreads, nThreads,</div><div class=\"line\">                                     <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</div><div class=\"line\">                                     <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newSingleThreadExecutor</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FinalizableDelegatedExecutorService</div><div class=\"line\">           (<span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">1</span>, <span class=\"number\">1</span>,</div><div class=\"line\">                                   <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</div><div class=\"line\">                                   <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newCachedThreadPool</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">0</span>, Integer.MAX_VALUE,</div><div class=\"line\">                                     <span class=\"number\">60L</span>, TimeUnit.SECONDS,</div><div class=\"line\">                                     <span class=\"keyword\">new</span> SynchronousQueue&lt;Runnable&gt;());</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>那么我们看一下这个最原始的构造方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,</span></span></div><div class=\"line\">                            <span class=\"keyword\">int</span> maximumPoolSize,</div><div class=\"line\">                            <span class=\"keyword\">long</span> keepAliveTime,</div><div class=\"line\">                            TimeUnit unit,</div><div class=\"line\">                            BlockingQueue&lt;Runnable&gt; workQueue,</div><div class=\"line\">                            ThreadFactory threadFactory,</div><div class=\"line\">                            RejectedExecutionHandler handler)</div></pre></td></tr></table></figure></p>\n<p>函数的参数含义如下 ：</p>\n<ul>\n<li>corePoolSize ：线程池中的线程数量</li>\n<li>maximumPoolSize ：线程池中的最大线程数量</li>\n<li>keepAliveTime ：线程数量超过corePoolSize，多余线程的最大存活时间</li>\n<li>unit ：keepAliveTime的时间单位</li>\n<li>workQueue ： 任务队列</li>\n<li>threadFactory ： 线程工厂</li>\n<li>handler ：拒绝策略</li>\n</ul>\n<p>这里给出ThreadPoolExecutor的核心调度代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(Runnable command)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (command == <span class=\"keyword\">null</span>)</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</div><div class=\"line\">       <span class=\"comment\">/*</span></div><div class=\"line\">        * Proceed in 3 steps:</div><div class=\"line\">        *</div><div class=\"line\">        * 1. If fewer than corePoolSize threads are running, try to</div><div class=\"line\">        * start a new thread with the given command as its first</div><div class=\"line\">        * task.  The call to addWorker atomically checks runState and</div><div class=\"line\">        * workerCount, and so prevents false alarms that would add</div><div class=\"line\">        * threads when it shouldn't, by returning false.</div><div class=\"line\">        *</div><div class=\"line\">        * 2. If a task can be successfully queued, then we still need</div><div class=\"line\">        * to double-check whether we should have added a thread</div><div class=\"line\">        * (because existing ones died since last checking) or that</div><div class=\"line\">        * the pool shut down since entry into this method. So we</div><div class=\"line\">        * recheck state and if necessary roll back the enqueuing if</div><div class=\"line\">        * stopped, or start a new thread if there are none.</div><div class=\"line\">        *</div><div class=\"line\">        * 3. If we cannot queue task, then we try to add a new</div><div class=\"line\">        * thread.  If it fails, we know we are shut down or saturated                         </div><div class=\"line\">        * and so reject the task.</div><div class=\"line\">        */</div><div class=\"line\">       <span class=\"keyword\">int</span> c = ctl.get();</div><div class=\"line\">       <span class=\"keyword\">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (addWorker(command, <span class=\"keyword\">true</span>))</div><div class=\"line\">               <span class=\"keyword\">return</span>;</div><div class=\"line\">           c = ctl.get();</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</div><div class=\"line\">           <span class=\"keyword\">int</span> recheck = ctl.get();</div><div class=\"line\">           <span class=\"keyword\">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</div><div class=\"line\">               reject(command);</div><div class=\"line\">           <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (workerCountOf(recheck) == <span class=\"number\">0</span>)</div><div class=\"line\">               addWorker(<span class=\"keyword\">null</span>, <span class=\"keyword\">false</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!addWorker(command, <span class=\"keyword\">false</span>))</div><div class=\"line\">           reject(command);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"线程池的拒绝策略\"><a href=\"#线程池的拒绝策略\" class=\"headerlink\" title=\"线程池的拒绝策略\"></a>线程池的拒绝策略</h3><p>当队列中以排满，再也塞不下其它任务，那么我们就需要提供一套机制来处理这个问题。<br>JDK内置了四种拒绝策略</p>\n<ul>\n<li>AbortPolicy策略 ： 该策略直接抛出异常，阻止系统正常工作</li>\n<li>CallerRunsPolicy策略 ： 只要线程池未关闭，运行当前被丢弃的任务</li>\n<li>DiscardOledestPolicy策略 : 丢弃最老的任务</li>\n<li>DiscardPolicy策略 ；不做任何处理</li>\n</ul>\n<p>同样的，我们也可以自己写处理方案，只需要实现RejectedExecutionHandler接口<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">RejectedExecutionHandler</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rejectedExecution</span><span class=\"params\">(Runnable r, ThreadPoolExecutor executor)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下面展示一个测试程序<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RejectPolicy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(System.currentTimeMillis()/<span class=\"number\">1000</span> + <span class=\"string\">\" \"</span></div><div class=\"line\">\t\t\t\t+ Thread.currentThread().getName());</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tThread.sleep(<span class=\"number\">1000</span>);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">\t\tRejectPolicy rp = <span class=\"keyword\">new</span> RejectPolicy();</div><div class=\"line\">\t\tExecutorService es = <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">5</span>, <span class=\"number\">5</span>, </div><div class=\"line\">\t\t\t\t<span class=\"number\">0L</span>, TimeUnit.SECONDS, </div><div class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;(<span class=\"number\">10</span>),</div><div class=\"line\">\t\t\t\tExecutors.defaultThreadFactory(),</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> RejectedExecutionHandler() &#123;</div><div class=\"line\">\t\t\t\t\t</div><div class=\"line\">\t\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rejectedExecution</span><span class=\"params\">(Runnable r, ThreadPoolExecutor executor)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\t\tSystem.out.println(r.toString() + <span class=\"string\">\"is discard\"</span>);</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; Integer.MAX_VALUE; i++) &#123;</div><div class=\"line\">\t\t\tes.submit(rp);</div><div class=\"line\">\t\t\tThread.sleep(<span class=\"number\">100</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>截取部分输出如下 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1469533427</span> pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">1469533427</span> pool-<span class=\"number\">1</span>-thread-<span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">1469533428</span> pool-<span class=\"number\">1</span>-thread-<span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">1469533428</span> pool-<span class=\"number\">1</span>-thread-<span class=\"number\">4</span></div><div class=\"line\"><span class=\"number\">1469533428</span> pool-<span class=\"number\">1</span>-thread-<span class=\"number\">5</span></div><div class=\"line\">java.util.concurrent.FutureTask@<span class=\"number\">55f</span>96302is discard</div><div class=\"line\">java.util.concurrent.FutureTask@<span class=\"number\">3</span>d4eac69is discard</div><div class=\"line\">java.util.concurrent.FutureTask@<span class=\"number\">42</span>a57993is discard</div><div class=\"line\">java.util.concurrent.FutureTask@<span class=\"number\">75</span>b84c92is discard</div><div class=\"line\">java.util.concurrent.FutureTask@<span class=\"number\">6</span>bc7c054is discard</div><div class=\"line\"><span class=\"number\">1469533428</span> pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n","excerpt":"<h3 id=\"什么是线程池\"><a href=\"#什么是线程池\" class=\"headerlink\" title=\"什么是线程池\"></a>什么是线程池</h3><p>在应用程序中增加线程个数会提高明显提高系统的吞吐量，但是滥用线程则会拖垮应用程序。我们知道在线程的使用中，线程的创建占了很大一部分时间。为了提高性能，我们是不是可以先创建一批线程出来，然后需要的时候，从中取出，用完之后，再放回去。存放这些线程的就是线程池</p>\n<h3 id=\"JDK对线程池的支持\"><a href=\"#JDK对线程池的支持\" class=\"headerlink\" title=\"JDK对线程池的支持\"></a>JDK对线程池的支持</h3>","more":"<p>与线程池有关的类或接口有：</p>\n<p>Interface :<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Executor</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//实现对Runnable对象的调度</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(Runnable command)</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ExecutorService</span> <span class=\"keyword\">extends</span> <span class=\"title\">Executor</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shutdown</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"comment\">//有返回值的调度</span></div><div class=\"line\">\t&lt;T&gt; <span class=\"function\">Future&lt;T&gt; <span class=\"title\">submit</span><span class=\"params\">(Callable&lt;T&gt; task)</span></span>;</div><div class=\"line\">\tFuture&lt;?&gt; submit(Runnable task);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 处理与时间有关的调度</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ScheduledExecutorService</span> <span class=\"keyword\">extends</span> <span class=\"title\">ExecutorService</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> ScheduledFuture&lt;?&gt; schedule(Runnable command,<span class=\"keyword\">long</span> delay, TimeUnit unit);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> ScheduledFuture&lt;?&gt; scheduleAtFixedRate(Runnable command, <span class=\"keyword\">long</span> initialDelay, <span class=\"keyword\">long</span> period,TimeUnit unit);</div><div class=\"line\">                                                                                         </div><div class=\"line\">\t<span class=\"keyword\">public</span> ScheduledFuture&lt;?&gt; scheduleWithFixedDelay(Runnable command, <span class=\"keyword\">long</span> initialDelay,<span class=\"keyword\">long</span> delay,TimeUnit unit);</div></pre></td></tr></table></figure></p>\n<p>Class<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//线程池</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadPoolExecutor</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractExecutorService</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractExecutorService</span> <span class=\"keyword\">implements</span> <span class=\"title\">ExecutorService</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"comment\">//线程工厂</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Executors</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newFixedThreadPool</span><span class=\"params\">(<span class=\"keyword\">int</span> nThreads)</span> </span>&#123;&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newSingleThreadExecutor</span><span class=\"params\">()</span>　</span>&#123;&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newCachedThreadPool</span><span class=\"params\">()</span>　</span>&#123;&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ScheduledExecutorService <span class=\"title\">newSingleThreadScheduledExecutor</span><span class=\"params\">()</span>　</span>&#123;&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ScheduledExecutorService <span class=\"title\">newScheduledThreadPool</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize)</span>　</span>&#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下面就线程工厂各种产生线程池的方法加以说明 ：</p>\n<ul>\n<li>newFixedThreadPool() : 产生一个固定线程数量的线程池，数量始终不变</li>\n<li>newSingleThreadExecutor() : 产生只有一个线程的线程池，多余一个，任务会保存在任务队列中，待线程空闲，以先进先出的顺序执行队列中的任务</li>\n<li>newCachedThreadPool() : 产生一个线程数量根据实际情况调整的线程池，任务进入，优先使用空闲线程，没有则创造线程，该线程完成后，返回线程池进行复用</li>\n<li>newScheduledThreadPool() : 产生一个确定线程数量的ScheduledExecutorService</li>\n<li>newSingleThreadScheduledExecutor() : 产生一个线程数量为1的ScheduledExecutorService</li>\n</ul>\n<p>下面展示一个测试程序<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadPool</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(System.currentTimeMillis()/<span class=\"number\">1000</span> + <span class=\"string\">\" \"</span>                      </div><div class=\"line\">\t\t\t\t+ Thread.currentThread().getName());</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tThread.sleep(<span class=\"number\">1000</span>);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tExecutorService es1 = Executors.newFixedThreadPool(<span class=\"number\">2</span>);</div><div class=\"line\">\t\tExecutorService es2 = Executors.newSingleThreadExecutor();</div><div class=\"line\">\t\tExecutorService es3 = Executors.newCachedThreadPool();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tThreadPool tp = <span class=\"keyword\">new</span> ThreadPool();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</div><div class=\"line\">\t\t\tes1.execute(tp);</div><div class=\"line\">\t\t\t<span class=\"comment\">//es2.execute(tp);</span></div><div class=\"line\">\t\t\t<span class=\"comment\">//es3.execute(tp);</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 使用es1 ：</span></div><div class=\"line\"><span class=\"number\">1469521145</span> pool-<span class=\"number\">1</span>-thread-<span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">1469521145</span> pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">1469521146</span> pool-<span class=\"number\">1</span>-thread-<span class=\"number\">2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用es2 ：</span></div><div class=\"line\"><span class=\"number\">1469521325</span> pool-<span class=\"number\">2</span>-thread-<span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">1469521326</span> pool-<span class=\"number\">2</span>-thread-<span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">1469521327</span> pool-<span class=\"number\">2</span>-thread-<span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用es3 ：</span></div><div class=\"line\"><span class=\"number\">1469521363</span> pool-<span class=\"number\">3</span>-thread-<span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">1469521363</span> pool-<span class=\"number\">3</span>-thread-<span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">1469521363</span> pool-<span class=\"number\">3</span>-thread-<span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n<p>下面展示一个关于时间调度的测试程序<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestScheduledExecutorService</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScheduledExecutorService ses = Executors.newScheduledThreadPool(<span class=\"number\">5</span>);           </div><div class=\"line\">\t\tses.scheduleWithFixedDelay(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(System.currentTimeMillis()/<span class=\"number\">100</span> + <span class=\"string\">\" \"</span></div><div class=\"line\">\t\t\t\t\t\t+ Thread.currentThread().getName());</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\tThread.sleep(<span class=\"number\">1500</span>);</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;, <span class=\"number\">0</span>, <span class=\"number\">2</span>, TimeUnit.SECONDS);</div><div class=\"line\">\t\t</div><div class=\"line\">\t<span class=\"comment\">/*ses.scheduleAtFixedRate(new Runnable() &#123;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\t@Override</div><div class=\"line\">\t\t\t\tpublic void run() &#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.println(System.currentTimeMillis()/100 + \" \"</div><div class=\"line\">\t\t\t\t\t\t\t+ Thread.currentThread().getName());</div><div class=\"line\">\t\t\t\t\ttry &#123;</div><div class=\"line\">\t\t\t\t\t\tThread.sleep(1500);</div><div class=\"line\">\t\t\t\t\t&#125; catch (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t\t\t// TODO Auto-generated catch block</div><div class=\"line\">\t\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;, 0, 2, TimeUnit.SECONDS);*/</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果截取部分如下 ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ses.scheduleWithFixedDelay() :</span></div><div class=\"line\"><span class=\"number\">14695233533</span> pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">14695233568</span> pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">14695233603</span> pool-<span class=\"number\">1</span>-thread-<span class=\"number\">2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ses.scheduleAtFixedRate() :</span></div><div class=\"line\"><span class=\"number\">14695234096</span> pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">14695234116</span> pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">14695234136</span> pool-<span class=\"number\">1</span>-thread-<span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">14695234156</span> pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<h3 id=\"关于scheduleAtFixedRate-和scheduleWithFixedDelay-的区别\"><a href=\"#关于scheduleAtFixedRate-和scheduleWithFixedDelay-的区别\" class=\"headerlink\" title=\"关于scheduleAtFixedRate()和scheduleWithFixedDelay()的区别\"></a>关于scheduleAtFixedRate()和scheduleWithFixedDelay()的区别</h3><ul>\n<li>对于scheduleAtFixedRate()来说，频率是一定的，它是以上个任务开始为起点，之后的period时间，调度下一次任务</li>\n<li>而scheduleWithFixedDelay(),间隔时间是一定的，它是以上一个任务结束为起点</li>\n</ul>\n<h3 id=\"线程池的内部实现\"><a href=\"#线程池的内部实现\" class=\"headerlink\" title=\"线程池的内部实现\"></a>线程池的内部实现</h3><p>我们通过查看源码发现无论是newSingleThreadExecutor(),Executors.newSingleThreadExecutor()还是Executors.newCachedThreadPool()都是使用调用ThreadPoolExecutor的构造方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newFixedThreadPool</span><span class=\"params\">(<span class=\"keyword\">int</span> nThreads)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(nThreads, nThreads,</div><div class=\"line\">                                     <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</div><div class=\"line\">                                     <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newSingleThreadExecutor</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FinalizableDelegatedExecutorService</div><div class=\"line\">           (<span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">1</span>, <span class=\"number\">1</span>,</div><div class=\"line\">                                   <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</div><div class=\"line\">                                   <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newCachedThreadPool</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">0</span>, Integer.MAX_VALUE,</div><div class=\"line\">                                     <span class=\"number\">60L</span>, TimeUnit.SECONDS,</div><div class=\"line\">                                     <span class=\"keyword\">new</span> SynchronousQueue&lt;Runnable&gt;());</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>那么我们看一下这个最原始的构造方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,</div><div class=\"line\">                            <span class=\"keyword\">int</span> maximumPoolSize,</div><div class=\"line\">                            <span class=\"keyword\">long</span> keepAliveTime,</div><div class=\"line\">                            TimeUnit unit,</div><div class=\"line\">                            BlockingQueue&lt;Runnable&gt; workQueue,</div><div class=\"line\">                            ThreadFactory threadFactory,</div><div class=\"line\">                            RejectedExecutionHandler handler)</span></span></div></pre></td></tr></table></figure></p>\n<p>函数的参数含义如下 ：</p>\n<ul>\n<li>corePoolSize ：线程池中的线程数量</li>\n<li>maximumPoolSize ：线程池中的最大线程数量</li>\n<li>keepAliveTime ：线程数量超过corePoolSize，多余线程的最大存活时间</li>\n<li>unit ：keepAliveTime的时间单位</li>\n<li>workQueue ： 任务队列</li>\n<li>threadFactory ： 线程工厂</li>\n<li>handler ：拒绝策略</li>\n</ul>\n<p>这里给出ThreadPoolExecutor的核心调度代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(Runnable command)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (command == <span class=\"keyword\">null</span>)</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</div><div class=\"line\">       <span class=\"comment\">/*</div><div class=\"line\">        * Proceed in 3 steps:</div><div class=\"line\">        *</div><div class=\"line\">        * 1. If fewer than corePoolSize threads are running, try to</div><div class=\"line\">        * start a new thread with the given command as its first</div><div class=\"line\">        * task.  The call to addWorker atomically checks runState and</div><div class=\"line\">        * workerCount, and so prevents false alarms that would add</div><div class=\"line\">        * threads when it shouldn't, by returning false.</div><div class=\"line\">        *</div><div class=\"line\">        * 2. If a task can be successfully queued, then we still need</div><div class=\"line\">        * to double-check whether we should have added a thread</div><div class=\"line\">        * (because existing ones died since last checking) or that</div><div class=\"line\">        * the pool shut down since entry into this method. So we</div><div class=\"line\">        * recheck state and if necessary roll back the enqueuing if</div><div class=\"line\">        * stopped, or start a new thread if there are none.</div><div class=\"line\">        *</div><div class=\"line\">        * 3. If we cannot queue task, then we try to add a new</div><div class=\"line\">        * thread.  If it fails, we know we are shut down or saturated                         </div><div class=\"line\">        * and so reject the task.</div><div class=\"line\">        */</span></div><div class=\"line\">       <span class=\"keyword\">int</span> c = ctl.get();</div><div class=\"line\">       <span class=\"keyword\">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (addWorker(command, <span class=\"keyword\">true</span>))</div><div class=\"line\">               <span class=\"keyword\">return</span>;</div><div class=\"line\">           c = ctl.get();</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</div><div class=\"line\">           <span class=\"keyword\">int</span> recheck = ctl.get();</div><div class=\"line\">           <span class=\"keyword\">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</div><div class=\"line\">               reject(command);</div><div class=\"line\">           <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (workerCountOf(recheck) == <span class=\"number\">0</span>)</div><div class=\"line\">               addWorker(<span class=\"keyword\">null</span>, <span class=\"keyword\">false</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!addWorker(command, <span class=\"keyword\">false</span>))</div><div class=\"line\">           reject(command);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"线程池的拒绝策略\"><a href=\"#线程池的拒绝策略\" class=\"headerlink\" title=\"线程池的拒绝策略\"></a>线程池的拒绝策略</h3><p>当队列中以排满，再也塞不下其它任务，那么我们就需要提供一套机制来处理这个问题。<br>JDK内置了四种拒绝策略</p>\n<ul>\n<li>AbortPolicy策略 ： 该策略直接抛出异常，阻止系统正常工作</li>\n<li>CallerRunsPolicy策略 ： 只要线程池未关闭，运行当前被丢弃的任务</li>\n<li>DiscardOledestPolicy策略 : 丢弃最老的任务</li>\n<li>DiscardPolicy策略 ；不做任何处理</li>\n</ul>\n<p>同样的，我们也可以自己写处理方案，只需要实现RejectedExecutionHandler接口<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">RejectedExecutionHandler</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rejectedExecution</span><span class=\"params\">(Runnable r, ThreadPoolExecutor executor)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下面展示一个测试程序<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RejectPolicy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(System.currentTimeMillis()/<span class=\"number\">1000</span> + <span class=\"string\">\" \"</span></div><div class=\"line\">\t\t\t\t+ Thread.currentThread().getName());</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tThread.sleep(<span class=\"number\">1000</span>);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">\t\tRejectPolicy rp = <span class=\"keyword\">new</span> RejectPolicy();</div><div class=\"line\">\t\tExecutorService es = <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">5</span>, <span class=\"number\">5</span>, </div><div class=\"line\">\t\t\t\t<span class=\"number\">0L</span>, TimeUnit.SECONDS, </div><div class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;(<span class=\"number\">10</span>),</div><div class=\"line\">\t\t\t\tExecutors.defaultThreadFactory(),</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> RejectedExecutionHandler() &#123;</div><div class=\"line\">\t\t\t\t\t</div><div class=\"line\">\t\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rejectedExecution</span><span class=\"params\">(Runnable r, ThreadPoolExecutor executor)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\t\tSystem.out.println(r.toString() + <span class=\"string\">\"is discard\"</span>);</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; Integer.MAX_VALUE; i++) &#123;</div><div class=\"line\">\t\t\tes.submit(rp);</div><div class=\"line\">\t\t\tThread.sleep(<span class=\"number\">100</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>截取部分输出如下 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1469533427</span> pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">1469533427</span> pool-<span class=\"number\">1</span>-thread-<span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">1469533428</span> pool-<span class=\"number\">1</span>-thread-<span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">1469533428</span> pool-<span class=\"number\">1</span>-thread-<span class=\"number\">4</span></div><div class=\"line\"><span class=\"number\">1469533428</span> pool-<span class=\"number\">1</span>-thread-<span class=\"number\">5</span></div><div class=\"line\">java.util.concurrent.FutureTask@<span class=\"number\">55f</span>96302is discard</div><div class=\"line\">java.util.concurrent.FutureTask@<span class=\"number\">3</span>d4eac69is discard</div><div class=\"line\">java.util.concurrent.FutureTask@<span class=\"number\">42</span>a57993is discard</div><div class=\"line\">java.util.concurrent.FutureTask@<span class=\"number\">75</span>b84c92is discard</div><div class=\"line\">java.util.concurrent.FutureTask@<span class=\"number\">6</span>bc7c054is discard</div><div class=\"line\"><span class=\"number\">1469533428</span> pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></div></pre></td></tr></table></figure></p>"},{"title":"并发编程（十五）线程池（二）","date":"2016-07-22T16:13:58.000Z","_content":"### ThreadFactory\n\n在上节，我们介绍了线程池的作用就是复用线程，那么问题来了，我们一直都没有创建线程，那么线程又是从何而来呢？\n还记得上次提到的那个ThreadPoolExecutor最原始的构造方法吗？里面有个参数ThreadFactory，线程池中所有的线程都是有它创造出来的\n``` java\n\tpublic interface ThreadFactory {\n\t\tThread newThread(Runnable r);\n\t}\n```\n下面给出一个自己建造ThreadFactory的示例\n\n<!--more-->\n\n``` java\n\tpublic class TestThreadFactory implements Runnable {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tSystem.out.println(\"HelloWorld\");\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) {\n\t\t\tTestThreadFactory ttf = new TestThreadFactory();\n\t\t\tExecutorService es = new ThreadPoolExecutor(5, 5, 0L, TimeUnit.SECONDS,       \n\t\t\t\t\tnew LinkedBlockingQueue<Runnable>(), \n\t\t\t\t\tnew ThreadFactory() {\n\t\t\t\t\t\t\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Thread newThread(Runnable r) {\n\t\t\t\t\t\t\tThread t = new Thread(r);\n\t\t\t\t\t\t\tt.setDaemon(true);\n\t\t\t\t\t\t\tSystem.out.println(\"create \" + t);\n\t\t\t\t\t\t\treturn t;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\tfor(int i = 0; i < 5; i++) {\n\t\t\t\tes.execute(ttf);\n\t\t\t}\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\ncreate Thread[Thread-0,5,main]\ncreate Thread[Thread-1,5,main]\ncreate Thread[Thread-2,5,main]\ncreate Thread[Thread-3,5,main]\ncreate Thread[Thread-4,5,main]\n```\n### 拓展线程池\n\nJDK已经给我们提供了一个相当稳固的线程池，但如果我们还想对其进行拓展，可不可以呢？\nJDK的ThreadPoolExecutor还为我们提供了beforeExecute(),afterExecute()和terminated()三个接口供我们拓展\n``` java\n\t//运行前\n\tprotected void beforeExecute(Thread t, Runnable r) { }\n\t//运行结束\n\tprotected void afterExecute(Runnable r, Throwable t) { }\n\t//线程池退出\n\tprotected void terminated() { }\n```\n下面给出一个示例\n``` java\n\tpublic class ExpandThreadPoolExecutor implements Runnable {\n\t\tprivate String name;\n\t\tpublic ExpandThreadPoolExecutor(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tSystem.out.println(\"HelloWorld\" + name);\n\t\t\ttry {\n\t\t\t\tThread.sleep(1000);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tpublic static void main(String[] args) {\n\t\t\tExecutorService es = new ThreadPoolExecutor(2, 2, 0L, \n\t\t\t\t\tTimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>() ) {\n\t\t\t\t@Override\n\t\t\t\tprotected void beforeExecute(Thread t, Runnable r) {\n\t\t\t\t\t// TODO Auto-generated method stub\n\t\t\t\t\tSystem.out.println(\"before \" + ((ExpandThreadPoolExecutor) r).name);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tprotected void afterExecute(Runnable r, Throwable t) {\n\t\t\t\t\t// TODO Auto-generated method stub\n\t\t\t\t\tSystem.out.println(\"after \" + ((ExpandThreadPoolExecutor) r).name);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tprotected void terminated() {\n\t\t\t\t\tSystem.out.println(\"thread pool exit\");\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tfor(int i = 0; i < 2; i++) {\n\t\t\t\tes.execute(new ExpandThreadPoolExecutor(\"thread_\" + i));\n\t\t\t}\n\t\t\tes.shutdown();\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\nbefore thread_1\nbefore thread_0\nHelloWorldthread_1\nHelloWorldthread_0\nafter thread_0\nafter thread_1\nthread pool exit\n```\n\n\n### 线程池中的幽灵错误\n\n什么都不说，先上代码\n``` java\n\tpublic class ThreadPoolBug implements Runnable {\n\t\tprivate int a;\n\t\tprivate int b;\n\t\t\n\t\tpublic ThreadPoolBug(int a, int b) {\n\t\t\tthis.a = a;\n\t\t\tthis.b = b;\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tdouble ret = a / b;\n\t\t\tSystem.out.println(ret);\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) throws InterruptedException, ExecutionException {\n\t\t\tExecutorService es = Executors.newCachedThreadPool();\n\t\t\tfor(int i = 0; i < 5; i++) {\n\t\t\t\tes.submit(new ThreadPoolBug(100, i));\n\t\t\t\t//es.submit(new ThreadPoolBug(100, i)).get();\n\t\t\t\t//es.execute(new ThreadPoolBug(100, i));\n\t\t\t}\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\n100.0\n33.0\n25.0\n50.0\n```\n\n不对啊！100/0为什么不报错呢？\n当将submit()换成execute()就出现错误了。原来错误也可以这么可爱\n``` java\nException in thread \"pool-1-thread-1\" java.lang.ArithmeticException: / by zero\n\tat cn.it.thread.concurrent.ThreadPoolBug.run(ThreadPoolBug.java:17)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\n100.0\n33.0\n25.0\n50.0\n```\n先来说一说submit()和execute()区别吧\n``` java\n\tpublic void execute(Runnable command) {}\n\tFuture<?> submit(Runnable task) {}\n```\n我们看一下Future怎么才能获取结果，这也就是为什么es.submit(new ThreadPoolBug(100, i)).get()会报错\n``` java\n\t/**\n     * Waits if necessary for the computation to complete, and then\n     * retrieves its result.\n     *\n     * @return the computed result\n     * @throws CancellationException if the computation was cancelled\n     * @throws ExecutionException if the computation threw an\n     * exception\n     * @throws InterruptedException if the current thread was interrupted\n     * while waiting\n     */\n    V get() throws InterruptedException, ExecutionException;\n```\n\n再来说说Exception的问题吧。仔细看看总感觉少点什么？少什么呢？在main()里谁提交的呢？没有指出来，线程池将这个Exception吞没了，下面就应该想办法怎么将它展示出来，代码如下\n``` java\n\tpublic class ThreadPoolBug implements Runnable {\n\t\n\t\tpublic static class ThreadPoolTrace extends ThreadPoolExecutor {\n\n\t\t\tpublic ThreadPoolTrace(int corePoolSize, int maximumPoolSize,\n\t\t\t\t\tlong keepAliveTime, TimeUnit unit,\n\t\t\t\t\tBlockingQueue<Runnable> workQueue) {\n\t\t\t\tsuper(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);\n\t\t\t}\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void execute(Runnable command) {\n\t\t\t\tsuper.execute(wrap(command, cilentTrace()));\n\t\t\t}\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic Future<?> submit(Runnable task) {\n\t\t\t\t// TODO Auto-generated method stub\n\t\t\t\treturn super.submit(wrap(task, cilentTrace()));\n\t\t\t}\n\t\t\t\n\t\t\tprivate Exception cilentTrace() {\n\t\t\t\treturn new Exception(\"client stack trace\");\n\t\t\t}\n\t\t\t\n\t\t\tprivate Runnable wrap(final Runnable task, final Exception clientstack) {\n\t\t\t\treturn new Runnable() {\n\t\t\t\t\t\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\ttask.run();\n\t\t\t\t\t\t}catch (Exception e) {\n\t\t\t\t\t\t\tclientstack.printStackTrace();\n\t\t\t\t\t\t\tthrow e;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\t\n\t\tprivate int a;\n\t\tprivate int b;\n\t\t\n\t\tpublic ThreadPoolBug(int a, int b) {\n\t\t\tthis.a = a;\n\t\t\tthis.b = b;\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tdouble ret = a / b;\n\t\t\tSystem.out.println(ret);\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) throws InterruptedException, ExecutionException {\n\t\t\tExecutorService es = new ThreadPoolTrace(5, 5, 0L, TimeUnit.SECONDS,\n\t\t\t\t\tnew LinkedBlockingQueue<Runnable>());\n\t\t\tfor(int i = 0; i < 5; i++) {\n\t\t\t\tes.submit(new ThreadPoolBug(100, i)).get();\n\t\t\t\t//es.execute(new ThreadPoolBug(100, i));\n\t\t\t}\n\t\t}\n\t}\n\n```\n输出结果 ：\n``` java\njava.lang.Exception: client stack trace\n\tat cn.it.thread.concurrent.ThreadPoolBug$ThreadPoolTrace.cilentTrace(ThreadPoolBug.java:35)\n\tat cn.it.thread.concurrent.ThreadPoolBug$ThreadPoolTrace.submit(ThreadPoolBug.java:30)\n\tat cn.it.thread.concurrent.ThreadPoolBug.main(ThreadPoolBug.java:73)\nException in thread \"main\" java.util.concurrent.ExecutionException: java.lang.ArithmeticException: / by zero\n\tat java.util.concurrent.FutureTask.report(FutureTask.java:122)\n\tat java.util.concurrent.FutureTask.get(FutureTask.java:192)\n\tat cn.it.thread.concurrent.ThreadPoolBug.main(ThreadPoolBug.java:73)\nCaused by: java.lang.ArithmeticException: / by zero\n\tat cn.it.thread.concurrent.ThreadPoolBug.run(ThreadPoolBug.java:65)\n\tat cn.it.thread.concurrent.ThreadPoolBug$ThreadPoolTrace$1.run(ThreadPoolBug.java:45)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat cn.it.thread.concurrent.ThreadPoolBug$ThreadPoolTrace$1.run(ThreadPoolBug.java:45)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\n```\n说说整体的思路吧\n为什么会被吞没呢？因为线程池在调度任务前没有保存任务线程的堆栈信息。那么解决方案就应该是将堆栈信息包装到Runnable对象里面去，而用一个方法正好，而恰巧Exception可以打印，所以方法就选择了返回值为Exception的方法\n\n### Fork/Join框架\n\n我们知道分治算法讲究的分，治，合，关于分治算法，请参考[分治算法](https://sakuraffy.github.io/algorithm_divide/)\nJDK中的Fork/Join框架和其异曲同工之妙\n``` java\n\t@since 1.7\n\tpublic class ForkJoinPool extends AbstractExecutorService {\n\t\tpublic final ForkJoinTask<V> fork() {}\n\t\tpublic final V join() {}\n\t\tpublic void execute(ForkJoinTask<?> task) {}\n\t\tpublic <T> ForkJoinTask<T> submit(ForkJoinTask<T> task) {}\n\t}\n\t@since 1.7\n\tpublic abstract class ForkJoinTask<V> implements Future<V>, Serializable {}\n\t//没有返回值的任务\n\tpublic abstract class RecursiveAction extends ForkJoinTask<Void> {\n\t\tprotected abstract void compute();\n\t}\n\t//携带返回值的任务\n\tpublic abstract class RecursiveTask<V> extends ForkJoinTask<V> {\n\t\tprotected abstract V compute();\n\t}\n```\n这就JDK提供的类及其重要方法。我们使用Fork/Join创建任务必须继承RecursiveTask和RecursiveAction其中之一\n下面给出一个示例\n``` java\n\tpublic class ForkJoin extends RecursiveTask<Long>{\n\n\t\tprivate static final long serialVersionUID = 1L;\n\n\t\tprivate static final int THRESHOLD = 10000;\n\t\tprivate long start;\n\t\tprivate long end;\n\t\t\n\t\tpublic ForkJoin(long start, long end) {\n\t\t\tsuper();\n\t\t\tthis.start = start;\n\t\t\tthis.end = end;\n\t\t}\n\t\t\n\t\t@Override\n\t\tprotected Long compute() {\n\t\t\tlong sum = 0;\n\t\t\tboolean canComputor = (end - start) < THRESHOLD;\n\t\t\tif (canComputor) {\n\t\t\t\tfor(long i = start; i <= end; i++) {\n\t\t\t\t\tsum += i;\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\tlong step = (end -start) / 100;\n\t\t\t\tArrayList<ForkJoin> subTasks = new ArrayList<>();\n\t\t\t\tlong pos = start;\n\t\t\t\tfor (int i = 0; i < 100; i++) {\n\t\t\t\t\tlong lastOne = pos + step;\n\t\t\t\t\tif (lastOne > end) {\n\t\t\t\t\t\tlastOne = end;\n\t\t\t\t\t}\n\t\t\t\t\tForkJoin subTask = new ForkJoin(pos, lastOne);\n\t\t\t\t\tpos += step + 1;\n\t\t\t\t\tsubTasks.add(subTask);\n\t\t\t\t\tsubTask.fork();\n\t\t\t\t}\n\t\t\t\tfor (ForkJoin t : subTasks) {\n\t\t\t\t\tsum += t.join();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn sum;\n\t\t}\n\n\t\tpublic static void main(String[] args) throws InterruptedException, ExecutionException {\n\t\t\tForkJoinPool pool = new ForkJoinPool();\n\t\t\tForkJoin fj = new ForkJoin(0, 200000L);\n\t\t\tForkJoinTask<Long> task = pool.submit(fj);\n\t\t\tlong ret = task.get();\n\t\t\tSystem.out.println(ret);\n\t\t}\n\t}\n\n```\n输出结果 ：\n``` java\n20000100000\n```\n","source":"_posts/intercurrent_threadpool_2.md","raw":"---\ntitle: 并发编程（十五）线程池（二）\ndate: 2016-07-23 00:13:58\ntags:\n\t- 并发编程\n---\n### ThreadFactory\n\n在上节，我们介绍了线程池的作用就是复用线程，那么问题来了，我们一直都没有创建线程，那么线程又是从何而来呢？\n还记得上次提到的那个ThreadPoolExecutor最原始的构造方法吗？里面有个参数ThreadFactory，线程池中所有的线程都是有它创造出来的\n``` java\n\tpublic interface ThreadFactory {\n\t\tThread newThread(Runnable r);\n\t}\n```\n下面给出一个自己建造ThreadFactory的示例\n\n<!--more-->\n\n``` java\n\tpublic class TestThreadFactory implements Runnable {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tSystem.out.println(\"HelloWorld\");\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) {\n\t\t\tTestThreadFactory ttf = new TestThreadFactory();\n\t\t\tExecutorService es = new ThreadPoolExecutor(5, 5, 0L, TimeUnit.SECONDS,       \n\t\t\t\t\tnew LinkedBlockingQueue<Runnable>(), \n\t\t\t\t\tnew ThreadFactory() {\n\t\t\t\t\t\t\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Thread newThread(Runnable r) {\n\t\t\t\t\t\t\tThread t = new Thread(r);\n\t\t\t\t\t\t\tt.setDaemon(true);\n\t\t\t\t\t\t\tSystem.out.println(\"create \" + t);\n\t\t\t\t\t\t\treturn t;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\tfor(int i = 0; i < 5; i++) {\n\t\t\t\tes.execute(ttf);\n\t\t\t}\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\ncreate Thread[Thread-0,5,main]\ncreate Thread[Thread-1,5,main]\ncreate Thread[Thread-2,5,main]\ncreate Thread[Thread-3,5,main]\ncreate Thread[Thread-4,5,main]\n```\n### 拓展线程池\n\nJDK已经给我们提供了一个相当稳固的线程池，但如果我们还想对其进行拓展，可不可以呢？\nJDK的ThreadPoolExecutor还为我们提供了beforeExecute(),afterExecute()和terminated()三个接口供我们拓展\n``` java\n\t//运行前\n\tprotected void beforeExecute(Thread t, Runnable r) { }\n\t//运行结束\n\tprotected void afterExecute(Runnable r, Throwable t) { }\n\t//线程池退出\n\tprotected void terminated() { }\n```\n下面给出一个示例\n``` java\n\tpublic class ExpandThreadPoolExecutor implements Runnable {\n\t\tprivate String name;\n\t\tpublic ExpandThreadPoolExecutor(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tSystem.out.println(\"HelloWorld\" + name);\n\t\t\ttry {\n\t\t\t\tThread.sleep(1000);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tpublic static void main(String[] args) {\n\t\t\tExecutorService es = new ThreadPoolExecutor(2, 2, 0L, \n\t\t\t\t\tTimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>() ) {\n\t\t\t\t@Override\n\t\t\t\tprotected void beforeExecute(Thread t, Runnable r) {\n\t\t\t\t\t// TODO Auto-generated method stub\n\t\t\t\t\tSystem.out.println(\"before \" + ((ExpandThreadPoolExecutor) r).name);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tprotected void afterExecute(Runnable r, Throwable t) {\n\t\t\t\t\t// TODO Auto-generated method stub\n\t\t\t\t\tSystem.out.println(\"after \" + ((ExpandThreadPoolExecutor) r).name);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tprotected void terminated() {\n\t\t\t\t\tSystem.out.println(\"thread pool exit\");\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tfor(int i = 0; i < 2; i++) {\n\t\t\t\tes.execute(new ExpandThreadPoolExecutor(\"thread_\" + i));\n\t\t\t}\n\t\t\tes.shutdown();\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\nbefore thread_1\nbefore thread_0\nHelloWorldthread_1\nHelloWorldthread_0\nafter thread_0\nafter thread_1\nthread pool exit\n```\n\n\n### 线程池中的幽灵错误\n\n什么都不说，先上代码\n``` java\n\tpublic class ThreadPoolBug implements Runnable {\n\t\tprivate int a;\n\t\tprivate int b;\n\t\t\n\t\tpublic ThreadPoolBug(int a, int b) {\n\t\t\tthis.a = a;\n\t\t\tthis.b = b;\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tdouble ret = a / b;\n\t\t\tSystem.out.println(ret);\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) throws InterruptedException, ExecutionException {\n\t\t\tExecutorService es = Executors.newCachedThreadPool();\n\t\t\tfor(int i = 0; i < 5; i++) {\n\t\t\t\tes.submit(new ThreadPoolBug(100, i));\n\t\t\t\t//es.submit(new ThreadPoolBug(100, i)).get();\n\t\t\t\t//es.execute(new ThreadPoolBug(100, i));\n\t\t\t}\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\n100.0\n33.0\n25.0\n50.0\n```\n\n不对啊！100/0为什么不报错呢？\n当将submit()换成execute()就出现错误了。原来错误也可以这么可爱\n``` java\nException in thread \"pool-1-thread-1\" java.lang.ArithmeticException: / by zero\n\tat cn.it.thread.concurrent.ThreadPoolBug.run(ThreadPoolBug.java:17)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\n100.0\n33.0\n25.0\n50.0\n```\n先来说一说submit()和execute()区别吧\n``` java\n\tpublic void execute(Runnable command) {}\n\tFuture<?> submit(Runnable task) {}\n```\n我们看一下Future怎么才能获取结果，这也就是为什么es.submit(new ThreadPoolBug(100, i)).get()会报错\n``` java\n\t/**\n     * Waits if necessary for the computation to complete, and then\n     * retrieves its result.\n     *\n     * @return the computed result\n     * @throws CancellationException if the computation was cancelled\n     * @throws ExecutionException if the computation threw an\n     * exception\n     * @throws InterruptedException if the current thread was interrupted\n     * while waiting\n     */\n    V get() throws InterruptedException, ExecutionException;\n```\n\n再来说说Exception的问题吧。仔细看看总感觉少点什么？少什么呢？在main()里谁提交的呢？没有指出来，线程池将这个Exception吞没了，下面就应该想办法怎么将它展示出来，代码如下\n``` java\n\tpublic class ThreadPoolBug implements Runnable {\n\t\n\t\tpublic static class ThreadPoolTrace extends ThreadPoolExecutor {\n\n\t\t\tpublic ThreadPoolTrace(int corePoolSize, int maximumPoolSize,\n\t\t\t\t\tlong keepAliveTime, TimeUnit unit,\n\t\t\t\t\tBlockingQueue<Runnable> workQueue) {\n\t\t\t\tsuper(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);\n\t\t\t}\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void execute(Runnable command) {\n\t\t\t\tsuper.execute(wrap(command, cilentTrace()));\n\t\t\t}\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic Future<?> submit(Runnable task) {\n\t\t\t\t// TODO Auto-generated method stub\n\t\t\t\treturn super.submit(wrap(task, cilentTrace()));\n\t\t\t}\n\t\t\t\n\t\t\tprivate Exception cilentTrace() {\n\t\t\t\treturn new Exception(\"client stack trace\");\n\t\t\t}\n\t\t\t\n\t\t\tprivate Runnable wrap(final Runnable task, final Exception clientstack) {\n\t\t\t\treturn new Runnable() {\n\t\t\t\t\t\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\ttask.run();\n\t\t\t\t\t\t}catch (Exception e) {\n\t\t\t\t\t\t\tclientstack.printStackTrace();\n\t\t\t\t\t\t\tthrow e;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\t\n\t\tprivate int a;\n\t\tprivate int b;\n\t\t\n\t\tpublic ThreadPoolBug(int a, int b) {\n\t\t\tthis.a = a;\n\t\t\tthis.b = b;\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tdouble ret = a / b;\n\t\t\tSystem.out.println(ret);\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) throws InterruptedException, ExecutionException {\n\t\t\tExecutorService es = new ThreadPoolTrace(5, 5, 0L, TimeUnit.SECONDS,\n\t\t\t\t\tnew LinkedBlockingQueue<Runnable>());\n\t\t\tfor(int i = 0; i < 5; i++) {\n\t\t\t\tes.submit(new ThreadPoolBug(100, i)).get();\n\t\t\t\t//es.execute(new ThreadPoolBug(100, i));\n\t\t\t}\n\t\t}\n\t}\n\n```\n输出结果 ：\n``` java\njava.lang.Exception: client stack trace\n\tat cn.it.thread.concurrent.ThreadPoolBug$ThreadPoolTrace.cilentTrace(ThreadPoolBug.java:35)\n\tat cn.it.thread.concurrent.ThreadPoolBug$ThreadPoolTrace.submit(ThreadPoolBug.java:30)\n\tat cn.it.thread.concurrent.ThreadPoolBug.main(ThreadPoolBug.java:73)\nException in thread \"main\" java.util.concurrent.ExecutionException: java.lang.ArithmeticException: / by zero\n\tat java.util.concurrent.FutureTask.report(FutureTask.java:122)\n\tat java.util.concurrent.FutureTask.get(FutureTask.java:192)\n\tat cn.it.thread.concurrent.ThreadPoolBug.main(ThreadPoolBug.java:73)\nCaused by: java.lang.ArithmeticException: / by zero\n\tat cn.it.thread.concurrent.ThreadPoolBug.run(ThreadPoolBug.java:65)\n\tat cn.it.thread.concurrent.ThreadPoolBug$ThreadPoolTrace$1.run(ThreadPoolBug.java:45)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat cn.it.thread.concurrent.ThreadPoolBug$ThreadPoolTrace$1.run(ThreadPoolBug.java:45)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\n```\n说说整体的思路吧\n为什么会被吞没呢？因为线程池在调度任务前没有保存任务线程的堆栈信息。那么解决方案就应该是将堆栈信息包装到Runnable对象里面去，而用一个方法正好，而恰巧Exception可以打印，所以方法就选择了返回值为Exception的方法\n\n### Fork/Join框架\n\n我们知道分治算法讲究的分，治，合，关于分治算法，请参考[分治算法](https://sakuraffy.github.io/algorithm_divide/)\nJDK中的Fork/Join框架和其异曲同工之妙\n``` java\n\t@since 1.7\n\tpublic class ForkJoinPool extends AbstractExecutorService {\n\t\tpublic final ForkJoinTask<V> fork() {}\n\t\tpublic final V join() {}\n\t\tpublic void execute(ForkJoinTask<?> task) {}\n\t\tpublic <T> ForkJoinTask<T> submit(ForkJoinTask<T> task) {}\n\t}\n\t@since 1.7\n\tpublic abstract class ForkJoinTask<V> implements Future<V>, Serializable {}\n\t//没有返回值的任务\n\tpublic abstract class RecursiveAction extends ForkJoinTask<Void> {\n\t\tprotected abstract void compute();\n\t}\n\t//携带返回值的任务\n\tpublic abstract class RecursiveTask<V> extends ForkJoinTask<V> {\n\t\tprotected abstract V compute();\n\t}\n```\n这就JDK提供的类及其重要方法。我们使用Fork/Join创建任务必须继承RecursiveTask和RecursiveAction其中之一\n下面给出一个示例\n``` java\n\tpublic class ForkJoin extends RecursiveTask<Long>{\n\n\t\tprivate static final long serialVersionUID = 1L;\n\n\t\tprivate static final int THRESHOLD = 10000;\n\t\tprivate long start;\n\t\tprivate long end;\n\t\t\n\t\tpublic ForkJoin(long start, long end) {\n\t\t\tsuper();\n\t\t\tthis.start = start;\n\t\t\tthis.end = end;\n\t\t}\n\t\t\n\t\t@Override\n\t\tprotected Long compute() {\n\t\t\tlong sum = 0;\n\t\t\tboolean canComputor = (end - start) < THRESHOLD;\n\t\t\tif (canComputor) {\n\t\t\t\tfor(long i = start; i <= end; i++) {\n\t\t\t\t\tsum += i;\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\tlong step = (end -start) / 100;\n\t\t\t\tArrayList<ForkJoin> subTasks = new ArrayList<>();\n\t\t\t\tlong pos = start;\n\t\t\t\tfor (int i = 0; i < 100; i++) {\n\t\t\t\t\tlong lastOne = pos + step;\n\t\t\t\t\tif (lastOne > end) {\n\t\t\t\t\t\tlastOne = end;\n\t\t\t\t\t}\n\t\t\t\t\tForkJoin subTask = new ForkJoin(pos, lastOne);\n\t\t\t\t\tpos += step + 1;\n\t\t\t\t\tsubTasks.add(subTask);\n\t\t\t\t\tsubTask.fork();\n\t\t\t\t}\n\t\t\t\tfor (ForkJoin t : subTasks) {\n\t\t\t\t\tsum += t.join();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn sum;\n\t\t}\n\n\t\tpublic static void main(String[] args) throws InterruptedException, ExecutionException {\n\t\t\tForkJoinPool pool = new ForkJoinPool();\n\t\t\tForkJoin fj = new ForkJoin(0, 200000L);\n\t\t\tForkJoinTask<Long> task = pool.submit(fj);\n\t\t\tlong ret = task.get();\n\t\t\tSystem.out.println(ret);\n\t\t}\n\t}\n\n```\n输出结果 ：\n``` java\n20000100000\n```\n","slug":"intercurrent_threadpool_2","published":1,"updated":"2017-03-08T11:02:56.595Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5e1002eqoq1j9tyhy5m","content":"<h3 id=\"ThreadFactory\"><a href=\"#ThreadFactory\" class=\"headerlink\" title=\"ThreadFactory\"></a>ThreadFactory</h3><p>在上节，我们介绍了线程池的作用就是复用线程，那么问题来了，我们一直都没有创建线程，那么线程又是从何而来呢？<br>还记得上次提到的那个ThreadPoolExecutor最原始的构造方法吗？里面有个参数ThreadFactory，线程池中所有的线程都是有它创造出来的<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ThreadFactory</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\">Thread <span class=\"title\">newThread</span><span class=\"params\">(Runnable r)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下面给出一个自己建造ThreadFactory的示例</p>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestThreadFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"HelloWorld\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tTestThreadFactory ttf = <span class=\"keyword\">new</span> TestThreadFactory();</div><div class=\"line\">\t\tExecutorService es = <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">0L</span>, TimeUnit.SECONDS,       </div><div class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;(), </div><div class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> ThreadFactory() &#123;</div><div class=\"line\">\t\t\t\t\t</div><div class=\"line\">\t\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> Thread <span class=\"title\">newThread</span><span class=\"params\">(Runnable r)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\t\tThread t = <span class=\"keyword\">new</span> Thread(r);</div><div class=\"line\">\t\t\t\t\t\tt.setDaemon(<span class=\"keyword\">true</span>);</div><div class=\"line\">\t\t\t\t\t\tSystem.out.println(<span class=\"string\">\"create \"</span> + t);</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">return</span> t;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">\t\t\tes.execute(ttf);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">create Thread[Thread-<span class=\"number\">0</span>,<span class=\"number\">5</span>,main]</div><div class=\"line\">create Thread[Thread-<span class=\"number\">1</span>,<span class=\"number\">5</span>,main]</div><div class=\"line\">create Thread[Thread-<span class=\"number\">2</span>,<span class=\"number\">5</span>,main]</div><div class=\"line\">create Thread[Thread-<span class=\"number\">3</span>,<span class=\"number\">5</span>,main]</div><div class=\"line\">create Thread[Thread-<span class=\"number\">4</span>,<span class=\"number\">5</span>,main]</div></pre></td></tr></table></figure></p>\n<h3 id=\"拓展线程池\"><a href=\"#拓展线程池\" class=\"headerlink\" title=\"拓展线程池\"></a>拓展线程池</h3><p>JDK已经给我们提供了一个相当稳固的线程池，但如果我们还想对其进行拓展，可不可以呢？<br>JDK的ThreadPoolExecutor还为我们提供了beforeExecute(),afterExecute()和terminated()三个接口供我们拓展<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//运行前</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeExecute</span><span class=\"params\">(Thread t, Runnable r)</span> </span>&#123; &#125;</div><div class=\"line\"><span class=\"comment\">//运行结束</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">afterExecute</span><span class=\"params\">(Runnable r, Throwable t)</span> </span>&#123; &#125;</div><div class=\"line\"><span class=\"comment\">//线程池退出</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">terminated</span><span class=\"params\">()</span> </span>&#123; &#125;</div></pre></td></tr></table></figure></p>\n<p>下面给出一个示例<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExpandThreadPoolExecutor</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String name;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ExpandThreadPoolExecutor</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"HelloWorld\"</span> + name);</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tThread.sleep(<span class=\"number\">1000</span>);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tExecutorService es = <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">0L</span>, </div><div class=\"line\">\t\t\t\tTimeUnit.SECONDS, <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;() ) &#123;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeExecute</span><span class=\"params\">(Thread t, Runnable r)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"before \"</span> + ((ExpandThreadPoolExecutor) r).name);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">afterExecute</span><span class=\"params\">(Runnable r, Throwable t)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"after \"</span> + ((ExpandThreadPoolExecutor) r).name);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">terminated</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"thread pool exit\"</span>);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) &#123;</div><div class=\"line\">\t\t\tes.execute(<span class=\"keyword\">new</span> ExpandThreadPoolExecutor(<span class=\"string\">\"thread_\"</span> + i));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tes.shutdown();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">before thread_1</div><div class=\"line\">before thread_0</div><div class=\"line\">HelloWorldthread_1</div><div class=\"line\">HelloWorldthread_0</div><div class=\"line\">after thread_0</div><div class=\"line\">after thread_1</div><div class=\"line\">thread pool exit</div></pre></td></tr></table></figure></p>\n<h3 id=\"线程池中的幽灵错误\"><a href=\"#线程池中的幽灵错误\" class=\"headerlink\" title=\"线程池中的幽灵错误\"></a>线程池中的幽灵错误</h3><p>什么都不说，先上代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadPoolBug</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> a;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> b;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolBug</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.a = a;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.b = b;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">double</span> ret = a / b;</div><div class=\"line\">\t\tSystem.out.println(ret);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException, ExecutionException </span>&#123;</div><div class=\"line\">\t\tExecutorService es = Executors.newCachedThreadPool();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">\t\t\tes.submit(<span class=\"keyword\">new</span> ThreadPoolBug(<span class=\"number\">100</span>, i));</div><div class=\"line\">\t\t\t<span class=\"comment\">//es.submit(new ThreadPoolBug(100, i)).get();</span></div><div class=\"line\">\t\t\t<span class=\"comment\">//es.execute(new ThreadPoolBug(100, i));</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">100.0</span></div><div class=\"line\"><span class=\"number\">33.0</span></div><div class=\"line\"><span class=\"number\">25.0</span></div><div class=\"line\"><span class=\"number\">50.0</span></div></pre></td></tr></table></figure></p>\n<p>不对啊！100/0为什么不报错呢？<br>当将submit()换成execute()就出现错误了。原来错误也可以这么可爱<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Exception in thread <span class=\"string\">\"pool-1-thread-1\"</span> java.lang.ArithmeticException: / by zero</div><div class=\"line\">\tat cn.it.thread.concurrent.ThreadPoolBug.run(ThreadPoolBug.java:<span class=\"number\">17</span>)</div><div class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class=\"number\">1142</span>)</div><div class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class=\"number\">617</span>)</div><div class=\"line\">\tat java.lang.Thread.run(Thread.java:<span class=\"number\">745</span>)</div><div class=\"line\"><span class=\"number\">100.0</span></div><div class=\"line\"><span class=\"number\">33.0</span></div><div class=\"line\"><span class=\"number\">25.0</span></div><div class=\"line\"><span class=\"number\">50.0</span></div></pre></td></tr></table></figure></p>\n<p>先来说一说submit()和execute()区别吧<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(Runnable command)</span> </span>&#123;&#125;</div><div class=\"line\">Future&lt;?&gt; submit(Runnable task) &#123;&#125;</div></pre></td></tr></table></figure></p>\n<p>我们看一下Future怎么才能获取结果，这也就是为什么es.submit(new ThreadPoolBug(100, i)).get()会报错<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * Waits if necessary for the computation to complete, and then</div><div class=\"line\">    * retrieves its result.</div><div class=\"line\">    *</div><div class=\"line\">    * <span class=\"doctag\">@return</span> the computed result</div><div class=\"line\">    * <span class=\"doctag\">@throws</span> CancellationException if the computation was cancelled</div><div class=\"line\">    * <span class=\"doctag\">@throws</span> ExecutionException if the computation threw an</div><div class=\"line\">    * exception</div><div class=\"line\">    * <span class=\"doctag\">@throws</span> InterruptedException if the current thread was interrupted</div><div class=\"line\">    * while waiting</div><div class=\"line\">    */</div><div class=\"line\">   <span class=\"function\">V <span class=\"title\">get</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException, ExecutionException</span>;</div></pre></td></tr></table></figure></p>\n<p>再来说说Exception的问题吧。仔细看看总感觉少点什么？少什么呢？在main()里谁提交的呢？没有指出来，线程池将这个Exception吞没了，下面就应该想办法怎么将它展示出来，代码如下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadPoolBug</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadPoolTrace</span> <span class=\"keyword\">extends</span> <span class=\"title\">ThreadPoolExecutor</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolTrace</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize, <span class=\"keyword\">int</span> maximumPoolSize,</span></span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">long</span> keepAliveTime, TimeUnit unit,</div><div class=\"line\">\t\t\t\tBlockingQueue&lt;Runnable&gt; workQueue) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">super</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(Runnable command)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">super</span>.execute(wrap(command, cilentTrace()));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"keyword\">public</span> Future&lt;?&gt; submit(Runnable task) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.submit(wrap(task, cilentTrace()));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">private</span> Exception <span class=\"title\">cilentTrace</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"client stack trace\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">private</span> Runnable <span class=\"title\">wrap</span><span class=\"params\">(<span class=\"keyword\">final</span> Runnable task, <span class=\"keyword\">final</span> Exception clientstack)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\t\ttask.run();</div><div class=\"line\">\t\t\t\t\t&#125;<span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t\t\t\tclientstack.printStackTrace();</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">throw</span> e;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> a;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> b;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolBug</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.a = a;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.b = b;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">double</span> ret = a / b;</div><div class=\"line\">\t\tSystem.out.println(ret);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException, ExecutionException </span>&#123;</div><div class=\"line\">\t\tExecutorService es = <span class=\"keyword\">new</span> ThreadPoolTrace(<span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">0L</span>, TimeUnit.SECONDS,</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">\t\t\tes.submit(<span class=\"keyword\">new</span> ThreadPoolBug(<span class=\"number\">100</span>, i)).get();</div><div class=\"line\">\t\t\t<span class=\"comment\">//es.execute(new ThreadPoolBug(100, i));</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">java.lang.Exception: client stack trace</div><div class=\"line\">\tat cn.it.thread.concurrent.ThreadPoolBug$ThreadPoolTrace.cilentTrace(ThreadPoolBug.java:<span class=\"number\">35</span>)</div><div class=\"line\">\tat cn.it.thread.concurrent.ThreadPoolBug$ThreadPoolTrace.submit(ThreadPoolBug.java:<span class=\"number\">30</span>)</div><div class=\"line\">\tat cn.it.thread.concurrent.ThreadPoolBug.main(ThreadPoolBug.java:<span class=\"number\">73</span>)</div><div class=\"line\">Exception in thread <span class=\"string\">\"main\"</span> java.util.concurrent.ExecutionException: java.lang.ArithmeticException: / by zero</div><div class=\"line\">\tat java.util.concurrent.FutureTask.report(FutureTask.java:<span class=\"number\">122</span>)</div><div class=\"line\">\tat java.util.concurrent.FutureTask.get(FutureTask.java:<span class=\"number\">192</span>)</div><div class=\"line\">\tat cn.it.thread.concurrent.ThreadPoolBug.main(ThreadPoolBug.java:<span class=\"number\">73</span>)</div><div class=\"line\">Caused by: java.lang.ArithmeticException: / by zero</div><div class=\"line\">\tat cn.it.thread.concurrent.ThreadPoolBug.run(ThreadPoolBug.java:<span class=\"number\">65</span>)</div><div class=\"line\">\tat cn.it.thread.concurrent.ThreadPoolBug$ThreadPoolTrace$<span class=\"number\">1</span>.run(ThreadPoolBug.java:<span class=\"number\">45</span>)</div><div class=\"line\">\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:<span class=\"number\">511</span>)</div><div class=\"line\">\tat java.util.concurrent.FutureTask.run(FutureTask.java:<span class=\"number\">266</span>)</div><div class=\"line\">\tat cn.it.thread.concurrent.ThreadPoolBug$ThreadPoolTrace$<span class=\"number\">1</span>.run(ThreadPoolBug.java:<span class=\"number\">45</span>)</div><div class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class=\"number\">1142</span>)</div><div class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class=\"number\">617</span>)</div><div class=\"line\">\tat java.lang.Thread.run(Thread.java:<span class=\"number\">745</span>)</div></pre></td></tr></table></figure></p>\n<p>说说整体的思路吧<br>为什么会被吞没呢？因为线程池在调度任务前没有保存任务线程的堆栈信息。那么解决方案就应该是将堆栈信息包装到Runnable对象里面去，而用一个方法正好，而恰巧Exception可以打印，所以方法就选择了返回值为Exception的方法</p>\n<h3 id=\"Fork-Join框架\"><a href=\"#Fork-Join框架\" class=\"headerlink\" title=\"Fork/Join框架\"></a>Fork/Join框架</h3><p>我们知道分治算法讲究的分，治，合，关于分治算法，请参考<a href=\"https://sakuraffy.github.io/algorithm_divide/\">分治算法</a><br>JDK中的Fork/Join框架和其异曲同工之妙<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@since</span> <span class=\"number\">1.7</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ForkJoinPool</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractExecutorService</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> ForkJoinTask&lt;V&gt; <span class=\"title\">fork</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> V <span class=\"title\">join</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(ForkJoinTask&lt;?&gt; task)</span> </span>&#123;&#125;</div><div class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">ForkJoinTask&lt;T&gt; <span class=\"title\">submit</span><span class=\"params\">(ForkJoinTask&lt;T&gt; task)</span> </span>&#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">@since</span> <span class=\"number\">1.7</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ForkJoinTask</span>&lt;<span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Future</span>&lt;<span class=\"title\">V</span>&gt;, <span class=\"title\">Serializable</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"comment\">//没有返回值的任务</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RecursiveAction</span> <span class=\"keyword\">extends</span> <span class=\"title\">ForkJoinTask</span>&lt;<span class=\"title\">Void</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">compute</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//携带返回值的任务</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RecursiveTask</span>&lt;<span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">ForkJoinTask</span>&lt;<span class=\"title\">V</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> V <span class=\"title\">compute</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这就JDK提供的类及其重要方法。我们使用Fork/Join创建任务必须继承RecursiveTask和RecursiveAction其中之一<br>下面给出一个示例<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ForkJoin</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecursiveTask</span>&lt;<span class=\"title\">Long</span>&gt;</span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> THRESHOLD = <span class=\"number\">10000</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">long</span> start;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">long</span> end;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ForkJoin</span><span class=\"params\">(<span class=\"keyword\">long</span> start, <span class=\"keyword\">long</span> end)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.start = start;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.end = end;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> Long <span class=\"title\">compute</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">long</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">boolean</span> canComputor = (end - start) &lt; THRESHOLD;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (canComputor) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">long</span> i = start; i &lt;= end; i++) &#123;</div><div class=\"line\">\t\t\t\tsum += i;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">long</span> step = (end -start) / <span class=\"number\">100</span>;</div><div class=\"line\">\t\t\tArrayList&lt;ForkJoin&gt; subTasks = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">\t\t\t<span class=\"keyword\">long</span> pos = start;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">long</span> lastOne = pos + step;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (lastOne &gt; end) &#123;</div><div class=\"line\">\t\t\t\t\tlastOne = end;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tForkJoin subTask = <span class=\"keyword\">new</span> ForkJoin(pos, lastOne);</div><div class=\"line\">\t\t\t\tpos += step + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\tsubTasks.add(subTask);</div><div class=\"line\">\t\t\t\tsubTask.fork();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (ForkJoin t : subTasks) &#123;</div><div class=\"line\">\t\t\t\tsum += t.join();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> sum;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException, ExecutionException </span>&#123;</div><div class=\"line\">\t\tForkJoinPool pool = <span class=\"keyword\">new</span> ForkJoinPool();</div><div class=\"line\">\t\tForkJoin fj = <span class=\"keyword\">new</span> ForkJoin(<span class=\"number\">0</span>, <span class=\"number\">200000L</span>);</div><div class=\"line\">\t\tForkJoinTask&lt;Long&gt; task = pool.submit(fj);</div><div class=\"line\">\t\t<span class=\"keyword\">long</span> ret = task.get();</div><div class=\"line\">\t\tSystem.out.println(ret);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">20000100000</span></div></pre></td></tr></table></figure></p>\n","excerpt":"<h3 id=\"ThreadFactory\"><a href=\"#ThreadFactory\" class=\"headerlink\" title=\"ThreadFactory\"></a>ThreadFactory</h3><p>在上节，我们介绍了线程池的作用就是复用线程，那么问题来了，我们一直都没有创建线程，那么线程又是从何而来呢？<br>还记得上次提到的那个ThreadPoolExecutor最原始的构造方法吗？里面有个参数ThreadFactory，线程池中所有的线程都是有它创造出来的<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ThreadFactory</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\">Thread <span class=\"title\">newThread</span><span class=\"params\">(Runnable r)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下面给出一个自己建造ThreadFactory的示例</p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestThreadFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"HelloWorld\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tTestThreadFactory ttf = <span class=\"keyword\">new</span> TestThreadFactory();</div><div class=\"line\">\t\tExecutorService es = <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">0L</span>, TimeUnit.SECONDS,       </div><div class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;(), </div><div class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> ThreadFactory() &#123;</div><div class=\"line\">\t\t\t\t\t</div><div class=\"line\">\t\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> Thread <span class=\"title\">newThread</span><span class=\"params\">(Runnable r)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\t\tThread t = <span class=\"keyword\">new</span> Thread(r);</div><div class=\"line\">\t\t\t\t\t\tt.setDaemon(<span class=\"keyword\">true</span>);</div><div class=\"line\">\t\t\t\t\t\tSystem.out.println(<span class=\"string\">\"create \"</span> + t);</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">return</span> t;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">\t\t\tes.execute(ttf);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">create Thread[Thread-<span class=\"number\">0</span>,<span class=\"number\">5</span>,main]</div><div class=\"line\">create Thread[Thread-<span class=\"number\">1</span>,<span class=\"number\">5</span>,main]</div><div class=\"line\">create Thread[Thread-<span class=\"number\">2</span>,<span class=\"number\">5</span>,main]</div><div class=\"line\">create Thread[Thread-<span class=\"number\">3</span>,<span class=\"number\">5</span>,main]</div><div class=\"line\">create Thread[Thread-<span class=\"number\">4</span>,<span class=\"number\">5</span>,main]</div></pre></td></tr></table></figure></p>\n<h3 id=\"拓展线程池\"><a href=\"#拓展线程池\" class=\"headerlink\" title=\"拓展线程池\"></a>拓展线程池</h3><p>JDK已经给我们提供了一个相当稳固的线程池，但如果我们还想对其进行拓展，可不可以呢？<br>JDK的ThreadPoolExecutor还为我们提供了beforeExecute(),afterExecute()和terminated()三个接口供我们拓展<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//运行前</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeExecute</span><span class=\"params\">(Thread t, Runnable r)</span> </span>&#123; &#125;</div><div class=\"line\"><span class=\"comment\">//运行结束</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">afterExecute</span><span class=\"params\">(Runnable r, Throwable t)</span> </span>&#123; &#125;</div><div class=\"line\"><span class=\"comment\">//线程池退出</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">terminated</span><span class=\"params\">()</span> </span>&#123; &#125;</div></pre></td></tr></table></figure></p>\n<p>下面给出一个示例<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExpandThreadPoolExecutor</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String name;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ExpandThreadPoolExecutor</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"HelloWorld\"</span> + name);</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tThread.sleep(<span class=\"number\">1000</span>);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tExecutorService es = <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">0L</span>, </div><div class=\"line\">\t\t\t\tTimeUnit.SECONDS, <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;() ) &#123;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeExecute</span><span class=\"params\">(Thread t, Runnable r)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"before \"</span> + ((ExpandThreadPoolExecutor) r).name);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">afterExecute</span><span class=\"params\">(Runnable r, Throwable t)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"after \"</span> + ((ExpandThreadPoolExecutor) r).name);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">terminated</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"thread pool exit\"</span>);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) &#123;</div><div class=\"line\">\t\t\tes.execute(<span class=\"keyword\">new</span> ExpandThreadPoolExecutor(<span class=\"string\">\"thread_\"</span> + i));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tes.shutdown();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">before thread_1</div><div class=\"line\">before thread_0</div><div class=\"line\">HelloWorldthread_1</div><div class=\"line\">HelloWorldthread_0</div><div class=\"line\">after thread_0</div><div class=\"line\">after thread_1</div><div class=\"line\">thread pool exit</div></pre></td></tr></table></figure></p>\n<h3 id=\"线程池中的幽灵错误\"><a href=\"#线程池中的幽灵错误\" class=\"headerlink\" title=\"线程池中的幽灵错误\"></a>线程池中的幽灵错误</h3><p>什么都不说，先上代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadPoolBug</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> a;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> b;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolBug</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.a = a;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.b = b;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">double</span> ret = a / b;</div><div class=\"line\">\t\tSystem.out.println(ret);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException, ExecutionException </span>&#123;</div><div class=\"line\">\t\tExecutorService es = Executors.newCachedThreadPool();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">\t\t\tes.submit(<span class=\"keyword\">new</span> ThreadPoolBug(<span class=\"number\">100</span>, i));</div><div class=\"line\">\t\t\t<span class=\"comment\">//es.submit(new ThreadPoolBug(100, i)).get();</span></div><div class=\"line\">\t\t\t<span class=\"comment\">//es.execute(new ThreadPoolBug(100, i));</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">100.0</span></div><div class=\"line\"><span class=\"number\">33.0</span></div><div class=\"line\"><span class=\"number\">25.0</span></div><div class=\"line\"><span class=\"number\">50.0</span></div></pre></td></tr></table></figure></p>\n<p>不对啊！100/0为什么不报错呢？<br>当将submit()换成execute()就出现错误了。原来错误也可以这么可爱<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Exception in thread <span class=\"string\">\"pool-1-thread-1\"</span> java.lang.ArithmeticException: / by zero</div><div class=\"line\">\tat cn.it.thread.concurrent.ThreadPoolBug.run(ThreadPoolBug.java:<span class=\"number\">17</span>)</div><div class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class=\"number\">1142</span>)</div><div class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class=\"number\">617</span>)</div><div class=\"line\">\tat java.lang.Thread.run(Thread.java:<span class=\"number\">745</span>)</div><div class=\"line\"><span class=\"number\">100.0</span></div><div class=\"line\"><span class=\"number\">33.0</span></div><div class=\"line\"><span class=\"number\">25.0</span></div><div class=\"line\"><span class=\"number\">50.0</span></div></pre></td></tr></table></figure></p>\n<p>先来说一说submit()和execute()区别吧<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(Runnable command)</span> </span>&#123;&#125;</div><div class=\"line\">Future&lt;?&gt; submit(Runnable task) &#123;&#125;</div></pre></td></tr></table></figure></p>\n<p>我们看一下Future怎么才能获取结果，这也就是为什么es.submit(new ThreadPoolBug(100, i)).get()会报错<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">    * Waits if necessary for the computation to complete, and then</div><div class=\"line\">    * retrieves its result.</div><div class=\"line\">    *</div><div class=\"line\">    * <span class=\"doctag\">@return</span> the computed result</div><div class=\"line\">    * <span class=\"doctag\">@throws</span> CancellationException if the computation was cancelled</div><div class=\"line\">    * <span class=\"doctag\">@throws</span> ExecutionException if the computation threw an</div><div class=\"line\">    * exception</div><div class=\"line\">    * <span class=\"doctag\">@throws</span> InterruptedException if the current thread was interrupted</div><div class=\"line\">    * while waiting</div><div class=\"line\">    */</span></div><div class=\"line\">   <span class=\"function\">V <span class=\"title\">get</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException, ExecutionException</span>;</div></pre></td></tr></table></figure></p>\n<p>再来说说Exception的问题吧。仔细看看总感觉少点什么？少什么呢？在main()里谁提交的呢？没有指出来，线程池将这个Exception吞没了，下面就应该想办法怎么将它展示出来，代码如下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadPoolBug</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadPoolTrace</span> <span class=\"keyword\">extends</span> <span class=\"title\">ThreadPoolExecutor</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolTrace</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize, <span class=\"keyword\">int</span> maximumPoolSize,</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">long</span> keepAliveTime, TimeUnit unit,</div><div class=\"line\">\t\t\t\tBlockingQueue&lt;Runnable&gt; workQueue)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">super</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(Runnable command)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">super</span>.execute(wrap(command, cilentTrace()));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"keyword\">public</span> Future&lt;?&gt; submit(Runnable task) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.submit(wrap(task, cilentTrace()));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">private</span> Exception <span class=\"title\">cilentTrace</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"client stack trace\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">private</span> Runnable <span class=\"title\">wrap</span><span class=\"params\">(<span class=\"keyword\">final</span> Runnable task, <span class=\"keyword\">final</span> Exception clientstack)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\t\ttask.run();</div><div class=\"line\">\t\t\t\t\t&#125;<span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t\t\t\tclientstack.printStackTrace();</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">throw</span> e;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> a;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> b;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolBug</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.a = a;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.b = b;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">double</span> ret = a / b;</div><div class=\"line\">\t\tSystem.out.println(ret);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException, ExecutionException </span>&#123;</div><div class=\"line\">\t\tExecutorService es = <span class=\"keyword\">new</span> ThreadPoolTrace(<span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">0L</span>, TimeUnit.SECONDS,</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">\t\t\tes.submit(<span class=\"keyword\">new</span> ThreadPoolBug(<span class=\"number\">100</span>, i)).get();</div><div class=\"line\">\t\t\t<span class=\"comment\">//es.execute(new ThreadPoolBug(100, i));</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">java.lang.Exception: client stack trace</div><div class=\"line\">\tat cn.it.thread.concurrent.ThreadPoolBug$ThreadPoolTrace.cilentTrace(ThreadPoolBug.java:<span class=\"number\">35</span>)</div><div class=\"line\">\tat cn.it.thread.concurrent.ThreadPoolBug$ThreadPoolTrace.submit(ThreadPoolBug.java:<span class=\"number\">30</span>)</div><div class=\"line\">\tat cn.it.thread.concurrent.ThreadPoolBug.main(ThreadPoolBug.java:<span class=\"number\">73</span>)</div><div class=\"line\">Exception in thread <span class=\"string\">\"main\"</span> java.util.concurrent.ExecutionException: java.lang.ArithmeticException: / by zero</div><div class=\"line\">\tat java.util.concurrent.FutureTask.report(FutureTask.java:<span class=\"number\">122</span>)</div><div class=\"line\">\tat java.util.concurrent.FutureTask.get(FutureTask.java:<span class=\"number\">192</span>)</div><div class=\"line\">\tat cn.it.thread.concurrent.ThreadPoolBug.main(ThreadPoolBug.java:<span class=\"number\">73</span>)</div><div class=\"line\">Caused by: java.lang.ArithmeticException: / by zero</div><div class=\"line\">\tat cn.it.thread.concurrent.ThreadPoolBug.run(ThreadPoolBug.java:<span class=\"number\">65</span>)</div><div class=\"line\">\tat cn.it.thread.concurrent.ThreadPoolBug$ThreadPoolTrace$<span class=\"number\">1</span>.run(ThreadPoolBug.java:<span class=\"number\">45</span>)</div><div class=\"line\">\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:<span class=\"number\">511</span>)</div><div class=\"line\">\tat java.util.concurrent.FutureTask.run(FutureTask.java:<span class=\"number\">266</span>)</div><div class=\"line\">\tat cn.it.thread.concurrent.ThreadPoolBug$ThreadPoolTrace$<span class=\"number\">1</span>.run(ThreadPoolBug.java:<span class=\"number\">45</span>)</div><div class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class=\"number\">1142</span>)</div><div class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class=\"number\">617</span>)</div><div class=\"line\">\tat java.lang.Thread.run(Thread.java:<span class=\"number\">745</span>)</div></pre></td></tr></table></figure></p>\n<p>说说整体的思路吧<br>为什么会被吞没呢？因为线程池在调度任务前没有保存任务线程的堆栈信息。那么解决方案就应该是将堆栈信息包装到Runnable对象里面去，而用一个方法正好，而恰巧Exception可以打印，所以方法就选择了返回值为Exception的方法</p>\n<h3 id=\"Fork-Join框架\"><a href=\"#Fork-Join框架\" class=\"headerlink\" title=\"Fork/Join框架\"></a>Fork/Join框架</h3><p>我们知道分治算法讲究的分，治，合，关于分治算法，请参考<a href=\"https://sakuraffy.github.io/algorithm_divide/\">分治算法</a><br>JDK中的Fork/Join框架和其异曲同工之妙<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@since</span> <span class=\"number\">1.7</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ForkJoinPool</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractExecutorService</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> ForkJoinTask&lt;V&gt; <span class=\"title\">fork</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> V <span class=\"title\">join</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(ForkJoinTask&lt;?&gt; task)</span> </span>&#123;&#125;</div><div class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">ForkJoinTask&lt;T&gt; <span class=\"title\">submit</span><span class=\"params\">(ForkJoinTask&lt;T&gt; task)</span> </span>&#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">@since</span> <span class=\"number\">1.7</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ForkJoinTask</span>&lt;<span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Future</span>&lt;<span class=\"title\">V</span>&gt;, <span class=\"title\">Serializable</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"comment\">//没有返回值的任务</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RecursiveAction</span> <span class=\"keyword\">extends</span> <span class=\"title\">ForkJoinTask</span>&lt;<span class=\"title\">Void</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">compute</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//携带返回值的任务</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RecursiveTask</span>&lt;<span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">ForkJoinTask</span>&lt;<span class=\"title\">V</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> V <span class=\"title\">compute</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这就JDK提供的类及其重要方法。我们使用Fork/Join创建任务必须继承RecursiveTask和RecursiveAction其中之一<br>下面给出一个示例<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ForkJoin</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecursiveTask</span>&lt;<span class=\"title\">Long</span>&gt;</span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> THRESHOLD = <span class=\"number\">10000</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">long</span> start;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">long</span> end;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ForkJoin</span><span class=\"params\">(<span class=\"keyword\">long</span> start, <span class=\"keyword\">long</span> end)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.start = start;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.end = end;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> Long <span class=\"title\">compute</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">long</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">boolean</span> canComputor = (end - start) &lt; THRESHOLD;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (canComputor) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">long</span> i = start; i &lt;= end; i++) &#123;</div><div class=\"line\">\t\t\t\tsum += i;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">long</span> step = (end -start) / <span class=\"number\">100</span>;</div><div class=\"line\">\t\t\tArrayList&lt;ForkJoin&gt; subTasks = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">\t\t\t<span class=\"keyword\">long</span> pos = start;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">long</span> lastOne = pos + step;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (lastOne &gt; end) &#123;</div><div class=\"line\">\t\t\t\t\tlastOne = end;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tForkJoin subTask = <span class=\"keyword\">new</span> ForkJoin(pos, lastOne);</div><div class=\"line\">\t\t\t\tpos += step + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\tsubTasks.add(subTask);</div><div class=\"line\">\t\t\t\tsubTask.fork();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (ForkJoin t : subTasks) &#123;</div><div class=\"line\">\t\t\t\tsum += t.join();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> sum;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException, ExecutionException </span>&#123;</div><div class=\"line\">\t\tForkJoinPool pool = <span class=\"keyword\">new</span> ForkJoinPool();</div><div class=\"line\">\t\tForkJoin fj = <span class=\"keyword\">new</span> ForkJoin(<span class=\"number\">0</span>, <span class=\"number\">200000L</span>);</div><div class=\"line\">\t\tForkJoinTask&lt;Long&gt; task = pool.submit(fj);</div><div class=\"line\">\t\t<span class=\"keyword\">long</span> ret = task.get();</div><div class=\"line\">\t\tSystem.out.println(ret);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">20000100000</span></div></pre></td></tr></table></figure></p>"},{"title":"并发编程（二）线程的结束与谦让","date":"2016-06-05T14:10:00.000Z","_content":"\n### 线程结束\n\n有时候，一个线程的输入需要依赖另外一个或多个线程的输出，这时候我们就很容易想到Thread.join()\n``` java\n\t public final void join() throws InterruptedException;\n\t public final synchronized void join(long millis, int nanos) throws InterruptedException\n```\n\n<!--more-->\n\n这是java为我们提供两个重载的join()。有人可能说join不是加入的意思，怎么又会变成结束呢？join()就是将自己合并到另外一个线程中，对于自己而言，可不就是就结束了吗。\n再说说这两个方法吧。前者会一直等待，阻塞当前进程。而后者在等待时间内还未完成，则不管了，继续向下执行\n``` java\npublic class JoinThread extends Thread {\n\tprivate volatile static int i = 0;\n\t@Override\n\tpublic void run() {\n\t\tfor(; i < 100; i++) ;\n\t\ttry {\n\t\t\tThread.sleep(1000);\n\t\t} catch (InterruptedException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\tfor(; i < 200; i++) ;\n\t}\n\n\tpublic static void main(String[] args) throws InterruptedException {                  \n\t\tJoinThread jt = new JoinThread();\n\t\tjt.start();\n\t\t//jt.join();   \n\t\tjt.join(100);\n\t\tSystem.out.println(i);\n\t}\n}\n\n```\n输出结果 ： \n``` java\njt.join() 200\njt.join(100) 100\n```\n\n其实从本质说join()是调用线程的wait()在当前线程对象上，下面是JDK中join()实现的核心代码片段：\n``` java\n\t while (isAlive()) {\n        wait(0);\n     }\n```\n可以看到，它让调用线程在当前线程对象上等待，当线程执行完成后，被等待的线程在退出前调用notifyAll()通知所有的等待线程继续执行。因此，我们要注意的是，在应用程序中尽量不要在Thread对象实例上使用类似wait()和notify()。\t\t\n\n### 线程谦让\n\nThread.yield的定义如下：\n``` java\n\tpublic static native void yield();\n```\n它是个静态方法，一旦执行就会是当前线程让出CPU，但也不代表让出后，下一个执行的不是自己，更不代表以后就不会执行\n``` java \n\tpublic class YieldThread implements Runnable {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\twhile(true) {\n\t\t\t\t System.out.println(\"HelloWorld\");\n\t\t\t\t Thread.yield();\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) throws InterruptedException {\n\t\t\tThread t = new Thread(new YieldThread());\n\t\t\tt.start();\n\t\t\twhile(true) {\n\t\t\t\tSystem.out.println(\"nihao\");\n\t\t\t}\n\t\t}\n\t}\n```\n截取部分输出 ：\n``` java\nnihao  \nHelloWorld\nHelloWorld\nnihao\n```\n","source":"_posts/intercurrent_tread_join.md","raw":"---\ntitle: 并发编程（二）线程的结束与谦让\ndate: 2016-06-05 22:10:00\ntags:\n\t- 并发编程\n---\n\n### 线程结束\n\n有时候，一个线程的输入需要依赖另外一个或多个线程的输出，这时候我们就很容易想到Thread.join()\n``` java\n\t public final void join() throws InterruptedException;\n\t public final synchronized void join(long millis, int nanos) throws InterruptedException\n```\n\n<!--more-->\n\n这是java为我们提供两个重载的join()。有人可能说join不是加入的意思，怎么又会变成结束呢？join()就是将自己合并到另外一个线程中，对于自己而言，可不就是就结束了吗。\n再说说这两个方法吧。前者会一直等待，阻塞当前进程。而后者在等待时间内还未完成，则不管了，继续向下执行\n``` java\npublic class JoinThread extends Thread {\n\tprivate volatile static int i = 0;\n\t@Override\n\tpublic void run() {\n\t\tfor(; i < 100; i++) ;\n\t\ttry {\n\t\t\tThread.sleep(1000);\n\t\t} catch (InterruptedException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\tfor(; i < 200; i++) ;\n\t}\n\n\tpublic static void main(String[] args) throws InterruptedException {                  \n\t\tJoinThread jt = new JoinThread();\n\t\tjt.start();\n\t\t//jt.join();   \n\t\tjt.join(100);\n\t\tSystem.out.println(i);\n\t}\n}\n\n```\n输出结果 ： \n``` java\njt.join() 200\njt.join(100) 100\n```\n\n其实从本质说join()是调用线程的wait()在当前线程对象上，下面是JDK中join()实现的核心代码片段：\n``` java\n\t while (isAlive()) {\n        wait(0);\n     }\n```\n可以看到，它让调用线程在当前线程对象上等待，当线程执行完成后，被等待的线程在退出前调用notifyAll()通知所有的等待线程继续执行。因此，我们要注意的是，在应用程序中尽量不要在Thread对象实例上使用类似wait()和notify()。\t\t\n\n### 线程谦让\n\nThread.yield的定义如下：\n``` java\n\tpublic static native void yield();\n```\n它是个静态方法，一旦执行就会是当前线程让出CPU，但也不代表让出后，下一个执行的不是自己，更不代表以后就不会执行\n``` java \n\tpublic class YieldThread implements Runnable {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\twhile(true) {\n\t\t\t\t System.out.println(\"HelloWorld\");\n\t\t\t\t Thread.yield();\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) throws InterruptedException {\n\t\t\tThread t = new Thread(new YieldThread());\n\t\t\tt.start();\n\t\t\twhile(true) {\n\t\t\t\tSystem.out.println(\"nihao\");\n\t\t\t}\n\t\t}\n\t}\n```\n截取部分输出 ：\n``` java\nnihao  \nHelloWorld\nHelloWorld\nnihao\n```\n","slug":"intercurrent_tread_join","published":1,"updated":"2017-03-08T10:54:52.592Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5e2002gqoq16x0e25uy","content":"<h3 id=\"线程结束\"><a href=\"#线程结束\" class=\"headerlink\" title=\"线程结束\"></a>线程结束</h3><p>有时候，一个线程的输入需要依赖另外一个或多个线程的输出，这时候我们就很容易想到Thread.join()<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">join</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">join</span><span class=\"params\">(<span class=\"keyword\">long</span> millis, <span class=\"keyword\">int</span> nanos)</span> <span class=\"keyword\">throws</span> InterruptedException</span></div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>这是java为我们提供两个重载的join()。有人可能说join不是加入的意思，怎么又会变成结束呢？join()就是将自己合并到另外一个线程中，对于自己而言，可不就是就结束了吗。<br>再说说这两个方法吧。前者会一直等待，阻塞当前进程。而后者在等待时间内还未完成，则不管了，继续向下执行<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JoinThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(; i &lt; <span class=\"number\">100</span>; i++) ;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tThread.sleep(<span class=\"number\">1000</span>);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(; i &lt; <span class=\"number\">200</span>; i++) ;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;                  </div><div class=\"line\">\t\tJoinThread jt = <span class=\"keyword\">new</span> JoinThread();</div><div class=\"line\">\t\tjt.start();</div><div class=\"line\">\t\t<span class=\"comment\">//jt.join();   </span></div><div class=\"line\">\t\tjt.join(<span class=\"number\">100</span>);</div><div class=\"line\">\t\tSystem.out.println(i);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">jt.join() <span class=\"number\">200</span></div><div class=\"line\">jt.join(<span class=\"number\">100</span>) <span class=\"number\">100</span></div></pre></td></tr></table></figure></p>\n<p>其实从本质说join()是调用线程的wait()在当前线程对象上，下面是JDK中join()实现的核心代码片段：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">while</span> (isAlive()) &#123;</div><div class=\"line\">      wait(<span class=\"number\">0</span>);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>可以看到，它让调用线程在当前线程对象上等待，当线程执行完成后，被等待的线程在退出前调用notifyAll()通知所有的等待线程继续执行。因此，我们要注意的是，在应用程序中尽量不要在Thread对象实例上使用类似wait()和notify()。        </p>\n<h3 id=\"线程谦让\"><a href=\"#线程谦让\" class=\"headerlink\" title=\"线程谦让\"></a>线程谦让</h3><p>Thread.yield的定义如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">yield</span><span class=\"params\">()</span></span>;</div></pre></td></tr></table></figure></p>\n<p>它是个静态方法，一旦执行就会是当前线程让出CPU，但也不代表让出后，下一个执行的不是自己，更不代表以后就不会执行<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YieldThread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\t System.out.println(<span class=\"string\">\"HelloWorld\"</span>);</div><div class=\"line\">\t\t\t Thread.yield();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">\t\tThread t = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> YieldThread());</div><div class=\"line\">\t\tt.start();</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"nihao\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>截取部分输出 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">nihao  </div><div class=\"line\">HelloWorld</div><div class=\"line\">HelloWorld</div><div class=\"line\">nihao</div></pre></td></tr></table></figure></p>\n","excerpt":"<h3 id=\"线程结束\"><a href=\"#线程结束\" class=\"headerlink\" title=\"线程结束\"></a>线程结束</h3><p>有时候，一个线程的输入需要依赖另外一个或多个线程的输出，这时候我们就很容易想到Thread.join()<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">join</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">join</span><span class=\"params\">(<span class=\"keyword\">long</span> millis, <span class=\"keyword\">int</span> nanos)</span> <span class=\"keyword\">throws</span> InterruptedException</span></div></pre></td></tr></table></figure></p>","more":"<p>这是java为我们提供两个重载的join()。有人可能说join不是加入的意思，怎么又会变成结束呢？join()就是将自己合并到另外一个线程中，对于自己而言，可不就是就结束了吗。<br>再说说这两个方法吧。前者会一直等待，阻塞当前进程。而后者在等待时间内还未完成，则不管了，继续向下执行<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JoinThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(; i &lt; <span class=\"number\">100</span>; i++) ;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tThread.sleep(<span class=\"number\">1000</span>);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(; i &lt; <span class=\"number\">200</span>; i++) ;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;                  </div><div class=\"line\">\t\tJoinThread jt = <span class=\"keyword\">new</span> JoinThread();</div><div class=\"line\">\t\tjt.start();</div><div class=\"line\">\t\t<span class=\"comment\">//jt.join();   </span></div><div class=\"line\">\t\tjt.join(<span class=\"number\">100</span>);</div><div class=\"line\">\t\tSystem.out.println(i);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">jt.join() <span class=\"number\">200</span></div><div class=\"line\">jt.join(<span class=\"number\">100</span>) <span class=\"number\">100</span></div></pre></td></tr></table></figure></p>\n<p>其实从本质说join()是调用线程的wait()在当前线程对象上，下面是JDK中join()实现的核心代码片段：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">while</span> (isAlive()) &#123;</div><div class=\"line\">      wait(<span class=\"number\">0</span>);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>可以看到，它让调用线程在当前线程对象上等待，当线程执行完成后，被等待的线程在退出前调用notifyAll()通知所有的等待线程继续执行。因此，我们要注意的是，在应用程序中尽量不要在Thread对象实例上使用类似wait()和notify()。        </p>\n<h3 id=\"线程谦让\"><a href=\"#线程谦让\" class=\"headerlink\" title=\"线程谦让\"></a>线程谦让</h3><p>Thread.yield的定义如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">yield</span><span class=\"params\">()</span></span>;</div></pre></td></tr></table></figure></p>\n<p>它是个静态方法，一旦执行就会是当前线程让出CPU，但也不代表让出后，下一个执行的不是自己，更不代表以后就不会执行<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YieldThread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\t System.out.println(<span class=\"string\">\"HelloWorld\"</span>);</div><div class=\"line\">\t\t\t Thread.yield();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">\t\tThread t = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> YieldThread());</div><div class=\"line\">\t\tt.start();</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"nihao\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>截取部分输出 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">nihao  </div><div class=\"line\">HelloWorld</div><div class=\"line\">HelloWorld</div><div class=\"line\">nihao</div></pre></td></tr></table></figure></p>"},{"title":"并发编程（六）volatile与synchronized","date":"2016-06-17T07:32:07.000Z","_content":"### volatile\n\n当32位机器多线程多long类型数操作时，会出现“写坏”，但是long前加上volatile关键字则没有问题。可是volatile是万能的吗？\n``` java\n\tpublic class Volatile extends Thread {\n\t\tprivate static volatile int i = 0;\n\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tfor(int k = 0; k < 10000; k++) {\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\t\t\n\t\tpublic static void main(String[] args) throws InterruptedException {                  \n\t\t\tThread[] threads = new Thread[10];\n\t\t\tfor(int i = 0; i < 10; i++) {\n\t\t\t\tthreads[i] = new Volatile();\n\t\t\t\tthreads[i].start();\n\t\t\t}\n\t\t\tfor(int i = 0; i < 10; i++) {\n\t\t\t\tthreads[i].join();\n\t\t\t}\n\t\t\tSystem.out.println(i);\n\t\t}\n\t}\n```\n\n输出结果 ： \t<!--more-->\n\n``` java\n37989\n```\n\n为什么会这样呢？volatile不是原子性的吗？\nvolatile不能代替synchronized，它也无法保证符合操作的原子性。\n\n### synchronized\n\nsynchronized可以有效的保证线程安全\n``` java\n\tpublic class Synchronized implements Runnable {\n\t\tprivate static int i = 0;\n\t\t\n\t\tpublic synchronized void increase() {\n\t\t\tfor(int k = 0; k < 10000; k++) {\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic void run() {\n\t\t\tincrease();\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) throws InterruptedException {                  \n\t\t\tThread t1 = new Thread(new Synchronized());\n\t\t\tThread t2 = new Thread(new Synchronized());\n\t\t\tt1.start();\n\t\t\tt2.start();\n\t\t\tt1.join();\n\t\t\tt2.join();\n\t\t\tSystem.out.println(i);\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\n10821\n```\n\n为什么不是20000呢？\n这里我们需要注意的synchronized有两种出现方式\n- 直接加在函数前面\n- 使用synchronized语句块\n\n> 锁定的对象，也就是获取谁的监视器\n\n- 获取当前类的实例对象的监视器\n``` java \n\tpublic synchronized void increase() {\n\t\ti++;\n\t}\n```\n与下面的等价\n``` java\n\tSynchronized s = new Synchronized();\n\tpublic void increase() {\n\t\tsynchronized(s) {\n\t\t\ti++;\n\t\t}\n\t}\n```\n也与下面的等价\n``` java\n\tpublic void increase() {\n\t\tsynchronized(this) {\n\t\t\ti++;\n\t\t}\n\t}\n```\n\n- 获取当前类的监视器\n``` java\n\tpublic static synchronized void increase() {\n\t\ti++;\n\t}\n```\n与下面的等价\n``` java\n\tpublic void increase() {\n\t\tsynchronized(Synchronized.class) {\n\t\t\ti++;\n\t\t}\n\t}\n```","source":"_posts/intercurrent_volatile-synchronized.md","raw":"---\ntitle: 并发编程（六）volatile与synchronized\ndate: 2016-06-17 15:32:07\ntags:\n\t- 并发编程\n---\n### volatile\n\n当32位机器多线程多long类型数操作时，会出现“写坏”，但是long前加上volatile关键字则没有问题。可是volatile是万能的吗？\n``` java\n\tpublic class Volatile extends Thread {\n\t\tprivate static volatile int i = 0;\n\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tfor(int k = 0; k < 10000; k++) {\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\t\t\n\t\tpublic static void main(String[] args) throws InterruptedException {                  \n\t\t\tThread[] threads = new Thread[10];\n\t\t\tfor(int i = 0; i < 10; i++) {\n\t\t\t\tthreads[i] = new Volatile();\n\t\t\t\tthreads[i].start();\n\t\t\t}\n\t\t\tfor(int i = 0; i < 10; i++) {\n\t\t\t\tthreads[i].join();\n\t\t\t}\n\t\t\tSystem.out.println(i);\n\t\t}\n\t}\n```\n\n输出结果 ： \t<!--more-->\n\n``` java\n37989\n```\n\n为什么会这样呢？volatile不是原子性的吗？\nvolatile不能代替synchronized，它也无法保证符合操作的原子性。\n\n### synchronized\n\nsynchronized可以有效的保证线程安全\n``` java\n\tpublic class Synchronized implements Runnable {\n\t\tprivate static int i = 0;\n\t\t\n\t\tpublic synchronized void increase() {\n\t\t\tfor(int k = 0; k < 10000; k++) {\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic void run() {\n\t\t\tincrease();\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) throws InterruptedException {                  \n\t\t\tThread t1 = new Thread(new Synchronized());\n\t\t\tThread t2 = new Thread(new Synchronized());\n\t\t\tt1.start();\n\t\t\tt2.start();\n\t\t\tt1.join();\n\t\t\tt2.join();\n\t\t\tSystem.out.println(i);\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\n10821\n```\n\n为什么不是20000呢？\n这里我们需要注意的synchronized有两种出现方式\n- 直接加在函数前面\n- 使用synchronized语句块\n\n> 锁定的对象，也就是获取谁的监视器\n\n- 获取当前类的实例对象的监视器\n``` java \n\tpublic synchronized void increase() {\n\t\ti++;\n\t}\n```\n与下面的等价\n``` java\n\tSynchronized s = new Synchronized();\n\tpublic void increase() {\n\t\tsynchronized(s) {\n\t\t\ti++;\n\t\t}\n\t}\n```\n也与下面的等价\n``` java\n\tpublic void increase() {\n\t\tsynchronized(this) {\n\t\t\ti++;\n\t\t}\n\t}\n```\n\n- 获取当前类的监视器\n``` java\n\tpublic static synchronized void increase() {\n\t\ti++;\n\t}\n```\n与下面的等价\n``` java\n\tpublic void increase() {\n\t\tsynchronized(Synchronized.class) {\n\t\t\ti++;\n\t\t}\n\t}\n```","slug":"intercurrent_volatile-synchronized","published":1,"updated":"2017-03-08T10:59:03.710Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5e4002iqoq1m2sb04l1","content":"<h3 id=\"volatile\"><a href=\"#volatile\" class=\"headerlink\" title=\"volatile\"></a>volatile</h3><p>当32位机器多线程多long类型数操作时，会出现“写坏”，但是long前加上volatile关键字则没有问题。可是volatile是万能的吗？<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Volatile</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">10000</span>; k++) &#123;</div><div class=\"line\">\t\t\ti++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;                  </div><div class=\"line\">\t\tThread[] threads = <span class=\"keyword\">new</span> Thread[<span class=\"number\">10</span>];</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">\t\t\tthreads[i] = <span class=\"keyword\">new</span> Volatile();</div><div class=\"line\">\t\t\tthreads[i].start();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">\t\t\tthreads[i].join();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.out.println(i);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：     <a id=\"more\"></a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">37989</span></div></pre></td></tr></table></figure>\n<p>为什么会这样呢？volatile不是原子性的吗？<br>volatile不能代替synchronized，它也无法保证符合操作的原子性。</p>\n<h3 id=\"synchronized\"><a href=\"#synchronized\" class=\"headerlink\" title=\"synchronized\"></a>synchronized</h3><p>synchronized可以有效的保证线程安全<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Synchronized</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">increase</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">10000</span>; k++) &#123;</div><div class=\"line\">\t\t\ti++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tincrease();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;                  </div><div class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Synchronized());</div><div class=\"line\">\t\tThread t2 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Synchronized());</div><div class=\"line\">\t\tt1.start();</div><div class=\"line\">\t\tt2.start();</div><div class=\"line\">\t\tt1.join();</div><div class=\"line\">\t\tt2.join();</div><div class=\"line\">\t\tSystem.out.println(i);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">10821</span></div></pre></td></tr></table></figure></p>\n<p>为什么不是20000呢？<br>这里我们需要注意的synchronized有两种出现方式</p>\n<ul>\n<li>直接加在函数前面</li>\n<li>使用synchronized语句块</li>\n</ul>\n<blockquote>\n<p>锁定的对象，也就是获取谁的监视器</p>\n</blockquote>\n<ul>\n<li>获取当前类的实例对象的监视器<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">increase</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\ti++;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>与下面的等价<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Synchronized s = <span class=\"keyword\">new</span> Synchronized();</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">increase</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">synchronized</span>(s) &#123;</div><div class=\"line\">\t\ti++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>也与下面的等价<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">increase</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">\t\ti++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>获取当前类的监视器<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">increase</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\ti++;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>与下面的等价<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">increase</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">synchronized</span>(Synchronized.class) &#123;</div><div class=\"line\">\t\ti++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<h3 id=\"volatile\"><a href=\"#volatile\" class=\"headerlink\" title=\"volatile\"></a>volatile</h3><p>当32位机器多线程多long类型数操作时，会出现“写坏”，但是long前加上volatile关键字则没有问题。可是volatile是万能的吗？<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Volatile</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">10000</span>; k++) &#123;</div><div class=\"line\">\t\t\ti++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;                  </div><div class=\"line\">\t\tThread[] threads = <span class=\"keyword\">new</span> Thread[<span class=\"number\">10</span>];</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">\t\t\tthreads[i] = <span class=\"keyword\">new</span> Volatile();</div><div class=\"line\">\t\t\tthreads[i].start();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">\t\t\tthreads[i].join();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.out.println(i);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：","more":"</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">37989</span></div></pre></td></tr></table></figure>\n<p>为什么会这样呢？volatile不是原子性的吗？<br>volatile不能代替synchronized，它也无法保证符合操作的原子性。</p>\n<h3 id=\"synchronized\"><a href=\"#synchronized\" class=\"headerlink\" title=\"synchronized\"></a>synchronized</h3><p>synchronized可以有效的保证线程安全<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Synchronized</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">increase</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">10000</span>; k++) &#123;</div><div class=\"line\">\t\t\ti++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tincrease();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;                  </div><div class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Synchronized());</div><div class=\"line\">\t\tThread t2 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Synchronized());</div><div class=\"line\">\t\tt1.start();</div><div class=\"line\">\t\tt2.start();</div><div class=\"line\">\t\tt1.join();</div><div class=\"line\">\t\tt2.join();</div><div class=\"line\">\t\tSystem.out.println(i);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">10821</span></div></pre></td></tr></table></figure></p>\n<p>为什么不是20000呢？<br>这里我们需要注意的synchronized有两种出现方式</p>\n<ul>\n<li>直接加在函数前面</li>\n<li>使用synchronized语句块</li>\n</ul>\n<blockquote>\n<p>锁定的对象，也就是获取谁的监视器</p>\n</blockquote>\n<ul>\n<li>获取当前类的实例对象的监视器<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">increase</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\ti++;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>与下面的等价<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Synchronized s = <span class=\"keyword\">new</span> Synchronized();</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">increase</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">synchronized</span>(s) &#123;</div><div class=\"line\">\t\ti++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>也与下面的等价<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">increase</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">\t\ti++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>获取当前类的监视器<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">increase</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\ti++;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>与下面的等价<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">increase</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">synchronized</span>(Synchronized.class) &#123;</div><div class=\"line\">\t\ti++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"Arrays的使用","date":"2016-09-06T02:59:22.000Z","_content":"在Java基础中，数据类型除了八大基本数据类型，最常用的就是数组了。那对于数组中元素排序，查找又包装在哪呢？\n那就是接下来我们要说的java.util.Arrays这个类\n\n同样的，Arrays这个类没有公开的构造方法，其中所有的方法都是静态的\n\n### Sort\n\n``` java\n\tpublic static void sort(int[] a) {\n        DualPivotQuicksort.sort(a, 0, a.length - 1, null, 0, 0);\n    }\n\tpublic static void sort(int[] a, int fromIndex, int toIndex) {\n        rangeCheck(a.length, fromIndex, toIndex);\n        DualPivotQuicksort.sort(a, fromIndex, toIndex - 1, null, 0, 0);\n    }\n\t\n\tpublic static void parallelSort(int[] a) {}\n\tpublic static <T> void parallelSort(T[] a, Comparator<? super T> cmp) {} \t \n```\n从上面的源码可以看出Arrays可以解决各种数组，甚至是引用类型的泛型。至于怎么实现的，那就是算法的问题，在这里，就不讨论了。值得一提的引用类型的数组只能使用parallelSort。而且还可以使用比较器\n\n<!--more-->\n\n### Search\n\n``` java\n\tpublic static int binarySearch(long[] a, long key) {\n        return binarySearch0(a, 0, a.length, key);\n    }\n```\nArrays采用的是二分法查找，使用这种查找必须先对数组进行排序\n\n### Equals\n\n``` java\n\tpublic static boolean equals(Object[] a, Object[] a2) {\n        if (a==a2)\n            return true;\n        if (a==null || a2==null)\n            return false;\n\n        int length = a.length;\n        if (a2.length != length)\n            return false;\n\n        for (int i=0; i<length; i++) {\n            Object o1 = a[i];\n            Object o2 = a2[i];\n            if (!(o1==null ? o2==null : o1.equals(o2)))\n                return false;\n        }\n\n        return true;\n    }\n```\n比较两个数组是否equals()\n\n### Fill\n\n``` java\n\tpublic static void fill(long[] a, long val) {\n        for (int i = 0, len = a.length; i < len; i++)\n            a[i] = val;\n    }\n\t\n\tpublic static void fill(long[] a, int fromIndex, int toIndex, long val) {\n        rangeCheck(a.length, fromIndex, toIndex);\n        for (int i = fromIndex; i < toIndex; i++)\n            a[i] = val;\n    }\n```\n对数组进行填充\n\n### Copy\n\n``` java\n\tpublic static <T,U> T[] copyOf(U[] original, int newLength, Class<? extends T[]> newType) {\n        @SuppressWarnings(\"unchecked\")\n        T[] copy = ((Object)newType == (Object)Object[].class)\n            ? (T[]) new Object[newLength]\n            : (T[]) Array.newInstance(newType.getComponentType(), newLength);\n        System.arraycopy(original, 0, copy, 0,\n                         Math.min(original.length, newLength));\n        return copy;\n    }\n\n\tpublic static <T,U> T[] copyOfRange(U[] original, int from, int to, Class<? extends T[]> newType) {\n        int newLength = to - from;\n        if (newLength < 0)\n            throw new IllegalArgumentException(from + \" > \" + to);\n        @SuppressWarnings(\"unchecked\")\n        T[] copy = ((Object)newType == (Object)Object[].class)\n            ? (T[]) new Object[newLength]\n            : (T[]) Array.newInstance(newType.getComponentType(), newLength);\n        System.arraycopy(original, from, copy, 0,\n                         Math.min(original.length - from, newLength));\n        return copy;\n    }\n```\n上面的就是Arrays的copyOf()实现的源码，初一看，哇，这都是什么啊？下面就展示一个小实例\n``` java\n\tpublic class TestArrays {\n\t\tpublic static void main(String[] args) {\n\t\t\tint[] arr = new int[] {1,2,3,4,5,6,7,8,9};\n\t\t\tSystem.out.println(Arrays.toString(arr));\n\t\t\t\n\t\t\t//将arr数组的容量扩展至15，并将原数组内容复制至此，其余的用默认值填充\n\t\t\tarr = Arrays.copyOf(arr, 15);\n\t\t\tSystem.out.println(arr.length);\n\t\t\tSystem.out.println(Arrays.toString(arr));\n\t\t\t\n\t\t\t//将arr数组的容量缩至5，并将原数组前5个复制至此\n\t\t\tarr = Arrays.copyOf(arr, 5);\n\t\t\tSystem.out.println(arr.length);\n\t\t\tSystem.out.println(Arrays.toString(arr));\t\t\t\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n15\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0]\n5\n[1, 2, 3, 4, 5]\n```\n\n### ToString\n\n``` java\n\tpublic static String toString(int[] a) {\n        if (a == null)\n            return \"null\";\n        int iMax = a.length - 1;\n        if (iMax == -1)\n            return \"[]\";\n\n        StringBuilder b = new StringBuilder();\n        b.append('[');\n        for (int i = 0; ; i++) {\n            b.append(a[i]);\n            if (i == iMax)\n                return b.append(']').toString();\n            b.append(\", \");\n        }\n    }\n\t\n\tpublic static String deepToString(Object[] a) {                                               \n        if (a == null)\n            return \"null\";\n\n        int bufLen = 20 * a.length;\n        if (a.length != 0 && bufLen <= 0)\n            bufLen = Integer.MAX_VALUE;\n        StringBuilder buf = new StringBuilder(bufLen);\n        deepToString(a, buf, new HashSet<Object[]>());\n        return buf.toString();\n    }\n```\n将数组以字符串的形式展现出来，其中toString()对应的是一维，而deepToString()对应的则是多维\n","source":"_posts/java_arrays.md","raw":"---\ntitle: Arrays的使用\ndate: 2016-09-06 10:59:22\ntags:\n\t- Java\n---\n在Java基础中，数据类型除了八大基本数据类型，最常用的就是数组了。那对于数组中元素排序，查找又包装在哪呢？\n那就是接下来我们要说的java.util.Arrays这个类\n\n同样的，Arrays这个类没有公开的构造方法，其中所有的方法都是静态的\n\n### Sort\n\n``` java\n\tpublic static void sort(int[] a) {\n        DualPivotQuicksort.sort(a, 0, a.length - 1, null, 0, 0);\n    }\n\tpublic static void sort(int[] a, int fromIndex, int toIndex) {\n        rangeCheck(a.length, fromIndex, toIndex);\n        DualPivotQuicksort.sort(a, fromIndex, toIndex - 1, null, 0, 0);\n    }\n\t\n\tpublic static void parallelSort(int[] a) {}\n\tpublic static <T> void parallelSort(T[] a, Comparator<? super T> cmp) {} \t \n```\n从上面的源码可以看出Arrays可以解决各种数组，甚至是引用类型的泛型。至于怎么实现的，那就是算法的问题，在这里，就不讨论了。值得一提的引用类型的数组只能使用parallelSort。而且还可以使用比较器\n\n<!--more-->\n\n### Search\n\n``` java\n\tpublic static int binarySearch(long[] a, long key) {\n        return binarySearch0(a, 0, a.length, key);\n    }\n```\nArrays采用的是二分法查找，使用这种查找必须先对数组进行排序\n\n### Equals\n\n``` java\n\tpublic static boolean equals(Object[] a, Object[] a2) {\n        if (a==a2)\n            return true;\n        if (a==null || a2==null)\n            return false;\n\n        int length = a.length;\n        if (a2.length != length)\n            return false;\n\n        for (int i=0; i<length; i++) {\n            Object o1 = a[i];\n            Object o2 = a2[i];\n            if (!(o1==null ? o2==null : o1.equals(o2)))\n                return false;\n        }\n\n        return true;\n    }\n```\n比较两个数组是否equals()\n\n### Fill\n\n``` java\n\tpublic static void fill(long[] a, long val) {\n        for (int i = 0, len = a.length; i < len; i++)\n            a[i] = val;\n    }\n\t\n\tpublic static void fill(long[] a, int fromIndex, int toIndex, long val) {\n        rangeCheck(a.length, fromIndex, toIndex);\n        for (int i = fromIndex; i < toIndex; i++)\n            a[i] = val;\n    }\n```\n对数组进行填充\n\n### Copy\n\n``` java\n\tpublic static <T,U> T[] copyOf(U[] original, int newLength, Class<? extends T[]> newType) {\n        @SuppressWarnings(\"unchecked\")\n        T[] copy = ((Object)newType == (Object)Object[].class)\n            ? (T[]) new Object[newLength]\n            : (T[]) Array.newInstance(newType.getComponentType(), newLength);\n        System.arraycopy(original, 0, copy, 0,\n                         Math.min(original.length, newLength));\n        return copy;\n    }\n\n\tpublic static <T,U> T[] copyOfRange(U[] original, int from, int to, Class<? extends T[]> newType) {\n        int newLength = to - from;\n        if (newLength < 0)\n            throw new IllegalArgumentException(from + \" > \" + to);\n        @SuppressWarnings(\"unchecked\")\n        T[] copy = ((Object)newType == (Object)Object[].class)\n            ? (T[]) new Object[newLength]\n            : (T[]) Array.newInstance(newType.getComponentType(), newLength);\n        System.arraycopy(original, from, copy, 0,\n                         Math.min(original.length - from, newLength));\n        return copy;\n    }\n```\n上面的就是Arrays的copyOf()实现的源码，初一看，哇，这都是什么啊？下面就展示一个小实例\n``` java\n\tpublic class TestArrays {\n\t\tpublic static void main(String[] args) {\n\t\t\tint[] arr = new int[] {1,2,3,4,5,6,7,8,9};\n\t\t\tSystem.out.println(Arrays.toString(arr));\n\t\t\t\n\t\t\t//将arr数组的容量扩展至15，并将原数组内容复制至此，其余的用默认值填充\n\t\t\tarr = Arrays.copyOf(arr, 15);\n\t\t\tSystem.out.println(arr.length);\n\t\t\tSystem.out.println(Arrays.toString(arr));\n\t\t\t\n\t\t\t//将arr数组的容量缩至5，并将原数组前5个复制至此\n\t\t\tarr = Arrays.copyOf(arr, 5);\n\t\t\tSystem.out.println(arr.length);\n\t\t\tSystem.out.println(Arrays.toString(arr));\t\t\t\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n15\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0]\n5\n[1, 2, 3, 4, 5]\n```\n\n### ToString\n\n``` java\n\tpublic static String toString(int[] a) {\n        if (a == null)\n            return \"null\";\n        int iMax = a.length - 1;\n        if (iMax == -1)\n            return \"[]\";\n\n        StringBuilder b = new StringBuilder();\n        b.append('[');\n        for (int i = 0; ; i++) {\n            b.append(a[i]);\n            if (i == iMax)\n                return b.append(']').toString();\n            b.append(\", \");\n        }\n    }\n\t\n\tpublic static String deepToString(Object[] a) {                                               \n        if (a == null)\n            return \"null\";\n\n        int bufLen = 20 * a.length;\n        if (a.length != 0 && bufLen <= 0)\n            bufLen = Integer.MAX_VALUE;\n        StringBuilder buf = new StringBuilder(bufLen);\n        deepToString(a, buf, new HashSet<Object[]>());\n        return buf.toString();\n    }\n```\n将数组以字符串的形式展现出来，其中toString()对应的是一维，而deepToString()对应的则是多维\n","slug":"java_arrays","published":1,"updated":"2016-12-27T22:13:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5e5002kqoq1ywtxmwk4","content":"<p>在Java基础中，数据类型除了八大基本数据类型，最常用的就是数组了。那对于数组中元素排序，查找又包装在哪呢？<br>那就是接下来我们要说的java.util.Arrays这个类</p>\n<p>同样的，Arrays这个类没有公开的构造方法，其中所有的方法都是静态的</p>\n<h3 id=\"Sort\"><a href=\"#Sort\" class=\"headerlink\" title=\"Sort\"></a>Sort</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span> </span>&#123;</div><div class=\"line\">       DualPivotQuicksort.sort(a, <span class=\"number\">0</span>, a.length - <span class=\"number\">1</span>, <span class=\"keyword\">null</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> fromIndex, <span class=\"keyword\">int</span> toIndex)</span> </span>&#123;</div><div class=\"line\">       rangeCheck(a.length, fromIndex, toIndex);</div><div class=\"line\">       DualPivotQuicksort.sort(a, fromIndex, toIndex - <span class=\"number\">1</span>, <span class=\"keyword\">null</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">parallelSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">parallelSort</span><span class=\"params\">(T[] a, Comparator&lt;? <span class=\"keyword\">super</span> T&gt; cmp)</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>\n<p>从上面的源码可以看出Arrays可以解决各种数组，甚至是引用类型的泛型。至于怎么实现的，那就是算法的问题，在这里，就不讨论了。值得一提的引用类型的数组只能使用parallelSort。而且还可以使用比较器</p>\n<a id=\"more\"></a>\n<h3 id=\"Search\"><a href=\"#Search\" class=\"headerlink\" title=\"Search\"></a>Search</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">binarySearch</span><span class=\"params\">(<span class=\"keyword\">long</span>[] a, <span class=\"keyword\">long</span> key)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> binarySearch0(a, <span class=\"number\">0</span>, a.length, key);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>Arrays采用的是二分法查找，使用这种查找必须先对数组进行排序</p>\n<h3 id=\"Equals\"><a href=\"#Equals\" class=\"headerlink\" title=\"Equals\"></a>Equals</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object[] a, Object[] a2)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (a==a2)</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">       <span class=\"keyword\">if</span> (a==<span class=\"keyword\">null</span> || a2==<span class=\"keyword\">null</span>)</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">int</span> length = a.length;</div><div class=\"line\">       <span class=\"keyword\">if</span> (a2.length != length)</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;length; i++) &#123;</div><div class=\"line\">           Object o1 = a[i];</div><div class=\"line\">           Object o2 = a2[i];</div><div class=\"line\">           <span class=\"keyword\">if</span> (!(o1==<span class=\"keyword\">null</span> ? o2==<span class=\"keyword\">null</span> : o1.equals(o2)))</div><div class=\"line\">               <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>比较两个数组是否equals()</p>\n<h3 id=\"Fill\"><a href=\"#Fill\" class=\"headerlink\" title=\"Fill\"></a>Fill</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">fill</span><span class=\"params\">(<span class=\"keyword\">long</span>[] a, <span class=\"keyword\">long</span> val)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, len = a.length; i &lt; len; i++)</div><div class=\"line\">           a[i] = val;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">fill</span><span class=\"params\">(<span class=\"keyword\">long</span>[] a, <span class=\"keyword\">int</span> fromIndex, <span class=\"keyword\">int</span> toIndex, <span class=\"keyword\">long</span> val)</span> </span>&#123;</div><div class=\"line\">       rangeCheck(a.length, fromIndex, toIndex);</div><div class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = fromIndex; i &lt; toIndex; i++)</div><div class=\"line\">           a[i] = val;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>对数组进行填充</p>\n<h3 id=\"Copy\"><a href=\"#Copy\" class=\"headerlink\" title=\"Copy\"></a>Copy</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T,U&gt; T[] copyOf(U[] original, <span class=\"keyword\">int</span> newLength, Class&lt;? extends T[]&gt; newType) &#123;</div><div class=\"line\">       <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">       T[] copy = ((Object)newType == (Object)Object[].class)</div><div class=\"line\">           ? (T[]) <span class=\"keyword\">new</span> Object[newLength]</div><div class=\"line\">           : (T[]) Array.newInstance(newType.getComponentType(), newLength);</div><div class=\"line\">       System.arraycopy(original, <span class=\"number\">0</span>, copy, <span class=\"number\">0</span>,</div><div class=\"line\">                        Math.min(original.length, newLength));</div><div class=\"line\">       <span class=\"keyword\">return</span> copy;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T,U&gt; T[] copyOfRange(U[] original, <span class=\"keyword\">int</span> from, <span class=\"keyword\">int</span> to, Class&lt;? extends T[]&gt; newType) &#123;</div><div class=\"line\">       <span class=\"keyword\">int</span> newLength = to - from;</div><div class=\"line\">       <span class=\"keyword\">if</span> (newLength &lt; <span class=\"number\">0</span>)</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(from + <span class=\"string\">\" &gt; \"</span> + to);</div><div class=\"line\">       <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">       T[] copy = ((Object)newType == (Object)Object[].class)</div><div class=\"line\">           ? (T[]) <span class=\"keyword\">new</span> Object[newLength]</div><div class=\"line\">           : (T[]) Array.newInstance(newType.getComponentType(), newLength);</div><div class=\"line\">       System.arraycopy(original, from, copy, <span class=\"number\">0</span>,</div><div class=\"line\">                        Math.min(original.length - from, newLength));</div><div class=\"line\">       <span class=\"keyword\">return</span> copy;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>上面的就是Arrays的copyOf()实现的源码，初一看，哇，这都是什么啊？下面就展示一个小实例<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestArrays</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>&#125;;</div><div class=\"line\">\t\tSystem.out.println(Arrays.toString(arr));</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//将arr数组的容量扩展至15，并将原数组内容复制至此，其余的用默认值填充</span></div><div class=\"line\">\t\tarr = Arrays.copyOf(arr, <span class=\"number\">15</span>);</div><div class=\"line\">\t\tSystem.out.println(arr.length);</div><div class=\"line\">\t\tSystem.out.println(Arrays.toString(arr));</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//将arr数组的容量缩至5，并将原数组前5个复制至此</span></div><div class=\"line\">\t\tarr = Arrays.copyOf(arr, <span class=\"number\">5</span>);</div><div class=\"line\">\t\tSystem.out.println(arr.length);</div><div class=\"line\">\t\tSystem.out.println(Arrays.toString(arr));\t\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</div><div class=\"line\"><span class=\"number\">15</span></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]</div><div class=\"line\"><span class=\"number\">5</span></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</div></pre></td></tr></table></figure></p>\n<h3 id=\"ToString\"><a href=\"#ToString\" class=\"headerlink\" title=\"ToString\"></a>ToString</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">toString</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (a == <span class=\"keyword\">null</span>)</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"string\">\"null\"</span>;</div><div class=\"line\">       <span class=\"keyword\">int</span> iMax = a.length - <span class=\"number\">1</span>;</div><div class=\"line\">       <span class=\"keyword\">if</span> (iMax == -<span class=\"number\">1</span>)</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"string\">\"[]\"</span>;</div><div class=\"line\"></div><div class=\"line\">       StringBuilder b = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">       b.append(<span class=\"string\">'['</span>);</div><div class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; ; i++) &#123;</div><div class=\"line\">           b.append(a[i]);</div><div class=\"line\">           <span class=\"keyword\">if</span> (i == iMax)</div><div class=\"line\">               <span class=\"keyword\">return</span> b.append(<span class=\"string\">']'</span>).toString();</div><div class=\"line\">           b.append(<span class=\"string\">\", \"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">deepToString</span><span class=\"params\">(Object[] a)</span> </span>&#123;                                               </div><div class=\"line\">       <span class=\"keyword\">if</span> (a == <span class=\"keyword\">null</span>)</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"string\">\"null\"</span>;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">int</span> bufLen = <span class=\"number\">20</span> * a.length;</div><div class=\"line\">       <span class=\"keyword\">if</span> (a.length != <span class=\"number\">0</span> &amp;&amp; bufLen &lt;= <span class=\"number\">0</span>)</div><div class=\"line\">           bufLen = Integer.MAX_VALUE;</div><div class=\"line\">       StringBuilder buf = <span class=\"keyword\">new</span> StringBuilder(bufLen);</div><div class=\"line\">       deepToString(a, buf, <span class=\"keyword\">new</span> HashSet&lt;Object[]&gt;());</div><div class=\"line\">       <span class=\"keyword\">return</span> buf.toString();</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>将数组以字符串的形式展现出来，其中toString()对应的是一维，而deepToString()对应的则是多维</p>\n","excerpt":"<p>在Java基础中，数据类型除了八大基本数据类型，最常用的就是数组了。那对于数组中元素排序，查找又包装在哪呢？<br>那就是接下来我们要说的java.util.Arrays这个类</p>\n<p>同样的，Arrays这个类没有公开的构造方法，其中所有的方法都是静态的</p>\n<h3 id=\"Sort\"><a href=\"#Sort\" class=\"headerlink\" title=\"Sort\"></a>Sort</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span> </span>&#123;</div><div class=\"line\">       DualPivotQuicksort.sort(a, <span class=\"number\">0</span>, a.length - <span class=\"number\">1</span>, <span class=\"keyword\">null</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> fromIndex, <span class=\"keyword\">int</span> toIndex)</span> </span>&#123;</div><div class=\"line\">       rangeCheck(a.length, fromIndex, toIndex);</div><div class=\"line\">       DualPivotQuicksort.sort(a, fromIndex, toIndex - <span class=\"number\">1</span>, <span class=\"keyword\">null</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">parallelSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">parallelSort</span><span class=\"params\">(T[] a, Comparator&lt;? <span class=\"keyword\">super</span> T&gt; cmp)</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>\n<p>从上面的源码可以看出Arrays可以解决各种数组，甚至是引用类型的泛型。至于怎么实现的，那就是算法的问题，在这里，就不讨论了。值得一提的引用类型的数组只能使用parallelSort。而且还可以使用比较器</p>","more":"<h3 id=\"Search\"><a href=\"#Search\" class=\"headerlink\" title=\"Search\"></a>Search</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">binarySearch</span><span class=\"params\">(<span class=\"keyword\">long</span>[] a, <span class=\"keyword\">long</span> key)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> binarySearch0(a, <span class=\"number\">0</span>, a.length, key);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>Arrays采用的是二分法查找，使用这种查找必须先对数组进行排序</p>\n<h3 id=\"Equals\"><a href=\"#Equals\" class=\"headerlink\" title=\"Equals\"></a>Equals</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object[] a, Object[] a2)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (a==a2)</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">       <span class=\"keyword\">if</span> (a==<span class=\"keyword\">null</span> || a2==<span class=\"keyword\">null</span>)</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">int</span> length = a.length;</div><div class=\"line\">       <span class=\"keyword\">if</span> (a2.length != length)</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;length; i++) &#123;</div><div class=\"line\">           Object o1 = a[i];</div><div class=\"line\">           Object o2 = a2[i];</div><div class=\"line\">           <span class=\"keyword\">if</span> (!(o1==<span class=\"keyword\">null</span> ? o2==<span class=\"keyword\">null</span> : o1.equals(o2)))</div><div class=\"line\">               <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>比较两个数组是否equals()</p>\n<h3 id=\"Fill\"><a href=\"#Fill\" class=\"headerlink\" title=\"Fill\"></a>Fill</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">fill</span><span class=\"params\">(<span class=\"keyword\">long</span>[] a, <span class=\"keyword\">long</span> val)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, len = a.length; i &lt; len; i++)</div><div class=\"line\">           a[i] = val;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">fill</span><span class=\"params\">(<span class=\"keyword\">long</span>[] a, <span class=\"keyword\">int</span> fromIndex, <span class=\"keyword\">int</span> toIndex, <span class=\"keyword\">long</span> val)</span> </span>&#123;</div><div class=\"line\">       rangeCheck(a.length, fromIndex, toIndex);</div><div class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = fromIndex; i &lt; toIndex; i++)</div><div class=\"line\">           a[i] = val;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>对数组进行填充</p>\n<h3 id=\"Copy\"><a href=\"#Copy\" class=\"headerlink\" title=\"Copy\"></a>Copy</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T,U&gt; T[] copyOf(U[] original, <span class=\"keyword\">int</span> newLength, Class&lt;? extends T[]&gt; newType) &#123;</div><div class=\"line\">       <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">       T[] copy = ((Object)newType == (Object)Object[].class)</div><div class=\"line\">           ? (T[]) <span class=\"keyword\">new</span> Object[newLength]</div><div class=\"line\">           : (T[]) Array.newInstance(newType.getComponentType(), newLength);</div><div class=\"line\">       System.arraycopy(original, <span class=\"number\">0</span>, copy, <span class=\"number\">0</span>,</div><div class=\"line\">                        Math.min(original.length, newLength));</div><div class=\"line\">       <span class=\"keyword\">return</span> copy;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T,U&gt; T[] copyOfRange(U[] original, <span class=\"keyword\">int</span> from, <span class=\"keyword\">int</span> to, Class&lt;? extends T[]&gt; newType) &#123;</div><div class=\"line\">       <span class=\"keyword\">int</span> newLength = to - from;</div><div class=\"line\">       <span class=\"keyword\">if</span> (newLength &lt; <span class=\"number\">0</span>)</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(from + <span class=\"string\">\" &gt; \"</span> + to);</div><div class=\"line\">       <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">       T[] copy = ((Object)newType == (Object)Object[].class)</div><div class=\"line\">           ? (T[]) <span class=\"keyword\">new</span> Object[newLength]</div><div class=\"line\">           : (T[]) Array.newInstance(newType.getComponentType(), newLength);</div><div class=\"line\">       System.arraycopy(original, from, copy, <span class=\"number\">0</span>,</div><div class=\"line\">                        Math.min(original.length - from, newLength));</div><div class=\"line\">       <span class=\"keyword\">return</span> copy;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>上面的就是Arrays的copyOf()实现的源码，初一看，哇，这都是什么啊？下面就展示一个小实例<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestArrays</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>&#125;;</div><div class=\"line\">\t\tSystem.out.println(Arrays.toString(arr));</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//将arr数组的容量扩展至15，并将原数组内容复制至此，其余的用默认值填充</span></div><div class=\"line\">\t\tarr = Arrays.copyOf(arr, <span class=\"number\">15</span>);</div><div class=\"line\">\t\tSystem.out.println(arr.length);</div><div class=\"line\">\t\tSystem.out.println(Arrays.toString(arr));</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//将arr数组的容量缩至5，并将原数组前5个复制至此</span></div><div class=\"line\">\t\tarr = Arrays.copyOf(arr, <span class=\"number\">5</span>);</div><div class=\"line\">\t\tSystem.out.println(arr.length);</div><div class=\"line\">\t\tSystem.out.println(Arrays.toString(arr));\t\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</div><div class=\"line\"><span class=\"number\">15</span></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]</div><div class=\"line\"><span class=\"number\">5</span></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</div></pre></td></tr></table></figure></p>\n<h3 id=\"ToString\"><a href=\"#ToString\" class=\"headerlink\" title=\"ToString\"></a>ToString</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">toString</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (a == <span class=\"keyword\">null</span>)</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"string\">\"null\"</span>;</div><div class=\"line\">       <span class=\"keyword\">int</span> iMax = a.length - <span class=\"number\">1</span>;</div><div class=\"line\">       <span class=\"keyword\">if</span> (iMax == -<span class=\"number\">1</span>)</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"string\">\"[]\"</span>;</div><div class=\"line\"></div><div class=\"line\">       StringBuilder b = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">       b.append(<span class=\"string\">'['</span>);</div><div class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; ; i++) &#123;</div><div class=\"line\">           b.append(a[i]);</div><div class=\"line\">           <span class=\"keyword\">if</span> (i == iMax)</div><div class=\"line\">               <span class=\"keyword\">return</span> b.append(<span class=\"string\">']'</span>).toString();</div><div class=\"line\">           b.append(<span class=\"string\">\", \"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">deepToString</span><span class=\"params\">(Object[] a)</span> </span>&#123;                                               </div><div class=\"line\">       <span class=\"keyword\">if</span> (a == <span class=\"keyword\">null</span>)</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"string\">\"null\"</span>;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">int</span> bufLen = <span class=\"number\">20</span> * a.length;</div><div class=\"line\">       <span class=\"keyword\">if</span> (a.length != <span class=\"number\">0</span> &amp;&amp; bufLen &lt;= <span class=\"number\">0</span>)</div><div class=\"line\">           bufLen = Integer.MAX_VALUE;</div><div class=\"line\">       StringBuilder buf = <span class=\"keyword\">new</span> StringBuilder(bufLen);</div><div class=\"line\">       deepToString(a, buf, <span class=\"keyword\">new</span> HashSet&lt;Object[]&gt;());</div><div class=\"line\">       <span class=\"keyword\">return</span> buf.toString();</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>将数组以字符串的形式展现出来，其中toString()对应的是一维，而deepToString()对应的则是多维</p>"},{"title":"Date、DateFormat与Calendar的使用","date":"2016-09-12T15:15:16.000Z","_content":"前面我们提到了字符串String，StringBuilder和StringBuffer的使用，平常我们还会经常与另外一类数据打交道，那就是时间，在Java中，与时间处理相关的类一般有三个Date、DateFormat和Calendar\n\n### Date\n\nDate主要与一个long类型的数据打交道。在Java中，这个数是此时距1970-1-1 08:00:00的毫秒数。但还值得注意的一点就是java.util和java.sql两个包里面都有Date这个类\n\n<!--more-->\n\n``` java\n\tpublic class Date implements java.io.Serializable, Cloneable, Comparable<Date> {\n\t\tpublic Date() {\n\t\t\tthis(System.currentTimeMillis());\n\t\t}\n\t\tpublic String toString() {\n\t\t\t//Tue Aug 30 23:24:42 CST 2016 以这种格式输出\n\t\t}\n\t}\n\t\n\tpublic class Date extends java.util.Date {\n\t\t//java.sql.Date没有空的构造方法\n\t\tpublic Date(long date) {\n\t\t\t// If the millisecond date value contains time info, mask it out.\n\t\t\tsuper(date);\n\t\t}\n\t\tpublic String toString() {\n\t\t\t//2016-08-30 以这种格式输出\n\t\t}\n\t}\n```\n\n也就是说java.sql.Date不能精确到分和秒\n\n### DateFormat\n\nDateFormat主要就是在字符串和Date之间打交道，可以将Date对象转化为指定格式的字符串，同样的，也可以将指定格式的字符串转化为Date对象\n``` java\n\tpublic abstract class DateFormat extends Format {\n\t\tpublic abstract StringBuffer format(Date date, StringBuffer toAppendTo,\n                                        FieldPosition fieldPosition);\n\t\tpublic abstract Date parse(String source, ParsePosition pos);\n\t\tpublic final String format(Date date){\n\t\t\treturn format(date, new StringBuffer(),\n\t\t\t\t\t\t  DontCareFieldPosition.INSTANCE).toString();\n\t\t}\n\t}\n\t\n\tpublic class SimpleDateFormat extends DateFormat {}\n```\n\n### Calendar\n\nCalendar日历的意思，顾名思义就是和日历相关东西，这里值得注意的Calendar类中对于每一个都是用常量进行表示，也可以用数字，但是就月份而言0代表一月份...... 11代表十二月，就星期来说1代表周日...... 7代表周六\n``` java\n\tpublic abstract class Calendar implements Serializable, Cloneable, Comparable<Calendar> {\n\t\tprotected abstract void computeTime();\n\t\tprotected abstract void computeFields();\n\t}\n\t\n\tpublic class GregorianCalendar extends Calendar {}\n```\n下面展示一个关于日历的小示例 ： \n``` java\n\tpublic class CalendarDemo {\n\t\tpublic static void main(String[] args) {\n\t\t\tScanner sc = new Scanner(System.in);\n\t\t\tSystem.out.println(\"请输入日期（格式为1111-11-11）\");\n\t\t\tString temp = sc.nextLine();\n\t\t\tsc.close();\n\t\t\t\n\t\t\tDateFormat df = new SimpleDateFormat(\"yyyy-MM-dd\");\n\t\t\ttry {\n\t\t\t\tDate date = df.parse(temp);\n\t\t\t\tCalendar c = new GregorianCalendar();\n\t\t\t\tc.setTime(date);\n\t\t\t\t\n\t\t\t\t//获得第几日，为了将其标注出来\n\t\t\t\tint day = c.get(Calendar.DATE);\n\t\t\t\t\n\t\t\t\t//从1号开始打印\n\t\t\t\tc.set(Calendar.DATE, 1);\n\t\t\t\t\n\t\t\t\t//获得1号为星期几\n\t\t\t\tint weekDay = c.get(Calendar.DAY_OF_WEEK);\n\n\t\t\t\t//获得该月的最大天数\n\t\t\t\tint maxDay = c.getActualMaximum(Calendar.DATE);\n\t\t\t\t\n\t\t\t\tSystem.out.println(\"日\\t一\\t二\\t三\\t四\\t五\\t六\");\t\t\t\n\t\t\t\tfor(int i = 1; i < weekDay; i++){\n\t\t\t\t\tSystem.out.print(\"\\t\");\n\t\t\t\t}\n\t\t\t\tfor(int i = 1; i <= maxDay; i++){\n\t\t\t\t\tif(c.get(Calendar.DATE) == day){\n\t\t\t\t\t\tSystem.out.print(\"&\");\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.print(i + \"\\t\");\n\t\t\t\t\tif(c.get(Calendar.DAY_OF_WEEK) == Calendar.SATURDAY){         \n\t\t\t\t\t\tSystem.out.println();\n\t\t\t\t\t}\n\t\t\t\t\tc.set(Calendar.DATE, i+1);\n\t\t\t\t}\n\t\t\t} catch (ParseException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n```\n输出结果：\n{% qnimg java/date/p1.png 'class:class1 class2' normal:yes %}","source":"_posts/java_date.md","raw":"---\ntitle: Date、DateFormat与Calendar的使用\ndate: 2016-09-12 23:15:16\ntags:\n\t- Java\n---\n前面我们提到了字符串String，StringBuilder和StringBuffer的使用，平常我们还会经常与另外一类数据打交道，那就是时间，在Java中，与时间处理相关的类一般有三个Date、DateFormat和Calendar\n\n### Date\n\nDate主要与一个long类型的数据打交道。在Java中，这个数是此时距1970-1-1 08:00:00的毫秒数。但还值得注意的一点就是java.util和java.sql两个包里面都有Date这个类\n\n<!--more-->\n\n``` java\n\tpublic class Date implements java.io.Serializable, Cloneable, Comparable<Date> {\n\t\tpublic Date() {\n\t\t\tthis(System.currentTimeMillis());\n\t\t}\n\t\tpublic String toString() {\n\t\t\t//Tue Aug 30 23:24:42 CST 2016 以这种格式输出\n\t\t}\n\t}\n\t\n\tpublic class Date extends java.util.Date {\n\t\t//java.sql.Date没有空的构造方法\n\t\tpublic Date(long date) {\n\t\t\t// If the millisecond date value contains time info, mask it out.\n\t\t\tsuper(date);\n\t\t}\n\t\tpublic String toString() {\n\t\t\t//2016-08-30 以这种格式输出\n\t\t}\n\t}\n```\n\n也就是说java.sql.Date不能精确到分和秒\n\n### DateFormat\n\nDateFormat主要就是在字符串和Date之间打交道，可以将Date对象转化为指定格式的字符串，同样的，也可以将指定格式的字符串转化为Date对象\n``` java\n\tpublic abstract class DateFormat extends Format {\n\t\tpublic abstract StringBuffer format(Date date, StringBuffer toAppendTo,\n                                        FieldPosition fieldPosition);\n\t\tpublic abstract Date parse(String source, ParsePosition pos);\n\t\tpublic final String format(Date date){\n\t\t\treturn format(date, new StringBuffer(),\n\t\t\t\t\t\t  DontCareFieldPosition.INSTANCE).toString();\n\t\t}\n\t}\n\t\n\tpublic class SimpleDateFormat extends DateFormat {}\n```\n\n### Calendar\n\nCalendar日历的意思，顾名思义就是和日历相关东西，这里值得注意的Calendar类中对于每一个都是用常量进行表示，也可以用数字，但是就月份而言0代表一月份...... 11代表十二月，就星期来说1代表周日...... 7代表周六\n``` java\n\tpublic abstract class Calendar implements Serializable, Cloneable, Comparable<Calendar> {\n\t\tprotected abstract void computeTime();\n\t\tprotected abstract void computeFields();\n\t}\n\t\n\tpublic class GregorianCalendar extends Calendar {}\n```\n下面展示一个关于日历的小示例 ： \n``` java\n\tpublic class CalendarDemo {\n\t\tpublic static void main(String[] args) {\n\t\t\tScanner sc = new Scanner(System.in);\n\t\t\tSystem.out.println(\"请输入日期（格式为1111-11-11）\");\n\t\t\tString temp = sc.nextLine();\n\t\t\tsc.close();\n\t\t\t\n\t\t\tDateFormat df = new SimpleDateFormat(\"yyyy-MM-dd\");\n\t\t\ttry {\n\t\t\t\tDate date = df.parse(temp);\n\t\t\t\tCalendar c = new GregorianCalendar();\n\t\t\t\tc.setTime(date);\n\t\t\t\t\n\t\t\t\t//获得第几日，为了将其标注出来\n\t\t\t\tint day = c.get(Calendar.DATE);\n\t\t\t\t\n\t\t\t\t//从1号开始打印\n\t\t\t\tc.set(Calendar.DATE, 1);\n\t\t\t\t\n\t\t\t\t//获得1号为星期几\n\t\t\t\tint weekDay = c.get(Calendar.DAY_OF_WEEK);\n\n\t\t\t\t//获得该月的最大天数\n\t\t\t\tint maxDay = c.getActualMaximum(Calendar.DATE);\n\t\t\t\t\n\t\t\t\tSystem.out.println(\"日\\t一\\t二\\t三\\t四\\t五\\t六\");\t\t\t\n\t\t\t\tfor(int i = 1; i < weekDay; i++){\n\t\t\t\t\tSystem.out.print(\"\\t\");\n\t\t\t\t}\n\t\t\t\tfor(int i = 1; i <= maxDay; i++){\n\t\t\t\t\tif(c.get(Calendar.DATE) == day){\n\t\t\t\t\t\tSystem.out.print(\"&\");\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.print(i + \"\\t\");\n\t\t\t\t\tif(c.get(Calendar.DAY_OF_WEEK) == Calendar.SATURDAY){         \n\t\t\t\t\t\tSystem.out.println();\n\t\t\t\t\t}\n\t\t\t\t\tc.set(Calendar.DATE, i+1);\n\t\t\t\t}\n\t\t\t} catch (ParseException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n```\n输出结果：\n{% qnimg java/date/p1.png 'class:class1 class2' normal:yes %}","slug":"java_date","published":1,"updated":"2017-03-08T11:34:52.118Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5e6002mqoq1atwjhi8r","content":"<p>前面我们提到了字符串String，StringBuilder和StringBuffer的使用，平常我们还会经常与另外一类数据打交道，那就是时间，在Java中，与时间处理相关的类一般有三个Date、DateFormat和Calendar</p>\n<h3 id=\"Date\"><a href=\"#Date\" class=\"headerlink\" title=\"Date\"></a>Date</h3><p>Date主要与一个long类型的数据打交道。在Java中，这个数是此时距1970-1-1 08:00:00的毫秒数。但还值得注意的一点就是java.util和java.sql两个包里面都有Date这个类</p>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Date</span> <span class=\"keyword\">implements</span> <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span>, <span class=\"title\">Cloneable</span>, <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Date</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Date</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>(System.currentTimeMillis());</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//Tue Aug 30 23:24:42 CST 2016 以这种格式输出</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Date</span> <span class=\"keyword\">extends</span> <span class=\"title\">java</span>.<span class=\"title\">util</span>.<span class=\"title\">Date</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//java.sql.Date没有空的构造方法</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Date</span><span class=\"params\">(<span class=\"keyword\">long</span> date)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// If the millisecond date value contains time info, mask it out.</span></div><div class=\"line\">\t\t<span class=\"keyword\">super</span>(date);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//2016-08-30 以这种格式输出</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>也就是说java.sql.Date不能精确到分和秒</p>\n<h3 id=\"DateFormat\"><a href=\"#DateFormat\" class=\"headerlink\" title=\"DateFormat\"></a>DateFormat</h3><p>DateFormat主要就是在字符串和Date之间打交道，可以将Date对象转化为指定格式的字符串，同样的，也可以将指定格式的字符串转化为Date对象<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DateFormat</span> <span class=\"keyword\">extends</span> <span class=\"title\">Format</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> StringBuffer <span class=\"title\">format</span><span class=\"params\">(Date date, StringBuffer toAppendTo,</span></span></div><div class=\"line\">                                       FieldPosition fieldPosition);</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Date <span class=\"title\">parse</span><span class=\"params\">(String source, ParsePosition pos)</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title\">format</span><span class=\"params\">(Date date)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> format(date, <span class=\"keyword\">new</span> StringBuffer(),</div><div class=\"line\">\t\t\t\t\t  DontCareFieldPosition.INSTANCE).toString();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleDateFormat</span> <span class=\"keyword\">extends</span> <span class=\"title\">DateFormat</span> </span>&#123;&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Calendar\"><a href=\"#Calendar\" class=\"headerlink\" title=\"Calendar\"></a>Calendar</h3><p>Calendar日历的意思，顾名思义就是和日历相关东西，这里值得注意的Calendar类中对于每一个都是用常量进行表示，也可以用数字，但是就月份而言0代表一月份…… 11代表十二月，就星期来说1代表周日…… 7代表周六<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Calendar</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span>, <span class=\"title\">Cloneable</span>, <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Calendar</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">computeTime</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">computeFields</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GregorianCalendar</span> <span class=\"keyword\">extends</span> <span class=\"title\">Calendar</span> </span>&#123;&#125;</div></pre></td></tr></table></figure></p>\n<p>下面展示一个关于日历的小示例 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CalendarDemo</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"请输入日期（格式为1111-11-11）\"</span>);</div><div class=\"line\">\t\tString temp = sc.nextLine();</div><div class=\"line\">\t\tsc.close();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tDateFormat df = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tDate date = df.parse(temp);</div><div class=\"line\">\t\t\tCalendar c = <span class=\"keyword\">new</span> GregorianCalendar();</div><div class=\"line\">\t\t\tc.setTime(date);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"comment\">//获得第几日，为了将其标注出来</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> day = c.get(Calendar.DATE);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"comment\">//从1号开始打印</span></div><div class=\"line\">\t\t\tc.set(Calendar.DATE, <span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"comment\">//获得1号为星期几</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> weekDay = c.get(Calendar.DAY_OF_WEEK);</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">//获得该月的最大天数</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> maxDay = c.getActualMaximum(Calendar.DATE);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"日\\t一\\t二\\t三\\t四\\t五\\t六\"</span>);\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; weekDay; i++)&#123;</div><div class=\"line\">\t\t\t\tSystem.out.print(<span class=\"string\">\"\\t\"</span>);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= maxDay; i++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(c.get(Calendar.DATE) == day)&#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.print(<span class=\"string\">\"&amp;\"</span>);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tSystem.out.print(i + <span class=\"string\">\"\\t\"</span>);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(c.get(Calendar.DAY_OF_WEEK) == Calendar.SATURDAY)&#123;         </div><div class=\"line\">\t\t\t\t\tSystem.out.println();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tc.set(Calendar.DATE, i+<span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (ParseException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果：<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/java/date/p1.png\"></p>\n","excerpt":"<p>前面我们提到了字符串String，StringBuilder和StringBuffer的使用，平常我们还会经常与另外一类数据打交道，那就是时间，在Java中，与时间处理相关的类一般有三个Date、DateFormat和Calendar</p>\n<h3 id=\"Date\"><a href=\"#Date\" class=\"headerlink\" title=\"Date\"></a>Date</h3><p>Date主要与一个long类型的数据打交道。在Java中，这个数是此时距1970-1-1 08:00:00的毫秒数。但还值得注意的一点就是java.util和java.sql两个包里面都有Date这个类</p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Date</span> <span class=\"keyword\">implements</span> <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span>, <span class=\"title\">Cloneable</span>, <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Date</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Date</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>(System.currentTimeMillis());</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//Tue Aug 30 23:24:42 CST 2016 以这种格式输出</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Date</span> <span class=\"keyword\">extends</span> <span class=\"title\">java</span>.<span class=\"title\">util</span>.<span class=\"title\">Date</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//java.sql.Date没有空的构造方法</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Date</span><span class=\"params\">(<span class=\"keyword\">long</span> date)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// If the millisecond date value contains time info, mask it out.</span></div><div class=\"line\">\t\t<span class=\"keyword\">super</span>(date);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//2016-08-30 以这种格式输出</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>也就是说java.sql.Date不能精确到分和秒</p>\n<h3 id=\"DateFormat\"><a href=\"#DateFormat\" class=\"headerlink\" title=\"DateFormat\"></a>DateFormat</h3><p>DateFormat主要就是在字符串和Date之间打交道，可以将Date对象转化为指定格式的字符串，同样的，也可以将指定格式的字符串转化为Date对象<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DateFormat</span> <span class=\"keyword\">extends</span> <span class=\"title\">Format</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> StringBuffer <span class=\"title\">format</span><span class=\"params\">(Date date, StringBuffer toAppendTo,</div><div class=\"line\">                                       FieldPosition fieldPosition)</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Date <span class=\"title\">parse</span><span class=\"params\">(String source, ParsePosition pos)</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title\">format</span><span class=\"params\">(Date date)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> format(date, <span class=\"keyword\">new</span> StringBuffer(),</div><div class=\"line\">\t\t\t\t\t  DontCareFieldPosition.INSTANCE).toString();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleDateFormat</span> <span class=\"keyword\">extends</span> <span class=\"title\">DateFormat</span> </span>&#123;&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Calendar\"><a href=\"#Calendar\" class=\"headerlink\" title=\"Calendar\"></a>Calendar</h3><p>Calendar日历的意思，顾名思义就是和日历相关东西，这里值得注意的Calendar类中对于每一个都是用常量进行表示，也可以用数字，但是就月份而言0代表一月份…… 11代表十二月，就星期来说1代表周日…… 7代表周六<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Calendar</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span>, <span class=\"title\">Cloneable</span>, <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Calendar</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">computeTime</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">computeFields</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GregorianCalendar</span> <span class=\"keyword\">extends</span> <span class=\"title\">Calendar</span> </span>&#123;&#125;</div></pre></td></tr></table></figure></p>\n<p>下面展示一个关于日历的小示例 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CalendarDemo</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"请输入日期（格式为1111-11-11）\"</span>);</div><div class=\"line\">\t\tString temp = sc.nextLine();</div><div class=\"line\">\t\tsc.close();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tDateFormat df = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tDate date = df.parse(temp);</div><div class=\"line\">\t\t\tCalendar c = <span class=\"keyword\">new</span> GregorianCalendar();</div><div class=\"line\">\t\t\tc.setTime(date);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"comment\">//获得第几日，为了将其标注出来</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> day = c.get(Calendar.DATE);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"comment\">//从1号开始打印</span></div><div class=\"line\">\t\t\tc.set(Calendar.DATE, <span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"comment\">//获得1号为星期几</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> weekDay = c.get(Calendar.DAY_OF_WEEK);</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">//获得该月的最大天数</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> maxDay = c.getActualMaximum(Calendar.DATE);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"日\\t一\\t二\\t三\\t四\\t五\\t六\"</span>);\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; weekDay; i++)&#123;</div><div class=\"line\">\t\t\t\tSystem.out.print(<span class=\"string\">\"\\t\"</span>);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= maxDay; i++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(c.get(Calendar.DATE) == day)&#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.print(<span class=\"string\">\"&amp;\"</span>);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tSystem.out.print(i + <span class=\"string\">\"\\t\"</span>);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(c.get(Calendar.DAY_OF_WEEK) == Calendar.SATURDAY)&#123;         </div><div class=\"line\">\t\t\t\t\tSystem.out.println();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tc.set(Calendar.DATE, i+<span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (ParseException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果：<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/java/date/p1.png\"></p>"},{"title":"JDK5.0新特性","date":"2016-09-20T03:31:59.000Z","_content":"jdk5.0（jdk1.5）相对于jdk1.4来说，是一场重大的革命，下面就来谈谈jdk5.0增加的一些新特性\n\n### for-each循环\n\n在日常编程中，我们会经常用到遍历，我们知道的有Iterator遍历，主要用于集合，索引式遍历。而在jdk5.0中为我们提供了for-each循环\n\n<!--more-->\n\n``` java\n\tint[] arr = new int[]{1,2,3,4,5};\n\tfor(int i : arr) {\n\t\tSystem.out.println(i);\n\t}\n```\nfor-each循环简化了遍历，同时也使得索引不可见，因此无法对内容进行修改，只能单纯的遍历\n\n### 静态导入\n\n在jdk中提供了很多工具类，如Math、Executors......那么每次使用都必须用Math.而静态导入则省去了这个麻烦\n``` java\n\tpackage cn.sakuraffy;\n\n\timport static java.lang.Math.*;\n\n\tpublic class Test {\n\t\tpublic static void main(String[] args) {\n\t\t\tint a = 10;\n\t\t\tSystem.out.println(abs(a));\n\t\t}\n\t}\n```\n这里值得说的是import 引入的是类，而import static 引入的则是方法，但过度使用则会降低代码的可读性\n\n### 泛型\n\n``` java\n\t// 这就是jdk1.4所采用的\n\tArrayList al = new ArrayList();\n\tal.add(new String(\"123\"));\n\tString str = (String) al.get(0);\n\tSystem.out.println(str);\n\t\n\t//这是jdk1.5后采用的\n\tArrayList<String> al = new ArrayList<String>();\n\tal.add(new String(\"123\"));\n\tString str = al.get(0);\n\tSystem.out.println(str);\n```\n相对于以前的，只是少了一个强制转换，其实不然，他将问题提前到了编译期\n\n### 自动拆箱装箱\n\n说到拆装箱之前，先来说一下基本数据类型的包装类型，我们知道基本数据类型是没有对象的，而Java是面向对象编程的，那么就引入了基本数据类型的包装类型取完成，但引用类型和基本数据类型是两个完全不同的东西，使用就必须相互转换\n``` java\n\tInteger i = 1;\n\t//Integer i = new Integer(1);\n\tint a = new Integer(3);\n\t//int a = new Integer(3).intValue();\n```\n上面两句语句在jdk1.5之前肯定是错的，基本数据类型的值怎么能赋值给对象呢？但在jdk1.5之后，它是可以，这倒不是说Java可以将基本数据类型数据赋值给对象，而是编译器私底下帮你做了这些工作\n\n### 可变参数\n\n``` java\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(add(1,2,3,4));\n\t}\n\t\n\tpublic static int add(int... arr) {\n\t\tint sum = 0;\n\t\tfor (int i : arr) {\n\t\t\tsum += i;\n\t\t}\n\t\treturn sum;\n\t}\n```\n而在jdk1.5之前则采用的是数组的形式，如main()方法\n\n### 内省\n\n是Java对Bean类属性和实现的一种缺省处理，他可以通过属性，通过getName，setName来修改，其本质就是通过Introspector来获取beanInfo，进而获取PropertyDescriptor，最后获得getter/setter方法\n\n### 枚举\n\n``` java\n\tpublic enum Color {\n\t\tRED,GREEN,BLUE;\n\t}\n```\n枚举和类一样，也可定义方法之类的，但是枚举的元素都是static final，枚举就是一个天然的单例\n\n### 编程并发库\n\n线程并发库是Java1.5提出的关于多线程处理的高级功能，所在包：java.util.concurrent，这里我就不过多说了，详情可以看并发编程系列\n\n","source":"_posts/java_jdk5.0.md","raw":"---\ntitle: JDK5.0新特性\ndate: 2016-09-20 11:31:59\ntags:\n\t- Java\n---\njdk5.0（jdk1.5）相对于jdk1.4来说，是一场重大的革命，下面就来谈谈jdk5.0增加的一些新特性\n\n### for-each循环\n\n在日常编程中，我们会经常用到遍历，我们知道的有Iterator遍历，主要用于集合，索引式遍历。而在jdk5.0中为我们提供了for-each循环\n\n<!--more-->\n\n``` java\n\tint[] arr = new int[]{1,2,3,4,5};\n\tfor(int i : arr) {\n\t\tSystem.out.println(i);\n\t}\n```\nfor-each循环简化了遍历，同时也使得索引不可见，因此无法对内容进行修改，只能单纯的遍历\n\n### 静态导入\n\n在jdk中提供了很多工具类，如Math、Executors......那么每次使用都必须用Math.而静态导入则省去了这个麻烦\n``` java\n\tpackage cn.sakuraffy;\n\n\timport static java.lang.Math.*;\n\n\tpublic class Test {\n\t\tpublic static void main(String[] args) {\n\t\t\tint a = 10;\n\t\t\tSystem.out.println(abs(a));\n\t\t}\n\t}\n```\n这里值得说的是import 引入的是类，而import static 引入的则是方法，但过度使用则会降低代码的可读性\n\n### 泛型\n\n``` java\n\t// 这就是jdk1.4所采用的\n\tArrayList al = new ArrayList();\n\tal.add(new String(\"123\"));\n\tString str = (String) al.get(0);\n\tSystem.out.println(str);\n\t\n\t//这是jdk1.5后采用的\n\tArrayList<String> al = new ArrayList<String>();\n\tal.add(new String(\"123\"));\n\tString str = al.get(0);\n\tSystem.out.println(str);\n```\n相对于以前的，只是少了一个强制转换，其实不然，他将问题提前到了编译期\n\n### 自动拆箱装箱\n\n说到拆装箱之前，先来说一下基本数据类型的包装类型，我们知道基本数据类型是没有对象的，而Java是面向对象编程的，那么就引入了基本数据类型的包装类型取完成，但引用类型和基本数据类型是两个完全不同的东西，使用就必须相互转换\n``` java\n\tInteger i = 1;\n\t//Integer i = new Integer(1);\n\tint a = new Integer(3);\n\t//int a = new Integer(3).intValue();\n```\n上面两句语句在jdk1.5之前肯定是错的，基本数据类型的值怎么能赋值给对象呢？但在jdk1.5之后，它是可以，这倒不是说Java可以将基本数据类型数据赋值给对象，而是编译器私底下帮你做了这些工作\n\n### 可变参数\n\n``` java\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(add(1,2,3,4));\n\t}\n\t\n\tpublic static int add(int... arr) {\n\t\tint sum = 0;\n\t\tfor (int i : arr) {\n\t\t\tsum += i;\n\t\t}\n\t\treturn sum;\n\t}\n```\n而在jdk1.5之前则采用的是数组的形式，如main()方法\n\n### 内省\n\n是Java对Bean类属性和实现的一种缺省处理，他可以通过属性，通过getName，setName来修改，其本质就是通过Introspector来获取beanInfo，进而获取PropertyDescriptor，最后获得getter/setter方法\n\n### 枚举\n\n``` java\n\tpublic enum Color {\n\t\tRED,GREEN,BLUE;\n\t}\n```\n枚举和类一样，也可定义方法之类的，但是枚举的元素都是static final，枚举就是一个天然的单例\n\n### 编程并发库\n\n线程并发库是Java1.5提出的关于多线程处理的高级功能，所在包：java.util.concurrent，这里我就不过多说了，详情可以看并发编程系列\n\n","slug":"java_jdk5.0","published":1,"updated":"2016-12-27T22:13:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5e7002pqoq1901c67tv","content":"<p>jdk5.0（jdk1.5）相对于jdk1.4来说，是一场重大的革命，下面就来谈谈jdk5.0增加的一些新特性</p>\n<h3 id=\"for-each循环\"><a href=\"#for-each循环\" class=\"headerlink\" title=\"for-each循环\"></a>for-each循环</h3><p>在日常编程中，我们会经常用到遍历，我们知道的有Iterator遍历，主要用于集合，索引式遍历。而在jdk5.0中为我们提供了for-each循环</p>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i : arr) &#123;</div><div class=\"line\">\tSystem.out.println(i);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>for-each循环简化了遍历，同时也使得索引不可见，因此无法对内容进行修改，只能单纯的遍历</p>\n<h3 id=\"静态导入\"><a href=\"#静态导入\" class=\"headerlink\" title=\"静态导入\"></a>静态导入</h3><p>在jdk中提供了很多工具类，如Math、Executors……那么每次使用都必须用Math.而静态导入则省去了这个麻烦<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.lang.Math.*;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</div><div class=\"line\">\t\tSystem.out.println(abs(a));</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里值得说的是import 引入的是类，而import static 引入的则是方法，但过度使用则会降低代码的可读性</p>\n<h3 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 这就是jdk1.4所采用的</span></div><div class=\"line\">ArrayList al = <span class=\"keyword\">new</span> ArrayList();</div><div class=\"line\">al.add(<span class=\"keyword\">new</span> String(<span class=\"string\">\"123\"</span>));</div><div class=\"line\">String str = (String) al.get(<span class=\"number\">0</span>);</div><div class=\"line\">System.out.println(str);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这是jdk1.5后采用的</span></div><div class=\"line\">ArrayList&lt;String&gt; al = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</div><div class=\"line\">al.add(<span class=\"keyword\">new</span> String(<span class=\"string\">\"123\"</span>));</div><div class=\"line\">String str = al.get(<span class=\"number\">0</span>);</div><div class=\"line\">System.out.println(str);</div></pre></td></tr></table></figure>\n<p>相对于以前的，只是少了一个强制转换，其实不然，他将问题提前到了编译期</p>\n<h3 id=\"自动拆箱装箱\"><a href=\"#自动拆箱装箱\" class=\"headerlink\" title=\"自动拆箱装箱\"></a>自动拆箱装箱</h3><p>说到拆装箱之前，先来说一下基本数据类型的包装类型，我们知道基本数据类型是没有对象的，而Java是面向对象编程的，那么就引入了基本数据类型的包装类型取完成，但引用类型和基本数据类型是两个完全不同的东西，使用就必须相互转换<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Integer i = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"comment\">//Integer i = new Integer(1);</span></div><div class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"keyword\">new</span> Integer(<span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"comment\">//int a = new Integer(3).intValue();</span></div></pre></td></tr></table></figure></p>\n<p>上面两句语句在jdk1.5之前肯定是错的，基本数据类型的值怎么能赋值给对象呢？但在jdk1.5之后，它是可以，这倒不是说Java可以将基本数据类型数据赋值给对象，而是编译器私底下帮你做了这些工作</p>\n<h3 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\tSystem.out.println(add(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span>... arr)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i : arr) &#123;</div><div class=\"line\">\t\tsum += i;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> sum;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>而在jdk1.5之前则采用的是数组的形式，如main()方法</p>\n<h3 id=\"内省\"><a href=\"#内省\" class=\"headerlink\" title=\"内省\"></a>内省</h3><p>是Java对Bean类属性和实现的一种缺省处理，他可以通过属性，通过getName，setName来修改，其本质就是通过Introspector来获取beanInfo，进而获取PropertyDescriptor，最后获得getter/setter方法</p>\n<h3 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Color &#123;</div><div class=\"line\">\tRED,GREEN,BLUE;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>枚举和类一样，也可定义方法之类的，但是枚举的元素都是static final，枚举就是一个天然的单例</p>\n<h3 id=\"编程并发库\"><a href=\"#编程并发库\" class=\"headerlink\" title=\"编程并发库\"></a>编程并发库</h3><p>线程并发库是Java1.5提出的关于多线程处理的高级功能，所在包：java.util.concurrent，这里我就不过多说了，详情可以看并发编程系列</p>\n","excerpt":"<p>jdk5.0（jdk1.5）相对于jdk1.4来说，是一场重大的革命，下面就来谈谈jdk5.0增加的一些新特性</p>\n<h3 id=\"for-each循环\"><a href=\"#for-each循环\" class=\"headerlink\" title=\"for-each循环\"></a>for-each循环</h3><p>在日常编程中，我们会经常用到遍历，我们知道的有Iterator遍历，主要用于集合，索引式遍历。而在jdk5.0中为我们提供了for-each循环</p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i : arr) &#123;</div><div class=\"line\">\tSystem.out.println(i);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>for-each循环简化了遍历，同时也使得索引不可见，因此无法对内容进行修改，只能单纯的遍历</p>\n<h3 id=\"静态导入\"><a href=\"#静态导入\" class=\"headerlink\" title=\"静态导入\"></a>静态导入</h3><p>在jdk中提供了很多工具类，如Math、Executors……那么每次使用都必须用Math.而静态导入则省去了这个麻烦<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.lang.Math.*;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</div><div class=\"line\">\t\tSystem.out.println(abs(a));</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里值得说的是import 引入的是类，而import static 引入的则是方法，但过度使用则会降低代码的可读性</p>\n<h3 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 这就是jdk1.4所采用的</span></div><div class=\"line\">ArrayList al = <span class=\"keyword\">new</span> ArrayList();</div><div class=\"line\">al.add(<span class=\"keyword\">new</span> String(<span class=\"string\">\"123\"</span>));</div><div class=\"line\">String str = (String) al.get(<span class=\"number\">0</span>);</div><div class=\"line\">System.out.println(str);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这是jdk1.5后采用的</span></div><div class=\"line\">ArrayList&lt;String&gt; al = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</div><div class=\"line\">al.add(<span class=\"keyword\">new</span> String(<span class=\"string\">\"123\"</span>));</div><div class=\"line\">String str = al.get(<span class=\"number\">0</span>);</div><div class=\"line\">System.out.println(str);</div></pre></td></tr></table></figure>\n<p>相对于以前的，只是少了一个强制转换，其实不然，他将问题提前到了编译期</p>\n<h3 id=\"自动拆箱装箱\"><a href=\"#自动拆箱装箱\" class=\"headerlink\" title=\"自动拆箱装箱\"></a>自动拆箱装箱</h3><p>说到拆装箱之前，先来说一下基本数据类型的包装类型，我们知道基本数据类型是没有对象的，而Java是面向对象编程的，那么就引入了基本数据类型的包装类型取完成，但引用类型和基本数据类型是两个完全不同的东西，使用就必须相互转换<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Integer i = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"comment\">//Integer i = new Integer(1);</span></div><div class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"keyword\">new</span> Integer(<span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"comment\">//int a = new Integer(3).intValue();</span></div></pre></td></tr></table></figure></p>\n<p>上面两句语句在jdk1.5之前肯定是错的，基本数据类型的值怎么能赋值给对象呢？但在jdk1.5之后，它是可以，这倒不是说Java可以将基本数据类型数据赋值给对象，而是编译器私底下帮你做了这些工作</p>\n<h3 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\tSystem.out.println(add(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span>... arr)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i : arr) &#123;</div><div class=\"line\">\t\tsum += i;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> sum;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>而在jdk1.5之前则采用的是数组的形式，如main()方法</p>\n<h3 id=\"内省\"><a href=\"#内省\" class=\"headerlink\" title=\"内省\"></a>内省</h3><p>是Java对Bean类属性和实现的一种缺省处理，他可以通过属性，通过getName，setName来修改，其本质就是通过Introspector来获取beanInfo，进而获取PropertyDescriptor，最后获得getter/setter方法</p>\n<h3 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Color &#123;</div><div class=\"line\">\tRED,GREEN,BLUE;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>枚举和类一样，也可定义方法之类的，但是枚举的元素都是static final，枚举就是一个天然的单例</p>\n<h3 id=\"编程并发库\"><a href=\"#编程并发库\" class=\"headerlink\" title=\"编程并发库\"></a>编程并发库</h3><p>线程并发库是Java1.5提出的关于多线程处理的高级功能，所在包：java.util.concurrent，这里我就不过多说了，详情可以看并发编程系列</p>"},{"title":"Java对象的四种创建方式","date":"2016-09-18T01:40:05.000Z","_content":"在Java编程，我们成天与对象打交道，但你又是否知道对象怎么创建，以及又有哪几种创建方式呢？\n\n一般认为对象的创建有四种方式 ： new关键字、利用反射、Clone以及反序列化\n\n### New\n\n这应该是大家最熟悉的\n``` java\n\tObject obj = new Object();\n```\n\n<!--more-->\n\n### 反射\n\n通过反射一般有两种方式 ： Class的newInstance()以及Constructor的newInstance()\n``` java\n\tpublic class Test{\n\t\n\t\tpublic static void main(String[] args) throws Exception {\n\t\t\tTest test1 = Test.class.newInstance();\n\t\t\tTest test2 = Test.class.getConstructor().newInstance();\n\t\t\tSystem.out.println(test1);\n\t\t\tSystem.out.println(test2);\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\nTest@2a139a55\nTest@15db9742\n```\n\n### Clone\n\n关于克隆的问题，请参考[原型模式]()\n``` java\n\tpublic class Test implements Cloneable{\n\t\tpublic static void main(String[] args) throws CloneNotSupportedException {\n\t\t\tTest test1 = new Test();\n\t\t\tTest test2 = (Test) test1.clone();\n\t\t\tSystem.out.println(test1);\n\t\t\tSystem.out.println(test2);\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\n\tTest@2a139a55\n\tTest@15db9742\n```\n\n### 反序列化\n\n关于序列化的问题，请参考[序列化机制](https://sakuraffy.github.io/pattern_serializable/)\n``` java\npublic class Test{\n\tpublic static class User implements Serializable {\n\t\tprivate static final long serialVersionUID = 1L;                              \n\t\t\n\t\tpublic User(int id) {\n\t\t\tSystem.out.println(\"haha\");\n\t\t\tthis.id = id;\n\t\t}\n\t\t\n\t\tprivate int id;\n\n\t\tpublic final int getId() {\n\t\t\treturn id;\n\t\t}\n\n\t\tpublic final void setId(int id) {\n\t\t\tthis.id = id;\n\t\t}\n\t\t\n\t}\n\n\tpublic static void main(String[] args) throws Exception, IOException{    \n\t\tFile file = new File(\"data.txt\");\n\t\tObjectOutputStream oos = new ObjectOutputStream(\n\t\t\t\tnew FileOutputStream(file));\n\t\tObjectInputStream ois = new ObjectInputStream(\n\t\t\t\tnew FileInputStream(file));\n\t\tUser user1 = new User(1);\n\t\tSystem.out.println(user1);\n\t\toos.writeObject(user1);\n\t\toos.close();\n\t\tUser user2 = (User) ois.readObject();\n\t\tSystem.out.println(user2);\n\t\tois.close();\n\t}\n}\n```\n输出结果 ：\n``` java\n\thaha\n\tTest$User@2a139a55\n\tTest$User@55f96302\n```\n\n> 无论是哪一种创建方式，所创建的对象都是不同的。通过观察字节码，除了new采用INVOKESPECIAL，其余都是INVOKEVIRTUAL\n","source":"_posts/java_object.md","raw":"---\ntitle: Java对象的四种创建方式\ndate: 2016-09-18 09:40:05\ntags:\n\t- Java\n---\n在Java编程，我们成天与对象打交道，但你又是否知道对象怎么创建，以及又有哪几种创建方式呢？\n\n一般认为对象的创建有四种方式 ： new关键字、利用反射、Clone以及反序列化\n\n### New\n\n这应该是大家最熟悉的\n``` java\n\tObject obj = new Object();\n```\n\n<!--more-->\n\n### 反射\n\n通过反射一般有两种方式 ： Class的newInstance()以及Constructor的newInstance()\n``` java\n\tpublic class Test{\n\t\n\t\tpublic static void main(String[] args) throws Exception {\n\t\t\tTest test1 = Test.class.newInstance();\n\t\t\tTest test2 = Test.class.getConstructor().newInstance();\n\t\t\tSystem.out.println(test1);\n\t\t\tSystem.out.println(test2);\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\nTest@2a139a55\nTest@15db9742\n```\n\n### Clone\n\n关于克隆的问题，请参考[原型模式]()\n``` java\n\tpublic class Test implements Cloneable{\n\t\tpublic static void main(String[] args) throws CloneNotSupportedException {\n\t\t\tTest test1 = new Test();\n\t\t\tTest test2 = (Test) test1.clone();\n\t\t\tSystem.out.println(test1);\n\t\t\tSystem.out.println(test2);\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\n\tTest@2a139a55\n\tTest@15db9742\n```\n\n### 反序列化\n\n关于序列化的问题，请参考[序列化机制](https://sakuraffy.github.io/pattern_serializable/)\n``` java\npublic class Test{\n\tpublic static class User implements Serializable {\n\t\tprivate static final long serialVersionUID = 1L;                              \n\t\t\n\t\tpublic User(int id) {\n\t\t\tSystem.out.println(\"haha\");\n\t\t\tthis.id = id;\n\t\t}\n\t\t\n\t\tprivate int id;\n\n\t\tpublic final int getId() {\n\t\t\treturn id;\n\t\t}\n\n\t\tpublic final void setId(int id) {\n\t\t\tthis.id = id;\n\t\t}\n\t\t\n\t}\n\n\tpublic static void main(String[] args) throws Exception, IOException{    \n\t\tFile file = new File(\"data.txt\");\n\t\tObjectOutputStream oos = new ObjectOutputStream(\n\t\t\t\tnew FileOutputStream(file));\n\t\tObjectInputStream ois = new ObjectInputStream(\n\t\t\t\tnew FileInputStream(file));\n\t\tUser user1 = new User(1);\n\t\tSystem.out.println(user1);\n\t\toos.writeObject(user1);\n\t\toos.close();\n\t\tUser user2 = (User) ois.readObject();\n\t\tSystem.out.println(user2);\n\t\tois.close();\n\t}\n}\n```\n输出结果 ：\n``` java\n\thaha\n\tTest$User@2a139a55\n\tTest$User@55f96302\n```\n\n> 无论是哪一种创建方式，所创建的对象都是不同的。通过观察字节码，除了new采用INVOKESPECIAL，其余都是INVOKEVIRTUAL\n","slug":"java_object","published":1,"updated":"2017-03-08T11:32:57.860Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5e9002rqoq1uqu4wu8d","content":"<p>在Java编程，我们成天与对象打交道，但你又是否知道对象怎么创建，以及又有哪几种创建方式呢？</p>\n<p>一般认为对象的创建有四种方式 ： new关键字、利用反射、Clone以及反序列化</p>\n<h3 id=\"New\"><a href=\"#New\" class=\"headerlink\" title=\"New\"></a>New</h3><p>这应该是大家最熟悉的<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Object obj = <span class=\"keyword\">new</span> Object();</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h3 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h3><p>通过反射一般有两种方式 ： Class的newInstance()以及Constructor的newInstance()<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tTest test1 = Test.class.newInstance();</div><div class=\"line\">\t\tTest test2 = Test.class.getConstructor().newInstance();</div><div class=\"line\">\t\tSystem.out.println(test1);</div><div class=\"line\">\t\tSystem.out.println(test2);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Test@<span class=\"number\">2</span>a139a55</div><div class=\"line\">Test@<span class=\"number\">15</span>db9742</div></pre></td></tr></table></figure></p>\n<h3 id=\"Clone\"><a href=\"#Clone\" class=\"headerlink\" title=\"Clone\"></a>Clone</h3><p>关于克隆的问题，请参考<a href=\"\">原型模式</a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span></span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>&#123;</div><div class=\"line\">\t\tTest test1 = <span class=\"keyword\">new</span> Test();</div><div class=\"line\">\t\tTest test2 = (Test) test1.clone();</div><div class=\"line\">\t\tSystem.out.println(test1);</div><div class=\"line\">\t\tSystem.out.println(test2);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Test@<span class=\"number\">2</span>a139a55</div><div class=\"line\">Test@<span class=\"number\">15</span>db9742</div></pre></td></tr></table></figure></p>\n<h3 id=\"反序列化\"><a href=\"#反序列化\" class=\"headerlink\" title=\"反序列化\"></a>反序列化</h3><p>关于序列化的问题，请参考<a href=\"https://sakuraffy.github.io/pattern_serializable/\">序列化机制</a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;                              </div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"haha\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> id;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception, IOException</span>&#123;    </div><div class=\"line\">\t\tFile file = <span class=\"keyword\">new</span> File(<span class=\"string\">\"data.txt\"</span>);</div><div class=\"line\">\t\tObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> FileOutputStream(file));</div><div class=\"line\">\t\tObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> FileInputStream(file));</div><div class=\"line\">\t\tUser user1 = <span class=\"keyword\">new</span> User(<span class=\"number\">1</span>);</div><div class=\"line\">\t\tSystem.out.println(user1);</div><div class=\"line\">\t\toos.writeObject(user1);</div><div class=\"line\">\t\toos.close();</div><div class=\"line\">\t\tUser user2 = (User) ois.readObject();</div><div class=\"line\">\t\tSystem.out.println(user2);</div><div class=\"line\">\t\tois.close();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">haha</div><div class=\"line\">Test$User@<span class=\"number\">2</span>a139a55</div><div class=\"line\">Test$User@<span class=\"number\">55f</span>96302</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>无论是哪一种创建方式，所创建的对象都是不同的。通过观察字节码，除了new采用INVOKESPECIAL，其余都是INVOKEVIRTUAL</p>\n</blockquote>\n","excerpt":"<p>在Java编程，我们成天与对象打交道，但你又是否知道对象怎么创建，以及又有哪几种创建方式呢？</p>\n<p>一般认为对象的创建有四种方式 ： new关键字、利用反射、Clone以及反序列化</p>\n<h3 id=\"New\"><a href=\"#New\" class=\"headerlink\" title=\"New\"></a>New</h3><p>这应该是大家最熟悉的<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Object obj = <span class=\"keyword\">new</span> Object();</div></pre></td></tr></table></figure></p>","more":"<h3 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h3><p>通过反射一般有两种方式 ： Class的newInstance()以及Constructor的newInstance()<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tTest test1 = Test.class.newInstance();</div><div class=\"line\">\t\tTest test2 = Test.class.getConstructor().newInstance();</div><div class=\"line\">\t\tSystem.out.println(test1);</div><div class=\"line\">\t\tSystem.out.println(test2);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Test@<span class=\"number\">2</span>a139a55</div><div class=\"line\">Test@<span class=\"number\">15</span>db9742</div></pre></td></tr></table></figure></p>\n<h3 id=\"Clone\"><a href=\"#Clone\" class=\"headerlink\" title=\"Clone\"></a>Clone</h3><p>关于克隆的问题，请参考<a href=\"\">原型模式</a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span></span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>&#123;</div><div class=\"line\">\t\tTest test1 = <span class=\"keyword\">new</span> Test();</div><div class=\"line\">\t\tTest test2 = (Test) test1.clone();</div><div class=\"line\">\t\tSystem.out.println(test1);</div><div class=\"line\">\t\tSystem.out.println(test2);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Test@<span class=\"number\">2</span>a139a55</div><div class=\"line\">Test@<span class=\"number\">15</span>db9742</div></pre></td></tr></table></figure></p>\n<h3 id=\"反序列化\"><a href=\"#反序列化\" class=\"headerlink\" title=\"反序列化\"></a>反序列化</h3><p>关于序列化的问题，请参考<a href=\"https://sakuraffy.github.io/pattern_serializable/\">序列化机制</a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;                              </div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"haha\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> id;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception, IOException</span>&#123;    </div><div class=\"line\">\t\tFile file = <span class=\"keyword\">new</span> File(<span class=\"string\">\"data.txt\"</span>);</div><div class=\"line\">\t\tObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> FileOutputStream(file));</div><div class=\"line\">\t\tObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> FileInputStream(file));</div><div class=\"line\">\t\tUser user1 = <span class=\"keyword\">new</span> User(<span class=\"number\">1</span>);</div><div class=\"line\">\t\tSystem.out.println(user1);</div><div class=\"line\">\t\toos.writeObject(user1);</div><div class=\"line\">\t\toos.close();</div><div class=\"line\">\t\tUser user2 = (User) ois.readObject();</div><div class=\"line\">\t\tSystem.out.println(user2);</div><div class=\"line\">\t\tois.close();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">haha</div><div class=\"line\">Test$User@<span class=\"number\">2</span>a139a55</div><div class=\"line\">Test$User@<span class=\"number\">55f</span>96302</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>无论是哪一种创建方式，所创建的对象都是不同的。通过观察字节码，除了new采用INVOKESPECIAL，其余都是INVOKEVIRTUAL</p>\n</blockquote>"},{"title":"Objects的使用","date":"2016-09-16T03:07:04.000Z","_content":"我们知道Object是所有类的直接或间接父类，有时又会看到Objects这个类，那么它又是什么呢?\n\nObjects是java.util包下面的一个类，很明显是一个工具类，它主要处理的是与Object相关的操作\n{% qnimg java/objects/p1.png 'class:class1 class2' normal:yes %}\n\n通过上图可以看出，Objects没有公开的构造方法，所有的方法都为静态方法，那么我们调用就必须以Objects.的方式调用\n\n<!--more-->\n\n下面看一下几个有代表性的方法实现\n``` java\n\t//深度比较两个对象是否equals\n\tpublic static boolean deepEquals(Object a, Object b) {\n        if (a == b)\n            return true;\n        else if (a == null || b == null)\n            return false;\n        else\n            return Arrays.deepEquals0(a, b);\n    }\n\t\n\tpublic static boolean equals(Object a, Object b) {\n        return (a == b) || (a != null && a.equals(b));\n    }\n\t\n\t//采用可变参数，实际上也是调用数组的hashCode()方法                                                \n\tpublic static int hash(Object... values) {\n        return Arrays.hashCode(values);\n    }\n\t\n\t//判断Object对象是否为空\n\tpublic static boolean isNull(Object obj) {\n        return obj == null;\n    }\n\t\n\t//判断Object对象是否不为空\n\tpublic static boolean nonNull(Object obj) {\n        return obj != null;\n    }\n\t\n\t//要求Object对象不为空，否则抛出Exception\n\tpublic static <T> T requireNonNull(T obj) {\n        if (obj == null)\n            throw new NullPointerException();\n        return obj;\n    }\n```\n\n","source":"_posts/java_objects.md","raw":"---\ntitle: Objects的使用\ndate: 2016-09-16 11:07:04\ntags:\n\t- Java\n---\n我们知道Object是所有类的直接或间接父类，有时又会看到Objects这个类，那么它又是什么呢?\n\nObjects是java.util包下面的一个类，很明显是一个工具类，它主要处理的是与Object相关的操作\n{% qnimg java/objects/p1.png 'class:class1 class2' normal:yes %}\n\n通过上图可以看出，Objects没有公开的构造方法，所有的方法都为静态方法，那么我们调用就必须以Objects.的方式调用\n\n<!--more-->\n\n下面看一下几个有代表性的方法实现\n``` java\n\t//深度比较两个对象是否equals\n\tpublic static boolean deepEquals(Object a, Object b) {\n        if (a == b)\n            return true;\n        else if (a == null || b == null)\n            return false;\n        else\n            return Arrays.deepEquals0(a, b);\n    }\n\t\n\tpublic static boolean equals(Object a, Object b) {\n        return (a == b) || (a != null && a.equals(b));\n    }\n\t\n\t//采用可变参数，实际上也是调用数组的hashCode()方法                                                \n\tpublic static int hash(Object... values) {\n        return Arrays.hashCode(values);\n    }\n\t\n\t//判断Object对象是否为空\n\tpublic static boolean isNull(Object obj) {\n        return obj == null;\n    }\n\t\n\t//判断Object对象是否不为空\n\tpublic static boolean nonNull(Object obj) {\n        return obj != null;\n    }\n\t\n\t//要求Object对象不为空，否则抛出Exception\n\tpublic static <T> T requireNonNull(T obj) {\n        if (obj == null)\n            throw new NullPointerException();\n        return obj;\n    }\n```\n\n","slug":"java_objects","published":1,"updated":"2017-03-08T11:32:46.619Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5eb002tqoq1b4o3ve8i","content":"<p>我们知道Object是所有类的直接或间接父类，有时又会看到Objects这个类，那么它又是什么呢?</p>\n<p>Objects是java.util包下面的一个类，很明显是一个工具类，它主要处理的是与Object相关的操作<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/java/objects/p1.png\"></p>\n<p>通过上图可以看出，Objects没有公开的构造方法，所有的方法都为静态方法，那么我们调用就必须以Objects.的方式调用</p>\n<a id=\"more\"></a>\n<p>下面看一下几个有代表性的方法实现<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//深度比较两个对象是否equals</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">deepEquals</span><span class=\"params\">(Object a, Object b)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (a == b)</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">       <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a == <span class=\"keyword\">null</span> || b == <span class=\"keyword\">null</span>)</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">       <span class=\"keyword\">else</span></div><div class=\"line\">           <span class=\"keyword\">return</span> Arrays.deepEquals0(a, b);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object a, Object b)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> (a == b) || (a != <span class=\"keyword\">null</span> &amp;&amp; a.equals(b));</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//采用可变参数，实际上也是调用数组的hashCode()方法                                                </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(Object... values)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> Arrays.hashCode(values);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//判断Object对象是否为空</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isNull</span><span class=\"params\">(Object obj)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> obj == <span class=\"keyword\">null</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//判断Object对象是否不为空</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">nonNull</span><span class=\"params\">(Object obj)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> obj != <span class=\"keyword\">null</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//要求Object对象不为空，否则抛出Exception</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">requireNonNull</span><span class=\"params\">(T obj)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (obj == <span class=\"keyword\">null</span>)</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</div><div class=\"line\">       <span class=\"keyword\">return</span> obj;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>我们知道Object是所有类的直接或间接父类，有时又会看到Objects这个类，那么它又是什么呢?</p>\n<p>Objects是java.util包下面的一个类，很明显是一个工具类，它主要处理的是与Object相关的操作<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/java/objects/p1.png\"></p>\n<p>通过上图可以看出，Objects没有公开的构造方法，所有的方法都为静态方法，那么我们调用就必须以Objects.的方式调用</p>","more":"<p>下面看一下几个有代表性的方法实现<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//深度比较两个对象是否equals</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">deepEquals</span><span class=\"params\">(Object a, Object b)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (a == b)</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">       <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a == <span class=\"keyword\">null</span> || b == <span class=\"keyword\">null</span>)</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">       <span class=\"keyword\">else</span></div><div class=\"line\">           <span class=\"keyword\">return</span> Arrays.deepEquals0(a, b);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object a, Object b)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> (a == b) || (a != <span class=\"keyword\">null</span> &amp;&amp; a.equals(b));</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//采用可变参数，实际上也是调用数组的hashCode()方法                                                </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(Object... values)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> Arrays.hashCode(values);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//判断Object对象是否为空</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isNull</span><span class=\"params\">(Object obj)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> obj == <span class=\"keyword\">null</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//判断Object对象是否不为空</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">nonNull</span><span class=\"params\">(Object obj)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> obj != <span class=\"keyword\">null</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//要求Object对象不为空，否则抛出Exception</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">requireNonNull</span><span class=\"params\">(T obj)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (obj == <span class=\"keyword\">null</span>)</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</div><div class=\"line\">       <span class=\"keyword\">return</span> obj;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>"},{"title":"Java对象的四种创建方式","date":"2016-09-19T01:40:05.000Z","_content":"在Java编程，我们成天与对象打交道，但你又是否知道对象怎么创建，以及又有哪几种创建方式呢？\n\n一般认为对象的创建有四种方式 ： new关键字、利用反射、Clone以及反序列化\n\n### New\n\n这应该是大家最熟悉的\n``` java\n\tObject obj = new Object();\n```\n\n<!--more-->\n\n### 反射\n\n通过反射一般有两种方式 ： Class的newInstance()以及Constructor的newInstance()\n``` java\n\tpublic class Test{\n\t\n\t\tpublic static void main(String[] args) throws Exception {\n\t\t\tTest test1 = Test.class.newInstance();\n\t\t\tTest test2 = Test.class.getConstructor().newInstance();\n\t\t\tSystem.out.println(test1);\n\t\t\tSystem.out.println(test2);\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\nTest@2a139a55\nTest@15db9742\n```\n\n### Clone\n\n关于克隆的问题，请参考[原型模式]()\n``` java\n\tpublic class Test implements Cloneable{\n\t\tpublic static void main(String[] args) throws CloneNotSupportedException {\n\t\t\tTest test1 = new Test();\n\t\t\tTest test2 = (Test) test1.clone();\n\t\t\tSystem.out.println(test1);\n\t\t\tSystem.out.println(test2);\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\n\tTest@2a139a55\n\tTest@15db9742\n```\n\n### 反序列化\n\n关于序列化的问题，请参考[序列化机制](https://sakuraffy.github.io/pattern_serializable/)\n``` java\n\tpublic class Test{\n\t\tpublic static class User implements Serializable {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\n\t\t\tpublic User(int id) {\n\t\t\t\tSystem.out.println(\"haha\");\n\t\t\t\tthis.id = id;\n\t\t\t}\n\t\t\t\n\t\t\tprivate int id;\n\n\t\t\tpublic final int getId() {\n\t\t\t\treturn id;\n\t\t\t}\n\n\t\t\tpublic final void setId(int id) {\n\t\t\t\tthis.id = id;\n\t\t\t}\n\t\t\t\n\t\t}\n\n\t\tpublic static void main(String[] args) throws Exception, IOException{\n\t\t\tFile file = new File(\"data.txt\");\n\t\t\tObjectOutputStream oos = new ObjectOutputStream(\n\t\t\t\t\tnew FileOutputStream(file));\n\t\t\tObjectInputStream ois = new ObjectInputStream(\n\t\t\t\t\tnew FileInputStream(file));\n\t\t\tUser user1 = new User(1);\n\t\t\tSystem.out.println(user1);\n\t\t\toos.writeObject(user1);\n\t\t\toos.close();\n\t\t\tUser user2 = (User) ois.readObject();\n\t\t\tSystem.out.println(user2);\n\t\t\tois.close();\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\n\thaha\n\tTest$User@2a139a55\n\tTest$User@55f96302\n```\n\n这里值得注意的是：无论是哪一种创建方式，所创建的对象都是不同的。通过观察字节码，除了new采用INVOKESPECIAL，其余都是INVOKEVIRTUAL\n","source":"_posts/java_oject.md","raw":"---\ntitle: Java对象的四种创建方式\ndate: 2016-09-19 09:40:05\ntags:\n\t- java\n---\n在Java编程，我们成天与对象打交道，但你又是否知道对象怎么创建，以及又有哪几种创建方式呢？\n\n一般认为对象的创建有四种方式 ： new关键字、利用反射、Clone以及反序列化\n\n### New\n\n这应该是大家最熟悉的\n``` java\n\tObject obj = new Object();\n```\n\n<!--more-->\n\n### 反射\n\n通过反射一般有两种方式 ： Class的newInstance()以及Constructor的newInstance()\n``` java\n\tpublic class Test{\n\t\n\t\tpublic static void main(String[] args) throws Exception {\n\t\t\tTest test1 = Test.class.newInstance();\n\t\t\tTest test2 = Test.class.getConstructor().newInstance();\n\t\t\tSystem.out.println(test1);\n\t\t\tSystem.out.println(test2);\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\nTest@2a139a55\nTest@15db9742\n```\n\n### Clone\n\n关于克隆的问题，请参考[原型模式]()\n``` java\n\tpublic class Test implements Cloneable{\n\t\tpublic static void main(String[] args) throws CloneNotSupportedException {\n\t\t\tTest test1 = new Test();\n\t\t\tTest test2 = (Test) test1.clone();\n\t\t\tSystem.out.println(test1);\n\t\t\tSystem.out.println(test2);\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\n\tTest@2a139a55\n\tTest@15db9742\n```\n\n### 反序列化\n\n关于序列化的问题，请参考[序列化机制](https://sakuraffy.github.io/pattern_serializable/)\n``` java\n\tpublic class Test{\n\t\tpublic static class User implements Serializable {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\n\t\t\tpublic User(int id) {\n\t\t\t\tSystem.out.println(\"haha\");\n\t\t\t\tthis.id = id;\n\t\t\t}\n\t\t\t\n\t\t\tprivate int id;\n\n\t\t\tpublic final int getId() {\n\t\t\t\treturn id;\n\t\t\t}\n\n\t\t\tpublic final void setId(int id) {\n\t\t\t\tthis.id = id;\n\t\t\t}\n\t\t\t\n\t\t}\n\n\t\tpublic static void main(String[] args) throws Exception, IOException{\n\t\t\tFile file = new File(\"data.txt\");\n\t\t\tObjectOutputStream oos = new ObjectOutputStream(\n\t\t\t\t\tnew FileOutputStream(file));\n\t\t\tObjectInputStream ois = new ObjectInputStream(\n\t\t\t\t\tnew FileInputStream(file));\n\t\t\tUser user1 = new User(1);\n\t\t\tSystem.out.println(user1);\n\t\t\toos.writeObject(user1);\n\t\t\toos.close();\n\t\t\tUser user2 = (User) ois.readObject();\n\t\t\tSystem.out.println(user2);\n\t\t\tois.close();\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\n\thaha\n\tTest$User@2a139a55\n\tTest$User@55f96302\n```\n\n这里值得注意的是：无论是哪一种创建方式，所创建的对象都是不同的。通过观察字节码，除了new采用INVOKESPECIAL，其余都是INVOKEVIRTUAL\n","slug":"java_oject","published":1,"updated":"2017-03-08T11:32:42.270Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5ed002wqoq1fz959z2g","content":"<p>在Java编程，我们成天与对象打交道，但你又是否知道对象怎么创建，以及又有哪几种创建方式呢？</p>\n<p>一般认为对象的创建有四种方式 ： new关键字、利用反射、Clone以及反序列化</p>\n<h3 id=\"New\"><a href=\"#New\" class=\"headerlink\" title=\"New\"></a>New</h3><p>这应该是大家最熟悉的<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Object obj = <span class=\"keyword\">new</span> Object();</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h3 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h3><p>通过反射一般有两种方式 ： Class的newInstance()以及Constructor的newInstance()<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tTest test1 = Test.class.newInstance();</div><div class=\"line\">\t\tTest test2 = Test.class.getConstructor().newInstance();</div><div class=\"line\">\t\tSystem.out.println(test1);</div><div class=\"line\">\t\tSystem.out.println(test2);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Test@<span class=\"number\">2</span>a139a55</div><div class=\"line\">Test@<span class=\"number\">15</span>db9742</div></pre></td></tr></table></figure></p>\n<h3 id=\"Clone\"><a href=\"#Clone\" class=\"headerlink\" title=\"Clone\"></a>Clone</h3><p>关于克隆的问题，请参考<a href=\"\">原型模式</a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span></span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>&#123;</div><div class=\"line\">\t\tTest test1 = <span class=\"keyword\">new</span> Test();</div><div class=\"line\">\t\tTest test2 = (Test) test1.clone();</div><div class=\"line\">\t\tSystem.out.println(test1);</div><div class=\"line\">\t\tSystem.out.println(test2);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Test@<span class=\"number\">2</span>a139a55</div><div class=\"line\">Test@<span class=\"number\">15</span>db9742</div></pre></td></tr></table></figure></p>\n<h3 id=\"反序列化\"><a href=\"#反序列化\" class=\"headerlink\" title=\"反序列化\"></a>反序列化</h3><p>关于序列化的问题，请参考<a href=\"https://sakuraffy.github.io/pattern_serializable/\">序列化机制</a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"haha\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> id;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception, IOException</span>&#123;</div><div class=\"line\">\t\tFile file = <span class=\"keyword\">new</span> File(<span class=\"string\">\"data.txt\"</span>);</div><div class=\"line\">\t\tObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> FileOutputStream(file));</div><div class=\"line\">\t\tObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> FileInputStream(file));</div><div class=\"line\">\t\tUser user1 = <span class=\"keyword\">new</span> User(<span class=\"number\">1</span>);</div><div class=\"line\">\t\tSystem.out.println(user1);</div><div class=\"line\">\t\toos.writeObject(user1);</div><div class=\"line\">\t\toos.close();</div><div class=\"line\">\t\tUser user2 = (User) ois.readObject();</div><div class=\"line\">\t\tSystem.out.println(user2);</div><div class=\"line\">\t\tois.close();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">haha</div><div class=\"line\">Test$User@<span class=\"number\">2</span>a139a55</div><div class=\"line\">Test$User@<span class=\"number\">55f</span>96302</div></pre></td></tr></table></figure></p>\n<p>这里值得注意的是：无论是哪一种创建方式，所创建的对象都是不同的。通过观察字节码，除了new采用INVOKESPECIAL，其余都是INVOKEVIRTUAL</p>\n","excerpt":"<p>在Java编程，我们成天与对象打交道，但你又是否知道对象怎么创建，以及又有哪几种创建方式呢？</p>\n<p>一般认为对象的创建有四种方式 ： new关键字、利用反射、Clone以及反序列化</p>\n<h3 id=\"New\"><a href=\"#New\" class=\"headerlink\" title=\"New\"></a>New</h3><p>这应该是大家最熟悉的<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Object obj = <span class=\"keyword\">new</span> Object();</div></pre></td></tr></table></figure></p>","more":"<h3 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h3><p>通过反射一般有两种方式 ： Class的newInstance()以及Constructor的newInstance()<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tTest test1 = Test.class.newInstance();</div><div class=\"line\">\t\tTest test2 = Test.class.getConstructor().newInstance();</div><div class=\"line\">\t\tSystem.out.println(test1);</div><div class=\"line\">\t\tSystem.out.println(test2);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Test@<span class=\"number\">2</span>a139a55</div><div class=\"line\">Test@<span class=\"number\">15</span>db9742</div></pre></td></tr></table></figure></p>\n<h3 id=\"Clone\"><a href=\"#Clone\" class=\"headerlink\" title=\"Clone\"></a>Clone</h3><p>关于克隆的问题，请参考<a href=\"\">原型模式</a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span></span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>&#123;</div><div class=\"line\">\t\tTest test1 = <span class=\"keyword\">new</span> Test();</div><div class=\"line\">\t\tTest test2 = (Test) test1.clone();</div><div class=\"line\">\t\tSystem.out.println(test1);</div><div class=\"line\">\t\tSystem.out.println(test2);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Test@<span class=\"number\">2</span>a139a55</div><div class=\"line\">Test@<span class=\"number\">15</span>db9742</div></pre></td></tr></table></figure></p>\n<h3 id=\"反序列化\"><a href=\"#反序列化\" class=\"headerlink\" title=\"反序列化\"></a>反序列化</h3><p>关于序列化的问题，请参考<a href=\"https://sakuraffy.github.io/pattern_serializable/\">序列化机制</a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"haha\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> id;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception, IOException</span>&#123;</div><div class=\"line\">\t\tFile file = <span class=\"keyword\">new</span> File(<span class=\"string\">\"data.txt\"</span>);</div><div class=\"line\">\t\tObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> FileOutputStream(file));</div><div class=\"line\">\t\tObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> FileInputStream(file));</div><div class=\"line\">\t\tUser user1 = <span class=\"keyword\">new</span> User(<span class=\"number\">1</span>);</div><div class=\"line\">\t\tSystem.out.println(user1);</div><div class=\"line\">\t\toos.writeObject(user1);</div><div class=\"line\">\t\toos.close();</div><div class=\"line\">\t\tUser user2 = (User) ois.readObject();</div><div class=\"line\">\t\tSystem.out.println(user2);</div><div class=\"line\">\t\tois.close();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">haha</div><div class=\"line\">Test$User@<span class=\"number\">2</span>a139a55</div><div class=\"line\">Test$User@<span class=\"number\">55f</span>96302</div></pre></td></tr></table></figure></p>\n<p>这里值得注意的是：无论是哪一种创建方式，所创建的对象都是不同的。通过观察字节码，除了new采用INVOKESPECIAL，其余都是INVOKEVIRTUAL</p>"},{"title":"Java运算符","date":"2016-09-08T04:55:38.000Z","_content":"我们知道计算机最开始的时候就是用来计算的，对于Java来说有很多的运算符，有些我们还是要记一下的，虽说用我们所知的一样可以实现，但是性能却远远没有那么高。Java运算符一般分为算数运算符，关系运算符，位运算符，逻辑运算符，其他运算符。\n\n### 算数运算符\n\n算数运算符一般指 ： 加减乘除，取余、自增、自减，这里重点说一下自增\n\n<!--more-->\n\t\n``` java\n\tpackage cn.sakuraffy;\n\n\tpublic class Test {\n\t\tpublic static void main(String[] args) {\n\t\t\tint a = 0; \n\t\t\tint b = 0;\n\t\t\tint c = 0;\n\t\t\tint d = 0;\n\t\t\t// 先赋值，后增加\n\t\t\tc = a++;\n\t\t\t// 先增加，后赋值\n\t\t\td = ++b;\n\t\t\tSystem.out.println(a);\n\t\t\tSystem.out.println(b);\n\t\t\tSystem.out.println(c);\n\t\t\tSystem.out.println(d);\n\t\t}\n\t}\n```\n输出结果 ： \n``` java\n\t1\n\t1\n\t0\n\t1\n```\n\n### 关系运算符\n\n关系运算符一般指 ： 等于，大于，小于，不等于这些\n\n### 位运算符\n\n位运算符只能用于byte，char，short，int，long 这些数据类型，都是对其二进制数字进行操作\n\n#### 位与(&)\n\n按位与操作符，当且仅当两个操作数的某一位都非0时候结果的该位才为1\n\n#### 位或(|)\n\n按位或操作符，只要两个操作数的某一位有一个非0时候结果的该位就为1\n\n#### 位异或(^)\n\n按位异或操作符，两个操作数的某一位不相同时候结果的该位就为1\n\n#### 位非(~)\n\n按位补运算符翻转操作数的每一位\n\n#### 左移(<<)\n\n左侧操作数的值根据右侧操作数指定的位的数量移至左侧\n\n#### 右移(>>)\n\n左侧操作数的值根据右侧操作数指定的位的数量移至右侧\n\n#### 无符号右移(>>>)\n\n左侧操作数的值根据右侧操作数指定的位的数量移至右，并且转移的值用零补满\n\n这里先说一下负数的编码，我们知道以8位为例3的二进制为00000011，那么-3的二进制是不是10000011呢，因为首位表示正负嘛\n\n其实不是这样的，因为如果这样，那么计算时，加法和减法就有两套规则，而计算机采用的是补码的形式，那么又该怎么表示负数的编码呢？以8位-5为例步骤如下 ：\n1. 写出负数绝对值的二进制 -->  00000101\n2. 对每一位取反\t\t\t  -->  11111010\n3. 对取反的数加1\t\t  -->  11111011\n\n``` java\n\tpackage cn.sakuraffy;\n\n\tpublic class Test {\n\t\tpublic static void main(String[] args) {\n\t\t\tint a = 60;  // a = 0011 1100\n\t\t\tint b = 13;  // b = 0000 1101\n\t\t\tSystem.out.println(a & b); //00001100 = 12\n\t\t\tSystem.out.println(Integer.toBinaryString(a & b));\n\t\t\t\n\t\t\tSystem.out.println(a | b); //00111101 = 61\n\t\t\tSystem.out.println(Integer.toBinaryString(a | b));\n\t\t\t\n\t\t\tSystem.out.println(a ^ b); //00110001 = 49\n\t\t\tSystem.out.println(Integer.toBinaryString(a ^ b));\n\t\t\t\n\t\t\tSystem.out.println(~a);    //11000011 = -61\n\t\t\tSystem.out.println(Integer.toBinaryString(~a));\n\t\t\t\n\t\t\tint c = 16;\n\t\t\tint d = -16;\n\t\t\tSystem.out.println(c >> 2); //4\n\t\t\tSystem.out.println(c << 2); //64\n\t\t\tSystem.out.println(c >>> 2); // 4\n\t\t\t\n\t\t\tSystem.out.println(d >> 2); //-4\n\t\t\tSystem.out.println(d << 2); //-64\n\t\t\tSystem.out.println(d >>> 2); // 1073741820\n\t\t\t\n\t\t}\n\t}\n```\n\n### 逻辑运算符\n\n逻辑运算符一般指 ： \n&&(且)  \n||(或)\n！(非)","source":"_posts/java_operator.md","raw":"---\ntitle: Java运算符\ndate: 2016-09-08 12:55:38\ntags:\n\t- Java\n---\n我们知道计算机最开始的时候就是用来计算的，对于Java来说有很多的运算符，有些我们还是要记一下的，虽说用我们所知的一样可以实现，但是性能却远远没有那么高。Java运算符一般分为算数运算符，关系运算符，位运算符，逻辑运算符，其他运算符。\n\n### 算数运算符\n\n算数运算符一般指 ： 加减乘除，取余、自增、自减，这里重点说一下自增\n\n<!--more-->\n\t\n``` java\n\tpackage cn.sakuraffy;\n\n\tpublic class Test {\n\t\tpublic static void main(String[] args) {\n\t\t\tint a = 0; \n\t\t\tint b = 0;\n\t\t\tint c = 0;\n\t\t\tint d = 0;\n\t\t\t// 先赋值，后增加\n\t\t\tc = a++;\n\t\t\t// 先增加，后赋值\n\t\t\td = ++b;\n\t\t\tSystem.out.println(a);\n\t\t\tSystem.out.println(b);\n\t\t\tSystem.out.println(c);\n\t\t\tSystem.out.println(d);\n\t\t}\n\t}\n```\n输出结果 ： \n``` java\n\t1\n\t1\n\t0\n\t1\n```\n\n### 关系运算符\n\n关系运算符一般指 ： 等于，大于，小于，不等于这些\n\n### 位运算符\n\n位运算符只能用于byte，char，short，int，long 这些数据类型，都是对其二进制数字进行操作\n\n#### 位与(&)\n\n按位与操作符，当且仅当两个操作数的某一位都非0时候结果的该位才为1\n\n#### 位或(|)\n\n按位或操作符，只要两个操作数的某一位有一个非0时候结果的该位就为1\n\n#### 位异或(^)\n\n按位异或操作符，两个操作数的某一位不相同时候结果的该位就为1\n\n#### 位非(~)\n\n按位补运算符翻转操作数的每一位\n\n#### 左移(<<)\n\n左侧操作数的值根据右侧操作数指定的位的数量移至左侧\n\n#### 右移(>>)\n\n左侧操作数的值根据右侧操作数指定的位的数量移至右侧\n\n#### 无符号右移(>>>)\n\n左侧操作数的值根据右侧操作数指定的位的数量移至右，并且转移的值用零补满\n\n这里先说一下负数的编码，我们知道以8位为例3的二进制为00000011，那么-3的二进制是不是10000011呢，因为首位表示正负嘛\n\n其实不是这样的，因为如果这样，那么计算时，加法和减法就有两套规则，而计算机采用的是补码的形式，那么又该怎么表示负数的编码呢？以8位-5为例步骤如下 ：\n1. 写出负数绝对值的二进制 -->  00000101\n2. 对每一位取反\t\t\t  -->  11111010\n3. 对取反的数加1\t\t  -->  11111011\n\n``` java\n\tpackage cn.sakuraffy;\n\n\tpublic class Test {\n\t\tpublic static void main(String[] args) {\n\t\t\tint a = 60;  // a = 0011 1100\n\t\t\tint b = 13;  // b = 0000 1101\n\t\t\tSystem.out.println(a & b); //00001100 = 12\n\t\t\tSystem.out.println(Integer.toBinaryString(a & b));\n\t\t\t\n\t\t\tSystem.out.println(a | b); //00111101 = 61\n\t\t\tSystem.out.println(Integer.toBinaryString(a | b));\n\t\t\t\n\t\t\tSystem.out.println(a ^ b); //00110001 = 49\n\t\t\tSystem.out.println(Integer.toBinaryString(a ^ b));\n\t\t\t\n\t\t\tSystem.out.println(~a);    //11000011 = -61\n\t\t\tSystem.out.println(Integer.toBinaryString(~a));\n\t\t\t\n\t\t\tint c = 16;\n\t\t\tint d = -16;\n\t\t\tSystem.out.println(c >> 2); //4\n\t\t\tSystem.out.println(c << 2); //64\n\t\t\tSystem.out.println(c >>> 2); // 4\n\t\t\t\n\t\t\tSystem.out.println(d >> 2); //-4\n\t\t\tSystem.out.println(d << 2); //-64\n\t\t\tSystem.out.println(d >>> 2); // 1073741820\n\t\t\t\n\t\t}\n\t}\n```\n\n### 逻辑运算符\n\n逻辑运算符一般指 ： \n&&(且)  \n||(或)\n！(非)","slug":"java_operator","published":1,"updated":"2017-03-08T11:32:33.400Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5ee002yqoq1hoo24ers","content":"<p>我们知道计算机最开始的时候就是用来计算的，对于Java来说有很多的运算符，有些我们还是要记一下的，虽说用我们所知的一样可以实现，但是性能却远远没有那么高。Java运算符一般分为算数运算符，关系运算符，位运算符，逻辑运算符，其他运算符。</p>\n<h3 id=\"算数运算符\"><a href=\"#算数运算符\" class=\"headerlink\" title=\"算数运算符\"></a>算数运算符</h3><p>算数运算符一般指 ： 加减乘除，取余、自增、自减，这里重点说一下自增</p>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> a = <span class=\"number\">0</span>; </div><div class=\"line\">\t\t<span class=\"keyword\">int</span> b = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> c = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> d = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"comment\">// 先赋值，后增加</span></div><div class=\"line\">\t\tc = a++;</div><div class=\"line\">\t\t<span class=\"comment\">// 先增加，后赋值</span></div><div class=\"line\">\t\td = ++b;</div><div class=\"line\">\t\tSystem.out.println(a);</div><div class=\"line\">\t\tSystem.out.println(b);</div><div class=\"line\">\t\tSystem.out.println(c);</div><div class=\"line\">\t\tSystem.out.println(d);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">0</span></div><div class=\"line\"><span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h3><p>关系运算符一般指 ： 等于，大于，小于，不等于这些</p>\n<h3 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h3><p>位运算符只能用于byte，char，short，int，long 这些数据类型，都是对其二进制数字进行操作</p>\n<h4 id=\"位与-amp\"><a href=\"#位与-amp\" class=\"headerlink\" title=\"位与(&amp;)\"></a>位与(&amp;)</h4><p>按位与操作符，当且仅当两个操作数的某一位都非0时候结果的该位才为1</p>\n<h4 id=\"位或\"><a href=\"#位或\" class=\"headerlink\" title=\"位或(|)\"></a>位或(|)</h4><p>按位或操作符，只要两个操作数的某一位有一个非0时候结果的该位就为1</p>\n<h4 id=\"位异或\"><a href=\"#位异或\" class=\"headerlink\" title=\"位异或(^)\"></a>位异或(^)</h4><p>按位异或操作符，两个操作数的某一位不相同时候结果的该位就为1</p>\n<h4 id=\"位非\"><a href=\"#位非\" class=\"headerlink\" title=\"位非(~)\"></a>位非(~)</h4><p>按位补运算符翻转操作数的每一位</p>\n<h4 id=\"左移-lt-lt\"><a href=\"#左移-lt-lt\" class=\"headerlink\" title=\"左移(&lt;&lt;)\"></a>左移(&lt;&lt;)</h4><p>左侧操作数的值根据右侧操作数指定的位的数量移至左侧</p>\n<h4 id=\"右移-gt-gt\"><a href=\"#右移-gt-gt\" class=\"headerlink\" title=\"右移(&gt;&gt;)\"></a>右移(&gt;&gt;)</h4><p>左侧操作数的值根据右侧操作数指定的位的数量移至右侧</p>\n<h4 id=\"无符号右移-gt-gt-gt\"><a href=\"#无符号右移-gt-gt-gt\" class=\"headerlink\" title=\"无符号右移(&gt;&gt;&gt;)\"></a>无符号右移(&gt;&gt;&gt;)</h4><p>左侧操作数的值根据右侧操作数指定的位的数量移至右，并且转移的值用零补满</p>\n<p>这里先说一下负数的编码，我们知道以8位为例3的二进制为00000011，那么-3的二进制是不是10000011呢，因为首位表示正负嘛</p>\n<p>其实不是这样的，因为如果这样，那么计算时，加法和减法就有两套规则，而计算机采用的是补码的形式，那么又该怎么表示负数的编码呢？以8位-5为例步骤如下 ：</p>\n<ol>\n<li>写出负数绝对值的二进制 –&gt;  00000101</li>\n<li>对每一位取反              –&gt;  11111010</li>\n<li>对取反的数加1          –&gt;  11111011</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> a = <span class=\"number\">60</span>;  <span class=\"comment\">// a = 0011 1100</span></div><div class=\"line\">\t\t<span class=\"keyword\">int</span> b = <span class=\"number\">13</span>;  <span class=\"comment\">// b = 0000 1101</span></div><div class=\"line\">\t\tSystem.out.println(a &amp; b); <span class=\"comment\">//00001100 = 12</span></div><div class=\"line\">\t\tSystem.out.println(Integer.toBinaryString(a &amp; b));</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(a | b); <span class=\"comment\">//00111101 = 61</span></div><div class=\"line\">\t\tSystem.out.println(Integer.toBinaryString(a | b));</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(a ^ b); <span class=\"comment\">//00110001 = 49</span></div><div class=\"line\">\t\tSystem.out.println(Integer.toBinaryString(a ^ b));</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(~a);    <span class=\"comment\">//11000011 = -61</span></div><div class=\"line\">\t\tSystem.out.println(Integer.toBinaryString(~a));</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> c = <span class=\"number\">16</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> d = -<span class=\"number\">16</span>;</div><div class=\"line\">\t\tSystem.out.println(c &gt;&gt; <span class=\"number\">2</span>); <span class=\"comment\">//4</span></div><div class=\"line\">\t\tSystem.out.println(c &lt;&lt; <span class=\"number\">2</span>); <span class=\"comment\">//64</span></div><div class=\"line\">\t\tSystem.out.println(c &gt;&gt;&gt; <span class=\"number\">2</span>); <span class=\"comment\">// 4</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(d &gt;&gt; <span class=\"number\">2</span>); <span class=\"comment\">//-4</span></div><div class=\"line\">\t\tSystem.out.println(d &lt;&lt; <span class=\"number\">2</span>); <span class=\"comment\">//-64</span></div><div class=\"line\">\t\tSystem.out.println(d &gt;&gt;&gt; <span class=\"number\">2</span>); <span class=\"comment\">// 1073741820</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><p>逻辑运算符一般指 ：<br>&amp;&amp;(且)<br>||(或)<br>！(非)</p>\n","excerpt":"<p>我们知道计算机最开始的时候就是用来计算的，对于Java来说有很多的运算符，有些我们还是要记一下的，虽说用我们所知的一样可以实现，但是性能却远远没有那么高。Java运算符一般分为算数运算符，关系运算符，位运算符，逻辑运算符，其他运算符。</p>\n<h3 id=\"算数运算符\"><a href=\"#算数运算符\" class=\"headerlink\" title=\"算数运算符\"></a>算数运算符</h3><p>算数运算符一般指 ： 加减乘除，取余、自增、自减，这里重点说一下自增</p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> a = <span class=\"number\">0</span>; </div><div class=\"line\">\t\t<span class=\"keyword\">int</span> b = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> c = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> d = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"comment\">// 先赋值，后增加</span></div><div class=\"line\">\t\tc = a++;</div><div class=\"line\">\t\t<span class=\"comment\">// 先增加，后赋值</span></div><div class=\"line\">\t\td = ++b;</div><div class=\"line\">\t\tSystem.out.println(a);</div><div class=\"line\">\t\tSystem.out.println(b);</div><div class=\"line\">\t\tSystem.out.println(c);</div><div class=\"line\">\t\tSystem.out.println(d);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">0</span></div><div class=\"line\"><span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h3><p>关系运算符一般指 ： 等于，大于，小于，不等于这些</p>\n<h3 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h3><p>位运算符只能用于byte，char，short，int，long 这些数据类型，都是对其二进制数字进行操作</p>\n<h4 id=\"位与-amp\"><a href=\"#位与-amp\" class=\"headerlink\" title=\"位与(&amp;)\"></a>位与(&amp;)</h4><p>按位与操作符，当且仅当两个操作数的某一位都非0时候结果的该位才为1</p>\n<h4 id=\"位或\"><a href=\"#位或\" class=\"headerlink\" title=\"位或(|)\"></a>位或(|)</h4><p>按位或操作符，只要两个操作数的某一位有一个非0时候结果的该位就为1</p>\n<h4 id=\"位异或\"><a href=\"#位异或\" class=\"headerlink\" title=\"位异或(^)\"></a>位异或(^)</h4><p>按位异或操作符，两个操作数的某一位不相同时候结果的该位就为1</p>\n<h4 id=\"位非\"><a href=\"#位非\" class=\"headerlink\" title=\"位非(~)\"></a>位非(~)</h4><p>按位补运算符翻转操作数的每一位</p>\n<h4 id=\"左移-lt-lt\"><a href=\"#左移-lt-lt\" class=\"headerlink\" title=\"左移(&lt;&lt;)\"></a>左移(&lt;&lt;)</h4><p>左侧操作数的值根据右侧操作数指定的位的数量移至左侧</p>\n<h4 id=\"右移-gt-gt\"><a href=\"#右移-gt-gt\" class=\"headerlink\" title=\"右移(&gt;&gt;)\"></a>右移(&gt;&gt;)</h4><p>左侧操作数的值根据右侧操作数指定的位的数量移至右侧</p>\n<h4 id=\"无符号右移-gt-gt-gt\"><a href=\"#无符号右移-gt-gt-gt\" class=\"headerlink\" title=\"无符号右移(&gt;&gt;&gt;)\"></a>无符号右移(&gt;&gt;&gt;)</h4><p>左侧操作数的值根据右侧操作数指定的位的数量移至右，并且转移的值用零补满</p>\n<p>这里先说一下负数的编码，我们知道以8位为例3的二进制为00000011，那么-3的二进制是不是10000011呢，因为首位表示正负嘛</p>\n<p>其实不是这样的，因为如果这样，那么计算时，加法和减法就有两套规则，而计算机采用的是补码的形式，那么又该怎么表示负数的编码呢？以8位-5为例步骤如下 ：</p>\n<ol>\n<li>写出负数绝对值的二进制 –&gt;  00000101</li>\n<li>对每一位取反              –&gt;  11111010</li>\n<li>对取反的数加1          –&gt;  11111011</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> a = <span class=\"number\">60</span>;  <span class=\"comment\">// a = 0011 1100</span></div><div class=\"line\">\t\t<span class=\"keyword\">int</span> b = <span class=\"number\">13</span>;  <span class=\"comment\">// b = 0000 1101</span></div><div class=\"line\">\t\tSystem.out.println(a &amp; b); <span class=\"comment\">//00001100 = 12</span></div><div class=\"line\">\t\tSystem.out.println(Integer.toBinaryString(a &amp; b));</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(a | b); <span class=\"comment\">//00111101 = 61</span></div><div class=\"line\">\t\tSystem.out.println(Integer.toBinaryString(a | b));</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(a ^ b); <span class=\"comment\">//00110001 = 49</span></div><div class=\"line\">\t\tSystem.out.println(Integer.toBinaryString(a ^ b));</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(~a);    <span class=\"comment\">//11000011 = -61</span></div><div class=\"line\">\t\tSystem.out.println(Integer.toBinaryString(~a));</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> c = <span class=\"number\">16</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> d = -<span class=\"number\">16</span>;</div><div class=\"line\">\t\tSystem.out.println(c &gt;&gt; <span class=\"number\">2</span>); <span class=\"comment\">//4</span></div><div class=\"line\">\t\tSystem.out.println(c &lt;&lt; <span class=\"number\">2</span>); <span class=\"comment\">//64</span></div><div class=\"line\">\t\tSystem.out.println(c &gt;&gt;&gt; <span class=\"number\">2</span>); <span class=\"comment\">// 4</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(d &gt;&gt; <span class=\"number\">2</span>); <span class=\"comment\">//-4</span></div><div class=\"line\">\t\tSystem.out.println(d &lt;&lt; <span class=\"number\">2</span>); <span class=\"comment\">//-64</span></div><div class=\"line\">\t\tSystem.out.println(d &gt;&gt;&gt; <span class=\"number\">2</span>); <span class=\"comment\">// 1073741820</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><p>逻辑运算符一般指 ：<br>&amp;&amp;(且)<br>||(或)<br>！(非)</p>"},{"title":"序列化机制","date":"2016-09-05T04:55:38.000Z","_content":"这几天看IO的时候，需要将对象保存起来，就想起了java的序列化机制，下面我就谈谈关于自己对序列化的理解。\n\n\n### 什么是序列化 \n\nJava平台允许我们在内存中创建和使用对象，当JVM运行时，这些对象才有可能存在，一旦JVM停止运行，这些对象将不复存在，可是实际应用中，我们经常需要在JVM停止运行后，还需要保存这些对象，用于以后重新读取。序列化机制就为我们解决了这个问题。简单的说，序列化就是将对象写进文本之类的地方。\n\n\n### 序列化怎么实现 \n\n对于java来说，实现序列化的方式有两种，一种是实现Serializable,另一种是实现Externalizable。\n\n<!--more-->\n\n#### Serializable \n\nSerializable只是一个标记型接口，只要一个类实现java.lang.io.Serializable,那么它就会被序列化，下面就写个类User，以后都会围绕这个类进行修改\n\n``` java\n\timport java.io.Serializable;\n\n\tpublic class User implements Serializable{\n\n\t\tprivate static final long serialVersionUID = 1L;\n\t\t\n\t\tprivate int id;\n\t\tprivate static transient String name;\n\t\tprivate transient int age;\n\t\tprivate static String address;\n\t\t\n\t\tpublic User(int id, String name, int age,String address) {\n\t\t\tsuper();\n\t\t\tthis.id = id;\n\t\t\tUser.name = name;\n\t\t\tthis.age = age;\n\t\t\tUser.address = address;\n\t\t}\n\t\t\n\t\tpublic final int getId() {\n\t\t\treturn id;\n\t\t}\n\t\tpublic final void setId(int id) {\n\t\t\tthis.id = id;\n\t\t}\n\t\tpublic final String getName() {\n\t\t\treturn name;\n\t\t}\n\t\tpublic final void setName(String name) {\n\t\t\tUser.name = name;\n\t\t}\n\t\tpublic final int getAge() {\n\t\t\treturn age;\n\t\t}\n\t\tpublic final void setAge(int age) {\n\t\t\tthis.age = age;\n\t\t}\n\t\tpublic final String getAddress() {\n\t\t\treturn address;\n\t\t}\n\t\tpublic final void setAddress(String address) {\n\t\t\tUser.address = address;\n\t\t}\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn \"User [id=\" + id + \", name=\" + User.name + \", age=\" + age + \", address=\"\n\t\t\t\t\t+ User.address +  \"]\";\n\t\t}\n\t\t\n\t\t\n\t}\n```\n\t\t\nTestSerial，是一个简单的序列化程序，它先将一个User对象保存到文件user.txt中，然后再从该文件中读出被存储的User对象，并打印该对象。\n\t\t\n``` java\n\timport java.io.File;\n\timport java.io.FileInputStream;\n\timport java.io.FileOutputStream;\n\timport java.io.ObjectInputStream;\n\timport java.io.ObjectOutputStream;\n\n\n\tpublic class TestSerial {\n\t\tpublic static void main(String[] args) throws Exception{                              \n\t\t\tFile file = new File(\"user.txt\");\n\t\t\tObjectOutputStream oos = new ObjectOutputStream(\n\t\t\t\t\tnew FileOutputStream(file));\n\t\t\tUser user = new User(1,\"sakaraffy\",100,\"HEB\");\n\t\t\t\n\t\t\t//修改全局变量address,name   \n\t\t\tuser.setAddress(\"WH\");\n\t\t\tuser.setName(\"cy\");\n\t\t\t\n\t\t\toos.writeObject(user);\n\t\t\toos.close();\n\t\t\t\n\t\t\tObjectInputStream ois = new ObjectInputStream(\n\t\t\t\t\tnew FileInputStream(file));\n\t\t\tUser newUser = (User) ois.readObject();\n\t\t\tois.close();\n\t\t\t//被static修饰的属性每次都会去全局区内取值\n\t\t\tSystem.out.println(newUser);\n\t\t}\n\t}\n\n```\n\t\t\n输出结果 ：\n``` java\nUser [id=1, name=cy, age=0, address=WH]\n```\n\t\t\n下面就来解析一下代码\n- 如果User没有实现Serializable接口,会抛出NotSerializableException。\n- User类所有的非基本数据类型属性必须实现Serializable接口，会抛出NotSerializableException。\n- transient 关键字 ： \t\t\n\t当属性被transient关键词所修饰序列化机制就会忽略该字段，这就是为什么age=0的原因。\n- static 关键字 : \n我们知道，被static关键词所修饰的属性，那么它就不再是每个对象所独立拥有，而是整个类所拥有，而序列化所解决的是保存对象数据，所以被static修饰无论是否再被transient所修饰，该字段都不会被序列化，这就是name和address属性产生该结果的原因\t\t\t\t\n\t\t\n#### Externalizable \n\n从上面，我们可以知道，实现了Serializable接口，它会默认地将所有字段都序列化，可是有时候我们只需要序列化个别字段，那么这个时候由该怎么办呢？\n- 将所有不被序列化的字段加上tranisent修饰词\n- 实现 Externalizable 接口\n\t\t\n``` java \n\timport java.io.Externalizable;\n\timport java.io.IOException;\n\timport java.io.ObjectInput;\n\timport java.io.ObjectOutput;\n\n\tpublic class User implements Externalizable{\n\n\t\tprivate static final long serialVersionUID = 1L;\n\n\t\tprivate int id;\n\t\tprivate static transient String name;\n\t\tprivate transient int age;\n\t\tprivate static String address;\n\n\t\tpublic User() {\n\t\t// TODO Auto-generated constructor stub\n\t\t}\n\n\t\tpublic User(int id, String name, int age,String address) {\n\t\t\tsuper();\n\t\t\tthis.id = id;\n\t\t\tUser.name = name;\n\t\t\tthis.age = age;\n\t\t\tUser.address = address;\n\t\t}\n\n\t\tpublic final int getId() {\n\t\t\treturn id;\n\t\t}\n\t\tpublic final void setId(int id) {\n\t\t\tthis.id = id;\n\t\t}\n\t\tpublic final String getName() {\n\t\t\treturn name;\n\t\t}\n\t\tpublic final void setName(String name) {\n\t\t\tUser.name = name;\n\t\t}\n\t\tpublic final int getAge() {\n\t\t\treturn age;\n\t\t}\n\t\tpublic final void setAge(int age) {\n\t\t\tthis.age = age;\n\t\t}\n\t\tpublic final String getAddress() {\n\t\t\treturn address;\n\t\t}\n\t\tpublic final void setAddress(String address) {\n\t\t\tUser.address = address;\n\t\t}\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn \"User [id=\" + id + \", name=\" + User.name + \", age=\" + age + \", address=\"\n\t\t\t\t+ User.address +  \"]\";\n\t\t}\n\n\t\t@Override\n\t\tpublic void writeExternal(ObjectOutput out) throws IOException {\n\t\t\t// TODO Auto-generated method stub\n\t\t\tout.writeInt(id);\n\t\t\tout.writeInt(age);\n\t\t\tout.writeObject(name);\n\t\t}\n\n\t\t@Override\n\t\tpublic void readExternal(ObjectInput in) throws IOException,\n\t\t\tClassNotFoundException {\n\t\t\t// TODO Auto-generated method stub\n\t\t\tid = in.readInt();\n\t\t\tage = in.readInt();\n\t\t\tname = (String) in.readObject();\n\t\t}\n\t}\n```\n\n再次运行TestSerial,输出结果：\n``` java\nUser [id=1, name=sakaraffy, age=100, address=HEB]\n```\n\n下面就来解析一下代码\n- 实现Externalizable接口，必须实现readExternal(ObjectInput in)和writeExternal(ObjectOutput out)\n- 实现Externalizable接口，必须要有一个空的构造方法，否则会抛出java.io.InvalidClassException。\n- 因为该对象是一个属性，一个属性保存，所以无论该属性是否被transient关键词修饰，都会被序列化。\n- readExternal(ObjectInput in)和writeExternal(ObjectOutput out)操作字段的顺序一定要一致\n\n### readResolve() 单例模式中使用\n\n当反序列化，也就是说从保存文件读取对象的时候，如果实体里写了这个方法，读取对象时，以这个方法为主，即有新对象产生，原对象就会被吸附。\n\n``` java\n\tprivate Object readResolve() throws ObjectStreamException{\n\t\treturn new User(2,\"cy\",18,\"Anlu\");\n\t}\n```\n\n在User中加入以上代码，在运行TestSerial,输出结果：\n``` java\nUser [id=2, name=cy, age=18, address=Anlu]\n```\n\n### 序列化对象存储方式 \n\n``` java\n\timport java.io.File;\n\timport java.io.FileInputStream;\n\timport java.io.FileOutputStream;\n\timport java.io.ObjectInputStream;\n\timport java.io.ObjectOutputStream;\n\n\n\tpublic class TestSerial {\n\tpublic static void main(String[] args) throws Exception{\n\t\tFile file = new File(\"user.txt\");\n\t\tObjectOutputStream oos = new ObjectOutputStream(\n\t\t\t\tnew FileOutputStream(file));\n\t\tUser user = new User(1,\"sakaraffy\",100,\"HEB\");\n\t\toos.writeObject(user);\n\t\toos.flush();\n\t\tSystem.out.println(file.length());\n\t\t\n\t\t//java 在写入对象的时候，如果对象已经写入，则此次修改操作无效，还是原对象的内容      \n\t\tuser.setId(0);\n\t\toos.writeObject(user);\n\t\toos.flush();\n\t\tSystem.out.println(file.length());\n\t\t\n\t\toos.close();\n\t\t\n\t\tObjectInputStream ois = new ObjectInputStream(\n\t\t\t\tnew FileInputStream(file));\n\t\t\n\t\tUser newUser1 = (User) ois.readObject();\n\t\tUser newUser2 = (User) ois.readObject();\n\t\t\n\t\tois.close();\n\t\tSystem.out.println(newUser1);\n\t\tSystem.out.println(newUser2);\n\t\tSystem.out.println(newUser1 == newUser2);\n\t}\n}\n```\n\n输出结果：\n``` java\n48\n53\nUser [id=1, name=sakaraffy, age=100, address=HEB]\nUser [id=1, name=sakaraffy, age=100, address=HEB]\ntrue\n```\n\n下面就来解析一下代码：\t\t  序列化机制为了节省磁盘空间，具有特定的存储规则，当写入文件的为同一对象时，并不会再将对象的内容进行存储，而只是再次存储一份引用，增加的5 字节新增引用\n反序列化时，恢复引用关系，使得清单 3 中的 u1和 u2 指向唯一的对象，二者相等，输出 true。该存储规则极大的节省了存储空间。","source":"_posts/java_serializable.md","raw":"---\ntitle: 序列化机制\ndate: 2016-09-05 12:55:38\ntags: \n\t- Java\n---\n这几天看IO的时候，需要将对象保存起来，就想起了java的序列化机制，下面我就谈谈关于自己对序列化的理解。\n\n\n### 什么是序列化 \n\nJava平台允许我们在内存中创建和使用对象，当JVM运行时，这些对象才有可能存在，一旦JVM停止运行，这些对象将不复存在，可是实际应用中，我们经常需要在JVM停止运行后，还需要保存这些对象，用于以后重新读取。序列化机制就为我们解决了这个问题。简单的说，序列化就是将对象写进文本之类的地方。\n\n\n### 序列化怎么实现 \n\n对于java来说，实现序列化的方式有两种，一种是实现Serializable,另一种是实现Externalizable。\n\n<!--more-->\n\n#### Serializable \n\nSerializable只是一个标记型接口，只要一个类实现java.lang.io.Serializable,那么它就会被序列化，下面就写个类User，以后都会围绕这个类进行修改\n\n``` java\n\timport java.io.Serializable;\n\n\tpublic class User implements Serializable{\n\n\t\tprivate static final long serialVersionUID = 1L;\n\t\t\n\t\tprivate int id;\n\t\tprivate static transient String name;\n\t\tprivate transient int age;\n\t\tprivate static String address;\n\t\t\n\t\tpublic User(int id, String name, int age,String address) {\n\t\t\tsuper();\n\t\t\tthis.id = id;\n\t\t\tUser.name = name;\n\t\t\tthis.age = age;\n\t\t\tUser.address = address;\n\t\t}\n\t\t\n\t\tpublic final int getId() {\n\t\t\treturn id;\n\t\t}\n\t\tpublic final void setId(int id) {\n\t\t\tthis.id = id;\n\t\t}\n\t\tpublic final String getName() {\n\t\t\treturn name;\n\t\t}\n\t\tpublic final void setName(String name) {\n\t\t\tUser.name = name;\n\t\t}\n\t\tpublic final int getAge() {\n\t\t\treturn age;\n\t\t}\n\t\tpublic final void setAge(int age) {\n\t\t\tthis.age = age;\n\t\t}\n\t\tpublic final String getAddress() {\n\t\t\treturn address;\n\t\t}\n\t\tpublic final void setAddress(String address) {\n\t\t\tUser.address = address;\n\t\t}\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn \"User [id=\" + id + \", name=\" + User.name + \", age=\" + age + \", address=\"\n\t\t\t\t\t+ User.address +  \"]\";\n\t\t}\n\t\t\n\t\t\n\t}\n```\n\t\t\nTestSerial，是一个简单的序列化程序，它先将一个User对象保存到文件user.txt中，然后再从该文件中读出被存储的User对象，并打印该对象。\n\t\t\n``` java\n\timport java.io.File;\n\timport java.io.FileInputStream;\n\timport java.io.FileOutputStream;\n\timport java.io.ObjectInputStream;\n\timport java.io.ObjectOutputStream;\n\n\n\tpublic class TestSerial {\n\t\tpublic static void main(String[] args) throws Exception{                              \n\t\t\tFile file = new File(\"user.txt\");\n\t\t\tObjectOutputStream oos = new ObjectOutputStream(\n\t\t\t\t\tnew FileOutputStream(file));\n\t\t\tUser user = new User(1,\"sakaraffy\",100,\"HEB\");\n\t\t\t\n\t\t\t//修改全局变量address,name   \n\t\t\tuser.setAddress(\"WH\");\n\t\t\tuser.setName(\"cy\");\n\t\t\t\n\t\t\toos.writeObject(user);\n\t\t\toos.close();\n\t\t\t\n\t\t\tObjectInputStream ois = new ObjectInputStream(\n\t\t\t\t\tnew FileInputStream(file));\n\t\t\tUser newUser = (User) ois.readObject();\n\t\t\tois.close();\n\t\t\t//被static修饰的属性每次都会去全局区内取值\n\t\t\tSystem.out.println(newUser);\n\t\t}\n\t}\n\n```\n\t\t\n输出结果 ：\n``` java\nUser [id=1, name=cy, age=0, address=WH]\n```\n\t\t\n下面就来解析一下代码\n- 如果User没有实现Serializable接口,会抛出NotSerializableException。\n- User类所有的非基本数据类型属性必须实现Serializable接口，会抛出NotSerializableException。\n- transient 关键字 ： \t\t\n\t当属性被transient关键词所修饰序列化机制就会忽略该字段，这就是为什么age=0的原因。\n- static 关键字 : \n我们知道，被static关键词所修饰的属性，那么它就不再是每个对象所独立拥有，而是整个类所拥有，而序列化所解决的是保存对象数据，所以被static修饰无论是否再被transient所修饰，该字段都不会被序列化，这就是name和address属性产生该结果的原因\t\t\t\t\n\t\t\n#### Externalizable \n\n从上面，我们可以知道，实现了Serializable接口，它会默认地将所有字段都序列化，可是有时候我们只需要序列化个别字段，那么这个时候由该怎么办呢？\n- 将所有不被序列化的字段加上tranisent修饰词\n- 实现 Externalizable 接口\n\t\t\n``` java \n\timport java.io.Externalizable;\n\timport java.io.IOException;\n\timport java.io.ObjectInput;\n\timport java.io.ObjectOutput;\n\n\tpublic class User implements Externalizable{\n\n\t\tprivate static final long serialVersionUID = 1L;\n\n\t\tprivate int id;\n\t\tprivate static transient String name;\n\t\tprivate transient int age;\n\t\tprivate static String address;\n\n\t\tpublic User() {\n\t\t// TODO Auto-generated constructor stub\n\t\t}\n\n\t\tpublic User(int id, String name, int age,String address) {\n\t\t\tsuper();\n\t\t\tthis.id = id;\n\t\t\tUser.name = name;\n\t\t\tthis.age = age;\n\t\t\tUser.address = address;\n\t\t}\n\n\t\tpublic final int getId() {\n\t\t\treturn id;\n\t\t}\n\t\tpublic final void setId(int id) {\n\t\t\tthis.id = id;\n\t\t}\n\t\tpublic final String getName() {\n\t\t\treturn name;\n\t\t}\n\t\tpublic final void setName(String name) {\n\t\t\tUser.name = name;\n\t\t}\n\t\tpublic final int getAge() {\n\t\t\treturn age;\n\t\t}\n\t\tpublic final void setAge(int age) {\n\t\t\tthis.age = age;\n\t\t}\n\t\tpublic final String getAddress() {\n\t\t\treturn address;\n\t\t}\n\t\tpublic final void setAddress(String address) {\n\t\t\tUser.address = address;\n\t\t}\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn \"User [id=\" + id + \", name=\" + User.name + \", age=\" + age + \", address=\"\n\t\t\t\t+ User.address +  \"]\";\n\t\t}\n\n\t\t@Override\n\t\tpublic void writeExternal(ObjectOutput out) throws IOException {\n\t\t\t// TODO Auto-generated method stub\n\t\t\tout.writeInt(id);\n\t\t\tout.writeInt(age);\n\t\t\tout.writeObject(name);\n\t\t}\n\n\t\t@Override\n\t\tpublic void readExternal(ObjectInput in) throws IOException,\n\t\t\tClassNotFoundException {\n\t\t\t// TODO Auto-generated method stub\n\t\t\tid = in.readInt();\n\t\t\tage = in.readInt();\n\t\t\tname = (String) in.readObject();\n\t\t}\n\t}\n```\n\n再次运行TestSerial,输出结果：\n``` java\nUser [id=1, name=sakaraffy, age=100, address=HEB]\n```\n\n下面就来解析一下代码\n- 实现Externalizable接口，必须实现readExternal(ObjectInput in)和writeExternal(ObjectOutput out)\n- 实现Externalizable接口，必须要有一个空的构造方法，否则会抛出java.io.InvalidClassException。\n- 因为该对象是一个属性，一个属性保存，所以无论该属性是否被transient关键词修饰，都会被序列化。\n- readExternal(ObjectInput in)和writeExternal(ObjectOutput out)操作字段的顺序一定要一致\n\n### readResolve() 单例模式中使用\n\n当反序列化，也就是说从保存文件读取对象的时候，如果实体里写了这个方法，读取对象时，以这个方法为主，即有新对象产生，原对象就会被吸附。\n\n``` java\n\tprivate Object readResolve() throws ObjectStreamException{\n\t\treturn new User(2,\"cy\",18,\"Anlu\");\n\t}\n```\n\n在User中加入以上代码，在运行TestSerial,输出结果：\n``` java\nUser [id=2, name=cy, age=18, address=Anlu]\n```\n\n### 序列化对象存储方式 \n\n``` java\n\timport java.io.File;\n\timport java.io.FileInputStream;\n\timport java.io.FileOutputStream;\n\timport java.io.ObjectInputStream;\n\timport java.io.ObjectOutputStream;\n\n\n\tpublic class TestSerial {\n\tpublic static void main(String[] args) throws Exception{\n\t\tFile file = new File(\"user.txt\");\n\t\tObjectOutputStream oos = new ObjectOutputStream(\n\t\t\t\tnew FileOutputStream(file));\n\t\tUser user = new User(1,\"sakaraffy\",100,\"HEB\");\n\t\toos.writeObject(user);\n\t\toos.flush();\n\t\tSystem.out.println(file.length());\n\t\t\n\t\t//java 在写入对象的时候，如果对象已经写入，则此次修改操作无效，还是原对象的内容      \n\t\tuser.setId(0);\n\t\toos.writeObject(user);\n\t\toos.flush();\n\t\tSystem.out.println(file.length());\n\t\t\n\t\toos.close();\n\t\t\n\t\tObjectInputStream ois = new ObjectInputStream(\n\t\t\t\tnew FileInputStream(file));\n\t\t\n\t\tUser newUser1 = (User) ois.readObject();\n\t\tUser newUser2 = (User) ois.readObject();\n\t\t\n\t\tois.close();\n\t\tSystem.out.println(newUser1);\n\t\tSystem.out.println(newUser2);\n\t\tSystem.out.println(newUser1 == newUser2);\n\t}\n}\n```\n\n输出结果：\n``` java\n48\n53\nUser [id=1, name=sakaraffy, age=100, address=HEB]\nUser [id=1, name=sakaraffy, age=100, address=HEB]\ntrue\n```\n\n下面就来解析一下代码：\t\t  序列化机制为了节省磁盘空间，具有特定的存储规则，当写入文件的为同一对象时，并不会再将对象的内容进行存储，而只是再次存储一份引用，增加的5 字节新增引用\n反序列化时，恢复引用关系，使得清单 3 中的 u1和 u2 指向唯一的对象，二者相等，输出 true。该存储规则极大的节省了存储空间。","slug":"java_serializable","published":1,"updated":"2017-03-08T11:32:26.216Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5ef0031qoq1qpx919d3","content":"<p>这几天看IO的时候，需要将对象保存起来，就想起了java的序列化机制，下面我就谈谈关于自己对序列化的理解。</p>\n<h3 id=\"什么是序列化\"><a href=\"#什么是序列化\" class=\"headerlink\" title=\"什么是序列化\"></a>什么是序列化</h3><p>Java平台允许我们在内存中创建和使用对象，当JVM运行时，这些对象才有可能存在，一旦JVM停止运行，这些对象将不复存在，可是实际应用中，我们经常需要在JVM停止运行后，还需要保存这些对象，用于以后重新读取。序列化机制就为我们解决了这个问题。简单的说，序列化就是将对象写进文本之类的地方。</p>\n<h3 id=\"序列化怎么实现\"><a href=\"#序列化怎么实现\" class=\"headerlink\" title=\"序列化怎么实现\"></a>序列化怎么实现</h3><p>对于java来说，实现序列化的方式有两种，一种是实现Serializable,另一种是实现Externalizable。</p>\n<a id=\"more\"></a>\n<h4 id=\"Serializable\"><a href=\"#Serializable\" class=\"headerlink\" title=\"Serializable\"></a>Serializable</h4><p>Serializable只是一个标记型接口，只要一个类实现java.lang.io.Serializable,那么它就会被序列化，下面就写个类User，以后都会围绕这个类进行修改</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">transient</span> String name;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String address;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(<span class=\"keyword\">int</span> id, String name, <span class=\"keyword\">int</span> age,String address)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t\tUser.name = name;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">\t\tUser.address = address;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> id;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t\tUser.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> age;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title\">getAddress</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> address;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setAddress</span><span class=\"params\">(String address)</span> </span>&#123;</div><div class=\"line\">\t\tUser.address = address;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"User [id=\"</span> + id + <span class=\"string\">\", name=\"</span> + User.name + <span class=\"string\">\", age=\"</span> + age + <span class=\"string\">\", address=\"</span></div><div class=\"line\">\t\t\t\t+ User.address +  <span class=\"string\">\"]\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>TestSerial，是一个简单的序列化程序，它先将一个User对象保存到文件user.txt中，然后再从该文件中读出被存储的User对象，并打印该对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.io.File;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectInputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectOutputStream;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSerial</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;                              </div><div class=\"line\">\t\tFile file = <span class=\"keyword\">new</span> File(<span class=\"string\">\"user.txt\"</span>);</div><div class=\"line\">\t\tObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> FileOutputStream(file));</div><div class=\"line\">\t\tUser user = <span class=\"keyword\">new</span> User(<span class=\"number\">1</span>,<span class=\"string\">\"sakaraffy\"</span>,<span class=\"number\">100</span>,<span class=\"string\">\"HEB\"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//修改全局变量address,name   </span></div><div class=\"line\">\t\tuser.setAddress(<span class=\"string\">\"WH\"</span>);</div><div class=\"line\">\t\tuser.setName(<span class=\"string\">\"cy\"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\toos.writeObject(user);</div><div class=\"line\">\t\toos.close();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> FileInputStream(file));</div><div class=\"line\">\t\tUser newUser = (User) ois.readObject();</div><div class=\"line\">\t\tois.close();</div><div class=\"line\">\t\t<span class=\"comment\">//被static修饰的属性每次都会去全局区内取值</span></div><div class=\"line\">\t\tSystem.out.println(newUser);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">User [id=<span class=\"number\">1</span>, name=cy, age=<span class=\"number\">0</span>, address=WH]</div></pre></td></tr></table></figure></p>\n<p>下面就来解析一下代码</p>\n<ul>\n<li>如果User没有实现Serializable接口,会抛出NotSerializableException。</li>\n<li>User类所有的非基本数据类型属性必须实现Serializable接口，会抛出NotSerializableException。</li>\n<li>transient 关键字 ：<br>  当属性被transient关键词所修饰序列化机制就会忽略该字段，这就是为什么age=0的原因。</li>\n<li>static 关键字 :<br>我们知道，被static关键词所修饰的属性，那么它就不再是每个对象所独立拥有，而是整个类所拥有，而序列化所解决的是保存对象数据，所以被static修饰无论是否再被transient所修饰，该字段都不会被序列化，这就是name和address属性产生该结果的原因                </li>\n</ul>\n<h4 id=\"Externalizable\"><a href=\"#Externalizable\" class=\"headerlink\" title=\"Externalizable\"></a>Externalizable</h4><p>从上面，我们可以知道，实现了Serializable接口，它会默认地将所有字段都序列化，可是有时候我们只需要序列化个别字段，那么这个时候由该怎么办呢？</p>\n<ul>\n<li>将所有不被序列化的字段加上tranisent修饰词</li>\n<li>实现 Externalizable 接口</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.io.Externalizable;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectInput;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectOutput;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">implements</span> <span class=\"title\">Externalizable</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">transient</span> String name;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String address;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// TODO Auto-generated constructor stub</span></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(<span class=\"keyword\">int</span> id, String name, <span class=\"keyword\">int</span> age,String address)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t\tUser.name = name;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">\t\tUser.address = address;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> id;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t\tUser.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> age;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title\">getAddress</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> address;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setAddress</span><span class=\"params\">(String address)</span> </span>&#123;</div><div class=\"line\">\t\tUser.address = address;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"User [id=\"</span> + id + <span class=\"string\">\", name=\"</span> + User.name + <span class=\"string\">\", age=\"</span> + age + <span class=\"string\">\", address=\"</span></div><div class=\"line\">\t\t\t+ User.address +  <span class=\"string\">\"]\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeExternal</span><span class=\"params\">(ObjectOutput out)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">\t\tout.writeInt(id);</div><div class=\"line\">\t\tout.writeInt(age);</div><div class=\"line\">\t\tout.writeObject(name);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">readExternal</span><span class=\"params\">(ObjectInput in)</span> <span class=\"keyword\">throws</span> IOException,</span></div><div class=\"line\">\t\tClassNotFoundException &#123;</div><div class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">\t\tid = in.readInt();</div><div class=\"line\">\t\tage = in.readInt();</div><div class=\"line\">\t\tname = (String) in.readObject();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>再次运行TestSerial,输出结果：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">User [id=<span class=\"number\">1</span>, name=sakaraffy, age=<span class=\"number\">100</span>, address=HEB]</div></pre></td></tr></table></figure></p>\n<p>下面就来解析一下代码</p>\n<ul>\n<li>实现Externalizable接口，必须实现readExternal(ObjectInput in)和writeExternal(ObjectOutput out)</li>\n<li>实现Externalizable接口，必须要有一个空的构造方法，否则会抛出java.io.InvalidClassException。</li>\n<li>因为该对象是一个属性，一个属性保存，所以无论该属性是否被transient关键词修饰，都会被序列化。</li>\n<li>readExternal(ObjectInput in)和writeExternal(ObjectOutput out)操作字段的顺序一定要一致</li>\n</ul>\n<h3 id=\"readResolve-单例模式中使用\"><a href=\"#readResolve-单例模式中使用\" class=\"headerlink\" title=\"readResolve() 单例模式中使用\"></a>readResolve() 单例模式中使用</h3><p>当反序列化，也就是说从保存文件读取对象的时候，如果实体里写了这个方法，读取对象时，以这个方法为主，即有新对象产生，原对象就会被吸附。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Object <span class=\"title\">readResolve</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ObjectStreamException</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User(<span class=\"number\">2</span>,<span class=\"string\">\"cy\"</span>,<span class=\"number\">18</span>,<span class=\"string\">\"Anlu\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在User中加入以上代码，在运行TestSerial,输出结果：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">User [id=<span class=\"number\">2</span>, name=cy, age=<span class=\"number\">18</span>, address=Anlu]</div></pre></td></tr></table></figure></p>\n<h3 id=\"序列化对象存储方式\"><a href=\"#序列化对象存储方式\" class=\"headerlink\" title=\"序列化对象存储方式\"></a>序列化对象存储方式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t<span class=\"keyword\">import</span> java.io.File;</div><div class=\"line\">\t<span class=\"keyword\">import</span> java.io.FileInputStream;</div><div class=\"line\">\t<span class=\"keyword\">import</span> java.io.FileOutputStream;</div><div class=\"line\">\t<span class=\"keyword\">import</span> java.io.ObjectInputStream;</div><div class=\"line\">\t<span class=\"keyword\">import</span> java.io.ObjectOutputStream;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSerial</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\">\t\tFile file = <span class=\"keyword\">new</span> File(<span class=\"string\">\"user.txt\"</span>);</div><div class=\"line\">\t\tObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> FileOutputStream(file));</div><div class=\"line\">\t\tUser user = <span class=\"keyword\">new</span> User(<span class=\"number\">1</span>,<span class=\"string\">\"sakaraffy\"</span>,<span class=\"number\">100</span>,<span class=\"string\">\"HEB\"</span>);</div><div class=\"line\">\t\toos.writeObject(user);</div><div class=\"line\">\t\toos.flush();</div><div class=\"line\">\t\tSystem.out.println(file.length());</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//java 在写入对象的时候，如果对象已经写入，则此次修改操作无效，还是原对象的内容      </span></div><div class=\"line\">\t\tuser.setId(<span class=\"number\">0</span>);</div><div class=\"line\">\t\toos.writeObject(user);</div><div class=\"line\">\t\toos.flush();</div><div class=\"line\">\t\tSystem.out.println(file.length());</div><div class=\"line\">\t\t</div><div class=\"line\">\t\toos.close();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> FileInputStream(file));</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tUser newUser1 = (User) ois.readObject();</div><div class=\"line\">\t\tUser newUser2 = (User) ois.readObject();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tois.close();</div><div class=\"line\">\t\tSystem.out.println(newUser1);</div><div class=\"line\">\t\tSystem.out.println(newUser2);</div><div class=\"line\">\t\tSystem.out.println(newUser1 == newUser2);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">48</span></div><div class=\"line\"><span class=\"number\">53</span></div><div class=\"line\">User [id=<span class=\"number\">1</span>, name=sakaraffy, age=<span class=\"number\">100</span>, address=HEB]</div><div class=\"line\">User [id=<span class=\"number\">1</span>, name=sakaraffy, age=<span class=\"number\">100</span>, address=HEB]</div><div class=\"line\"><span class=\"keyword\">true</span></div></pre></td></tr></table></figure></p>\n<p>下面就来解析一下代码：          序列化机制为了节省磁盘空间，具有特定的存储规则，当写入文件的为同一对象时，并不会再将对象的内容进行存储，而只是再次存储一份引用，增加的5 字节新增引用<br>反序列化时，恢复引用关系，使得清单 3 中的 u1和 u2 指向唯一的对象，二者相等，输出 true。该存储规则极大的节省了存储空间。</p>\n","excerpt":"<p>这几天看IO的时候，需要将对象保存起来，就想起了java的序列化机制，下面我就谈谈关于自己对序列化的理解。</p>\n<h3 id=\"什么是序列化\"><a href=\"#什么是序列化\" class=\"headerlink\" title=\"什么是序列化\"></a>什么是序列化</h3><p>Java平台允许我们在内存中创建和使用对象，当JVM运行时，这些对象才有可能存在，一旦JVM停止运行，这些对象将不复存在，可是实际应用中，我们经常需要在JVM停止运行后，还需要保存这些对象，用于以后重新读取。序列化机制就为我们解决了这个问题。简单的说，序列化就是将对象写进文本之类的地方。</p>\n<h3 id=\"序列化怎么实现\"><a href=\"#序列化怎么实现\" class=\"headerlink\" title=\"序列化怎么实现\"></a>序列化怎么实现</h3><p>对于java来说，实现序列化的方式有两种，一种是实现Serializable,另一种是实现Externalizable。</p>","more":"<h4 id=\"Serializable\"><a href=\"#Serializable\" class=\"headerlink\" title=\"Serializable\"></a>Serializable</h4><p>Serializable只是一个标记型接口，只要一个类实现java.lang.io.Serializable,那么它就会被序列化，下面就写个类User，以后都会围绕这个类进行修改</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">transient</span> String name;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String address;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(<span class=\"keyword\">int</span> id, String name, <span class=\"keyword\">int</span> age,String address)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t\tUser.name = name;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">\t\tUser.address = address;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> id;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t\tUser.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> age;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title\">getAddress</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> address;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setAddress</span><span class=\"params\">(String address)</span> </span>&#123;</div><div class=\"line\">\t\tUser.address = address;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"User [id=\"</span> + id + <span class=\"string\">\", name=\"</span> + User.name + <span class=\"string\">\", age=\"</span> + age + <span class=\"string\">\", address=\"</span></div><div class=\"line\">\t\t\t\t+ User.address +  <span class=\"string\">\"]\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>TestSerial，是一个简单的序列化程序，它先将一个User对象保存到文件user.txt中，然后再从该文件中读出被存储的User对象，并打印该对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.io.File;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectInputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectOutputStream;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSerial</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;                              </div><div class=\"line\">\t\tFile file = <span class=\"keyword\">new</span> File(<span class=\"string\">\"user.txt\"</span>);</div><div class=\"line\">\t\tObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> FileOutputStream(file));</div><div class=\"line\">\t\tUser user = <span class=\"keyword\">new</span> User(<span class=\"number\">1</span>,<span class=\"string\">\"sakaraffy\"</span>,<span class=\"number\">100</span>,<span class=\"string\">\"HEB\"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//修改全局变量address,name   </span></div><div class=\"line\">\t\tuser.setAddress(<span class=\"string\">\"WH\"</span>);</div><div class=\"line\">\t\tuser.setName(<span class=\"string\">\"cy\"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\toos.writeObject(user);</div><div class=\"line\">\t\toos.close();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> FileInputStream(file));</div><div class=\"line\">\t\tUser newUser = (User) ois.readObject();</div><div class=\"line\">\t\tois.close();</div><div class=\"line\">\t\t<span class=\"comment\">//被static修饰的属性每次都会去全局区内取值</span></div><div class=\"line\">\t\tSystem.out.println(newUser);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">User [id=<span class=\"number\">1</span>, name=cy, age=<span class=\"number\">0</span>, address=WH]</div></pre></td></tr></table></figure></p>\n<p>下面就来解析一下代码</p>\n<ul>\n<li>如果User没有实现Serializable接口,会抛出NotSerializableException。</li>\n<li>User类所有的非基本数据类型属性必须实现Serializable接口，会抛出NotSerializableException。</li>\n<li>transient 关键字 ：<br>  当属性被transient关键词所修饰序列化机制就会忽略该字段，这就是为什么age=0的原因。</li>\n<li>static 关键字 :<br>我们知道，被static关键词所修饰的属性，那么它就不再是每个对象所独立拥有，而是整个类所拥有，而序列化所解决的是保存对象数据，所以被static修饰无论是否再被transient所修饰，该字段都不会被序列化，这就是name和address属性产生该结果的原因                </li>\n</ul>\n<h4 id=\"Externalizable\"><a href=\"#Externalizable\" class=\"headerlink\" title=\"Externalizable\"></a>Externalizable</h4><p>从上面，我们可以知道，实现了Serializable接口，它会默认地将所有字段都序列化，可是有时候我们只需要序列化个别字段，那么这个时候由该怎么办呢？</p>\n<ul>\n<li>将所有不被序列化的字段加上tranisent修饰词</li>\n<li>实现 Externalizable 接口</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.io.Externalizable;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectInput;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectOutput;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">implements</span> <span class=\"title\">Externalizable</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">transient</span> String name;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String address;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// TODO Auto-generated constructor stub</span></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(<span class=\"keyword\">int</span> id, String name, <span class=\"keyword\">int</span> age,String address)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t\tUser.name = name;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">\t\tUser.address = address;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> id;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t\tUser.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> age;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title\">getAddress</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> address;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setAddress</span><span class=\"params\">(String address)</span> </span>&#123;</div><div class=\"line\">\t\tUser.address = address;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"User [id=\"</span> + id + <span class=\"string\">\", name=\"</span> + User.name + <span class=\"string\">\", age=\"</span> + age + <span class=\"string\">\", address=\"</span></div><div class=\"line\">\t\t\t+ User.address +  <span class=\"string\">\"]\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeExternal</span><span class=\"params\">(ObjectOutput out)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">\t\tout.writeInt(id);</div><div class=\"line\">\t\tout.writeInt(age);</div><div class=\"line\">\t\tout.writeObject(name);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">readExternal</span><span class=\"params\">(ObjectInput in)</span> <span class=\"keyword\">throws</span> IOException,</div><div class=\"line\">\t\tClassNotFoundException </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">\t\tid = in.readInt();</div><div class=\"line\">\t\tage = in.readInt();</div><div class=\"line\">\t\tname = (String) in.readObject();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>再次运行TestSerial,输出结果：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">User [id=<span class=\"number\">1</span>, name=sakaraffy, age=<span class=\"number\">100</span>, address=HEB]</div></pre></td></tr></table></figure></p>\n<p>下面就来解析一下代码</p>\n<ul>\n<li>实现Externalizable接口，必须实现readExternal(ObjectInput in)和writeExternal(ObjectOutput out)</li>\n<li>实现Externalizable接口，必须要有一个空的构造方法，否则会抛出java.io.InvalidClassException。</li>\n<li>因为该对象是一个属性，一个属性保存，所以无论该属性是否被transient关键词修饰，都会被序列化。</li>\n<li>readExternal(ObjectInput in)和writeExternal(ObjectOutput out)操作字段的顺序一定要一致</li>\n</ul>\n<h3 id=\"readResolve-单例模式中使用\"><a href=\"#readResolve-单例模式中使用\" class=\"headerlink\" title=\"readResolve() 单例模式中使用\"></a>readResolve() 单例模式中使用</h3><p>当反序列化，也就是说从保存文件读取对象的时候，如果实体里写了这个方法，读取对象时，以这个方法为主，即有新对象产生，原对象就会被吸附。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Object <span class=\"title\">readResolve</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ObjectStreamException</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User(<span class=\"number\">2</span>,<span class=\"string\">\"cy\"</span>,<span class=\"number\">18</span>,<span class=\"string\">\"Anlu\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在User中加入以上代码，在运行TestSerial,输出结果：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">User [id=<span class=\"number\">2</span>, name=cy, age=<span class=\"number\">18</span>, address=Anlu]</div></pre></td></tr></table></figure></p>\n<h3 id=\"序列化对象存储方式\"><a href=\"#序列化对象存储方式\" class=\"headerlink\" title=\"序列化对象存储方式\"></a>序列化对象存储方式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t<span class=\"keyword\">import</span> java.io.File;</div><div class=\"line\">\t<span class=\"keyword\">import</span> java.io.FileInputStream;</div><div class=\"line\">\t<span class=\"keyword\">import</span> java.io.FileOutputStream;</div><div class=\"line\">\t<span class=\"keyword\">import</span> java.io.ObjectInputStream;</div><div class=\"line\">\t<span class=\"keyword\">import</span> java.io.ObjectOutputStream;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSerial</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\">\t\tFile file = <span class=\"keyword\">new</span> File(<span class=\"string\">\"user.txt\"</span>);</div><div class=\"line\">\t\tObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> FileOutputStream(file));</div><div class=\"line\">\t\tUser user = <span class=\"keyword\">new</span> User(<span class=\"number\">1</span>,<span class=\"string\">\"sakaraffy\"</span>,<span class=\"number\">100</span>,<span class=\"string\">\"HEB\"</span>);</div><div class=\"line\">\t\toos.writeObject(user);</div><div class=\"line\">\t\toos.flush();</div><div class=\"line\">\t\tSystem.out.println(file.length());</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//java 在写入对象的时候，如果对象已经写入，则此次修改操作无效，还是原对象的内容      </span></div><div class=\"line\">\t\tuser.setId(<span class=\"number\">0</span>);</div><div class=\"line\">\t\toos.writeObject(user);</div><div class=\"line\">\t\toos.flush();</div><div class=\"line\">\t\tSystem.out.println(file.length());</div><div class=\"line\">\t\t</div><div class=\"line\">\t\toos.close();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> FileInputStream(file));</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tUser newUser1 = (User) ois.readObject();</div><div class=\"line\">\t\tUser newUser2 = (User) ois.readObject();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tois.close();</div><div class=\"line\">\t\tSystem.out.println(newUser1);</div><div class=\"line\">\t\tSystem.out.println(newUser2);</div><div class=\"line\">\t\tSystem.out.println(newUser1 == newUser2);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">48</span></div><div class=\"line\"><span class=\"number\">53</span></div><div class=\"line\">User [id=<span class=\"number\">1</span>, name=sakaraffy, age=<span class=\"number\">100</span>, address=HEB]</div><div class=\"line\">User [id=<span class=\"number\">1</span>, name=sakaraffy, age=<span class=\"number\">100</span>, address=HEB]</div><div class=\"line\"><span class=\"keyword\">true</span></div></pre></td></tr></table></figure></p>\n<p>下面就来解析一下代码：          序列化机制为了节省磁盘空间，具有特定的存储规则，当写入文件的为同一对象时，并不会再将对象的内容进行存储，而只是再次存储一份引用，增加的5 字节新增引用<br>反序列化时，恢复引用关系，使得清单 3 中的 u1和 u2 指向唯一的对象，二者相等，输出 true。该存储规则极大的节省了存储空间。</p>"},{"title":"字符串（二）StringBuffer和StringBuilder","date":"2016-09-03T09:48:40.000Z","_content":"前面我们提到String对象每次修改都会重新构造一个新对象，但我们知道构造对象是很消耗资源的，那有什么解决方案呢？\nStringBuffer和StringBuilder就专注于字符串对象的修改\n我们先来看一个接口Appendable\n``` java\n\tpublic interface Appendable {\n\t\tAppendable append(CharSequence csq) throws IOException;\n\t\tAppendable append(CharSequence csq, int start, int end) throws IOException;\n\t\tAppendable append(char c) throws IOException;\n\t}\n```\n下面看一下具体实现类StringBuilder\n\n<!--more-->\n\n``` java\n\tabstract class AbstractStringBuilder implements Appendable, CharSequence {                    \n\t\tchar[] value;\n\t\tint count;\n\t\tAbstractStringBuilder(int capacity) {\n\t\t\tvalue = new char[capacity];\n\t\t}\n\t}\n\tpublic final class StringBuilder\n    extends AbstractStringBuilder\n    implements java.io.Serializable, CharSequence {    \n\t\t@Override\n\t\tpublic String toString() {\n\t\t\t// Create a copy, don't share the array\n\t\t\treturn new String(value, 0, count);\n\t\t}\n\n\t\tpublic StringBuilder() {\n\t\t\tsuper(16);\n\t\t}\n\t\tpublic StringBuilder(String str) {\n\t\t\tsuper(str.length() + 16);\n\t\t\tappend(str);\n\t\t}\n\n\t}\n```\n由构造方法可以看出，StringBuilder会在String所拥有的数组的容量加上16用来增加等操作\n下面看看StringBuilder的一些核心方法\n``` java\n\tpublic class TestStringBuilder {\n\t\tpublic static void main(String[] args) {\n\t\t\tStringBuilder sb = new StringBuilder(\"sakuraffy\");                            \n\t\t\t//字符串appen\n\t\t\tSystem.out.println(sb.append(1)); // sakuraffy1\n\t\t\tSystem.out.println(sb.append(new Object())); \n\t\t\t//sakuraffy1java.lang.Object@2a139a55\n\t\t\t\n\t\t\t//字符串insert\n\t\t\tSystem.out.println(sb.insert(0, \"hello \"));\n\t\t\t//hello sakuraffy1java.lang.Object@2a139a55\n\t\t\t\n\t\t\t//字符串delete\n\t\t\tSystem.out.println(sb.delete(15, sb.length()));\n\t\t\t//hello sakuraffy\n\t\t\t\n\t\t\t//字符串替换\n\t\t\tSystem.out.println(sb.replace(0, 5, \"nihao\"));\n\t\t\t\n\t\t\t//字符串反转\n\t\t\tSystem.out.println(sb.reverse());\n\t\t\t//yffarukas oahin\n\t\t}\n\t}\n```\n还有一个与StringBuilder非常相似的类，那就是StringBuffer，方法几乎一模一样，不同的是StringBuffer是线程安全的，而StringBuilder则是线程不安全的，String同样是线程安全的，因为它采用的是不变模式\n``` java\n\tpublic final class StringBuffer\n    extends AbstractStringBuilder\n    implements java.io.Serializable, CharSequence {\n\t\t@Override\n\t\tpublic synchronized char charAt(int index) { }\n\t\t@Override\n\t\tpublic synchronized StringBuffer append(Object obj) {}\n\t\t......\n\t}\n```","source":"_posts/java_stringbuilder.md","raw":"---\ntitle: 字符串（二）StringBuffer和StringBuilder\ndate: 2016-09-03 17:48:40\ntags:\n\t- Java\n---\n前面我们提到String对象每次修改都会重新构造一个新对象，但我们知道构造对象是很消耗资源的，那有什么解决方案呢？\nStringBuffer和StringBuilder就专注于字符串对象的修改\n我们先来看一个接口Appendable\n``` java\n\tpublic interface Appendable {\n\t\tAppendable append(CharSequence csq) throws IOException;\n\t\tAppendable append(CharSequence csq, int start, int end) throws IOException;\n\t\tAppendable append(char c) throws IOException;\n\t}\n```\n下面看一下具体实现类StringBuilder\n\n<!--more-->\n\n``` java\n\tabstract class AbstractStringBuilder implements Appendable, CharSequence {                    \n\t\tchar[] value;\n\t\tint count;\n\t\tAbstractStringBuilder(int capacity) {\n\t\t\tvalue = new char[capacity];\n\t\t}\n\t}\n\tpublic final class StringBuilder\n    extends AbstractStringBuilder\n    implements java.io.Serializable, CharSequence {    \n\t\t@Override\n\t\tpublic String toString() {\n\t\t\t// Create a copy, don't share the array\n\t\t\treturn new String(value, 0, count);\n\t\t}\n\n\t\tpublic StringBuilder() {\n\t\t\tsuper(16);\n\t\t}\n\t\tpublic StringBuilder(String str) {\n\t\t\tsuper(str.length() + 16);\n\t\t\tappend(str);\n\t\t}\n\n\t}\n```\n由构造方法可以看出，StringBuilder会在String所拥有的数组的容量加上16用来增加等操作\n下面看看StringBuilder的一些核心方法\n``` java\n\tpublic class TestStringBuilder {\n\t\tpublic static void main(String[] args) {\n\t\t\tStringBuilder sb = new StringBuilder(\"sakuraffy\");                            \n\t\t\t//字符串appen\n\t\t\tSystem.out.println(sb.append(1)); // sakuraffy1\n\t\t\tSystem.out.println(sb.append(new Object())); \n\t\t\t//sakuraffy1java.lang.Object@2a139a55\n\t\t\t\n\t\t\t//字符串insert\n\t\t\tSystem.out.println(sb.insert(0, \"hello \"));\n\t\t\t//hello sakuraffy1java.lang.Object@2a139a55\n\t\t\t\n\t\t\t//字符串delete\n\t\t\tSystem.out.println(sb.delete(15, sb.length()));\n\t\t\t//hello sakuraffy\n\t\t\t\n\t\t\t//字符串替换\n\t\t\tSystem.out.println(sb.replace(0, 5, \"nihao\"));\n\t\t\t\n\t\t\t//字符串反转\n\t\t\tSystem.out.println(sb.reverse());\n\t\t\t//yffarukas oahin\n\t\t}\n\t}\n```\n还有一个与StringBuilder非常相似的类，那就是StringBuffer，方法几乎一模一样，不同的是StringBuffer是线程安全的，而StringBuilder则是线程不安全的，String同样是线程安全的，因为它采用的是不变模式\n``` java\n\tpublic final class StringBuffer\n    extends AbstractStringBuilder\n    implements java.io.Serializable, CharSequence {\n\t\t@Override\n\t\tpublic synchronized char charAt(int index) { }\n\t\t@Override\n\t\tpublic synchronized StringBuffer append(Object obj) {}\n\t\t......\n\t}\n```","slug":"java_stringbuilder","published":1,"updated":"2017-03-08T11:31:58.072Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5eg0033qoq1mwz8jfqm","content":"<p>前面我们提到String对象每次修改都会重新构造一个新对象，但我们知道构造对象是很消耗资源的，那有什么解决方案呢？<br>StringBuffer和StringBuilder就专注于字符串对象的修改<br>我们先来看一个接口Appendable<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Appendable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\">Appendable <span class=\"title\">append</span><span class=\"params\">(CharSequence csq)</span> <span class=\"keyword\">throws</span> IOException</span>;</div><div class=\"line\">\t<span class=\"function\">Appendable <span class=\"title\">append</span><span class=\"params\">(CharSequence csq, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> <span class=\"keyword\">throws</span> IOException</span>;</div><div class=\"line\">\t<span class=\"function\">Appendable <span class=\"title\">append</span><span class=\"params\">(<span class=\"keyword\">char</span> c)</span> <span class=\"keyword\">throws</span> IOException</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下面看一下具体实现类StringBuilder</p>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractStringBuilder</span> <span class=\"keyword\">implements</span> <span class=\"title\">Appendable</span>, <span class=\"title\">CharSequence</span> </span>&#123;                    </div><div class=\"line\">\t<span class=\"keyword\">char</span>[] value;</div><div class=\"line\">\t<span class=\"keyword\">int</span> count;</div><div class=\"line\">\tAbstractStringBuilder(<span class=\"keyword\">int</span> capacity) &#123;</div><div class=\"line\">\t\tvalue = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[capacity];</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringBuilder</span></span></div><div class=\"line\">   <span class=\"keyword\">extends</span> <span class=\"title\">AbstractStringBuilder</span></div><div class=\"line\">   <span class=\"keyword\">implements</span> <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span>, <span class=\"title\">CharSequence</span> &#123;    </div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// Create a copy, don't share the array</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String(value, <span class=\"number\">0</span>, count);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StringBuilder</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>(<span class=\"number\">16</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StringBuilder</span><span class=\"params\">(String str)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>(str.length() + <span class=\"number\">16</span>);</div><div class=\"line\">\t\tappend(str);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>由构造方法可以看出，StringBuilder会在String所拥有的数组的容量加上16用来增加等操作<br>下面看看StringBuilder的一些核心方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestStringBuilder</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tStringBuilder sb = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"sakuraffy\"</span>);                            </div><div class=\"line\">\t\t<span class=\"comment\">//字符串appen</span></div><div class=\"line\">\t\tSystem.out.println(sb.append(<span class=\"number\">1</span>)); <span class=\"comment\">// sakuraffy1</span></div><div class=\"line\">\t\tSystem.out.println(sb.append(<span class=\"keyword\">new</span> Object())); </div><div class=\"line\">\t\t<span class=\"comment\">//sakuraffy1java.lang.Object@2a139a55</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//字符串insert</span></div><div class=\"line\">\t\tSystem.out.println(sb.insert(<span class=\"number\">0</span>, <span class=\"string\">\"hello \"</span>));</div><div class=\"line\">\t\t<span class=\"comment\">//hello sakuraffy1java.lang.Object@2a139a55</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//字符串delete</span></div><div class=\"line\">\t\tSystem.out.println(sb.delete(<span class=\"number\">15</span>, sb.length()));</div><div class=\"line\">\t\t<span class=\"comment\">//hello sakuraffy</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//字符串替换</span></div><div class=\"line\">\t\tSystem.out.println(sb.replace(<span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"string\">\"nihao\"</span>));</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//字符串反转</span></div><div class=\"line\">\t\tSystem.out.println(sb.reverse());</div><div class=\"line\">\t\t<span class=\"comment\">//yffarukas oahin</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>还有一个与StringBuilder非常相似的类，那就是StringBuffer，方法几乎一模一样，不同的是StringBuffer是线程安全的，而StringBuilder则是线程不安全的，String同样是线程安全的，因为它采用的是不变模式<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringBuffer</span></span></div><div class=\"line\">   <span class=\"keyword\">extends</span> <span class=\"title\">AbstractStringBuilder</span></div><div class=\"line\">   <span class=\"keyword\">implements</span> <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span>, <span class=\"title\">CharSequence</span> &#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">char</span> <span class=\"title\">charAt</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123; &#125;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> StringBuffer <span class=\"title\">append</span><span class=\"params\">(Object obj)</span> </span>&#123;&#125;</div><div class=\"line\">\t......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>前面我们提到String对象每次修改都会重新构造一个新对象，但我们知道构造对象是很消耗资源的，那有什么解决方案呢？<br>StringBuffer和StringBuilder就专注于字符串对象的修改<br>我们先来看一个接口Appendable<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Appendable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\">Appendable <span class=\"title\">append</span><span class=\"params\">(CharSequence csq)</span> <span class=\"keyword\">throws</span> IOException</span>;</div><div class=\"line\">\t<span class=\"function\">Appendable <span class=\"title\">append</span><span class=\"params\">(CharSequence csq, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> <span class=\"keyword\">throws</span> IOException</span>;</div><div class=\"line\">\t<span class=\"function\">Appendable <span class=\"title\">append</span><span class=\"params\">(<span class=\"keyword\">char</span> c)</span> <span class=\"keyword\">throws</span> IOException</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下面看一下具体实现类StringBuilder</p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractStringBuilder</span> <span class=\"keyword\">implements</span> <span class=\"title\">Appendable</span>, <span class=\"title\">CharSequence</span> </span>&#123;                    </div><div class=\"line\">\t<span class=\"keyword\">char</span>[] value;</div><div class=\"line\">\t<span class=\"keyword\">int</span> count;</div><div class=\"line\">\tAbstractStringBuilder(<span class=\"keyword\">int</span> capacity) &#123;</div><div class=\"line\">\t\tvalue = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[capacity];</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringBuilder</span></div><div class=\"line\">   <span class=\"keyword\">extends</span> <span class=\"title\">AbstractStringBuilder</span></div><div class=\"line\">   <span class=\"keyword\">implements</span> <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span>, <span class=\"title\">CharSequence</span> </span>&#123;    </div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// Create a copy, don't share the array</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String(value, <span class=\"number\">0</span>, count);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StringBuilder</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>(<span class=\"number\">16</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StringBuilder</span><span class=\"params\">(String str)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>(str.length() + <span class=\"number\">16</span>);</div><div class=\"line\">\t\tappend(str);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>由构造方法可以看出，StringBuilder会在String所拥有的数组的容量加上16用来增加等操作<br>下面看看StringBuilder的一些核心方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestStringBuilder</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tStringBuilder sb = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"sakuraffy\"</span>);                            </div><div class=\"line\">\t\t<span class=\"comment\">//字符串appen</span></div><div class=\"line\">\t\tSystem.out.println(sb.append(<span class=\"number\">1</span>)); <span class=\"comment\">// sakuraffy1</span></div><div class=\"line\">\t\tSystem.out.println(sb.append(<span class=\"keyword\">new</span> Object())); </div><div class=\"line\">\t\t<span class=\"comment\">//sakuraffy1java.lang.Object@2a139a55</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//字符串insert</span></div><div class=\"line\">\t\tSystem.out.println(sb.insert(<span class=\"number\">0</span>, <span class=\"string\">\"hello \"</span>));</div><div class=\"line\">\t\t<span class=\"comment\">//hello sakuraffy1java.lang.Object@2a139a55</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//字符串delete</span></div><div class=\"line\">\t\tSystem.out.println(sb.delete(<span class=\"number\">15</span>, sb.length()));</div><div class=\"line\">\t\t<span class=\"comment\">//hello sakuraffy</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//字符串替换</span></div><div class=\"line\">\t\tSystem.out.println(sb.replace(<span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"string\">\"nihao\"</span>));</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//字符串反转</span></div><div class=\"line\">\t\tSystem.out.println(sb.reverse());</div><div class=\"line\">\t\t<span class=\"comment\">//yffarukas oahin</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>还有一个与StringBuilder非常相似的类，那就是StringBuffer，方法几乎一模一样，不同的是StringBuffer是线程安全的，而StringBuilder则是线程不安全的，String同样是线程安全的，因为它采用的是不变模式<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringBuffer</span></div><div class=\"line\">   <span class=\"keyword\">extends</span> <span class=\"title\">AbstractStringBuilder</span></div><div class=\"line\">   <span class=\"keyword\">implements</span> <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span>, <span class=\"title\">CharSequence</span> </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">char</span> <span class=\"title\">charAt</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123; &#125;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> StringBuffer <span class=\"title\">append</span><span class=\"params\">(Object obj)</span> </span>&#123;&#125;</div><div class=\"line\">\t......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"字符串（一）String","date":"2016-09-01T04:55:38.000Z","_content":"我们在编程中，免不了会与字符串打交道，那么就来JDK给我们提供的字符串架构\n\n先来看一个接口 CharSequence\n``` java\n\tpublic interface CharSequence {\n\t\tint length();\n\t\tchar charAt(int index);\n\t\tCharSequence subSequence(int start, int end);\n\t\tpublic String toString();\n\t}\n```\n再来看看其实现类 String\n\n<!--more-->\n\n``` java\n\tpublic final class String\n    implements java.io.Serializable, Comparable<String>, CharSequence {\n\t\tprivate final char value[];\n\t\tprivate int hash; // Default to 0\n\t}\n```\n由此看来String其本质就是一个char[]\n``` java\n\tpublic String() {\n        this.value = \"\".value;\n    }\n\tpublic String(String original) {}\n\tpublic String(char value[]) {}\n\tpublic String(char value[], int offset, int count) {}\n\tpublic String(int[] codePoints, int offset, int count) {}\n\tpublic String(byte bytes[], int offset, int length, Charset charset) {}\n\tpublic String(StringBuffer buffer) {}\n\tpublic String(StringBuilder builder) {}\n\t /*\n    * Package private constructor which shares value array for speed.\n    * this constructor is always expected to be called with share==true.\n    * a separate constructor is needed because we already have a public\n    * String(char[]) constructor that makes a copy of the given char[].\n    */\n\tString(char[] value, boolean share) {}\n```\n通过上面的构造函数可以发现 ：\nbyte、int和char类型的数组都可以转换为String，还可以指定其长度和字符集\n\n下面看一下重头戏 ： String类方法的使用\n``` java\n\tpublic class TestString {\n\t\tpublic static void main(String[] args) throws UnsupportedEncodingException {\n\t\t\tString str = new String(\"Sakuraffy\");\n\t\t\t// implements CharSequence\n\t\t\tSystem.out.println(str.length()); // 9\n\t\t\tSystem.out.println(str.charAt(0)); // S\n\t\t\tSystem.out.println(str); //默认调用str.toString() Sakuraffy\n\t\t\tSystem.out.println(str.substring(0, 6)); // Sakura\n\t\t\t\n\t\t\t// implements Comparable\n\t\t\tSystem.out.println(str.compareTo(\"Sakuraffy\"));  // 0\n\t\t\t\n\t\t\t// others\n\t\t\tSystem.out.println(str.isEmpty()); // false\n\t\t\tSystem.out.println(str.codePointAt(0)); // 打印对应字符的Unicode编码  83        \n\t\t\tSystem.out.println(str.codePointBefore(1)); //与上面等价 83\n\t\t\t//Returns the number of Unicode code points in the specified text\n\t\t\tSystem.out.println(str.codePointCount(0, str.length()));  // 9\n\t\t\t\n\t\t\t//返回Unicode编码下String，对应字符的编码byte数组\n\t\t\tbyte[] b = new byte[10];\n\t\t\tb = str.getBytes();\n\t\t\tSystem.out.println(Arrays.toString(b)); \n\t\t\t//[83, 97, 107, 117, 114, 97, 102, 102, 121]\n\t\t\tString s = new String(\"再见\");\n\t\t\tbyte[] bb = new byte[10];\n\t\t\tbb = s.getBytes(\"GBK\");\n\t\t\tSystem.out.println(Arrays.toString(bb));\n\t\t\t//[-44, -39, -68, -5]\n\t\t\n\t\t\t//截取字符串到指定数组中\n\t\t\tchar[] c = new char[10];\n\t\t\t//getChars(int srcBegin, int srcEnd, char dst[], int dstBegin)\n\t\t\tstr.getChars(0, 6, c, 1);\n\t\t\tSystem.out.println(Arrays.toString(c));\n\t\t\t//[ ,S,a,k,u,r,a, , , ]\n\t\t\t\n\t\t\t//与CharSequence子类比较equals\n\t\t\tStringBuffer sb = new StringBuffer(\"Sakuraffy\");\n\t\t\tSystem.out.println(str.equalsIgnoreCase(\"SAKURAFFY\")); // true\n\t\t\tSystem.out.println(str.equals(sb)); // false\n\t\t\tSystem.out.println(str.contentEquals(sb)); // true\n\t\t\t\n\t\t\t//判断是否以某字符串开头或结尾\n\t\t\tSystem.out.println(str.startsWith(\"Sakura\")); // true\n\t\t\tSystem.out.println(str.endsWith(\"ffy\")); // true\n\t\t\t\n\t\t\t//索引定位\n\t\t\tSystem.out.println(str.indexOf(\"a\"));  // 1\n\t\t\tSystem.out.println(str.lastIndexOf(\"a\")); // 5\n\t\t\tSystem.out.println(str.indexOf(\"Sakura\")); // 0\n\t\t\t\n\t\t\t//字符串链接\n\t\t\tSystem.out.println(str.concat(\" hello\")); // Sakuraffy hello\n\t\t\t\n\t\t\t//字符串替换\n\t\t\tSystem.out.println(str.replace('a', 'A')); // SAkurAffy\n\t\t\tSystem.out.println(str.replaceAll(\"Sa\", \"su\")); // sukuraffy\n\t\t\t\n\t\t\t//字符串分割\n\t\t\tSystem.out.println(Arrays.toString(str.split(\"a\"))); // [S, kur, ffy]\n\t\t\t\n\t\t\t//字符串大小写转换\n\t\t\tSystem.out.println(str.toUpperCase()); // SAKURAFFY\n\t\t\tSystem.out.println(str.toLowerCase()); // sakuraffy\n\t\t\t\n\t\t\t//其它数据类型转换为String类型\n\t\t\tSystem.out.println(String.valueOf(12));  // 12\n\t\t\t\n\t\t\t//去除字符串前后空格\n\t\t\tSystem.out.println(\" hello \".trim()); // hello\n\t\t\t\n\t\t}\n\t}\n```\n\n> String类的实例对象从创建就是final不能被修改，所以每次修改后都是另外一个对象\n\n``` java\n\tpublic class TestString {\n\t\tpublic static void main(String[] args) {\n\t\t\tString str1 = new String(\"Sakuraffy\");\n\t\t\tString str2 = str1.replace('a','b');\n\t\t\tSystem.out.println(str1 == str2); // false\n\t\t}\n\t}\n```\n","source":"_posts/java_string.md","raw":"---\ntitle: 字符串（一）String\ndate: 2016-09-01 12:55:38\ntags: \n\t- Java\n---\n我们在编程中，免不了会与字符串打交道，那么就来JDK给我们提供的字符串架构\n\n先来看一个接口 CharSequence\n``` java\n\tpublic interface CharSequence {\n\t\tint length();\n\t\tchar charAt(int index);\n\t\tCharSequence subSequence(int start, int end);\n\t\tpublic String toString();\n\t}\n```\n再来看看其实现类 String\n\n<!--more-->\n\n``` java\n\tpublic final class String\n    implements java.io.Serializable, Comparable<String>, CharSequence {\n\t\tprivate final char value[];\n\t\tprivate int hash; // Default to 0\n\t}\n```\n由此看来String其本质就是一个char[]\n``` java\n\tpublic String() {\n        this.value = \"\".value;\n    }\n\tpublic String(String original) {}\n\tpublic String(char value[]) {}\n\tpublic String(char value[], int offset, int count) {}\n\tpublic String(int[] codePoints, int offset, int count) {}\n\tpublic String(byte bytes[], int offset, int length, Charset charset) {}\n\tpublic String(StringBuffer buffer) {}\n\tpublic String(StringBuilder builder) {}\n\t /*\n    * Package private constructor which shares value array for speed.\n    * this constructor is always expected to be called with share==true.\n    * a separate constructor is needed because we already have a public\n    * String(char[]) constructor that makes a copy of the given char[].\n    */\n\tString(char[] value, boolean share) {}\n```\n通过上面的构造函数可以发现 ：\nbyte、int和char类型的数组都可以转换为String，还可以指定其长度和字符集\n\n下面看一下重头戏 ： String类方法的使用\n``` java\n\tpublic class TestString {\n\t\tpublic static void main(String[] args) throws UnsupportedEncodingException {\n\t\t\tString str = new String(\"Sakuraffy\");\n\t\t\t// implements CharSequence\n\t\t\tSystem.out.println(str.length()); // 9\n\t\t\tSystem.out.println(str.charAt(0)); // S\n\t\t\tSystem.out.println(str); //默认调用str.toString() Sakuraffy\n\t\t\tSystem.out.println(str.substring(0, 6)); // Sakura\n\t\t\t\n\t\t\t// implements Comparable\n\t\t\tSystem.out.println(str.compareTo(\"Sakuraffy\"));  // 0\n\t\t\t\n\t\t\t// others\n\t\t\tSystem.out.println(str.isEmpty()); // false\n\t\t\tSystem.out.println(str.codePointAt(0)); // 打印对应字符的Unicode编码  83        \n\t\t\tSystem.out.println(str.codePointBefore(1)); //与上面等价 83\n\t\t\t//Returns the number of Unicode code points in the specified text\n\t\t\tSystem.out.println(str.codePointCount(0, str.length()));  // 9\n\t\t\t\n\t\t\t//返回Unicode编码下String，对应字符的编码byte数组\n\t\t\tbyte[] b = new byte[10];\n\t\t\tb = str.getBytes();\n\t\t\tSystem.out.println(Arrays.toString(b)); \n\t\t\t//[83, 97, 107, 117, 114, 97, 102, 102, 121]\n\t\t\tString s = new String(\"再见\");\n\t\t\tbyte[] bb = new byte[10];\n\t\t\tbb = s.getBytes(\"GBK\");\n\t\t\tSystem.out.println(Arrays.toString(bb));\n\t\t\t//[-44, -39, -68, -5]\n\t\t\n\t\t\t//截取字符串到指定数组中\n\t\t\tchar[] c = new char[10];\n\t\t\t//getChars(int srcBegin, int srcEnd, char dst[], int dstBegin)\n\t\t\tstr.getChars(0, 6, c, 1);\n\t\t\tSystem.out.println(Arrays.toString(c));\n\t\t\t//[ ,S,a,k,u,r,a, , , ]\n\t\t\t\n\t\t\t//与CharSequence子类比较equals\n\t\t\tStringBuffer sb = new StringBuffer(\"Sakuraffy\");\n\t\t\tSystem.out.println(str.equalsIgnoreCase(\"SAKURAFFY\")); // true\n\t\t\tSystem.out.println(str.equals(sb)); // false\n\t\t\tSystem.out.println(str.contentEquals(sb)); // true\n\t\t\t\n\t\t\t//判断是否以某字符串开头或结尾\n\t\t\tSystem.out.println(str.startsWith(\"Sakura\")); // true\n\t\t\tSystem.out.println(str.endsWith(\"ffy\")); // true\n\t\t\t\n\t\t\t//索引定位\n\t\t\tSystem.out.println(str.indexOf(\"a\"));  // 1\n\t\t\tSystem.out.println(str.lastIndexOf(\"a\")); // 5\n\t\t\tSystem.out.println(str.indexOf(\"Sakura\")); // 0\n\t\t\t\n\t\t\t//字符串链接\n\t\t\tSystem.out.println(str.concat(\" hello\")); // Sakuraffy hello\n\t\t\t\n\t\t\t//字符串替换\n\t\t\tSystem.out.println(str.replace('a', 'A')); // SAkurAffy\n\t\t\tSystem.out.println(str.replaceAll(\"Sa\", \"su\")); // sukuraffy\n\t\t\t\n\t\t\t//字符串分割\n\t\t\tSystem.out.println(Arrays.toString(str.split(\"a\"))); // [S, kur, ffy]\n\t\t\t\n\t\t\t//字符串大小写转换\n\t\t\tSystem.out.println(str.toUpperCase()); // SAKURAFFY\n\t\t\tSystem.out.println(str.toLowerCase()); // sakuraffy\n\t\t\t\n\t\t\t//其它数据类型转换为String类型\n\t\t\tSystem.out.println(String.valueOf(12));  // 12\n\t\t\t\n\t\t\t//去除字符串前后空格\n\t\t\tSystem.out.println(\" hello \".trim()); // hello\n\t\t\t\n\t\t}\n\t}\n```\n\n> String类的实例对象从创建就是final不能被修改，所以每次修改后都是另外一个对象\n\n``` java\n\tpublic class TestString {\n\t\tpublic static void main(String[] args) {\n\t\t\tString str1 = new String(\"Sakuraffy\");\n\t\t\tString str2 = str1.replace('a','b');\n\t\t\tSystem.out.println(str1 == str2); // false\n\t\t}\n\t}\n```\n","slug":"java_string","published":1,"updated":"2017-03-08T11:32:14.834Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5ei0036qoq1w14hnt2j","content":"<p>我们在编程中，免不了会与字符串打交道，那么就来JDK给我们提供的字符串架构</p>\n<p>先来看一个接口 CharSequence<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CharSequence</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">length</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">char</span> <span class=\"title\">charAt</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span>;</div><div class=\"line\">\t<span class=\"function\">CharSequence <span class=\"title\">subSequence</span><span class=\"params\">(<span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>再来看看其实现类 String</p>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">String</span></span></div><div class=\"line\">   <span class=\"keyword\">implements</span> <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span>, <span class=\"title\">Comparable</span>&lt;<span class=\"title\">String</span>&gt;, <span class=\"title\">CharSequence</span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> value[];</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> hash; <span class=\"comment\">// Default to 0</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>由此看来String其本质就是一个char[]<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">this</span>.value = <span class=\"string\">\"\"</span>.value;</div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">(String original)</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">(<span class=\"keyword\">char</span> value[])</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">(<span class=\"keyword\">char</span> value[], <span class=\"keyword\">int</span> offset, <span class=\"keyword\">int</span> count)</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">(<span class=\"keyword\">int</span>[] codePoints, <span class=\"keyword\">int</span> offset, <span class=\"keyword\">int</span> count)</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">(<span class=\"keyword\">byte</span> bytes[], <span class=\"keyword\">int</span> offset, <span class=\"keyword\">int</span> length, Charset charset)</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">(StringBuffer buffer)</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">(StringBuilder builder)</span> </span>&#123;&#125;</div><div class=\"line\"> <span class=\"comment\">/*</span></div><div class=\"line\">   * Package private constructor which shares value array for speed.</div><div class=\"line\">   * this constructor is always expected to be called with share==true.</div><div class=\"line\">   * a separate constructor is needed because we already have a public</div><div class=\"line\">   * String(char[]) constructor that makes a copy of the given char[].</div><div class=\"line\">   */</div><div class=\"line\">String(<span class=\"keyword\">char</span>[] value, <span class=\"keyword\">boolean</span> share) &#123;&#125;</div></pre></td></tr></table></figure></p>\n<p>通过上面的构造函数可以发现 ：<br>byte、int和char类型的数组都可以转换为String，还可以指定其长度和字符集</p>\n<p>下面看一下重头戏 ： String类方法的使用<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestString</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> UnsupportedEncodingException </span>&#123;</div><div class=\"line\">\t\tString str = <span class=\"keyword\">new</span> String(<span class=\"string\">\"Sakuraffy\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">// implements CharSequence</span></div><div class=\"line\">\t\tSystem.out.println(str.length()); <span class=\"comment\">// 9</span></div><div class=\"line\">\t\tSystem.out.println(str.charAt(<span class=\"number\">0</span>)); <span class=\"comment\">// S</span></div><div class=\"line\">\t\tSystem.out.println(str); <span class=\"comment\">//默认调用str.toString() Sakuraffy</span></div><div class=\"line\">\t\tSystem.out.println(str.substring(<span class=\"number\">0</span>, <span class=\"number\">6</span>)); <span class=\"comment\">// Sakura</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">// implements Comparable</span></div><div class=\"line\">\t\tSystem.out.println(str.compareTo(<span class=\"string\">\"Sakuraffy\"</span>));  <span class=\"comment\">// 0</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">// others</span></div><div class=\"line\">\t\tSystem.out.println(str.isEmpty()); <span class=\"comment\">// false</span></div><div class=\"line\">\t\tSystem.out.println(str.codePointAt(<span class=\"number\">0</span>)); <span class=\"comment\">// 打印对应字符的Unicode编码  83        </span></div><div class=\"line\">\t\tSystem.out.println(str.codePointBefore(<span class=\"number\">1</span>)); <span class=\"comment\">//与上面等价 83</span></div><div class=\"line\">\t\t<span class=\"comment\">//Returns the number of Unicode code points in the specified text</span></div><div class=\"line\">\t\tSystem.out.println(str.codePointCount(<span class=\"number\">0</span>, str.length()));  <span class=\"comment\">// 9</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//返回Unicode编码下String，对应字符的编码byte数组</span></div><div class=\"line\">\t\t<span class=\"keyword\">byte</span>[] b = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">10</span>];</div><div class=\"line\">\t\tb = str.getBytes();</div><div class=\"line\">\t\tSystem.out.println(Arrays.toString(b)); </div><div class=\"line\">\t\t<span class=\"comment\">//[83, 97, 107, 117, 114, 97, 102, 102, 121]</span></div><div class=\"line\">\t\tString s = <span class=\"keyword\">new</span> String(<span class=\"string\">\"再见\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">byte</span>[] bb = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">10</span>];</div><div class=\"line\">\t\tbb = s.getBytes(<span class=\"string\">\"GBK\"</span>);</div><div class=\"line\">\t\tSystem.out.println(Arrays.toString(bb));</div><div class=\"line\">\t\t<span class=\"comment\">//[-44, -39, -68, -5]</span></div><div class=\"line\">\t</div><div class=\"line\">\t\t<span class=\"comment\">//截取字符串到指定数组中</span></div><div class=\"line\">\t\t<span class=\"keyword\">char</span>[] c = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[<span class=\"number\">10</span>];</div><div class=\"line\">\t\t<span class=\"comment\">//getChars(int srcBegin, int srcEnd, char dst[], int dstBegin)</span></div><div class=\"line\">\t\tstr.getChars(<span class=\"number\">0</span>, <span class=\"number\">6</span>, c, <span class=\"number\">1</span>);</div><div class=\"line\">\t\tSystem.out.println(Arrays.toString(c));</div><div class=\"line\">\t\t<span class=\"comment\">//[ ,S,a,k,u,r,a, , , ]</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//与CharSequence子类比较equals</span></div><div class=\"line\">\t\tStringBuffer sb = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">\"Sakuraffy\"</span>);</div><div class=\"line\">\t\tSystem.out.println(str.equalsIgnoreCase(<span class=\"string\">\"SAKURAFFY\"</span>)); <span class=\"comment\">// true</span></div><div class=\"line\">\t\tSystem.out.println(str.equals(sb)); <span class=\"comment\">// false</span></div><div class=\"line\">\t\tSystem.out.println(str.contentEquals(sb)); <span class=\"comment\">// true</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//判断是否以某字符串开头或结尾</span></div><div class=\"line\">\t\tSystem.out.println(str.startsWith(<span class=\"string\">\"Sakura\"</span>)); <span class=\"comment\">// true</span></div><div class=\"line\">\t\tSystem.out.println(str.endsWith(<span class=\"string\">\"ffy\"</span>)); <span class=\"comment\">// true</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//索引定位</span></div><div class=\"line\">\t\tSystem.out.println(str.indexOf(<span class=\"string\">\"a\"</span>));  <span class=\"comment\">// 1</span></div><div class=\"line\">\t\tSystem.out.println(str.lastIndexOf(<span class=\"string\">\"a\"</span>)); <span class=\"comment\">// 5</span></div><div class=\"line\">\t\tSystem.out.println(str.indexOf(<span class=\"string\">\"Sakura\"</span>)); <span class=\"comment\">// 0</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//字符串链接</span></div><div class=\"line\">\t\tSystem.out.println(str.concat(<span class=\"string\">\" hello\"</span>)); <span class=\"comment\">// Sakuraffy hello</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//字符串替换</span></div><div class=\"line\">\t\tSystem.out.println(str.replace(<span class=\"string\">'a'</span>, <span class=\"string\">'A'</span>)); <span class=\"comment\">// SAkurAffy</span></div><div class=\"line\">\t\tSystem.out.println(str.replaceAll(<span class=\"string\">\"Sa\"</span>, <span class=\"string\">\"su\"</span>)); <span class=\"comment\">// sukuraffy</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//字符串分割</span></div><div class=\"line\">\t\tSystem.out.println(Arrays.toString(str.split(<span class=\"string\">\"a\"</span>))); <span class=\"comment\">// [S, kur, ffy]</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//字符串大小写转换</span></div><div class=\"line\">\t\tSystem.out.println(str.toUpperCase()); <span class=\"comment\">// SAKURAFFY</span></div><div class=\"line\">\t\tSystem.out.println(str.toLowerCase()); <span class=\"comment\">// sakuraffy</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//其它数据类型转换为String类型</span></div><div class=\"line\">\t\tSystem.out.println(String.valueOf(<span class=\"number\">12</span>));  <span class=\"comment\">// 12</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//去除字符串前后空格</span></div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\" hello \"</span>.trim()); <span class=\"comment\">// hello</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>String类的实例对象从创建就是final不能被修改，所以每次修改后都是另外一个对象</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestString</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tString str1 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"Sakuraffy\"</span>);</div><div class=\"line\">\t\tString str2 = str1.replace(<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>);</div><div class=\"line\">\t\tSystem.out.println(str1 == str2); <span class=\"comment\">// false</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"<p>我们在编程中，免不了会与字符串打交道，那么就来JDK给我们提供的字符串架构</p>\n<p>先来看一个接口 CharSequence<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CharSequence</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">length</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">char</span> <span class=\"title\">charAt</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span>;</div><div class=\"line\">\t<span class=\"function\">CharSequence <span class=\"title\">subSequence</span><span class=\"params\">(<span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>再来看看其实现类 String</p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">String</span></div><div class=\"line\">   <span class=\"keyword\">implements</span> <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span>, <span class=\"title\">Comparable</span>&lt;<span class=\"title\">String</span>&gt;, <span class=\"title\">CharSequence</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> value[];</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> hash; <span class=\"comment\">// Default to 0</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>由此看来String其本质就是一个char[]<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">this</span>.value = <span class=\"string\">\"\"</span>.value;</div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">(String original)</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">(<span class=\"keyword\">char</span> value[])</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">(<span class=\"keyword\">char</span> value[], <span class=\"keyword\">int</span> offset, <span class=\"keyword\">int</span> count)</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">(<span class=\"keyword\">int</span>[] codePoints, <span class=\"keyword\">int</span> offset, <span class=\"keyword\">int</span> count)</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">(<span class=\"keyword\">byte</span> bytes[], <span class=\"keyword\">int</span> offset, <span class=\"keyword\">int</span> length, Charset charset)</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">(StringBuffer buffer)</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">(StringBuilder builder)</span> </span>&#123;&#125;</div><div class=\"line\"> <span class=\"comment\">/*</div><div class=\"line\">   * Package private constructor which shares value array for speed.</div><div class=\"line\">   * this constructor is always expected to be called with share==true.</div><div class=\"line\">   * a separate constructor is needed because we already have a public</div><div class=\"line\">   * String(char[]) constructor that makes a copy of the given char[].</div><div class=\"line\">   */</span></div><div class=\"line\">String(<span class=\"keyword\">char</span>[] value, <span class=\"keyword\">boolean</span> share) &#123;&#125;</div></pre></td></tr></table></figure></p>\n<p>通过上面的构造函数可以发现 ：<br>byte、int和char类型的数组都可以转换为String，还可以指定其长度和字符集</p>\n<p>下面看一下重头戏 ： String类方法的使用<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestString</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> UnsupportedEncodingException </span>&#123;</div><div class=\"line\">\t\tString str = <span class=\"keyword\">new</span> String(<span class=\"string\">\"Sakuraffy\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">// implements CharSequence</span></div><div class=\"line\">\t\tSystem.out.println(str.length()); <span class=\"comment\">// 9</span></div><div class=\"line\">\t\tSystem.out.println(str.charAt(<span class=\"number\">0</span>)); <span class=\"comment\">// S</span></div><div class=\"line\">\t\tSystem.out.println(str); <span class=\"comment\">//默认调用str.toString() Sakuraffy</span></div><div class=\"line\">\t\tSystem.out.println(str.substring(<span class=\"number\">0</span>, <span class=\"number\">6</span>)); <span class=\"comment\">// Sakura</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">// implements Comparable</span></div><div class=\"line\">\t\tSystem.out.println(str.compareTo(<span class=\"string\">\"Sakuraffy\"</span>));  <span class=\"comment\">// 0</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">// others</span></div><div class=\"line\">\t\tSystem.out.println(str.isEmpty()); <span class=\"comment\">// false</span></div><div class=\"line\">\t\tSystem.out.println(str.codePointAt(<span class=\"number\">0</span>)); <span class=\"comment\">// 打印对应字符的Unicode编码  83        </span></div><div class=\"line\">\t\tSystem.out.println(str.codePointBefore(<span class=\"number\">1</span>)); <span class=\"comment\">//与上面等价 83</span></div><div class=\"line\">\t\t<span class=\"comment\">//Returns the number of Unicode code points in the specified text</span></div><div class=\"line\">\t\tSystem.out.println(str.codePointCount(<span class=\"number\">0</span>, str.length()));  <span class=\"comment\">// 9</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//返回Unicode编码下String，对应字符的编码byte数组</span></div><div class=\"line\">\t\t<span class=\"keyword\">byte</span>[] b = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">10</span>];</div><div class=\"line\">\t\tb = str.getBytes();</div><div class=\"line\">\t\tSystem.out.println(Arrays.toString(b)); </div><div class=\"line\">\t\t<span class=\"comment\">//[83, 97, 107, 117, 114, 97, 102, 102, 121]</span></div><div class=\"line\">\t\tString s = <span class=\"keyword\">new</span> String(<span class=\"string\">\"再见\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">byte</span>[] bb = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">10</span>];</div><div class=\"line\">\t\tbb = s.getBytes(<span class=\"string\">\"GBK\"</span>);</div><div class=\"line\">\t\tSystem.out.println(Arrays.toString(bb));</div><div class=\"line\">\t\t<span class=\"comment\">//[-44, -39, -68, -5]</span></div><div class=\"line\">\t</div><div class=\"line\">\t\t<span class=\"comment\">//截取字符串到指定数组中</span></div><div class=\"line\">\t\t<span class=\"keyword\">char</span>[] c = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[<span class=\"number\">10</span>];</div><div class=\"line\">\t\t<span class=\"comment\">//getChars(int srcBegin, int srcEnd, char dst[], int dstBegin)</span></div><div class=\"line\">\t\tstr.getChars(<span class=\"number\">0</span>, <span class=\"number\">6</span>, c, <span class=\"number\">1</span>);</div><div class=\"line\">\t\tSystem.out.println(Arrays.toString(c));</div><div class=\"line\">\t\t<span class=\"comment\">//[ ,S,a,k,u,r,a, , , ]</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//与CharSequence子类比较equals</span></div><div class=\"line\">\t\tStringBuffer sb = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">\"Sakuraffy\"</span>);</div><div class=\"line\">\t\tSystem.out.println(str.equalsIgnoreCase(<span class=\"string\">\"SAKURAFFY\"</span>)); <span class=\"comment\">// true</span></div><div class=\"line\">\t\tSystem.out.println(str.equals(sb)); <span class=\"comment\">// false</span></div><div class=\"line\">\t\tSystem.out.println(str.contentEquals(sb)); <span class=\"comment\">// true</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//判断是否以某字符串开头或结尾</span></div><div class=\"line\">\t\tSystem.out.println(str.startsWith(<span class=\"string\">\"Sakura\"</span>)); <span class=\"comment\">// true</span></div><div class=\"line\">\t\tSystem.out.println(str.endsWith(<span class=\"string\">\"ffy\"</span>)); <span class=\"comment\">// true</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//索引定位</span></div><div class=\"line\">\t\tSystem.out.println(str.indexOf(<span class=\"string\">\"a\"</span>));  <span class=\"comment\">// 1</span></div><div class=\"line\">\t\tSystem.out.println(str.lastIndexOf(<span class=\"string\">\"a\"</span>)); <span class=\"comment\">// 5</span></div><div class=\"line\">\t\tSystem.out.println(str.indexOf(<span class=\"string\">\"Sakura\"</span>)); <span class=\"comment\">// 0</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//字符串链接</span></div><div class=\"line\">\t\tSystem.out.println(str.concat(<span class=\"string\">\" hello\"</span>)); <span class=\"comment\">// Sakuraffy hello</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//字符串替换</span></div><div class=\"line\">\t\tSystem.out.println(str.replace(<span class=\"string\">'a'</span>, <span class=\"string\">'A'</span>)); <span class=\"comment\">// SAkurAffy</span></div><div class=\"line\">\t\tSystem.out.println(str.replaceAll(<span class=\"string\">\"Sa\"</span>, <span class=\"string\">\"su\"</span>)); <span class=\"comment\">// sukuraffy</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//字符串分割</span></div><div class=\"line\">\t\tSystem.out.println(Arrays.toString(str.split(<span class=\"string\">\"a\"</span>))); <span class=\"comment\">// [S, kur, ffy]</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//字符串大小写转换</span></div><div class=\"line\">\t\tSystem.out.println(str.toUpperCase()); <span class=\"comment\">// SAKURAFFY</span></div><div class=\"line\">\t\tSystem.out.println(str.toLowerCase()); <span class=\"comment\">// sakuraffy</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//其它数据类型转换为String类型</span></div><div class=\"line\">\t\tSystem.out.println(String.valueOf(<span class=\"number\">12</span>));  <span class=\"comment\">// 12</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//去除字符串前后空格</span></div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\" hello \"</span>.trim()); <span class=\"comment\">// hello</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>String类的实例对象从创建就是final不能被修改，所以每次修改后都是另外一个对象</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestString</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tString str1 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"Sakuraffy\"</span>);</div><div class=\"line\">\t\tString str2 = str1.replace(<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>);</div><div class=\"line\">\t\tSystem.out.println(str1 == str2); <span class=\"comment\">// false</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"字节码指令集","date":"2016-09-11T12:25:02.000Z","_content":"编写程序，对于程序员来说是一行行代码，可是对于JVM来说，可不是如此，它认识的都是字节码指令\n我们知道数据类型有基本数据类型（boolean、byte、char、short、int、long、float、double）和引用（reference）数据类型，以及返回值（returnAddress）数据类型\n对于大部分与数据类型相关的字节码来说，它们的操作码助记符中都有特殊的字符来表名该指令为哪种数据类型来服务：i代表对int类型的数据操作，l代表long，b代表byte，c代表char，s代表short,f代表float,d代表double,a代表reference\n而对于JVM来说会将基本数据类型的char、short、byte、int都当作int来处理\n\n<!--more-->\n\n###  加载和存储指令\n\n- 加载和存储指令用于将数据从栈帧的本地变量表（局部变量表）和操作数栈之间来回传递\n将本地变量加载到操作数栈的指令包括 ： iload、iload\\_&lt;n&gt;、fload、fload\\_&lt;n&gt;、dload、dload\\_&lt;n&gt;、aload、aload\\_&lt;n&gt;\n- 将常量加载到操作数栈的指令包括 ：\nbipush、sipush、ldc、ldc\\_w、ldc2\\_w、aconst\\_null、iconst\\_ml、iconst\\_&lt;i&gt;、fconst\\_&lt;f&gt;、lconst\\_&lt;l&gt;、dconst_\\_&lt;d&gt;\n- 将数值从操作数栈存储到局部变量表的指令包括 ：\nistore、istore\\_&lt;n&gt;、fstore、fstore\\_&lt;n&gt;、dstore、dstore\\_&lt;n&gt;、astore、astore\\_&lt;n&gt;\n- 用于补充局部变量表的访问索引或立即数的指令 ： wide\n\n&lt;n&gt; : 表示非负整数\n&lt;i&gt; : 表示int类型数据\n&lt;l&gt; : 表示long类型数据\n&lt;f&gt; : 表示float类型数据\n&lt;d&gt; : 表示double类型数据\n\n> 算术指令\n\n- 加法指令 ： iadd,ladd,fadd,dadd\n- 加法指令 ： isub,lsub,fsub,dsub\n- 乘法指令 ： imul,lmul,fmul,dmul\n- 除法指令 ： idiv,ldiv,fdiv,ddiv\n- 取余指令 ： irem,lrem,frem,drem\n- 求负值指令 ：ineg,lneg,fneg,dneg\n- 移位指令 ： ishl,ishr,iushr,lshl,lshr,lushr\n- 按位或指令 ：ior,lor\n- 按位与指令 ： iand,land\n- 按位异或指令 ：ixor,lxor\n- 局部变量自增指令 ：iinc\n- 比较指令 ： dcmpg,dcmpl,fcmpg,fcmpl,lcmp\n\n### 类型转化指令\n\n类型转换可以分为两种：宽化类型转换和窄化类型转换\n#### 宽化类型转换\n所谓的宽化类型转换就是从小范围类型向大范围类型，数据安全，不会失真\n从int类型可以转换为long、float、double\n从long类型可以转换为float、double\n从float类型可以转换到double\n相关指令i2d(\"2\"(two))表示从int转化到double\n\n#### 窄化类型转换\n\n所谓的窄化类型转换就是从大范围类型向小范围类型，数据不安全，可能会失真\n就是将上面倒过来，再加上int类型转化为char、short、byte\n对于浮点型数据转换为int或long时，简单来说就是将其小数部分舍去\n\n### 对象创建与操作\n\n- 类对象实例创建的指令 ： new\n- 数组创建的指令 ： newarray, anewarray, multianewarray\n- 访问类字段和类实例字段的指令 ：getstatic,putstatic,getfield,putfield\n- 将一个数组元素加载到操作数栈的指令 ： baload,caload,saload,iaload,laload,faload,daload,aaload\n- 将操作数栈的值存储到数组元素中的指令 ： bastore,castore,sastore,iastore,lastore,fastore,dastore,aastore\n- 取数组长度指令 ： arraylength\n- 检查类实例或数组实例的指令 ： instanceof、checkcast\n\n### 操作数栈管理指令\n\n一些直接控制操作数栈的指令，包括：pop,pop2,dup,dup2,dup\\_x1,dup2\\_x1,dup2\\_x2和swap\n\n### 控制转移指令\n\n-  条件分支：ifeq,iflt,ifne,ifge,ifgt,ifnull,ifnonnull,if_icmpeq,if_icmpne,if_icmplt,if_cmpgt,if_icmpge,if_cmpge,if_icmpeq,if_acmpne\n- 复合条件分支：tableswitch,lookupswitch\n- 无条件分支：goto,goto_w,jsr,jsr_w,ret\n\n### 方法调用和转移指令\n\n方法调用指令一般有5个 ：\n- invokevirtual ： 调用对象的实例方法\n- invokeinterface : 调用接口方法\n- invokespecial ： 调用特殊实例方法（例如父类的方法）\n- invokestatic ： 调用静态方法\n- invokedynamic ： 调用多态方法\n\n方法返回指令根据返回值的类型进行区分，包括ireturn，lreturn,freturn,dreturn和areturn，另外return指令供申明为void的方法、实例对象，类初始化方法使用\n\n### 异常\n\n通常用athrow指令抛出异常","source":"_posts/jvm_bytecode.md","raw":"---\ntitle: 字节码指令集\ndate: 2016-09-11 20:25:02\ntags:\n\t- JVM\n---\n编写程序，对于程序员来说是一行行代码，可是对于JVM来说，可不是如此，它认识的都是字节码指令\n我们知道数据类型有基本数据类型（boolean、byte、char、short、int、long、float、double）和引用（reference）数据类型，以及返回值（returnAddress）数据类型\n对于大部分与数据类型相关的字节码来说，它们的操作码助记符中都有特殊的字符来表名该指令为哪种数据类型来服务：i代表对int类型的数据操作，l代表long，b代表byte，c代表char，s代表short,f代表float,d代表double,a代表reference\n而对于JVM来说会将基本数据类型的char、short、byte、int都当作int来处理\n\n<!--more-->\n\n###  加载和存储指令\n\n- 加载和存储指令用于将数据从栈帧的本地变量表（局部变量表）和操作数栈之间来回传递\n将本地变量加载到操作数栈的指令包括 ： iload、iload\\_&lt;n&gt;、fload、fload\\_&lt;n&gt;、dload、dload\\_&lt;n&gt;、aload、aload\\_&lt;n&gt;\n- 将常量加载到操作数栈的指令包括 ：\nbipush、sipush、ldc、ldc\\_w、ldc2\\_w、aconst\\_null、iconst\\_ml、iconst\\_&lt;i&gt;、fconst\\_&lt;f&gt;、lconst\\_&lt;l&gt;、dconst_\\_&lt;d&gt;\n- 将数值从操作数栈存储到局部变量表的指令包括 ：\nistore、istore\\_&lt;n&gt;、fstore、fstore\\_&lt;n&gt;、dstore、dstore\\_&lt;n&gt;、astore、astore\\_&lt;n&gt;\n- 用于补充局部变量表的访问索引或立即数的指令 ： wide\n\n&lt;n&gt; : 表示非负整数\n&lt;i&gt; : 表示int类型数据\n&lt;l&gt; : 表示long类型数据\n&lt;f&gt; : 表示float类型数据\n&lt;d&gt; : 表示double类型数据\n\n> 算术指令\n\n- 加法指令 ： iadd,ladd,fadd,dadd\n- 加法指令 ： isub,lsub,fsub,dsub\n- 乘法指令 ： imul,lmul,fmul,dmul\n- 除法指令 ： idiv,ldiv,fdiv,ddiv\n- 取余指令 ： irem,lrem,frem,drem\n- 求负值指令 ：ineg,lneg,fneg,dneg\n- 移位指令 ： ishl,ishr,iushr,lshl,lshr,lushr\n- 按位或指令 ：ior,lor\n- 按位与指令 ： iand,land\n- 按位异或指令 ：ixor,lxor\n- 局部变量自增指令 ：iinc\n- 比较指令 ： dcmpg,dcmpl,fcmpg,fcmpl,lcmp\n\n### 类型转化指令\n\n类型转换可以分为两种：宽化类型转换和窄化类型转换\n#### 宽化类型转换\n所谓的宽化类型转换就是从小范围类型向大范围类型，数据安全，不会失真\n从int类型可以转换为long、float、double\n从long类型可以转换为float、double\n从float类型可以转换到double\n相关指令i2d(\"2\"(two))表示从int转化到double\n\n#### 窄化类型转换\n\n所谓的窄化类型转换就是从大范围类型向小范围类型，数据不安全，可能会失真\n就是将上面倒过来，再加上int类型转化为char、short、byte\n对于浮点型数据转换为int或long时，简单来说就是将其小数部分舍去\n\n### 对象创建与操作\n\n- 类对象实例创建的指令 ： new\n- 数组创建的指令 ： newarray, anewarray, multianewarray\n- 访问类字段和类实例字段的指令 ：getstatic,putstatic,getfield,putfield\n- 将一个数组元素加载到操作数栈的指令 ： baload,caload,saload,iaload,laload,faload,daload,aaload\n- 将操作数栈的值存储到数组元素中的指令 ： bastore,castore,sastore,iastore,lastore,fastore,dastore,aastore\n- 取数组长度指令 ： arraylength\n- 检查类实例或数组实例的指令 ： instanceof、checkcast\n\n### 操作数栈管理指令\n\n一些直接控制操作数栈的指令，包括：pop,pop2,dup,dup2,dup\\_x1,dup2\\_x1,dup2\\_x2和swap\n\n### 控制转移指令\n\n-  条件分支：ifeq,iflt,ifne,ifge,ifgt,ifnull,ifnonnull,if_icmpeq,if_icmpne,if_icmplt,if_cmpgt,if_icmpge,if_cmpge,if_icmpeq,if_acmpne\n- 复合条件分支：tableswitch,lookupswitch\n- 无条件分支：goto,goto_w,jsr,jsr_w,ret\n\n### 方法调用和转移指令\n\n方法调用指令一般有5个 ：\n- invokevirtual ： 调用对象的实例方法\n- invokeinterface : 调用接口方法\n- invokespecial ： 调用特殊实例方法（例如父类的方法）\n- invokestatic ： 调用静态方法\n- invokedynamic ： 调用多态方法\n\n方法返回指令根据返回值的类型进行区分，包括ireturn，lreturn,freturn,dreturn和areturn，另外return指令供申明为void的方法、实例对象，类初始化方法使用\n\n### 异常\n\n通常用athrow指令抛出异常","slug":"jvm_bytecode","published":1,"updated":"2017-03-08T11:41:04.461Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5ek0038qoq1raqr5svd","content":"<p>编写程序，对于程序员来说是一行行代码，可是对于JVM来说，可不是如此，它认识的都是字节码指令<br>我们知道数据类型有基本数据类型（boolean、byte、char、short、int、long、float、double）和引用（reference）数据类型，以及返回值（returnAddress）数据类型<br>对于大部分与数据类型相关的字节码来说，它们的操作码助记符中都有特殊的字符来表名该指令为哪种数据类型来服务：i代表对int类型的数据操作，l代表long，b代表byte，c代表char，s代表short,f代表float,d代表double,a代表reference<br>而对于JVM来说会将基本数据类型的char、short、byte、int都当作int来处理</p>\n<a id=\"more\"></a>\n<h3 id=\"加载和存储指令\"><a href=\"#加载和存储指令\" class=\"headerlink\" title=\"加载和存储指令\"></a>加载和存储指令</h3><ul>\n<li>加载和存储指令用于将数据从栈帧的本地变量表（局部变量表）和操作数栈之间来回传递<br>将本地变量加载到操作数栈的指令包括 ： iload、iload_&lt;n&gt;、fload、fload_&lt;n&gt;、dload、dload_&lt;n&gt;、aload、aload_&lt;n&gt;</li>\n<li>将常量加载到操作数栈的指令包括 ：<br>bipush、sipush、ldc、ldc_w、ldc2_w、aconst_null、iconst_ml、iconst_&lt;i&gt;、fconst_&lt;f&gt;、lconst_&lt;l&gt;、dconst<em>\\</em>&lt;d&gt;</li>\n<li>将数值从操作数栈存储到局部变量表的指令包括 ：<br>istore、istore_&lt;n&gt;、fstore、fstore_&lt;n&gt;、dstore、dstore_&lt;n&gt;、astore、astore_&lt;n&gt;</li>\n<li>用于补充局部变量表的访问索引或立即数的指令 ： wide</li>\n</ul>\n<p>&lt;n&gt; : 表示非负整数<br>&lt;i&gt; : 表示int类型数据<br>&lt;l&gt; : 表示long类型数据<br>&lt;f&gt; : 表示float类型数据<br>&lt;d&gt; : 表示double类型数据</p>\n<blockquote>\n<p>算术指令</p>\n</blockquote>\n<ul>\n<li>加法指令 ： iadd,ladd,fadd,dadd</li>\n<li>加法指令 ： isub,lsub,fsub,dsub</li>\n<li>乘法指令 ： imul,lmul,fmul,dmul</li>\n<li>除法指令 ： idiv,ldiv,fdiv,ddiv</li>\n<li>取余指令 ： irem,lrem,frem,drem</li>\n<li>求负值指令 ：ineg,lneg,fneg,dneg</li>\n<li>移位指令 ： ishl,ishr,iushr,lshl,lshr,lushr</li>\n<li>按位或指令 ：ior,lor</li>\n<li>按位与指令 ： iand,land</li>\n<li>按位异或指令 ：ixor,lxor</li>\n<li>局部变量自增指令 ：iinc</li>\n<li>比较指令 ： dcmpg,dcmpl,fcmpg,fcmpl,lcmp</li>\n</ul>\n<h3 id=\"类型转化指令\"><a href=\"#类型转化指令\" class=\"headerlink\" title=\"类型转化指令\"></a>类型转化指令</h3><p>类型转换可以分为两种：宽化类型转换和窄化类型转换</p>\n<h4 id=\"宽化类型转换\"><a href=\"#宽化类型转换\" class=\"headerlink\" title=\"宽化类型转换\"></a>宽化类型转换</h4><p>所谓的宽化类型转换就是从小范围类型向大范围类型，数据安全，不会失真<br>从int类型可以转换为long、float、double<br>从long类型可以转换为float、double<br>从float类型可以转换到double<br>相关指令i2d(“2”(two))表示从int转化到double</p>\n<h4 id=\"窄化类型转换\"><a href=\"#窄化类型转换\" class=\"headerlink\" title=\"窄化类型转换\"></a>窄化类型转换</h4><p>所谓的窄化类型转换就是从大范围类型向小范围类型，数据不安全，可能会失真<br>就是将上面倒过来，再加上int类型转化为char、short、byte<br>对于浮点型数据转换为int或long时，简单来说就是将其小数部分舍去</p>\n<h3 id=\"对象创建与操作\"><a href=\"#对象创建与操作\" class=\"headerlink\" title=\"对象创建与操作\"></a>对象创建与操作</h3><ul>\n<li>类对象实例创建的指令 ： new</li>\n<li>数组创建的指令 ： newarray, anewarray, multianewarray</li>\n<li>访问类字段和类实例字段的指令 ：getstatic,putstatic,getfield,putfield</li>\n<li>将一个数组元素加载到操作数栈的指令 ： baload,caload,saload,iaload,laload,faload,daload,aaload</li>\n<li>将操作数栈的值存储到数组元素中的指令 ： bastore,castore,sastore,iastore,lastore,fastore,dastore,aastore</li>\n<li>取数组长度指令 ： arraylength</li>\n<li>检查类实例或数组实例的指令 ： instanceof、checkcast</li>\n</ul>\n<h3 id=\"操作数栈管理指令\"><a href=\"#操作数栈管理指令\" class=\"headerlink\" title=\"操作数栈管理指令\"></a>操作数栈管理指令</h3><p>一些直接控制操作数栈的指令，包括：pop,pop2,dup,dup2,dup_x1,dup2_x1,dup2_x2和swap</p>\n<h3 id=\"控制转移指令\"><a href=\"#控制转移指令\" class=\"headerlink\" title=\"控制转移指令\"></a>控制转移指令</h3><ul>\n<li>条件分支：ifeq,iflt,ifne,ifge,ifgt,ifnull,ifnonnull,if_icmpeq,if_icmpne,if_icmplt,if_cmpgt,if_icmpge,if_cmpge,if_icmpeq,if_acmpne</li>\n<li>复合条件分支：tableswitch,lookupswitch</li>\n<li>无条件分支：goto,goto_w,jsr,jsr_w,ret</li>\n</ul>\n<h3 id=\"方法调用和转移指令\"><a href=\"#方法调用和转移指令\" class=\"headerlink\" title=\"方法调用和转移指令\"></a>方法调用和转移指令</h3><p>方法调用指令一般有5个 ：</p>\n<ul>\n<li>invokevirtual ： 调用对象的实例方法</li>\n<li>invokeinterface : 调用接口方法</li>\n<li>invokespecial ： 调用特殊实例方法（例如父类的方法）</li>\n<li>invokestatic ： 调用静态方法</li>\n<li>invokedynamic ： 调用多态方法</li>\n</ul>\n<p>方法返回指令根据返回值的类型进行区分，包括ireturn，lreturn,freturn,dreturn和areturn，另外return指令供申明为void的方法、实例对象，类初始化方法使用</p>\n<h3 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h3><p>通常用athrow指令抛出异常</p>\n","excerpt":"<p>编写程序，对于程序员来说是一行行代码，可是对于JVM来说，可不是如此，它认识的都是字节码指令<br>我们知道数据类型有基本数据类型（boolean、byte、char、short、int、long、float、double）和引用（reference）数据类型，以及返回值（returnAddress）数据类型<br>对于大部分与数据类型相关的字节码来说，它们的操作码助记符中都有特殊的字符来表名该指令为哪种数据类型来服务：i代表对int类型的数据操作，l代表long，b代表byte，c代表char，s代表short,f代表float,d代表double,a代表reference<br>而对于JVM来说会将基本数据类型的char、short、byte、int都当作int来处理</p>","more":"<h3 id=\"加载和存储指令\"><a href=\"#加载和存储指令\" class=\"headerlink\" title=\"加载和存储指令\"></a>加载和存储指令</h3><ul>\n<li>加载和存储指令用于将数据从栈帧的本地变量表（局部变量表）和操作数栈之间来回传递<br>将本地变量加载到操作数栈的指令包括 ： iload、iload_&lt;n&gt;、fload、fload_&lt;n&gt;、dload、dload_&lt;n&gt;、aload、aload_&lt;n&gt;</li>\n<li>将常量加载到操作数栈的指令包括 ：<br>bipush、sipush、ldc、ldc_w、ldc2_w、aconst_null、iconst_ml、iconst_&lt;i&gt;、fconst_&lt;f&gt;、lconst_&lt;l&gt;、dconst<em>\\</em>&lt;d&gt;</li>\n<li>将数值从操作数栈存储到局部变量表的指令包括 ：<br>istore、istore_&lt;n&gt;、fstore、fstore_&lt;n&gt;、dstore、dstore_&lt;n&gt;、astore、astore_&lt;n&gt;</li>\n<li>用于补充局部变量表的访问索引或立即数的指令 ： wide</li>\n</ul>\n<p>&lt;n&gt; : 表示非负整数<br>&lt;i&gt; : 表示int类型数据<br>&lt;l&gt; : 表示long类型数据<br>&lt;f&gt; : 表示float类型数据<br>&lt;d&gt; : 表示double类型数据</p>\n<blockquote>\n<p>算术指令</p>\n</blockquote>\n<ul>\n<li>加法指令 ： iadd,ladd,fadd,dadd</li>\n<li>加法指令 ： isub,lsub,fsub,dsub</li>\n<li>乘法指令 ： imul,lmul,fmul,dmul</li>\n<li>除法指令 ： idiv,ldiv,fdiv,ddiv</li>\n<li>取余指令 ： irem,lrem,frem,drem</li>\n<li>求负值指令 ：ineg,lneg,fneg,dneg</li>\n<li>移位指令 ： ishl,ishr,iushr,lshl,lshr,lushr</li>\n<li>按位或指令 ：ior,lor</li>\n<li>按位与指令 ： iand,land</li>\n<li>按位异或指令 ：ixor,lxor</li>\n<li>局部变量自增指令 ：iinc</li>\n<li>比较指令 ： dcmpg,dcmpl,fcmpg,fcmpl,lcmp</li>\n</ul>\n<h3 id=\"类型转化指令\"><a href=\"#类型转化指令\" class=\"headerlink\" title=\"类型转化指令\"></a>类型转化指令</h3><p>类型转换可以分为两种：宽化类型转换和窄化类型转换</p>\n<h4 id=\"宽化类型转换\"><a href=\"#宽化类型转换\" class=\"headerlink\" title=\"宽化类型转换\"></a>宽化类型转换</h4><p>所谓的宽化类型转换就是从小范围类型向大范围类型，数据安全，不会失真<br>从int类型可以转换为long、float、double<br>从long类型可以转换为float、double<br>从float类型可以转换到double<br>相关指令i2d(“2”(two))表示从int转化到double</p>\n<h4 id=\"窄化类型转换\"><a href=\"#窄化类型转换\" class=\"headerlink\" title=\"窄化类型转换\"></a>窄化类型转换</h4><p>所谓的窄化类型转换就是从大范围类型向小范围类型，数据不安全，可能会失真<br>就是将上面倒过来，再加上int类型转化为char、short、byte<br>对于浮点型数据转换为int或long时，简单来说就是将其小数部分舍去</p>\n<h3 id=\"对象创建与操作\"><a href=\"#对象创建与操作\" class=\"headerlink\" title=\"对象创建与操作\"></a>对象创建与操作</h3><ul>\n<li>类对象实例创建的指令 ： new</li>\n<li>数组创建的指令 ： newarray, anewarray, multianewarray</li>\n<li>访问类字段和类实例字段的指令 ：getstatic,putstatic,getfield,putfield</li>\n<li>将一个数组元素加载到操作数栈的指令 ： baload,caload,saload,iaload,laload,faload,daload,aaload</li>\n<li>将操作数栈的值存储到数组元素中的指令 ： bastore,castore,sastore,iastore,lastore,fastore,dastore,aastore</li>\n<li>取数组长度指令 ： arraylength</li>\n<li>检查类实例或数组实例的指令 ： instanceof、checkcast</li>\n</ul>\n<h3 id=\"操作数栈管理指令\"><a href=\"#操作数栈管理指令\" class=\"headerlink\" title=\"操作数栈管理指令\"></a>操作数栈管理指令</h3><p>一些直接控制操作数栈的指令，包括：pop,pop2,dup,dup2,dup_x1,dup2_x1,dup2_x2和swap</p>\n<h3 id=\"控制转移指令\"><a href=\"#控制转移指令\" class=\"headerlink\" title=\"控制转移指令\"></a>控制转移指令</h3><ul>\n<li>条件分支：ifeq,iflt,ifne,ifge,ifgt,ifnull,ifnonnull,if_icmpeq,if_icmpne,if_icmplt,if_cmpgt,if_icmpge,if_cmpge,if_icmpeq,if_acmpne</li>\n<li>复合条件分支：tableswitch,lookupswitch</li>\n<li>无条件分支：goto,goto_w,jsr,jsr_w,ret</li>\n</ul>\n<h3 id=\"方法调用和转移指令\"><a href=\"#方法调用和转移指令\" class=\"headerlink\" title=\"方法调用和转移指令\"></a>方法调用和转移指令</h3><p>方法调用指令一般有5个 ：</p>\n<ul>\n<li>invokevirtual ： 调用对象的实例方法</li>\n<li>invokeinterface : 调用接口方法</li>\n<li>invokespecial ： 调用特殊实例方法（例如父类的方法）</li>\n<li>invokestatic ： 调用静态方法</li>\n<li>invokedynamic ： 调用多态方法</li>\n</ul>\n<p>方法返回指令根据返回值的类型进行区分，包括ireturn，lreturn,freturn,dreturn和areturn，另外return指令供申明为void的方法、实例对象，类初始化方法使用</p>\n<h3 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h3><p>通常用athrow指令抛出异常</p>"},{"title":"JVM内存分区","date":"2016-09-16T17:58:23.000Z","_content":"我们知道对于Java而言，.java文件是不能运行的，需要编译成为.class文件才能被load到内存被执行，那么JVM(Java Virtual Machine)的内存又是怎么进行分配及各部分又该实现什么功能的呢？\n一般认为JVM内存主要分为PC寄存器，堆，栈，方法区，本地方法区五大部分\n### PC寄存器\n\nJVM可以同时支持多个线程同时执行，每一个线程都有自己的PC寄存器，在任意时刻，一个线程只能执行一个方法的代码，这个正在被执行的方法叫做当前方法，若这个方法是native，那PC寄存器就保存JVM正在执行的字节码指令的地址，如果这个方法不是native的，那么PC寄存器的值为undefined，PC寄存器的大小至少应当为一个与平台相关的本地指针的值或一个返回值类型的数据\n\n<!--more-->\n\n### 堆\n\n堆的容量可以是固定的，也可以是动态分配的，它所占用内存不需要保证是连续的\n\n堆是供各个线程共享的运行时内存区域，它是存放所有类实例和数组对象分配的区域\n\n###  栈\n\n栈的容量可以是固定的，也可以是动态分配的，它所占用内存不需要保证是连续的\n每个线程都拥有自己的栈，栈是存放局部变量和一些尚未计算好的值\n\n#### 栈帧\n栈帧是用来存储数据和部分过程结构的数据结构，同时也用来处理动态链接、方法返回值和异常分派\n栈帧随着方法的调用而创建，随着方法的结束而销毁。栈帧的存储空间由创建它的线程分配在栈中，每一个栈帧都有自己的局部变量表，操作数栈和指向当前方法所属的类的常量池的引用\n\n\t- 局部变量表\n\t简单来说局部变量就是用来存储变量的表，局部变量使用索引来进行定位访问。首个局部变量的索引值是0，所存储的是该实例方法所在对象的引用（即Java语言中的this关键字）\n\t一个局部变量所占4个字节，也就是说一个局部变量可以保存一个类型为boolean、char、byte、short、int、float、reference或returnAddress的数据，而对于long和double类型的数据则需要两个局部变量进行保存\n\n\t- 操作数栈\n\t每个栈帧中包含一个先进后出的操作数栈，操作数栈的作用就是将局部变量表中的数据进行字节码指令操作，其中一个long或double类型数据占两个单位的栈深度 \n\n\t- 动态链接\n\t每个栈帧内部都有一个指向当前方法所在类型的常量池的引用，以便对当前方法的代码实现动态链接，在class文件中一个方法要想调用其它方法或者成员常量，则需要通过符号引用来表示，动态链接的作用就是这些符号引用所表示的方法或成员变量转换为对实际方法的直接引用，通过类加载加载调用\n\n### 方法区\n\n- 方法区的容量可以是固定的，也可以是动态分配的，它所占用内存不需要保证是连续的。它是堆的逻辑组成部分\n- 在JVM中，方法区是可供各个线程共享的运行时内存区域。方法区存储每个类的结构信息，例如，字段、方法数据、构造函数、普通方法和常量池的字节码内容\n\n### 常量池\n\n运行时常量池是class文件中每一个接口或类运行时的表现形式，它包含若干种不同的常量，从编译期可知的数值字面量到必须在运行期解析后才能获得的方法或字段\n下面展示一个Java初学者容易犯的错误\n``` java\npublic class TestString {\n\tpublic static void main(String[] args) {\n\t\tString str1 = \"abc\";\n\t\tString str2 = new String(\"abc\");\n\t\tString str3 = \"a\" + \"bc\";\n\t\tString str4 = new String(\"a\") + new String(\"bc\");\n\t\tString s5 = \"a\";\n\t\tString s6 = \"bc\";\n\t\tString str5 = s5 + s6;\n\t\tSystem.out.println(str1 == str2);\n\t\tSystem.out.println(str1 == str3);\n\t\tSystem.out.println(str1 == str4);\n\t\tSystem.out.println(str1 == str5);\n\t\tSystem.out.println(str2 == str3);\n\t\tSystem.out.println(str2 == str4);\n\t\tSystem.out.println(str2 == str5);\n\t}\n}\n```\n输出结果 ：\n``` java\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\n```\n\n通过对比分析可知 ：\n- new出来的对象==比较只有同一对象才会为true\n- String str3 = \"a\" + \"bc\";编译器默认合并，与String str3 = \"abc\"等价\n- String str1 = \"abc\";在常量池中分配，String str2 = new String(\"abc\");在堆中分配\n\n### 本地方法栈\n\nJVM实现可能会使用到传统栈（例如C stack）来支持native方法（使用Java以外的其它语言编写的方法）的执行，这个栈就是本地方法栈。当JVM使用其他语言来实现指令解释器时，也可以使用本地方法栈\n","source":"_posts/jvm_memory.md","raw":"---\ntitle: JVM内存分区\ndate: 2016-09-17 01:58:23\ntags:\n\t- JVM\n---\n我们知道对于Java而言，.java文件是不能运行的，需要编译成为.class文件才能被load到内存被执行，那么JVM(Java Virtual Machine)的内存又是怎么进行分配及各部分又该实现什么功能的呢？\n一般认为JVM内存主要分为PC寄存器，堆，栈，方法区，本地方法区五大部分\n### PC寄存器\n\nJVM可以同时支持多个线程同时执行，每一个线程都有自己的PC寄存器，在任意时刻，一个线程只能执行一个方法的代码，这个正在被执行的方法叫做当前方法，若这个方法是native，那PC寄存器就保存JVM正在执行的字节码指令的地址，如果这个方法不是native的，那么PC寄存器的值为undefined，PC寄存器的大小至少应当为一个与平台相关的本地指针的值或一个返回值类型的数据\n\n<!--more-->\n\n### 堆\n\n堆的容量可以是固定的，也可以是动态分配的，它所占用内存不需要保证是连续的\n\n堆是供各个线程共享的运行时内存区域，它是存放所有类实例和数组对象分配的区域\n\n###  栈\n\n栈的容量可以是固定的，也可以是动态分配的，它所占用内存不需要保证是连续的\n每个线程都拥有自己的栈，栈是存放局部变量和一些尚未计算好的值\n\n#### 栈帧\n栈帧是用来存储数据和部分过程结构的数据结构，同时也用来处理动态链接、方法返回值和异常分派\n栈帧随着方法的调用而创建，随着方法的结束而销毁。栈帧的存储空间由创建它的线程分配在栈中，每一个栈帧都有自己的局部变量表，操作数栈和指向当前方法所属的类的常量池的引用\n\n\t- 局部变量表\n\t简单来说局部变量就是用来存储变量的表，局部变量使用索引来进行定位访问。首个局部变量的索引值是0，所存储的是该实例方法所在对象的引用（即Java语言中的this关键字）\n\t一个局部变量所占4个字节，也就是说一个局部变量可以保存一个类型为boolean、char、byte、short、int、float、reference或returnAddress的数据，而对于long和double类型的数据则需要两个局部变量进行保存\n\n\t- 操作数栈\n\t每个栈帧中包含一个先进后出的操作数栈，操作数栈的作用就是将局部变量表中的数据进行字节码指令操作，其中一个long或double类型数据占两个单位的栈深度 \n\n\t- 动态链接\n\t每个栈帧内部都有一个指向当前方法所在类型的常量池的引用，以便对当前方法的代码实现动态链接，在class文件中一个方法要想调用其它方法或者成员常量，则需要通过符号引用来表示，动态链接的作用就是这些符号引用所表示的方法或成员变量转换为对实际方法的直接引用，通过类加载加载调用\n\n### 方法区\n\n- 方法区的容量可以是固定的，也可以是动态分配的，它所占用内存不需要保证是连续的。它是堆的逻辑组成部分\n- 在JVM中，方法区是可供各个线程共享的运行时内存区域。方法区存储每个类的结构信息，例如，字段、方法数据、构造函数、普通方法和常量池的字节码内容\n\n### 常量池\n\n运行时常量池是class文件中每一个接口或类运行时的表现形式，它包含若干种不同的常量，从编译期可知的数值字面量到必须在运行期解析后才能获得的方法或字段\n下面展示一个Java初学者容易犯的错误\n``` java\npublic class TestString {\n\tpublic static void main(String[] args) {\n\t\tString str1 = \"abc\";\n\t\tString str2 = new String(\"abc\");\n\t\tString str3 = \"a\" + \"bc\";\n\t\tString str4 = new String(\"a\") + new String(\"bc\");\n\t\tString s5 = \"a\";\n\t\tString s6 = \"bc\";\n\t\tString str5 = s5 + s6;\n\t\tSystem.out.println(str1 == str2);\n\t\tSystem.out.println(str1 == str3);\n\t\tSystem.out.println(str1 == str4);\n\t\tSystem.out.println(str1 == str5);\n\t\tSystem.out.println(str2 == str3);\n\t\tSystem.out.println(str2 == str4);\n\t\tSystem.out.println(str2 == str5);\n\t}\n}\n```\n输出结果 ：\n``` java\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\n```\n\n通过对比分析可知 ：\n- new出来的对象==比较只有同一对象才会为true\n- String str3 = \"a\" + \"bc\";编译器默认合并，与String str3 = \"abc\"等价\n- String str1 = \"abc\";在常量池中分配，String str2 = new String(\"abc\");在堆中分配\n\n### 本地方法栈\n\nJVM实现可能会使用到传统栈（例如C stack）来支持native方法（使用Java以外的其它语言编写的方法）的执行，这个栈就是本地方法栈。当JVM使用其他语言来实现指令解释器时，也可以使用本地方法栈\n","slug":"jvm_memory","published":1,"updated":"2017-03-08T11:41:12.642Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5en003aqoq12471yvhu","content":"<p>我们知道对于Java而言，.java文件是不能运行的，需要编译成为.class文件才能被load到内存被执行，那么JVM(Java Virtual Machine)的内存又是怎么进行分配及各部分又该实现什么功能的呢？<br>一般认为JVM内存主要分为PC寄存器，堆，栈，方法区，本地方法区五大部分</p>\n<h3 id=\"PC寄存器\"><a href=\"#PC寄存器\" class=\"headerlink\" title=\"PC寄存器\"></a>PC寄存器</h3><p>JVM可以同时支持多个线程同时执行，每一个线程都有自己的PC寄存器，在任意时刻，一个线程只能执行一个方法的代码，这个正在被执行的方法叫做当前方法，若这个方法是native，那PC寄存器就保存JVM正在执行的字节码指令的地址，如果这个方法不是native的，那么PC寄存器的值为undefined，PC寄存器的大小至少应当为一个与平台相关的本地指针的值或一个返回值类型的数据</p>\n<a id=\"more\"></a>\n<h3 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h3><p>堆的容量可以是固定的，也可以是动态分配的，它所占用内存不需要保证是连续的</p>\n<p>堆是供各个线程共享的运行时内存区域，它是存放所有类实例和数组对象分配的区域</p>\n<h3 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h3><p>栈的容量可以是固定的，也可以是动态分配的，它所占用内存不需要保证是连续的<br>每个线程都拥有自己的栈，栈是存放局部变量和一些尚未计算好的值</p>\n<h4 id=\"栈帧\"><a href=\"#栈帧\" class=\"headerlink\" title=\"栈帧\"></a>栈帧</h4><p>栈帧是用来存储数据和部分过程结构的数据结构，同时也用来处理动态链接、方法返回值和异常分派<br>栈帧随着方法的调用而创建，随着方法的结束而销毁。栈帧的存储空间由创建它的线程分配在栈中，每一个栈帧都有自己的局部变量表，操作数栈和指向当前方法所属的类的常量池的引用</p>\n<pre><code>- 局部变量表\n简单来说局部变量就是用来存储变量的表，局部变量使用索引来进行定位访问。首个局部变量的索引值是0，所存储的是该实例方法所在对象的引用（即Java语言中的this关键字）\n一个局部变量所占4个字节，也就是说一个局部变量可以保存一个类型为boolean、char、byte、short、int、float、reference或returnAddress的数据，而对于long和double类型的数据则需要两个局部变量进行保存\n\n- 操作数栈\n每个栈帧中包含一个先进后出的操作数栈，操作数栈的作用就是将局部变量表中的数据进行字节码指令操作，其中一个long或double类型数据占两个单位的栈深度 \n\n- 动态链接\n每个栈帧内部都有一个指向当前方法所在类型的常量池的引用，以便对当前方法的代码实现动态链接，在class文件中一个方法要想调用其它方法或者成员常量，则需要通过符号引用来表示，动态链接的作用就是这些符号引用所表示的方法或成员变量转换为对实际方法的直接引用，通过类加载加载调用\n</code></pre><h3 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h3><ul>\n<li>方法区的容量可以是固定的，也可以是动态分配的，它所占用内存不需要保证是连续的。它是堆的逻辑组成部分</li>\n<li>在JVM中，方法区是可供各个线程共享的运行时内存区域。方法区存储每个类的结构信息，例如，字段、方法数据、构造函数、普通方法和常量池的字节码内容</li>\n</ul>\n<h3 id=\"常量池\"><a href=\"#常量池\" class=\"headerlink\" title=\"常量池\"></a>常量池</h3><p>运行时常量池是class文件中每一个接口或类运行时的表现形式，它包含若干种不同的常量，从编译期可知的数值字面量到必须在运行期解析后才能获得的方法或字段<br>下面展示一个Java初学者容易犯的错误<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestString</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tString str1 = <span class=\"string\">\"abc\"</span>;</div><div class=\"line\">\t\tString str2 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"abc\"</span>);</div><div class=\"line\">\t\tString str3 = <span class=\"string\">\"a\"</span> + <span class=\"string\">\"bc\"</span>;</div><div class=\"line\">\t\tString str4 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"a\"</span>) + <span class=\"keyword\">new</span> String(<span class=\"string\">\"bc\"</span>);</div><div class=\"line\">\t\tString s5 = <span class=\"string\">\"a\"</span>;</div><div class=\"line\">\t\tString s6 = <span class=\"string\">\"bc\"</span>;</div><div class=\"line\">\t\tString str5 = s5 + s6;</div><div class=\"line\">\t\tSystem.out.println(str1 == str2);</div><div class=\"line\">\t\tSystem.out.println(str1 == str3);</div><div class=\"line\">\t\tSystem.out.println(str1 == str4);</div><div class=\"line\">\t\tSystem.out.println(str1 == str5);</div><div class=\"line\">\t\tSystem.out.println(str2 == str3);</div><div class=\"line\">\t\tSystem.out.println(str2 == str4);</div><div class=\"line\">\t\tSystem.out.println(str2 == str5);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">false</span></div><div class=\"line\"><span class=\"keyword\">true</span></div><div class=\"line\"><span class=\"keyword\">false</span></div><div class=\"line\"><span class=\"keyword\">false</span></div><div class=\"line\"><span class=\"keyword\">false</span></div><div class=\"line\"><span class=\"keyword\">false</span></div><div class=\"line\"><span class=\"keyword\">false</span></div></pre></td></tr></table></figure></p>\n<p>通过对比分析可知 ：</p>\n<ul>\n<li>new出来的对象==比较只有同一对象才会为true</li>\n<li>String str3 = “a” + “bc”;编译器默认合并，与String str3 = “abc”等价</li>\n<li>String str1 = “abc”;在常量池中分配，String str2 = new String(“abc”);在堆中分配</li>\n</ul>\n<h3 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h3><p>JVM实现可能会使用到传统栈（例如C stack）来支持native方法（使用Java以外的其它语言编写的方法）的执行，这个栈就是本地方法栈。当JVM使用其他语言来实现指令解释器时，也可以使用本地方法栈</p>\n","excerpt":"<p>我们知道对于Java而言，.java文件是不能运行的，需要编译成为.class文件才能被load到内存被执行，那么JVM(Java Virtual Machine)的内存又是怎么进行分配及各部分又该实现什么功能的呢？<br>一般认为JVM内存主要分为PC寄存器，堆，栈，方法区，本地方法区五大部分</p>\n<h3 id=\"PC寄存器\"><a href=\"#PC寄存器\" class=\"headerlink\" title=\"PC寄存器\"></a>PC寄存器</h3><p>JVM可以同时支持多个线程同时执行，每一个线程都有自己的PC寄存器，在任意时刻，一个线程只能执行一个方法的代码，这个正在被执行的方法叫做当前方法，若这个方法是native，那PC寄存器就保存JVM正在执行的字节码指令的地址，如果这个方法不是native的，那么PC寄存器的值为undefined，PC寄存器的大小至少应当为一个与平台相关的本地指针的值或一个返回值类型的数据</p>","more":"<h3 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h3><p>堆的容量可以是固定的，也可以是动态分配的，它所占用内存不需要保证是连续的</p>\n<p>堆是供各个线程共享的运行时内存区域，它是存放所有类实例和数组对象分配的区域</p>\n<h3 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h3><p>栈的容量可以是固定的，也可以是动态分配的，它所占用内存不需要保证是连续的<br>每个线程都拥有自己的栈，栈是存放局部变量和一些尚未计算好的值</p>\n<h4 id=\"栈帧\"><a href=\"#栈帧\" class=\"headerlink\" title=\"栈帧\"></a>栈帧</h4><p>栈帧是用来存储数据和部分过程结构的数据结构，同时也用来处理动态链接、方法返回值和异常分派<br>栈帧随着方法的调用而创建，随着方法的结束而销毁。栈帧的存储空间由创建它的线程分配在栈中，每一个栈帧都有自己的局部变量表，操作数栈和指向当前方法所属的类的常量池的引用</p>\n<pre><code>- 局部变量表\n简单来说局部变量就是用来存储变量的表，局部变量使用索引来进行定位访问。首个局部变量的索引值是0，所存储的是该实例方法所在对象的引用（即Java语言中的this关键字）\n一个局部变量所占4个字节，也就是说一个局部变量可以保存一个类型为boolean、char、byte、short、int、float、reference或returnAddress的数据，而对于long和double类型的数据则需要两个局部变量进行保存\n\n- 操作数栈\n每个栈帧中包含一个先进后出的操作数栈，操作数栈的作用就是将局部变量表中的数据进行字节码指令操作，其中一个long或double类型数据占两个单位的栈深度 \n\n- 动态链接\n每个栈帧内部都有一个指向当前方法所在类型的常量池的引用，以便对当前方法的代码实现动态链接，在class文件中一个方法要想调用其它方法或者成员常量，则需要通过符号引用来表示，动态链接的作用就是这些符号引用所表示的方法或成员变量转换为对实际方法的直接引用，通过类加载加载调用\n</code></pre><h3 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h3><ul>\n<li>方法区的容量可以是固定的，也可以是动态分配的，它所占用内存不需要保证是连续的。它是堆的逻辑组成部分</li>\n<li>在JVM中，方法区是可供各个线程共享的运行时内存区域。方法区存储每个类的结构信息，例如，字段、方法数据、构造函数、普通方法和常量池的字节码内容</li>\n</ul>\n<h3 id=\"常量池\"><a href=\"#常量池\" class=\"headerlink\" title=\"常量池\"></a>常量池</h3><p>运行时常量池是class文件中每一个接口或类运行时的表现形式，它包含若干种不同的常量，从编译期可知的数值字面量到必须在运行期解析后才能获得的方法或字段<br>下面展示一个Java初学者容易犯的错误<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestString</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tString str1 = <span class=\"string\">\"abc\"</span>;</div><div class=\"line\">\t\tString str2 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"abc\"</span>);</div><div class=\"line\">\t\tString str3 = <span class=\"string\">\"a\"</span> + <span class=\"string\">\"bc\"</span>;</div><div class=\"line\">\t\tString str4 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"a\"</span>) + <span class=\"keyword\">new</span> String(<span class=\"string\">\"bc\"</span>);</div><div class=\"line\">\t\tString s5 = <span class=\"string\">\"a\"</span>;</div><div class=\"line\">\t\tString s6 = <span class=\"string\">\"bc\"</span>;</div><div class=\"line\">\t\tString str5 = s5 + s6;</div><div class=\"line\">\t\tSystem.out.println(str1 == str2);</div><div class=\"line\">\t\tSystem.out.println(str1 == str3);</div><div class=\"line\">\t\tSystem.out.println(str1 == str4);</div><div class=\"line\">\t\tSystem.out.println(str1 == str5);</div><div class=\"line\">\t\tSystem.out.println(str2 == str3);</div><div class=\"line\">\t\tSystem.out.println(str2 == str4);</div><div class=\"line\">\t\tSystem.out.println(str2 == str5);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">false</span></div><div class=\"line\"><span class=\"keyword\">true</span></div><div class=\"line\"><span class=\"keyword\">false</span></div><div class=\"line\"><span class=\"keyword\">false</span></div><div class=\"line\"><span class=\"keyword\">false</span></div><div class=\"line\"><span class=\"keyword\">false</span></div><div class=\"line\"><span class=\"keyword\">false</span></div></pre></td></tr></table></figure></p>\n<p>通过对比分析可知 ：</p>\n<ul>\n<li>new出来的对象==比较只有同一对象才会为true</li>\n<li>String str3 = “a” + “bc”;编译器默认合并，与String str3 = “abc”等价</li>\n<li>String str1 = “abc”;在常量池中分配，String str2 = new String(“abc”);在堆中分配</li>\n</ul>\n<h3 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h3><p>JVM实现可能会使用到传统栈（例如C stack）来支持native方法（使用Java以外的其它语言编写的方法）的执行，这个栈就是本地方法栈。当JVM使用其他语言来实现指令解释器时，也可以使用本地方法栈</p>"},{"title":"JVM编译器","date":"2016-09-14T02:50:55.000Z","_content":"当我们写一行行Java代码的时候，你是否想过机器它是否会认识呢？那么JVM编译器又是怎么对数据处理呢？可以Eclipse中安装byteCode，它会展示所对应的byteCode，我这里就一些常用的展示一下。\n\n### 参数接收\n\n#### 实例方法 ：\n``` java\n\tint addTwo(int i, int j) {\n\t\treturn i + j;\n\t}\n```\n\n<!--more-->\n\n编译后的代码 ：\n```\naddTwo(II)I\n   L0\n    LINENUMBER 6 L0\n    ILOAD 1\n    ILOAD 2\n    IADD\n    IRETURN \n```\n\n#### 静态方法 ：\n``` java\n\tstatic int addTwo(int i, int j) {\n\t\treturn i + j;\n\t}\n```\n\n编译后的代码 ：\n```\nstatic addTwo(II)I\n   L0\n    LINENUMBER 6 L0\n    ILOAD 0\n    ILOAD 1\n    IADD\n    IRETURN\n```\n\n注意 ：保存变量到局部变量表中，实例方法从1开始（0为this），静态方法则为0开始\n\n### 常量，局部变量和控制结构的使用\n\n``` java\n\tint addSum() {\n\t\tint sum = 0;\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tsum += i;\n\t\t}\n\t\treturn sum;\n\t}\n```\n编译后的代码 ：\n```\naddSum()I\n   L0\n    LINENUMBER 6 L0\n    ICONST_0\n    ISTORE 1\n   L1\n    LINENUMBER 7 L1\n    ICONST_0\n    ISTORE 2\n   L2\n    GOTO L3\n   L4\n    LINENUMBER 8 L4\n   FRAME APPEND [I I]                                                                         \n    ILOAD 1\n    ILOAD 2\n    IADD\n    ISTORE 1\n   L5\n    LINENUMBER 7 L5\n    IINC 2 1\n   L3\n   FRAME SAME\n    ILOAD 2\n    BIPUSH 100\n    IF_ICMPLT L4\n   L6\n    LINENUMBER 10 L6\n    ILOAD 1\n    IRETURN\n```\n\n### 方法调用\n\n``` java\n\tpublic class Test {\n\t\n\t\tpublic int sum(int i, int j) {\n\t\t\treturn add(i,j);\n\t\t}\n\n\t\tpublic int add(int i, int j) {\n\t\t\treturn i + j;\n\t\t}\n\t}\n```\nsum()方法编译后的代码 ：\n```\npublic sum(II)I\n   L0\n    LINENUMBER 7 L0\n    ALOAD 0\n    ILOAD 1\n    ILOAD 2\n    INVOKEVIRTUAL Test.add (II)I\n    IRETURN\n```\n调用父类方法和静态方法使用INVOKESPECIAL和INVOKESTASTIC\n\n### 类实例的使用\n\n``` java\n\tpublic String test() {\n\t\tString str = new String(\"Hello1\");\n\t\treturn str.toString();\n\t}\n```\n编译后的代码 ：\n```\npublic test()Ljava/lang/String;\n   L0\n    LINENUMBER 5 L0\n    NEW java/lang/String\n    DUP\n    LDC \"Hello1\"\n    INVOKESPECIAL java/lang/String.<init> (Ljava/lang/String;)V\n    ASTORE 1\n   L1\n    LINENUMBER 6 L1\n    ALOAD 1\n    INVOKEVIRTUAL java/lang/String.toString ()Ljava/lang/String;\n    ARETURN\n```\n\n### getter和setter方法的编译\n\n``` java\n\tpublic class Test {\n\t\tprivate int id;\n\n\t\tpublic int getId() {\n\t\t\treturn id;\n\t\t}\n\n\t\tpublic void setId(int id) {\n\t\t\tthis.id = id;\n\t\t}\n\t}\n```\n编译后的代码 :\n```\npublic getId()I\n   L0\n    LINENUMBER 7 L0\n    ALOAD 0\n    GETFIELD Test.id : I\n    IRETURN\n\t\npublic setId(I)V\n   L0\n    LINENUMBER 11 L0\n    ALOAD 0\n    ILOAD 1\n    PUTFIELD Test.id : I\n   L1\n    LINENUMBER 12 L1\n    RETURN\n```\n\t\n### 数组的使用\n\n``` java\n\tpublic int[] array() {\n\t\tint[] i = new int[10];\n\t\treturn i;\n\t}\n```\n编译后的代码 ：\n```\npublic array()[I\n   L0\n    LINENUMBER 5 L0\n    BIPUSH 10\n    NEWARRAY T_INT\n    ASTORE 1\n   L1\n    LINENUMBER 6 L1\n    ALOAD 1\n    ARETURN\n```\n\n### Exception的使用\n\n``` java\n\tpublic void exception() throws Exception {\n\t\tthrow new Exception();\n\t}\n```\n编译后的代码 ；\n```\npublic exception()V throws java/lang/Exception \n   L0\n    LINENUMBER 5 L0\n    NEW java/lang/Exception\n    DUP\n    INVOKESPECIAL java/lang/Exception.<init> ()V\n    ATHROW\n```\n\n### 同步的使用\n\n``` java\n\tpublic void syn(){\n\t\tString str = new String();\n\t\tsynchronized (str) {\n\t\t\tstr.trim();\n\t\t}\n\t}\n```\n编译后的代码 ：\n```\n public syn()V\n    TRYCATCHBLOCK L0 L1 L2 \n    TRYCATCHBLOCK L2 L3 L2 \n   L4\n    LINENUMBER 5 L4\n    NEW java/lang/String\n    DUP\n    INVOKESPECIAL java/lang/String.<init> ()V\n    ASTORE 1\n   L5\n    LINENUMBER 6 L5\n    ALOAD 1\n    DUP\n    ASTORE 2\n    MONITORENTER\n   L0\n    LINENUMBER 7 L0\n    ALOAD 1\n    INVOKEVIRTUAL java/lang/String.trim ()Ljava/lang/String;\n    POP\n   L6\n    LINENUMBER 6 L6\n    ALOAD 2\n    MONITOREXIT\n   L1\n    GOTO L7\n   L2\n   FRAME FULL [Test java/lang/String java/lang/String] [java/lang/Throwable]                   \n    ALOAD 2\n    MONITOREXIT\n   L3\n    ATHROW\n   L7\n    LINENUMBER 9 L7\n   FRAME CHOP 1\n    RETURN\n```","source":"_posts/jvm_compiler.md","raw":"---\ntitle: JVM编译器\ndate: 2016-09-14 10:50:55\ntags:\n\t- JVM\n---\n当我们写一行行Java代码的时候，你是否想过机器它是否会认识呢？那么JVM编译器又是怎么对数据处理呢？可以Eclipse中安装byteCode，它会展示所对应的byteCode，我这里就一些常用的展示一下。\n\n### 参数接收\n\n#### 实例方法 ：\n``` java\n\tint addTwo(int i, int j) {\n\t\treturn i + j;\n\t}\n```\n\n<!--more-->\n\n编译后的代码 ：\n```\naddTwo(II)I\n   L0\n    LINENUMBER 6 L0\n    ILOAD 1\n    ILOAD 2\n    IADD\n    IRETURN \n```\n\n#### 静态方法 ：\n``` java\n\tstatic int addTwo(int i, int j) {\n\t\treturn i + j;\n\t}\n```\n\n编译后的代码 ：\n```\nstatic addTwo(II)I\n   L0\n    LINENUMBER 6 L0\n    ILOAD 0\n    ILOAD 1\n    IADD\n    IRETURN\n```\n\n注意 ：保存变量到局部变量表中，实例方法从1开始（0为this），静态方法则为0开始\n\n### 常量，局部变量和控制结构的使用\n\n``` java\n\tint addSum() {\n\t\tint sum = 0;\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tsum += i;\n\t\t}\n\t\treturn sum;\n\t}\n```\n编译后的代码 ：\n```\naddSum()I\n   L0\n    LINENUMBER 6 L0\n    ICONST_0\n    ISTORE 1\n   L1\n    LINENUMBER 7 L1\n    ICONST_0\n    ISTORE 2\n   L2\n    GOTO L3\n   L4\n    LINENUMBER 8 L4\n   FRAME APPEND [I I]                                                                         \n    ILOAD 1\n    ILOAD 2\n    IADD\n    ISTORE 1\n   L5\n    LINENUMBER 7 L5\n    IINC 2 1\n   L3\n   FRAME SAME\n    ILOAD 2\n    BIPUSH 100\n    IF_ICMPLT L4\n   L6\n    LINENUMBER 10 L6\n    ILOAD 1\n    IRETURN\n```\n\n### 方法调用\n\n``` java\n\tpublic class Test {\n\t\n\t\tpublic int sum(int i, int j) {\n\t\t\treturn add(i,j);\n\t\t}\n\n\t\tpublic int add(int i, int j) {\n\t\t\treturn i + j;\n\t\t}\n\t}\n```\nsum()方法编译后的代码 ：\n```\npublic sum(II)I\n   L0\n    LINENUMBER 7 L0\n    ALOAD 0\n    ILOAD 1\n    ILOAD 2\n    INVOKEVIRTUAL Test.add (II)I\n    IRETURN\n```\n调用父类方法和静态方法使用INVOKESPECIAL和INVOKESTASTIC\n\n### 类实例的使用\n\n``` java\n\tpublic String test() {\n\t\tString str = new String(\"Hello1\");\n\t\treturn str.toString();\n\t}\n```\n编译后的代码 ：\n```\npublic test()Ljava/lang/String;\n   L0\n    LINENUMBER 5 L0\n    NEW java/lang/String\n    DUP\n    LDC \"Hello1\"\n    INVOKESPECIAL java/lang/String.<init> (Ljava/lang/String;)V\n    ASTORE 1\n   L1\n    LINENUMBER 6 L1\n    ALOAD 1\n    INVOKEVIRTUAL java/lang/String.toString ()Ljava/lang/String;\n    ARETURN\n```\n\n### getter和setter方法的编译\n\n``` java\n\tpublic class Test {\n\t\tprivate int id;\n\n\t\tpublic int getId() {\n\t\t\treturn id;\n\t\t}\n\n\t\tpublic void setId(int id) {\n\t\t\tthis.id = id;\n\t\t}\n\t}\n```\n编译后的代码 :\n```\npublic getId()I\n   L0\n    LINENUMBER 7 L0\n    ALOAD 0\n    GETFIELD Test.id : I\n    IRETURN\n\t\npublic setId(I)V\n   L0\n    LINENUMBER 11 L0\n    ALOAD 0\n    ILOAD 1\n    PUTFIELD Test.id : I\n   L1\n    LINENUMBER 12 L1\n    RETURN\n```\n\t\n### 数组的使用\n\n``` java\n\tpublic int[] array() {\n\t\tint[] i = new int[10];\n\t\treturn i;\n\t}\n```\n编译后的代码 ：\n```\npublic array()[I\n   L0\n    LINENUMBER 5 L0\n    BIPUSH 10\n    NEWARRAY T_INT\n    ASTORE 1\n   L1\n    LINENUMBER 6 L1\n    ALOAD 1\n    ARETURN\n```\n\n### Exception的使用\n\n``` java\n\tpublic void exception() throws Exception {\n\t\tthrow new Exception();\n\t}\n```\n编译后的代码 ；\n```\npublic exception()V throws java/lang/Exception \n   L0\n    LINENUMBER 5 L0\n    NEW java/lang/Exception\n    DUP\n    INVOKESPECIAL java/lang/Exception.<init> ()V\n    ATHROW\n```\n\n### 同步的使用\n\n``` java\n\tpublic void syn(){\n\t\tString str = new String();\n\t\tsynchronized (str) {\n\t\t\tstr.trim();\n\t\t}\n\t}\n```\n编译后的代码 ：\n```\n public syn()V\n    TRYCATCHBLOCK L0 L1 L2 \n    TRYCATCHBLOCK L2 L3 L2 \n   L4\n    LINENUMBER 5 L4\n    NEW java/lang/String\n    DUP\n    INVOKESPECIAL java/lang/String.<init> ()V\n    ASTORE 1\n   L5\n    LINENUMBER 6 L5\n    ALOAD 1\n    DUP\n    ASTORE 2\n    MONITORENTER\n   L0\n    LINENUMBER 7 L0\n    ALOAD 1\n    INVOKEVIRTUAL java/lang/String.trim ()Ljava/lang/String;\n    POP\n   L6\n    LINENUMBER 6 L6\n    ALOAD 2\n    MONITOREXIT\n   L1\n    GOTO L7\n   L2\n   FRAME FULL [Test java/lang/String java/lang/String] [java/lang/Throwable]                   \n    ALOAD 2\n    MONITOREXIT\n   L3\n    ATHROW\n   L7\n    LINENUMBER 9 L7\n   FRAME CHOP 1\n    RETURN\n```","slug":"jvm_compiler","published":1,"updated":"2017-03-08T11:41:00.233Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5eo003dqoq176rvgwmd","content":"<p>当我们写一行行Java代码的时候，你是否想过机器它是否会认识呢？那么JVM编译器又是怎么对数据处理呢？可以Eclipse中安装byteCode，它会展示所对应的byteCode，我这里就一些常用的展示一下。</p>\n<h3 id=\"参数接收\"><a href=\"#参数接收\" class=\"headerlink\" title=\"参数接收\"></a>参数接收</h3><h4 id=\"实例方法-：\"><a href=\"#实例方法-：\" class=\"headerlink\" title=\"实例方法 ：\"></a>实例方法 ：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">addTwo</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> i + j;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>编译后的代码 ：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">addTwo(II)I</div><div class=\"line\">   L0</div><div class=\"line\">    LINENUMBER 6 L0</div><div class=\"line\">    ILOAD 1</div><div class=\"line\">    ILOAD 2</div><div class=\"line\">    IADD</div><div class=\"line\">    IRETURN</div></pre></td></tr></table></figure></p>\n<h4 id=\"静态方法-：\"><a href=\"#静态方法-：\" class=\"headerlink\" title=\"静态方法 ：\"></a>静态方法 ：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">addTwo</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> i + j;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>编译后的代码 ：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">static addTwo(II)I</div><div class=\"line\">   L0</div><div class=\"line\">    LINENUMBER 6 L0</div><div class=\"line\">    ILOAD 0</div><div class=\"line\">    ILOAD 1</div><div class=\"line\">    IADD</div><div class=\"line\">    IRETURN</div></pre></td></tr></table></figure></p>\n<p>注意 ：保存变量到局部变量表中，实例方法从1开始（0为this），静态方法则为0开始</p>\n<h3 id=\"常量，局部变量和控制结构的使用\"><a href=\"#常量，局部变量和控制结构的使用\" class=\"headerlink\" title=\"常量，局部变量和控制结构的使用\"></a>常量，局部变量和控制结构的使用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">addSum</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</div><div class=\"line\">\t\tsum += i;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> sum;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>编译后的代码 ：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">addSum()I</div><div class=\"line\">   L0</div><div class=\"line\">    LINENUMBER 6 L0</div><div class=\"line\">    ICONST_0</div><div class=\"line\">    ISTORE 1</div><div class=\"line\">   L1</div><div class=\"line\">    LINENUMBER 7 L1</div><div class=\"line\">    ICONST_0</div><div class=\"line\">    ISTORE 2</div><div class=\"line\">   L2</div><div class=\"line\">    GOTO L3</div><div class=\"line\">   L4</div><div class=\"line\">    LINENUMBER 8 L4</div><div class=\"line\">   FRAME APPEND [I I]                                                                         </div><div class=\"line\">    ILOAD 1</div><div class=\"line\">    ILOAD 2</div><div class=\"line\">    IADD</div><div class=\"line\">    ISTORE 1</div><div class=\"line\">   L5</div><div class=\"line\">    LINENUMBER 7 L5</div><div class=\"line\">    IINC 2 1</div><div class=\"line\">   L3</div><div class=\"line\">   FRAME SAME</div><div class=\"line\">    ILOAD 2</div><div class=\"line\">    BIPUSH 100</div><div class=\"line\">    IF_ICMPLT L4</div><div class=\"line\">   L6</div><div class=\"line\">    LINENUMBER 10 L6</div><div class=\"line\">    ILOAD 1</div><div class=\"line\">    IRETURN</div></pre></td></tr></table></figure></p>\n<h3 id=\"方法调用\"><a href=\"#方法调用\" class=\"headerlink\" title=\"方法调用\"></a>方法调用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> add(i,j);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> i + j;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>sum()方法编译后的代码 ：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">public sum(II)I</div><div class=\"line\">   L0</div><div class=\"line\">    LINENUMBER 7 L0</div><div class=\"line\">    ALOAD 0</div><div class=\"line\">    ILOAD 1</div><div class=\"line\">    ILOAD 2</div><div class=\"line\">    INVOKEVIRTUAL Test.add (II)I</div><div class=\"line\">    IRETURN</div></pre></td></tr></table></figure></p>\n<p>调用父类方法和静态方法使用INVOKESPECIAL和INVOKESTASTIC</p>\n<h3 id=\"类实例的使用\"><a href=\"#类实例的使用\" class=\"headerlink\" title=\"类实例的使用\"></a>类实例的使用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tString str = <span class=\"keyword\">new</span> String(<span class=\"string\">\"Hello1\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> str.toString();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>编译后的代码 ：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">public test()Ljava/lang/String;</div><div class=\"line\">   L0</div><div class=\"line\">    LINENUMBER 5 L0</div><div class=\"line\">    NEW java/lang/String</div><div class=\"line\">    DUP</div><div class=\"line\">    LDC &quot;Hello1&quot;</div><div class=\"line\">    INVOKESPECIAL java/lang/String.&lt;init&gt; (Ljava/lang/String;)V</div><div class=\"line\">    ASTORE 1</div><div class=\"line\">   L1</div><div class=\"line\">    LINENUMBER 6 L1</div><div class=\"line\">    ALOAD 1</div><div class=\"line\">    INVOKEVIRTUAL java/lang/String.toString ()Ljava/lang/String;</div><div class=\"line\">    ARETURN</div></pre></td></tr></table></figure></p>\n<h3 id=\"getter和setter方法的编译\"><a href=\"#getter和setter方法的编译\" class=\"headerlink\" title=\"getter和setter方法的编译\"></a>getter和setter方法的编译</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> id;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>编译后的代码 :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">public getId()I</div><div class=\"line\">   L0</div><div class=\"line\">    LINENUMBER 7 L0</div><div class=\"line\">    ALOAD 0</div><div class=\"line\">    GETFIELD Test.id : I</div><div class=\"line\">    IRETURN</div><div class=\"line\">\t</div><div class=\"line\">public setId(I)V</div><div class=\"line\">   L0</div><div class=\"line\">    LINENUMBER 11 L0</div><div class=\"line\">    ALOAD 0</div><div class=\"line\">    ILOAD 1</div><div class=\"line\">    PUTFIELD Test.id : I</div><div class=\"line\">   L1</div><div class=\"line\">    LINENUMBER 12 L1</div><div class=\"line\">    RETURN</div></pre></td></tr></table></figure></p>\n<h3 id=\"数组的使用\"><a href=\"#数组的使用\" class=\"headerlink\" title=\"数组的使用\"></a>数组的使用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] array() &#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span>[] i = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">10</span>];</div><div class=\"line\">\t<span class=\"keyword\">return</span> i;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>编译后的代码 ：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">public array()[I</div><div class=\"line\">   L0</div><div class=\"line\">    LINENUMBER 5 L0</div><div class=\"line\">    BIPUSH 10</div><div class=\"line\">    NEWARRAY T_INT</div><div class=\"line\">    ASTORE 1</div><div class=\"line\">   L1</div><div class=\"line\">    LINENUMBER 6 L1</div><div class=\"line\">    ALOAD 1</div><div class=\"line\">    ARETURN</div></pre></td></tr></table></figure></p>\n<h3 id=\"Exception的使用\"><a href=\"#Exception的使用\" class=\"headerlink\" title=\"Exception的使用\"></a>Exception的使用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exception</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>编译后的代码 ；<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public exception()V throws java/lang/Exception </div><div class=\"line\">   L0</div><div class=\"line\">    LINENUMBER 5 L0</div><div class=\"line\">    NEW java/lang/Exception</div><div class=\"line\">    DUP</div><div class=\"line\">    INVOKESPECIAL java/lang/Exception.&lt;init&gt; ()V</div><div class=\"line\">    ATHROW</div></pre></td></tr></table></figure></p>\n<h3 id=\"同步的使用\"><a href=\"#同步的使用\" class=\"headerlink\" title=\"同步的使用\"></a>同步的使用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">syn</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\tString str = <span class=\"keyword\">new</span> String();</div><div class=\"line\">\t<span class=\"keyword\">synchronized</span> (str) &#123;</div><div class=\"line\">\t\tstr.trim();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>编译后的代码 ：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">public syn()V</div><div class=\"line\">   TRYCATCHBLOCK L0 L1 L2 </div><div class=\"line\">   TRYCATCHBLOCK L2 L3 L2 </div><div class=\"line\">  L4</div><div class=\"line\">   LINENUMBER 5 L4</div><div class=\"line\">   NEW java/lang/String</div><div class=\"line\">   DUP</div><div class=\"line\">   INVOKESPECIAL java/lang/String.&lt;init&gt; ()V</div><div class=\"line\">   ASTORE 1</div><div class=\"line\">  L5</div><div class=\"line\">   LINENUMBER 6 L5</div><div class=\"line\">   ALOAD 1</div><div class=\"line\">   DUP</div><div class=\"line\">   ASTORE 2</div><div class=\"line\">   MONITORENTER</div><div class=\"line\">  L0</div><div class=\"line\">   LINENUMBER 7 L0</div><div class=\"line\">   ALOAD 1</div><div class=\"line\">   INVOKEVIRTUAL java/lang/String.trim ()Ljava/lang/String;</div><div class=\"line\">   POP</div><div class=\"line\">  L6</div><div class=\"line\">   LINENUMBER 6 L6</div><div class=\"line\">   ALOAD 2</div><div class=\"line\">   MONITOREXIT</div><div class=\"line\">  L1</div><div class=\"line\">   GOTO L7</div><div class=\"line\">  L2</div><div class=\"line\">  FRAME FULL [Test java/lang/String java/lang/String] [java/lang/Throwable]                   </div><div class=\"line\">   ALOAD 2</div><div class=\"line\">   MONITOREXIT</div><div class=\"line\">  L3</div><div class=\"line\">   ATHROW</div><div class=\"line\">  L7</div><div class=\"line\">   LINENUMBER 9 L7</div><div class=\"line\">  FRAME CHOP 1</div><div class=\"line\">   RETURN</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>当我们写一行行Java代码的时候，你是否想过机器它是否会认识呢？那么JVM编译器又是怎么对数据处理呢？可以Eclipse中安装byteCode，它会展示所对应的byteCode，我这里就一些常用的展示一下。</p>\n<h3 id=\"参数接收\"><a href=\"#参数接收\" class=\"headerlink\" title=\"参数接收\"></a>参数接收</h3><h4 id=\"实例方法-：\"><a href=\"#实例方法-：\" class=\"headerlink\" title=\"实例方法 ：\"></a>实例方法 ：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">addTwo</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> i + j;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","more":"<p>编译后的代码 ：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">addTwo(II)I</div><div class=\"line\">   L0</div><div class=\"line\">    LINENUMBER 6 L0</div><div class=\"line\">    ILOAD 1</div><div class=\"line\">    ILOAD 2</div><div class=\"line\">    IADD</div><div class=\"line\">    IRETURN</div></pre></td></tr></table></figure></p>\n<h4 id=\"静态方法-：\"><a href=\"#静态方法-：\" class=\"headerlink\" title=\"静态方法 ：\"></a>静态方法 ：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">addTwo</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> i + j;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>编译后的代码 ：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">static addTwo(II)I</div><div class=\"line\">   L0</div><div class=\"line\">    LINENUMBER 6 L0</div><div class=\"line\">    ILOAD 0</div><div class=\"line\">    ILOAD 1</div><div class=\"line\">    IADD</div><div class=\"line\">    IRETURN</div></pre></td></tr></table></figure></p>\n<p>注意 ：保存变量到局部变量表中，实例方法从1开始（0为this），静态方法则为0开始</p>\n<h3 id=\"常量，局部变量和控制结构的使用\"><a href=\"#常量，局部变量和控制结构的使用\" class=\"headerlink\" title=\"常量，局部变量和控制结构的使用\"></a>常量，局部变量和控制结构的使用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">addSum</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</div><div class=\"line\">\t\tsum += i;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> sum;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>编译后的代码 ：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">addSum()I</div><div class=\"line\">   L0</div><div class=\"line\">    LINENUMBER 6 L0</div><div class=\"line\">    ICONST_0</div><div class=\"line\">    ISTORE 1</div><div class=\"line\">   L1</div><div class=\"line\">    LINENUMBER 7 L1</div><div class=\"line\">    ICONST_0</div><div class=\"line\">    ISTORE 2</div><div class=\"line\">   L2</div><div class=\"line\">    GOTO L3</div><div class=\"line\">   L4</div><div class=\"line\">    LINENUMBER 8 L4</div><div class=\"line\">   FRAME APPEND [I I]                                                                         </div><div class=\"line\">    ILOAD 1</div><div class=\"line\">    ILOAD 2</div><div class=\"line\">    IADD</div><div class=\"line\">    ISTORE 1</div><div class=\"line\">   L5</div><div class=\"line\">    LINENUMBER 7 L5</div><div class=\"line\">    IINC 2 1</div><div class=\"line\">   L3</div><div class=\"line\">   FRAME SAME</div><div class=\"line\">    ILOAD 2</div><div class=\"line\">    BIPUSH 100</div><div class=\"line\">    IF_ICMPLT L4</div><div class=\"line\">   L6</div><div class=\"line\">    LINENUMBER 10 L6</div><div class=\"line\">    ILOAD 1</div><div class=\"line\">    IRETURN</div></pre></td></tr></table></figure></p>\n<h3 id=\"方法调用\"><a href=\"#方法调用\" class=\"headerlink\" title=\"方法调用\"></a>方法调用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> add(i,j);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> i + j;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>sum()方法编译后的代码 ：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">public sum(II)I</div><div class=\"line\">   L0</div><div class=\"line\">    LINENUMBER 7 L0</div><div class=\"line\">    ALOAD 0</div><div class=\"line\">    ILOAD 1</div><div class=\"line\">    ILOAD 2</div><div class=\"line\">    INVOKEVIRTUAL Test.add (II)I</div><div class=\"line\">    IRETURN</div></pre></td></tr></table></figure></p>\n<p>调用父类方法和静态方法使用INVOKESPECIAL和INVOKESTASTIC</p>\n<h3 id=\"类实例的使用\"><a href=\"#类实例的使用\" class=\"headerlink\" title=\"类实例的使用\"></a>类实例的使用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tString str = <span class=\"keyword\">new</span> String(<span class=\"string\">\"Hello1\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> str.toString();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>编译后的代码 ：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">public test()Ljava/lang/String;</div><div class=\"line\">   L0</div><div class=\"line\">    LINENUMBER 5 L0</div><div class=\"line\">    NEW java/lang/String</div><div class=\"line\">    DUP</div><div class=\"line\">    LDC &quot;Hello1&quot;</div><div class=\"line\">    INVOKESPECIAL java/lang/String.&lt;init&gt; (Ljava/lang/String;)V</div><div class=\"line\">    ASTORE 1</div><div class=\"line\">   L1</div><div class=\"line\">    LINENUMBER 6 L1</div><div class=\"line\">    ALOAD 1</div><div class=\"line\">    INVOKEVIRTUAL java/lang/String.toString ()Ljava/lang/String;</div><div class=\"line\">    ARETURN</div></pre></td></tr></table></figure></p>\n<h3 id=\"getter和setter方法的编译\"><a href=\"#getter和setter方法的编译\" class=\"headerlink\" title=\"getter和setter方法的编译\"></a>getter和setter方法的编译</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> id;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>编译后的代码 :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">public getId()I</div><div class=\"line\">   L0</div><div class=\"line\">    LINENUMBER 7 L0</div><div class=\"line\">    ALOAD 0</div><div class=\"line\">    GETFIELD Test.id : I</div><div class=\"line\">    IRETURN</div><div class=\"line\">\t</div><div class=\"line\">public setId(I)V</div><div class=\"line\">   L0</div><div class=\"line\">    LINENUMBER 11 L0</div><div class=\"line\">    ALOAD 0</div><div class=\"line\">    ILOAD 1</div><div class=\"line\">    PUTFIELD Test.id : I</div><div class=\"line\">   L1</div><div class=\"line\">    LINENUMBER 12 L1</div><div class=\"line\">    RETURN</div></pre></td></tr></table></figure></p>\n<h3 id=\"数组的使用\"><a href=\"#数组的使用\" class=\"headerlink\" title=\"数组的使用\"></a>数组的使用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] array() &#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span>[] i = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">10</span>];</div><div class=\"line\">\t<span class=\"keyword\">return</span> i;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>编译后的代码 ：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">public array()[I</div><div class=\"line\">   L0</div><div class=\"line\">    LINENUMBER 5 L0</div><div class=\"line\">    BIPUSH 10</div><div class=\"line\">    NEWARRAY T_INT</div><div class=\"line\">    ASTORE 1</div><div class=\"line\">   L1</div><div class=\"line\">    LINENUMBER 6 L1</div><div class=\"line\">    ALOAD 1</div><div class=\"line\">    ARETURN</div></pre></td></tr></table></figure></p>\n<h3 id=\"Exception的使用\"><a href=\"#Exception的使用\" class=\"headerlink\" title=\"Exception的使用\"></a>Exception的使用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exception</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>编译后的代码 ；<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public exception()V throws java/lang/Exception </div><div class=\"line\">   L0</div><div class=\"line\">    LINENUMBER 5 L0</div><div class=\"line\">    NEW java/lang/Exception</div><div class=\"line\">    DUP</div><div class=\"line\">    INVOKESPECIAL java/lang/Exception.&lt;init&gt; ()V</div><div class=\"line\">    ATHROW</div></pre></td></tr></table></figure></p>\n<h3 id=\"同步的使用\"><a href=\"#同步的使用\" class=\"headerlink\" title=\"同步的使用\"></a>同步的使用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">syn</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\tString str = <span class=\"keyword\">new</span> String();</div><div class=\"line\">\t<span class=\"keyword\">synchronized</span> (str) &#123;</div><div class=\"line\">\t\tstr.trim();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>编译后的代码 ：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">public syn()V</div><div class=\"line\">   TRYCATCHBLOCK L0 L1 L2 </div><div class=\"line\">   TRYCATCHBLOCK L2 L3 L2 </div><div class=\"line\">  L4</div><div class=\"line\">   LINENUMBER 5 L4</div><div class=\"line\">   NEW java/lang/String</div><div class=\"line\">   DUP</div><div class=\"line\">   INVOKESPECIAL java/lang/String.&lt;init&gt; ()V</div><div class=\"line\">   ASTORE 1</div><div class=\"line\">  L5</div><div class=\"line\">   LINENUMBER 6 L5</div><div class=\"line\">   ALOAD 1</div><div class=\"line\">   DUP</div><div class=\"line\">   ASTORE 2</div><div class=\"line\">   MONITORENTER</div><div class=\"line\">  L0</div><div class=\"line\">   LINENUMBER 7 L0</div><div class=\"line\">   ALOAD 1</div><div class=\"line\">   INVOKEVIRTUAL java/lang/String.trim ()Ljava/lang/String;</div><div class=\"line\">   POP</div><div class=\"line\">  L6</div><div class=\"line\">   LINENUMBER 6 L6</div><div class=\"line\">   ALOAD 2</div><div class=\"line\">   MONITOREXIT</div><div class=\"line\">  L1</div><div class=\"line\">   GOTO L7</div><div class=\"line\">  L2</div><div class=\"line\">  FRAME FULL [Test java/lang/String java/lang/String] [java/lang/Throwable]                   </div><div class=\"line\">   ALOAD 2</div><div class=\"line\">   MONITOREXIT</div><div class=\"line\">  L3</div><div class=\"line\">   ATHROW</div><div class=\"line\">  L7</div><div class=\"line\">   LINENUMBER 9 L7</div><div class=\"line\">  FRAME CHOP 1</div><div class=\"line\">   RETURN</div></pre></td></tr></table></figure></p>"},{"title":"Oracle 约束与索引","date":"2016-08-30T12:18:37.000Z","_content":"### 约束\n我们知道数据库里的数据不是随意插入的，而是需要保证有一定的意义与合法性，例如一个人的年龄为1000，这样是不是显得有点滑稽，正是因为这样，我们就有了约束来保证数据的合法性与完整性\n\n<!-- more -->\n\n#### 非空约束\n非空（NOT NULL）约束：顾名思义，所约束的列不能为NULL值。否则就会报错\n``` sql \n\t# 创建表时加入\n\tcreate table tt (nickname varchar2(20) not null);\n\t# 添加非空约束\n\talter table tt modify nickname not null;\n```\n\n#### 条件约束\n条件（CHECK）约束：表中每行都要满足该约束条件。条件约束既可以在表一级定义也可以在列一级定义。在一列上可以定义任意多个条件约束\n``` sql \n\t# 创建表时加入\n\tcreate table tt (age number(3) check(age between 0 and 200));\n\t# 添加条件约束\n\talter table tt modify age check(age between 0 and 200);\n```\n\n#### 唯一约束\n唯一（UNIQUE）约束：在表中每一行中所定义的这列或这些列的值都不能相同。必须保证唯一性\n``` sql \n\t# 创建表时加入\n\tcreate table tt (name varchar2(20) unique);\n\t# 添加唯一约束\n\talter table tt modify name varchar2(20) unique;\n\t# 删除唯一约束\n\talter table tt drop unique(name);\n```\n\n#### 主键约束\n主键(PRIMARY KEY)约束：用来唯一标识每一行，与唯一约束的区别在于不能为空\n``` sql \n\t# 创建表时加入\n\tcreate table tt (id number(2) primary key);\n\t# 添加主键约束\n\talter table tt modify id number(2) primary key;\n\t# 删除主键约束\n\talter table tt drop primary key;\n```\n\n##### 序列\n``` sql\n\tcreate sequence myseq increment by 2 start with 10;\n\t# 查询sequence信息 \n\tselect * from user_sequences;\n\t# 利用sequence插入数据\n\tinsert into tt(id) values(myseq.nextval);\n```\n{% qnimg oracle/constraint-index/p1.png 'class:class1 class2' normal:yes %}\n\n> LAST_NUMBER += CACHE_SIZE * INCREMENT_BY\n\n#### 外键约束\n``` sql\n\t# 新建一个额外的表\n\tcreate table ttt(id number(2) primary key);\n\t# 创建表时加入\n\tcreate table tt (tid number(2), constraint fk_ttt foreign key (tid) references ttt(id));\n\t# 添加外键约束\n\talter table tt add constraint fk_ttt foreign key(tid) references ttt(id);\n\t# 删除外键约束\n\talter table tt drop constraint fk_ttt;\n```\n\n> 创建约束的时候，最好加上名称，便于后续的管理\n\n### 索引\n\n#### ROWID\n在数据进行从年初的时候，每一条记录都会生成一个伪列(ROWID)来记录数据，ROWID一般用来创建二叉树形成索引\n``` sql\n\t# 创建索引\n\tcreate index ind_name on tt(name);\n\t# 删除索引\n\tdrop index ind_name;\n```\n\n#### 索引优缺点\n- 索引可以加快查询速度\n- 索引会降低修改速度\n- 索引适合经常使用且不易修改的字段","source":"_posts/oracle_constraint-index.md","raw":"---\ntitle: Oracle 约束与索引\ndate: 2016-08-30 20:18:37\ntags:\n\t- Oracle\n---\n### 约束\n我们知道数据库里的数据不是随意插入的，而是需要保证有一定的意义与合法性，例如一个人的年龄为1000，这样是不是显得有点滑稽，正是因为这样，我们就有了约束来保证数据的合法性与完整性\n\n<!-- more -->\n\n#### 非空约束\n非空（NOT NULL）约束：顾名思义，所约束的列不能为NULL值。否则就会报错\n``` sql \n\t# 创建表时加入\n\tcreate table tt (nickname varchar2(20) not null);\n\t# 添加非空约束\n\talter table tt modify nickname not null;\n```\n\n#### 条件约束\n条件（CHECK）约束：表中每行都要满足该约束条件。条件约束既可以在表一级定义也可以在列一级定义。在一列上可以定义任意多个条件约束\n``` sql \n\t# 创建表时加入\n\tcreate table tt (age number(3) check(age between 0 and 200));\n\t# 添加条件约束\n\talter table tt modify age check(age between 0 and 200);\n```\n\n#### 唯一约束\n唯一（UNIQUE）约束：在表中每一行中所定义的这列或这些列的值都不能相同。必须保证唯一性\n``` sql \n\t# 创建表时加入\n\tcreate table tt (name varchar2(20) unique);\n\t# 添加唯一约束\n\talter table tt modify name varchar2(20) unique;\n\t# 删除唯一约束\n\talter table tt drop unique(name);\n```\n\n#### 主键约束\n主键(PRIMARY KEY)约束：用来唯一标识每一行，与唯一约束的区别在于不能为空\n``` sql \n\t# 创建表时加入\n\tcreate table tt (id number(2) primary key);\n\t# 添加主键约束\n\talter table tt modify id number(2) primary key;\n\t# 删除主键约束\n\talter table tt drop primary key;\n```\n\n##### 序列\n``` sql\n\tcreate sequence myseq increment by 2 start with 10;\n\t# 查询sequence信息 \n\tselect * from user_sequences;\n\t# 利用sequence插入数据\n\tinsert into tt(id) values(myseq.nextval);\n```\n{% qnimg oracle/constraint-index/p1.png 'class:class1 class2' normal:yes %}\n\n> LAST_NUMBER += CACHE_SIZE * INCREMENT_BY\n\n#### 外键约束\n``` sql\n\t# 新建一个额外的表\n\tcreate table ttt(id number(2) primary key);\n\t# 创建表时加入\n\tcreate table tt (tid number(2), constraint fk_ttt foreign key (tid) references ttt(id));\n\t# 添加外键约束\n\talter table tt add constraint fk_ttt foreign key(tid) references ttt(id);\n\t# 删除外键约束\n\talter table tt drop constraint fk_ttt;\n```\n\n> 创建约束的时候，最好加上名称，便于后续的管理\n\n### 索引\n\n#### ROWID\n在数据进行从年初的时候，每一条记录都会生成一个伪列(ROWID)来记录数据，ROWID一般用来创建二叉树形成索引\n``` sql\n\t# 创建索引\n\tcreate index ind_name on tt(name);\n\t# 删除索引\n\tdrop index ind_name;\n```\n\n#### 索引优缺点\n- 索引可以加快查询速度\n- 索引会降低修改速度\n- 索引适合经常使用且不易修改的字段","slug":"oracle_constraint-index","published":1,"updated":"2017-03-08T11:19:56.671Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5ep003fqoq17f566vua","content":"<h3 id=\"约束\"><a href=\"#约束\" class=\"headerlink\" title=\"约束\"></a>约束</h3><p>我们知道数据库里的数据不是随意插入的，而是需要保证有一定的意义与合法性，例如一个人的年龄为1000，这样是不是显得有点滑稽，正是因为这样，我们就有了约束来保证数据的合法性与完整性</p>\n<a id=\"more\"></a>\n<h4 id=\"非空约束\"><a href=\"#非空约束\" class=\"headerlink\" title=\"非空约束\"></a>非空约束</h4><p>非空（NOT NULL）约束：顾名思义，所约束的列不能为NULL值。否则就会报错<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 创建表时加入</div><div class=\"line\">create table tt (nickname varchar2(20) not null);</div><div class=\"line\"># 添加非空约束</div><div class=\"line\">alter table tt modify nickname not null;</div></pre></td></tr></table></figure></p>\n<h4 id=\"条件约束\"><a href=\"#条件约束\" class=\"headerlink\" title=\"条件约束\"></a>条件约束</h4><p>条件（CHECK）约束：表中每行都要满足该约束条件。条件约束既可以在表一级定义也可以在列一级定义。在一列上可以定义任意多个条件约束<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 创建表时加入</div><div class=\"line\">create table tt (age number(3) check(age between 0 and 200));</div><div class=\"line\"># 添加条件约束</div><div class=\"line\">alter table tt modify age check(age between 0 and 200);</div></pre></td></tr></table></figure></p>\n<h4 id=\"唯一约束\"><a href=\"#唯一约束\" class=\"headerlink\" title=\"唯一约束\"></a>唯一约束</h4><p>唯一（UNIQUE）约束：在表中每一行中所定义的这列或这些列的值都不能相同。必须保证唯一性<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 创建表时加入</div><div class=\"line\">create table tt (name varchar2(20) unique);</div><div class=\"line\"># 添加唯一约束</div><div class=\"line\">alter table tt modify name varchar2(20) unique;</div><div class=\"line\"># 删除唯一约束</div><div class=\"line\">alter table tt drop unique(name);</div></pre></td></tr></table></figure></p>\n<h4 id=\"主键约束\"><a href=\"#主键约束\" class=\"headerlink\" title=\"主键约束\"></a>主键约束</h4><p>主键(PRIMARY KEY)约束：用来唯一标识每一行，与唯一约束的区别在于不能为空<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 创建表时加入</div><div class=\"line\">create table tt (id number(2) primary key);</div><div class=\"line\"># 添加主键约束</div><div class=\"line\">alter table tt modify id number(2) primary key;</div><div class=\"line\"># 删除主键约束</div><div class=\"line\">alter table tt drop primary key;</div></pre></td></tr></table></figure></p>\n<h5 id=\"序列\"><a href=\"#序列\" class=\"headerlink\" title=\"序列\"></a>序列</h5><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">create sequence myseq increment by 2 start with 10;</div><div class=\"line\"># 查询sequence信息 </div><div class=\"line\">select * from user_sequences;</div><div class=\"line\"># 利用sequence插入数据</div><div class=\"line\">insert into tt(id) values(myseq.nextval);</div></pre></td></tr></table></figure>\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/constraint-index/p1.png\">\n<blockquote>\n<p>LAST_NUMBER += CACHE_SIZE * INCREMENT_BY</p>\n</blockquote>\n<h4 id=\"外键约束\"><a href=\"#外键约束\" class=\"headerlink\" title=\"外键约束\"></a>外键约束</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 新建一个额外的表</div><div class=\"line\">create table ttt(id number(2) primary key);</div><div class=\"line\"># 创建表时加入</div><div class=\"line\">create table tt (tid number(2), constraint fk_ttt foreign key (tid) references ttt(id));</div><div class=\"line\"># 添加外键约束</div><div class=\"line\">alter table tt add constraint fk_ttt foreign key(tid) references ttt(id);</div><div class=\"line\"># 删除外键约束</div><div class=\"line\">alter table tt drop constraint fk_ttt;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>创建约束的时候，最好加上名称，便于后续的管理</p>\n</blockquote>\n<h3 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h3><h4 id=\"ROWID\"><a href=\"#ROWID\" class=\"headerlink\" title=\"ROWID\"></a>ROWID</h4><p>在数据进行从年初的时候，每一条记录都会生成一个伪列(ROWID)来记录数据，ROWID一般用来创建二叉树形成索引<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 创建索引</div><div class=\"line\">create index ind_name on tt(name);</div><div class=\"line\"># 删除索引</div><div class=\"line\">drop index ind_name;</div></pre></td></tr></table></figure></p>\n<h4 id=\"索引优缺点\"><a href=\"#索引优缺点\" class=\"headerlink\" title=\"索引优缺点\"></a>索引优缺点</h4><ul>\n<li>索引可以加快查询速度</li>\n<li>索引会降低修改速度</li>\n<li>索引适合经常使用且不易修改的字段</li>\n</ul>\n","excerpt":"<h3 id=\"约束\"><a href=\"#约束\" class=\"headerlink\" title=\"约束\"></a>约束</h3><p>我们知道数据库里的数据不是随意插入的，而是需要保证有一定的意义与合法性，例如一个人的年龄为1000，这样是不是显得有点滑稽，正是因为这样，我们就有了约束来保证数据的合法性与完整性</p>","more":"<h4 id=\"非空约束\"><a href=\"#非空约束\" class=\"headerlink\" title=\"非空约束\"></a>非空约束</h4><p>非空（NOT NULL）约束：顾名思义，所约束的列不能为NULL值。否则就会报错<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 创建表时加入</div><div class=\"line\">create table tt (nickname varchar2(20) not null);</div><div class=\"line\"># 添加非空约束</div><div class=\"line\">alter table tt modify nickname not null;</div></pre></td></tr></table></figure></p>\n<h4 id=\"条件约束\"><a href=\"#条件约束\" class=\"headerlink\" title=\"条件约束\"></a>条件约束</h4><p>条件（CHECK）约束：表中每行都要满足该约束条件。条件约束既可以在表一级定义也可以在列一级定义。在一列上可以定义任意多个条件约束<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 创建表时加入</div><div class=\"line\">create table tt (age number(3) check(age between 0 and 200));</div><div class=\"line\"># 添加条件约束</div><div class=\"line\">alter table tt modify age check(age between 0 and 200);</div></pre></td></tr></table></figure></p>\n<h4 id=\"唯一约束\"><a href=\"#唯一约束\" class=\"headerlink\" title=\"唯一约束\"></a>唯一约束</h4><p>唯一（UNIQUE）约束：在表中每一行中所定义的这列或这些列的值都不能相同。必须保证唯一性<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 创建表时加入</div><div class=\"line\">create table tt (name varchar2(20) unique);</div><div class=\"line\"># 添加唯一约束</div><div class=\"line\">alter table tt modify name varchar2(20) unique;</div><div class=\"line\"># 删除唯一约束</div><div class=\"line\">alter table tt drop unique(name);</div></pre></td></tr></table></figure></p>\n<h4 id=\"主键约束\"><a href=\"#主键约束\" class=\"headerlink\" title=\"主键约束\"></a>主键约束</h4><p>主键(PRIMARY KEY)约束：用来唯一标识每一行，与唯一约束的区别在于不能为空<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 创建表时加入</div><div class=\"line\">create table tt (id number(2) primary key);</div><div class=\"line\"># 添加主键约束</div><div class=\"line\">alter table tt modify id number(2) primary key;</div><div class=\"line\"># 删除主键约束</div><div class=\"line\">alter table tt drop primary key;</div></pre></td></tr></table></figure></p>\n<h5 id=\"序列\"><a href=\"#序列\" class=\"headerlink\" title=\"序列\"></a>序列</h5><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">create sequence myseq increment by 2 start with 10;</div><div class=\"line\"># 查询sequence信息 </div><div class=\"line\">select * from user_sequences;</div><div class=\"line\"># 利用sequence插入数据</div><div class=\"line\">insert into tt(id) values(myseq.nextval);</div></pre></td></tr></table></figure>\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/constraint-index/p1.png\">\n<blockquote>\n<p>LAST_NUMBER += CACHE_SIZE * INCREMENT_BY</p>\n</blockquote>\n<h4 id=\"外键约束\"><a href=\"#外键约束\" class=\"headerlink\" title=\"外键约束\"></a>外键约束</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 新建一个额外的表</div><div class=\"line\">create table ttt(id number(2) primary key);</div><div class=\"line\"># 创建表时加入</div><div class=\"line\">create table tt (tid number(2), constraint fk_ttt foreign key (tid) references ttt(id));</div><div class=\"line\"># 添加外键约束</div><div class=\"line\">alter table tt add constraint fk_ttt foreign key(tid) references ttt(id);</div><div class=\"line\"># 删除外键约束</div><div class=\"line\">alter table tt drop constraint fk_ttt;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>创建约束的时候，最好加上名称，便于后续的管理</p>\n</blockquote>\n<h3 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h3><h4 id=\"ROWID\"><a href=\"#ROWID\" class=\"headerlink\" title=\"ROWID\"></a>ROWID</h4><p>在数据进行从年初的时候，每一条记录都会生成一个伪列(ROWID)来记录数据，ROWID一般用来创建二叉树形成索引<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 创建索引</div><div class=\"line\">create index ind_name on tt(name);</div><div class=\"line\"># 删除索引</div><div class=\"line\">drop index ind_name;</div></pre></td></tr></table></figure></p>\n<h4 id=\"索引优缺点\"><a href=\"#索引优缺点\" class=\"headerlink\" title=\"索引优缺点\"></a>索引优缺点</h4><ul>\n<li>索引可以加快查询速度</li>\n<li>索引会降低修改速度</li>\n<li>索引适合经常使用且不易修改的字段</li>\n</ul>"},{"title":"Oracle_11g安装与卸载","date":"2016-08-09T08:06:49.000Z","_content":"### 下载\n\n1. 官网下载地址 ： http://www.oracle.com/technetwork/cn/database/enterprise-edition/downloads/index.html\n2. 同意协议\n3. 下载64位的oracle11g的两个压缩包 <br>\n{% qnimg oracle/install/p1.png 'class:class1 class2' normal:yes %}\n4. 将两个压缩包解压到同一目录，我这里是database\n\n<!--more-->\n\n### 安装\n\n1. 点击step.exe进入安装引导界面 <br>\n{% qnimg oracle/install/p2.png 'class:class1 class2' normal:yes %}\n2. 不要管最低要求，点击\"是\" <br>\n{% qnimg oracle/install/p3.png 'class:class1 class2' normal:yes %}\n3. 取消更新 <br>\n{% qnimg oracle/install/p4.png 'class:class1 class2' normal:yes %}\n4. 忽略警告，点击\"是\" <br>\n{% qnimg oracle/install/p5.png 'class:class1 class2' normal:yes %}\n5. 选择“创建和配置数据库”， 即默认， 下一步 <br>\n{% qnimg oracle/install/p6.png 'class:class1 class2' normal:yes %}\n6. 选择\"桌面类\"，即默认，下一步 <br>\n{% qnimg oracle/install/p7.png 'class:class1 class2' normal:yes %}\n7. 配置安装路径和数据库管理口令 <br>\n{% qnimg oracle/install/p8.png 'class:class1 class2' normal:yes %}\n8. 完成 <br>\n{% qnimg oracle/install/p9.png 'class:class1 class2' normal:yes %}\n9. 设置管理口令，解锁scott账户，并为sys、system设置口令 <br>\n{% qnimg oracle/install/p10.png 'class:class1 class2' normal:yes %}\n{% qnimg oracle/install/p11.png 'class:class1 class2' normal:yes %}\n10. 忽略口令的复杂度，点击“是” <br>\n{% qnimg oracle/install/p12.png 'class:class1 class2' normal:yes %}\n11. 安装完成，关闭 <br>\n{% qnimg oracle/install/p13.png 'class:class1 class2' normal:yes %}\n\n### 删除和创建数据库\n\n由于Oracle出于安全与系统的考虑使得自带的全局数据库orcl，在操作时有时会出现异常，下面删除并创建一个数据库（当然，不一定非得删除并创建数据库）\n1. 打开开始，所有程序，找到Oracle，点击Database Configuration Assistant <br>\n{% qnimg oracle/install/p34.png 'class:class1 class2' normal:yes %}\n{% qnimg oracle/install/p14.png 'class:class1 class2' normal:yes %}\n2. 先删除原来的数据库 <br>\n{% qnimg oracle/install/p15.png 'class:class1 class2' normal:yes %}\n3. 输入用户（sys或system）和口令 <br>\n{% qnimg oracle/install/p16.png 'class:class1 class2' normal:yes %}\n{% qnimg oracle/install/p17.png 'class:class1 class2' normal:yes %}\n4. 删除完成后，创建一个数据库 <br>\n{% qnimg oracle/install/p18.png 'class:class1 class2' normal:yes %}\n5. 默认选择，下一步 <br>\n{% qnimg oracle/install/p19.png 'class:class1 class2' normal:yes %}\n6. 创建数据库名和SID <br>\n{% qnimg oracle/install/p20.png 'class:class1 class2' normal:yes %}\n7. 默认选择，下一步 <br>\n{% qnimg oracle/install/p21.png 'class:class1 class2' normal:yes %}\n8. 为所有用户配置统一口令 <br>\n{% qnimg oracle/install/p22.png 'class:class1 class2' normal:yes %}\n9. 默认选择，下一步 <br>\n{% qnimg oracle/install/p23.png 'class:class1 class2' normal:yes %}\n10. 默认选择，下一步 <br>\n{% qnimg oracle/install/p24.png 'class:class1 class2' normal:yes %}\n11. 默认选择，下一步 <br>\n{% qnimg oracle/install/p25.png 'class:class1 class2' normal:yes %}\n12. 默认选择，下一步 <br>\n{% qnimg oracle/install/p26.png 'class:class1 class2' normal:yes %}\n13. 默认选择，下一步 <br>\n{% qnimg oracle/install/p27.png 'class:class1 class2' normal:yes %}\n14. 点击完成 <br>\n{% qnimg oracle/install/p28.png 'class:class1 class2' normal:yes %}\n{% qnimg oracle/install/p29.png 'class:class1 class2' normal:yes %}\n{% qnimg oracle/install/p30.png 'class:class1 class2' normal:yes %}\n15. 解锁scott账户，并为sys、system设置口令 <br>\n{% qnimg oracle/install/p31.png 'class:class1 class2' normal:yes %}\n{% qnimg oracle/install/p32.png 'class:class1 class2' normal:yes %}\n16. 数据库创建完成，退出 <br>\n{% qnimg oracle/install/p33.png 'class:class1 class2' normal:yes %}\n\n\n### 登陆检验\n\noracle有三种登陆使用方式，分别是SQL Plus、SQL Developer和EM Web\n在登陆之前必须开启Oracle 服务 OracleServiceKCXX、OracleDBConsoleorcl和OracleOraDb11g_home2TNSListener（这里名称因人而异，Service，DBConsole和TNSListener这三个关键字）\n{% qnimg oracle/install/p35.png 'class:class1 class2' normal:yes %}\n#### SQL Plus\n1. 打开开始，所有程序，找到Oracle，点击SQL Plus <br>\n{% qnimg oracle/install/p36.png 'class:class1 class2' normal:yes %}\n2. 输入用户名和口令登陆 <br>\n{% qnimg oracle/install/p37.png 'class:class1 class2' normal:yes %}\n\n#### SQL Developer\n1. 由于Oraclre自带的SQL Developer为32位，我电脑64位的。下载SQL Develper地址 ： http://www.oracle.com/technetwork/cn/developer-tools/sql-developer/downloads/index.html\n2. 同意协议，点击下载 <br>\n{% qnimg oracle/install/p38.png 'class:class1 class2' normal:yes %}\n3. 解压文件，点击sqldeveloper.exe <br>\n{% qnimg oracle/install/p39.png 'class:class1 class2' normal:yes %}\n4. 连接数据库 <br>\n{% qnimg oracle/install/p41.png 'class:class1 class2' normal:yes %}\n{% qnimg oracle/install/p40.png 'class:class1 class2' normal:yes %}\n\n#### EM Web\n1. 打开浏览器\n\t输入https://localhost:1158/em\n\t或https://IP地址:1158/em\n\t或https://计算机名:1158/em\n\n2. 点击高级，继续前往 <br>\n{% qnimg oracle/install/p99.png 'class:class1 class2' normal:yes %}\n{% qnimg oracle/install/p98.png 'class:class1 class2' normal:yes %}\n3. 登陆 <br>\n{% qnimg oracle/install/p97.png 'class:class1 class2' normal:yes %}\n{% qnimg oracle/install/p96.png 'class:class1 class2' normal:yes %}\n\n### 卸载\n\n按照上面可以正常安装，如不幸安装失败，那就只能卸载Oracle\n1. 关闭Oracle服务\n2. 打开注册表：regedit 打开路径：HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\ \t\t删除该路径下的所有以oracle开始的服务名称，这个键是标识Oracle在windows下注册的各种服务 <br>\n{% qnimg oracle/install/p42.png 'class:class1 class2' normal:yes %}\n3. 找到路径：HKEY_LOCAL_MACHINE\\SOFTWARE\\ORACLE 删除该oracle目录，该目录下注册着Oracle数据库的软件安装信息和ODBC\\ODBCINST.INI\\Oracle in OraDb11g_home1 <br>\n{% qnimg oracle/install/p43.png 'class:class1 class2' normal:yes %}\n4. 删除注册的oracle事件日志，打开注册表HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Eventlog\\Application 删除注册表的以oracle开头的所有项目。<br>\n{% qnimg oracle/install/p44.png 'class:class1 class2' normal:yes %}\n5. 删除环境变量path中关于oracle的内容 <br>\n{% qnimg oracle/install/p45.png 'class:class1 class2' normal:yes %}\n6. 删除Oracle安装目录\n7. 删除开始菜单中的oracle项\n8. 删除C:\\Program Files\\Oracle\n9. 重启电脑","source":"_posts/oracle_istall.md","raw":"---\ntitle: Oracle_11g安装与卸载\ndate: 2016-08-9 16:06:49\ntags:\n\t- Oracle\n---\n### 下载\n\n1. 官网下载地址 ： http://www.oracle.com/technetwork/cn/database/enterprise-edition/downloads/index.html\n2. 同意协议\n3. 下载64位的oracle11g的两个压缩包 <br>\n{% qnimg oracle/install/p1.png 'class:class1 class2' normal:yes %}\n4. 将两个压缩包解压到同一目录，我这里是database\n\n<!--more-->\n\n### 安装\n\n1. 点击step.exe进入安装引导界面 <br>\n{% qnimg oracle/install/p2.png 'class:class1 class2' normal:yes %}\n2. 不要管最低要求，点击\"是\" <br>\n{% qnimg oracle/install/p3.png 'class:class1 class2' normal:yes %}\n3. 取消更新 <br>\n{% qnimg oracle/install/p4.png 'class:class1 class2' normal:yes %}\n4. 忽略警告，点击\"是\" <br>\n{% qnimg oracle/install/p5.png 'class:class1 class2' normal:yes %}\n5. 选择“创建和配置数据库”， 即默认， 下一步 <br>\n{% qnimg oracle/install/p6.png 'class:class1 class2' normal:yes %}\n6. 选择\"桌面类\"，即默认，下一步 <br>\n{% qnimg oracle/install/p7.png 'class:class1 class2' normal:yes %}\n7. 配置安装路径和数据库管理口令 <br>\n{% qnimg oracle/install/p8.png 'class:class1 class2' normal:yes %}\n8. 完成 <br>\n{% qnimg oracle/install/p9.png 'class:class1 class2' normal:yes %}\n9. 设置管理口令，解锁scott账户，并为sys、system设置口令 <br>\n{% qnimg oracle/install/p10.png 'class:class1 class2' normal:yes %}\n{% qnimg oracle/install/p11.png 'class:class1 class2' normal:yes %}\n10. 忽略口令的复杂度，点击“是” <br>\n{% qnimg oracle/install/p12.png 'class:class1 class2' normal:yes %}\n11. 安装完成，关闭 <br>\n{% qnimg oracle/install/p13.png 'class:class1 class2' normal:yes %}\n\n### 删除和创建数据库\n\n由于Oracle出于安全与系统的考虑使得自带的全局数据库orcl，在操作时有时会出现异常，下面删除并创建一个数据库（当然，不一定非得删除并创建数据库）\n1. 打开开始，所有程序，找到Oracle，点击Database Configuration Assistant <br>\n{% qnimg oracle/install/p34.png 'class:class1 class2' normal:yes %}\n{% qnimg oracle/install/p14.png 'class:class1 class2' normal:yes %}\n2. 先删除原来的数据库 <br>\n{% qnimg oracle/install/p15.png 'class:class1 class2' normal:yes %}\n3. 输入用户（sys或system）和口令 <br>\n{% qnimg oracle/install/p16.png 'class:class1 class2' normal:yes %}\n{% qnimg oracle/install/p17.png 'class:class1 class2' normal:yes %}\n4. 删除完成后，创建一个数据库 <br>\n{% qnimg oracle/install/p18.png 'class:class1 class2' normal:yes %}\n5. 默认选择，下一步 <br>\n{% qnimg oracle/install/p19.png 'class:class1 class2' normal:yes %}\n6. 创建数据库名和SID <br>\n{% qnimg oracle/install/p20.png 'class:class1 class2' normal:yes %}\n7. 默认选择，下一步 <br>\n{% qnimg oracle/install/p21.png 'class:class1 class2' normal:yes %}\n8. 为所有用户配置统一口令 <br>\n{% qnimg oracle/install/p22.png 'class:class1 class2' normal:yes %}\n9. 默认选择，下一步 <br>\n{% qnimg oracle/install/p23.png 'class:class1 class2' normal:yes %}\n10. 默认选择，下一步 <br>\n{% qnimg oracle/install/p24.png 'class:class1 class2' normal:yes %}\n11. 默认选择，下一步 <br>\n{% qnimg oracle/install/p25.png 'class:class1 class2' normal:yes %}\n12. 默认选择，下一步 <br>\n{% qnimg oracle/install/p26.png 'class:class1 class2' normal:yes %}\n13. 默认选择，下一步 <br>\n{% qnimg oracle/install/p27.png 'class:class1 class2' normal:yes %}\n14. 点击完成 <br>\n{% qnimg oracle/install/p28.png 'class:class1 class2' normal:yes %}\n{% qnimg oracle/install/p29.png 'class:class1 class2' normal:yes %}\n{% qnimg oracle/install/p30.png 'class:class1 class2' normal:yes %}\n15. 解锁scott账户，并为sys、system设置口令 <br>\n{% qnimg oracle/install/p31.png 'class:class1 class2' normal:yes %}\n{% qnimg oracle/install/p32.png 'class:class1 class2' normal:yes %}\n16. 数据库创建完成，退出 <br>\n{% qnimg oracle/install/p33.png 'class:class1 class2' normal:yes %}\n\n\n### 登陆检验\n\noracle有三种登陆使用方式，分别是SQL Plus、SQL Developer和EM Web\n在登陆之前必须开启Oracle 服务 OracleServiceKCXX、OracleDBConsoleorcl和OracleOraDb11g_home2TNSListener（这里名称因人而异，Service，DBConsole和TNSListener这三个关键字）\n{% qnimg oracle/install/p35.png 'class:class1 class2' normal:yes %}\n#### SQL Plus\n1. 打开开始，所有程序，找到Oracle，点击SQL Plus <br>\n{% qnimg oracle/install/p36.png 'class:class1 class2' normal:yes %}\n2. 输入用户名和口令登陆 <br>\n{% qnimg oracle/install/p37.png 'class:class1 class2' normal:yes %}\n\n#### SQL Developer\n1. 由于Oraclre自带的SQL Developer为32位，我电脑64位的。下载SQL Develper地址 ： http://www.oracle.com/technetwork/cn/developer-tools/sql-developer/downloads/index.html\n2. 同意协议，点击下载 <br>\n{% qnimg oracle/install/p38.png 'class:class1 class2' normal:yes %}\n3. 解压文件，点击sqldeveloper.exe <br>\n{% qnimg oracle/install/p39.png 'class:class1 class2' normal:yes %}\n4. 连接数据库 <br>\n{% qnimg oracle/install/p41.png 'class:class1 class2' normal:yes %}\n{% qnimg oracle/install/p40.png 'class:class1 class2' normal:yes %}\n\n#### EM Web\n1. 打开浏览器\n\t输入https://localhost:1158/em\n\t或https://IP地址:1158/em\n\t或https://计算机名:1158/em\n\n2. 点击高级，继续前往 <br>\n{% qnimg oracle/install/p99.png 'class:class1 class2' normal:yes %}\n{% qnimg oracle/install/p98.png 'class:class1 class2' normal:yes %}\n3. 登陆 <br>\n{% qnimg oracle/install/p97.png 'class:class1 class2' normal:yes %}\n{% qnimg oracle/install/p96.png 'class:class1 class2' normal:yes %}\n\n### 卸载\n\n按照上面可以正常安装，如不幸安装失败，那就只能卸载Oracle\n1. 关闭Oracle服务\n2. 打开注册表：regedit 打开路径：HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\ \t\t删除该路径下的所有以oracle开始的服务名称，这个键是标识Oracle在windows下注册的各种服务 <br>\n{% qnimg oracle/install/p42.png 'class:class1 class2' normal:yes %}\n3. 找到路径：HKEY_LOCAL_MACHINE\\SOFTWARE\\ORACLE 删除该oracle目录，该目录下注册着Oracle数据库的软件安装信息和ODBC\\ODBCINST.INI\\Oracle in OraDb11g_home1 <br>\n{% qnimg oracle/install/p43.png 'class:class1 class2' normal:yes %}\n4. 删除注册的oracle事件日志，打开注册表HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Eventlog\\Application 删除注册表的以oracle开头的所有项目。<br>\n{% qnimg oracle/install/p44.png 'class:class1 class2' normal:yes %}\n5. 删除环境变量path中关于oracle的内容 <br>\n{% qnimg oracle/install/p45.png 'class:class1 class2' normal:yes %}\n6. 删除Oracle安装目录\n7. 删除开始菜单中的oracle项\n8. 删除C:\\Program Files\\Oracle\n9. 重启电脑","slug":"oracle_istall","published":1,"updated":"2017-03-08T11:13:58.975Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5er003hqoq1c6yk498k","content":"<h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><ol>\n<li>官网下载地址 ： <a href=\"http://www.oracle.com/technetwork/cn/database/enterprise-edition/downloads/index.html\" target=\"_blank\" rel=\"external\">http://www.oracle.com/technetwork/cn/database/enterprise-edition/downloads/index.html</a></li>\n<li>同意协议</li>\n<li>下载64位的oracle11g的两个压缩包 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p1.png\"></li>\n<li>将两个压缩包解压到同一目录，我这里是database</li>\n</ol>\n<a id=\"more\"></a>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><ol>\n<li>点击step.exe进入安装引导界面 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p2.png\"></li>\n<li>不要管最低要求，点击”是” <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p3.png\"></li>\n<li>取消更新 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p4.png\"></li>\n<li>忽略警告，点击”是” <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p5.png\"></li>\n<li>选择“创建和配置数据库”， 即默认， 下一步 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p6.png\"></li>\n<li>选择”桌面类”，即默认，下一步 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p7.png\"></li>\n<li>配置安装路径和数据库管理口令 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p8.png\"></li>\n<li>完成 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p9.png\"></li>\n<li>设置管理口令，解锁scott账户，并为sys、system设置口令 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p10.png\">\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p11.png\"></li>\n<li>忽略口令的复杂度，点击“是” <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p12.png\"></li>\n<li>安装完成，关闭 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p13.png\">\n</li>\n</ol>\n<h3 id=\"删除和创建数据库\"><a href=\"#删除和创建数据库\" class=\"headerlink\" title=\"删除和创建数据库\"></a>删除和创建数据库</h3><p>由于Oracle出于安全与系统的考虑使得自带的全局数据库orcl，在操作时有时会出现异常，下面删除并创建一个数据库（当然，不一定非得删除并创建数据库）</p>\n<ol>\n<li>打开开始，所有程序，找到Oracle，点击Database Configuration Assistant <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p34.png\">\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p14.png\"></li>\n<li>先删除原来的数据库 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p15.png\"></li>\n<li>输入用户（sys或system）和口令 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p16.png\">\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p17.png\"></li>\n<li>删除完成后，创建一个数据库 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p18.png\"></li>\n<li>默认选择，下一步 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p19.png\"></li>\n<li>创建数据库名和SID <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p20.png\"></li>\n<li>默认选择，下一步 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p21.png\"></li>\n<li>为所有用户配置统一口令 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p22.png\"></li>\n<li>默认选择，下一步 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p23.png\"></li>\n<li>默认选择，下一步 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p24.png\"></li>\n<li>默认选择，下一步 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p25.png\"></li>\n<li>默认选择，下一步 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p26.png\"></li>\n<li>默认选择，下一步 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p27.png\"></li>\n<li>点击完成 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p28.png\">\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p29.png\">\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p30.png\"></li>\n<li>解锁scott账户，并为sys、system设置口令 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p31.png\">\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p32.png\"></li>\n<li>数据库创建完成，退出 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p33.png\">\n</li>\n</ol>\n<h3 id=\"登陆检验\"><a href=\"#登陆检验\" class=\"headerlink\" title=\"登陆检验\"></a>登陆检验</h3><p>oracle有三种登陆使用方式，分别是SQL Plus、SQL Developer和EM Web<br>在登陆之前必须开启Oracle 服务 OracleServiceKCXX、OracleDBConsoleorcl和OracleOraDb11g_home2TNSListener（这里名称因人而异，Service，DBConsole和TNSListener这三个关键字）<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p35.png\"></p>\n<h4 id=\"SQL-Plus\"><a href=\"#SQL-Plus\" class=\"headerlink\" title=\"SQL Plus\"></a>SQL Plus</h4><ol>\n<li>打开开始，所有程序，找到Oracle，点击SQL Plus <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p36.png\"></li>\n<li>输入用户名和口令登陆 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p37.png\">\n</li>\n</ol>\n<h4 id=\"SQL-Developer\"><a href=\"#SQL-Developer\" class=\"headerlink\" title=\"SQL Developer\"></a>SQL Developer</h4><ol>\n<li>由于Oraclre自带的SQL Developer为32位，我电脑64位的。下载SQL Develper地址 ： <a href=\"http://www.oracle.com/technetwork/cn/developer-tools/sql-developer/downloads/index.html\" target=\"_blank\" rel=\"external\">http://www.oracle.com/technetwork/cn/developer-tools/sql-developer/downloads/index.html</a></li>\n<li>同意协议，点击下载 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p38.png\"></li>\n<li>解压文件，点击sqldeveloper.exe <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p39.png\"></li>\n<li>连接数据库 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p41.png\">\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p40.png\">\n</li>\n</ol>\n<h4 id=\"EM-Web\"><a href=\"#EM-Web\" class=\"headerlink\" title=\"EM Web\"></a>EM Web</h4><ol>\n<li><p>打开浏览器<br> 输入<a href=\"https://localhost:1158/em\" target=\"_blank\" rel=\"external\">https://localhost:1158/em</a><br> 或<a href=\"https://IP地址:1158/em\" target=\"_blank\" rel=\"external\">https://IP地址:1158/em</a><br> 或<a href=\"https://计算机名:1158/em\" target=\"_blank\" rel=\"external\">https://计算机名:1158/em</a></p>\n</li>\n<li><p>点击高级，继续前往 <br></p>\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p99.png\">\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p98.png\"></li>\n<li>登陆 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p97.png\">\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p96.png\">\n</li>\n</ol>\n<h3 id=\"卸载\"><a href=\"#卸载\" class=\"headerlink\" title=\"卸载\"></a>卸载</h3><p>按照上面可以正常安装，如不幸安装失败，那就只能卸载Oracle</p>\n<ol>\n<li>关闭Oracle服务</li>\n<li>打开注册表：regedit 打开路径：HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\         删除该路径下的所有以oracle开始的服务名称，这个键是标识Oracle在windows下注册的各种服务 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p42.png\"></li>\n<li>找到路径：HKEY_LOCAL_MACHINE\\SOFTWARE\\ORACLE 删除该oracle目录，该目录下注册着Oracle数据库的软件安装信息和ODBC\\ODBCINST.INI\\Oracle in OraDb11g_home1 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p43.png\"></li>\n<li>删除注册的oracle事件日志，打开注册表HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Eventlog\\Application 删除注册表的以oracle开头的所有项目。<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p44.png\"></li>\n<li>删除环境变量path中关于oracle的内容 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p45.png\"></li>\n<li>删除Oracle安装目录</li>\n<li>删除开始菜单中的oracle项</li>\n<li>删除C:\\Program Files\\Oracle</li>\n<li>重启电脑</li>\n</ol>\n","excerpt":"<h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><ol>\n<li>官网下载地址 ： <a href=\"http://www.oracle.com/technetwork/cn/database/enterprise-edition/downloads/index.html\">http://www.oracle.com/technetwork/cn/database/enterprise-edition/downloads/index.html</a></li>\n<li>同意协议</li>\n<li>下载64位的oracle11g的两个压缩包 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p1.png\"></li>\n<li>将两个压缩包解压到同一目录，我这里是database</li>\n</ol>","more":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><ol>\n<li>点击step.exe进入安装引导界面 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p2.png\"></li>\n<li>不要管最低要求，点击”是” <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p3.png\"></li>\n<li>取消更新 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p4.png\"></li>\n<li>忽略警告，点击”是” <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p5.png\"></li>\n<li>选择“创建和配置数据库”， 即默认， 下一步 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p6.png\"></li>\n<li>选择”桌面类”，即默认，下一步 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p7.png\"></li>\n<li>配置安装路径和数据库管理口令 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p8.png\"></li>\n<li>完成 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p9.png\"></li>\n<li>设置管理口令，解锁scott账户，并为sys、system设置口令 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p10.png\">\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p11.png\"></li>\n<li>忽略口令的复杂度，点击“是” <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p12.png\"></li>\n<li>安装完成，关闭 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p13.png\">\n</li>\n</ol>\n<h3 id=\"删除和创建数据库\"><a href=\"#删除和创建数据库\" class=\"headerlink\" title=\"删除和创建数据库\"></a>删除和创建数据库</h3><p>由于Oracle出于安全与系统的考虑使得自带的全局数据库orcl，在操作时有时会出现异常，下面删除并创建一个数据库（当然，不一定非得删除并创建数据库）</p>\n<ol>\n<li>打开开始，所有程序，找到Oracle，点击Database Configuration Assistant <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p34.png\">\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p14.png\"></li>\n<li>先删除原来的数据库 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p15.png\"></li>\n<li>输入用户（sys或system）和口令 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p16.png\">\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p17.png\"></li>\n<li>删除完成后，创建一个数据库 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p18.png\"></li>\n<li>默认选择，下一步 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p19.png\"></li>\n<li>创建数据库名和SID <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p20.png\"></li>\n<li>默认选择，下一步 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p21.png\"></li>\n<li>为所有用户配置统一口令 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p22.png\"></li>\n<li>默认选择，下一步 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p23.png\"></li>\n<li>默认选择，下一步 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p24.png\"></li>\n<li>默认选择，下一步 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p25.png\"></li>\n<li>默认选择，下一步 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p26.png\"></li>\n<li>默认选择，下一步 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p27.png\"></li>\n<li>点击完成 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p28.png\">\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p29.png\">\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p30.png\"></li>\n<li>解锁scott账户，并为sys、system设置口令 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p31.png\">\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p32.png\"></li>\n<li>数据库创建完成，退出 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p33.png\">\n</li>\n</ol>\n<h3 id=\"登陆检验\"><a href=\"#登陆检验\" class=\"headerlink\" title=\"登陆检验\"></a>登陆检验</h3><p>oracle有三种登陆使用方式，分别是SQL Plus、SQL Developer和EM Web<br>在登陆之前必须开启Oracle 服务 OracleServiceKCXX、OracleDBConsoleorcl和OracleOraDb11g_home2TNSListener（这里名称因人而异，Service，DBConsole和TNSListener这三个关键字）<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p35.png\"></p>\n<h4 id=\"SQL-Plus\"><a href=\"#SQL-Plus\" class=\"headerlink\" title=\"SQL Plus\"></a>SQL Plus</h4><ol>\n<li>打开开始，所有程序，找到Oracle，点击SQL Plus <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p36.png\"></li>\n<li>输入用户名和口令登陆 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p37.png\">\n</li>\n</ol>\n<h4 id=\"SQL-Developer\"><a href=\"#SQL-Developer\" class=\"headerlink\" title=\"SQL Developer\"></a>SQL Developer</h4><ol>\n<li>由于Oraclre自带的SQL Developer为32位，我电脑64位的。下载SQL Develper地址 ： <a href=\"http://www.oracle.com/technetwork/cn/developer-tools/sql-developer/downloads/index.html\">http://www.oracle.com/technetwork/cn/developer-tools/sql-developer/downloads/index.html</a></li>\n<li>同意协议，点击下载 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p38.png\"></li>\n<li>解压文件，点击sqldeveloper.exe <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p39.png\"></li>\n<li>连接数据库 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p41.png\">\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p40.png\">\n</li>\n</ol>\n<h4 id=\"EM-Web\"><a href=\"#EM-Web\" class=\"headerlink\" title=\"EM Web\"></a>EM Web</h4><ol>\n<li><p>打开浏览器<br> 输入<a href=\"https://localhost:1158/em\">https://localhost:1158/em</a><br> 或<a href=\"https://IP地址:1158/em\">https://IP地址:1158/em</a><br> 或<a href=\"https://计算机名:1158/em\">https://计算机名:1158/em</a></p>\n</li>\n<li><p>点击高级，继续前往 <br></p>\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p99.png\">\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p98.png\"></li>\n<li>登陆 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p97.png\">\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p96.png\">\n</li>\n</ol>\n<h3 id=\"卸载\"><a href=\"#卸载\" class=\"headerlink\" title=\"卸载\"></a>卸载</h3><p>按照上面可以正常安装，如不幸安装失败，那就只能卸载Oracle</p>\n<ol>\n<li>关闭Oracle服务</li>\n<li>打开注册表：regedit 打开路径：HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\         删除该路径下的所有以oracle开始的服务名称，这个键是标识Oracle在windows下注册的各种服务 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p42.png\"></li>\n<li>找到路径：HKEY_LOCAL_MACHINE\\SOFTWARE\\ORACLE 删除该oracle目录，该目录下注册着Oracle数据库的软件安装信息和ODBC\\ODBCINST.INI\\Oracle in OraDb11g_home1 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p43.png\"></li>\n<li>删除注册的oracle事件日志，打开注册表HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Eventlog\\Application 删除注册表的以oracle开头的所有项目。<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p44.png\"></li>\n<li>删除环境变量path中关于oracle的内容 <br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/install/p45.png\"></li>\n<li>删除Oracle安装目录</li>\n<li>删除开始菜单中的oracle项</li>\n<li>删除C:\\Program Files\\Oracle</li>\n<li>重启电脑</li>\n</ol>"},{"title":"Oracle DDL 语句","date":"2016-08-22T13:52:58.000Z","_content":"\n### Oracle基本数据类型\n对于Oracle来说，基本的数据类型就是对字符，数字，时间，文件这几类数据进行处理的\n\n#### 字符类\n- char : 固定长度(空间大小一定)，会用空格填充来达到其最大长度，对已知长度的字符处理，效率极高\n- nchar : 与char相同，不过是unicode的形式存储\n- varchar ：可变长度，不会用空格填满空间 \n- varchar2 ：与varchar相似，但在其基础上进行了修改(一般使用varchar2,而非varchar)  <!-- more -->\n- nvarchar2 : 与varchar2相同，不过是unicode的形式存储\n\n#### 数字类\n- number ：既可以表示整数(number(n))，也可以表示浮点数(number(m,n))\n- float : 浮点型\n- binary_float : 32位单精度浮点型\n- binary_double : 64位双精度浮点型\n\n#### 时间类\n- date : 包含年月日，时分秒\n- timestamp ： 比date更加精确，可以精确到9位小数秒\n\n#### 文件类(lob)\n- clob : 存储单字节和多字节字符数据,最大存储4G\n- nclob : 存储UNICODE类型的数据,最大存储4G\n- blob : 存储非结构化的二进制数据大对象,一般是图像、声音、视频等文件,最大存储4G\n- nfile : 存储二进制文件，最大存储4G\n\n> oracle不区分大小写，但是字符比较时'name' --> name是区分大小写的\n\n### DDL语句\nDDL(Data Definition Language)数据库定义语言,用于定义数据库的三级结构，包括外模式、概念模式、内模式及其相互之间的映像，定义数据的完整性、安全控制等约束，不需要commit\n\n#### create 关键字\ncreate(创建)一般指创建表，视图……，这里以建表为例\n``` sql\n\t# create table table_name(字段...);\n\tcreate table aa (\n\t\tname varchar2(20),\n\t\tage number(3),\n\t\tsex char(2),\n\t\tbirthday date\n\t);\n```\n当你用前面创建的用户sakuraffy操作时，会提示你权限不足\n\n> 对于表的操作，需要赋予创建(create table)增(insert any table)删(drop any table)改(update any table)注释(comment any table)的权限\n\n``` sql\n\tgrant create table,insert any table,update any table,delete any table,comment any table to sakuraffy;\n```\n表复制\n```\n\t#只复制表结构\n\tcreate table cc as select * from bb where 1 = 0;\n\tcreate table cc like bb;\n\t#复制表结构和内容\n\tcreate table cc as select * from bb;\n```\n\n#### alter 关键字\n修改表(或者视图...)的结构，如添加，删除字段\n``` sql \n\t#增加字段\n\t#alter table table_name add (column_name column_dataStructure);  --可以多个字段，一个可以去除括号\n\talter table aa add (address varchar2(20));\n\t#修改字段\n\t#alter table table_name modify (column_name column_dataStructure);  --可以多个字段，一个可以去除括号\n\talter table aa modify (address varchar2(18));\n\t#删除字段\n\t#alter table table_name drop (column_name); --无论单个还是多个字段，都需要加括号\n\talter table aa drop (address);\n```\n\n#### rename 关键字\n修改表(或者视图...)的名称\n``` sql\n\t#alter table table_oldName rename to table_newName;\n\talter table aa rename to bb;\n```\n\n#### drop 关键字\n删除表(或者视图...)的结构\n``` sql \n\t#drop table table_name;\n\tdrop table aa;\n```\n\n#### truncate 关键字\ntruncate与delete相似，都是删除表(视图...)数据\n- delete可以删除单条语句，truncate只能删除全部数据\n- delete可以回滚，而truncate不可以\n- delete效率低，而truncate效率高\n``` sql\n\t# truncate table table_name\n\ttruncate table aa\n```\n\n#### comment 关键字\n为表/字段(或者视图...)添加注释\n``` sql\n\t#添加注释\n\t#comment on table table_name is '内容';\n\tcomment on table aa is 'aa table';\n\tcomment on column aa.name is '姓名';\n\t#删除注释  --将注释改为空\n\tcomment on column aa.name is ‘’；\n```","source":"_posts/oracle_sql_ddl.md","raw":"---\ntitle: Oracle DDL 语句\ndate: 2016-8-22 21:52:58\ntags:\n\t- Oracle\n---\n\n### Oracle基本数据类型\n对于Oracle来说，基本的数据类型就是对字符，数字，时间，文件这几类数据进行处理的\n\n#### 字符类\n- char : 固定长度(空间大小一定)，会用空格填充来达到其最大长度，对已知长度的字符处理，效率极高\n- nchar : 与char相同，不过是unicode的形式存储\n- varchar ：可变长度，不会用空格填满空间 \n- varchar2 ：与varchar相似，但在其基础上进行了修改(一般使用varchar2,而非varchar)  <!-- more -->\n- nvarchar2 : 与varchar2相同，不过是unicode的形式存储\n\n#### 数字类\n- number ：既可以表示整数(number(n))，也可以表示浮点数(number(m,n))\n- float : 浮点型\n- binary_float : 32位单精度浮点型\n- binary_double : 64位双精度浮点型\n\n#### 时间类\n- date : 包含年月日，时分秒\n- timestamp ： 比date更加精确，可以精确到9位小数秒\n\n#### 文件类(lob)\n- clob : 存储单字节和多字节字符数据,最大存储4G\n- nclob : 存储UNICODE类型的数据,最大存储4G\n- blob : 存储非结构化的二进制数据大对象,一般是图像、声音、视频等文件,最大存储4G\n- nfile : 存储二进制文件，最大存储4G\n\n> oracle不区分大小写，但是字符比较时'name' --> name是区分大小写的\n\n### DDL语句\nDDL(Data Definition Language)数据库定义语言,用于定义数据库的三级结构，包括外模式、概念模式、内模式及其相互之间的映像，定义数据的完整性、安全控制等约束，不需要commit\n\n#### create 关键字\ncreate(创建)一般指创建表，视图……，这里以建表为例\n``` sql\n\t# create table table_name(字段...);\n\tcreate table aa (\n\t\tname varchar2(20),\n\t\tage number(3),\n\t\tsex char(2),\n\t\tbirthday date\n\t);\n```\n当你用前面创建的用户sakuraffy操作时，会提示你权限不足\n\n> 对于表的操作，需要赋予创建(create table)增(insert any table)删(drop any table)改(update any table)注释(comment any table)的权限\n\n``` sql\n\tgrant create table,insert any table,update any table,delete any table,comment any table to sakuraffy;\n```\n表复制\n```\n\t#只复制表结构\n\tcreate table cc as select * from bb where 1 = 0;\n\tcreate table cc like bb;\n\t#复制表结构和内容\n\tcreate table cc as select * from bb;\n```\n\n#### alter 关键字\n修改表(或者视图...)的结构，如添加，删除字段\n``` sql \n\t#增加字段\n\t#alter table table_name add (column_name column_dataStructure);  --可以多个字段，一个可以去除括号\n\talter table aa add (address varchar2(20));\n\t#修改字段\n\t#alter table table_name modify (column_name column_dataStructure);  --可以多个字段，一个可以去除括号\n\talter table aa modify (address varchar2(18));\n\t#删除字段\n\t#alter table table_name drop (column_name); --无论单个还是多个字段，都需要加括号\n\talter table aa drop (address);\n```\n\n#### rename 关键字\n修改表(或者视图...)的名称\n``` sql\n\t#alter table table_oldName rename to table_newName;\n\talter table aa rename to bb;\n```\n\n#### drop 关键字\n删除表(或者视图...)的结构\n``` sql \n\t#drop table table_name;\n\tdrop table aa;\n```\n\n#### truncate 关键字\ntruncate与delete相似，都是删除表(视图...)数据\n- delete可以删除单条语句，truncate只能删除全部数据\n- delete可以回滚，而truncate不可以\n- delete效率低，而truncate效率高\n``` sql\n\t# truncate table table_name\n\ttruncate table aa\n```\n\n#### comment 关键字\n为表/字段(或者视图...)添加注释\n``` sql\n\t#添加注释\n\t#comment on table table_name is '内容';\n\tcomment on table aa is 'aa table';\n\tcomment on column aa.name is '姓名';\n\t#删除注释  --将注释改为空\n\tcomment on column aa.name is ‘’；\n```","slug":"oracle_sql_ddl","published":1,"updated":"2017-03-08T11:15:46.297Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5es003kqoq1ez6afdox","content":"<h3 id=\"Oracle基本数据类型\"><a href=\"#Oracle基本数据类型\" class=\"headerlink\" title=\"Oracle基本数据类型\"></a>Oracle基本数据类型</h3><p>对于Oracle来说，基本的数据类型就是对字符，数字，时间，文件这几类数据进行处理的</p>\n<h4 id=\"字符类\"><a href=\"#字符类\" class=\"headerlink\" title=\"字符类\"></a>字符类</h4><ul>\n<li>char : 固定长度(空间大小一定)，会用空格填充来达到其最大长度，对已知长度的字符处理，效率极高</li>\n<li>nchar : 与char相同，不过是unicode的形式存储</li>\n<li>varchar ：可变长度，不会用空格填满空间 </li>\n<li>varchar2 ：与varchar相似，但在其基础上进行了修改(一般使用varchar2,而非varchar)  <a id=\"more\"></a></li>\n<li>nvarchar2 : 与varchar2相同，不过是unicode的形式存储</li>\n</ul>\n<h4 id=\"数字类\"><a href=\"#数字类\" class=\"headerlink\" title=\"数字类\"></a>数字类</h4><ul>\n<li>number ：既可以表示整数(number(n))，也可以表示浮点数(number(m,n))</li>\n<li>float : 浮点型</li>\n<li>binary_float : 32位单精度浮点型</li>\n<li>binary_double : 64位双精度浮点型</li>\n</ul>\n<h4 id=\"时间类\"><a href=\"#时间类\" class=\"headerlink\" title=\"时间类\"></a>时间类</h4><ul>\n<li>date : 包含年月日，时分秒</li>\n<li>timestamp ： 比date更加精确，可以精确到9位小数秒</li>\n</ul>\n<h4 id=\"文件类-lob\"><a href=\"#文件类-lob\" class=\"headerlink\" title=\"文件类(lob)\"></a>文件类(lob)</h4><ul>\n<li>clob : 存储单字节和多字节字符数据,最大存储4G</li>\n<li>nclob : 存储UNICODE类型的数据,最大存储4G</li>\n<li>blob : 存储非结构化的二进制数据大对象,一般是图像、声音、视频等文件,最大存储4G</li>\n<li>nfile : 存储二进制文件，最大存储4G</li>\n</ul>\n<blockquote>\n<p>oracle不区分大小写，但是字符比较时’name’ –&gt; name是区分大小写的</p>\n</blockquote>\n<h3 id=\"DDL语句\"><a href=\"#DDL语句\" class=\"headerlink\" title=\"DDL语句\"></a>DDL语句</h3><p>DDL(Data Definition Language)数据库定义语言,用于定义数据库的三级结构，包括外模式、概念模式、内模式及其相互之间的映像，定义数据的完整性、安全控制等约束，不需要commit</p>\n<h4 id=\"create-关键字\"><a href=\"#create-关键字\" class=\"headerlink\" title=\"create 关键字\"></a>create 关键字</h4><p>create(创建)一般指创建表，视图……，这里以建表为例<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"># create table table_name(字段...);</div><div class=\"line\">create table aa (</div><div class=\"line\">\tname varchar2(20),</div><div class=\"line\">\tage number(3),</div><div class=\"line\">\tsex char(2),</div><div class=\"line\">\tbirthday date</div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<p>当你用前面创建的用户sakuraffy操作时，会提示你权限不足</p>\n<blockquote>\n<p>对于表的操作，需要赋予创建(create table)增(insert any table)删(drop any table)改(update any table)注释(comment any table)的权限</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">create</span> <span class=\"keyword\">table</span>,<span class=\"keyword\">insert</span> <span class=\"keyword\">any</span> <span class=\"keyword\">table</span>,<span class=\"keyword\">update</span> <span class=\"keyword\">any</span> <span class=\"keyword\">table</span>,<span class=\"keyword\">delete</span> <span class=\"keyword\">any</span> <span class=\"keyword\">table</span>,<span class=\"keyword\">comment</span> <span class=\"keyword\">any</span> <span class=\"keyword\">table</span> <span class=\"keyword\">to</span> sakuraffy;</div></pre></td></tr></table></figure>\n<p>表复制<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">#只复制表结构</div><div class=\"line\">create table cc as select * from bb where 1 = 0;</div><div class=\"line\">create table cc like bb;</div><div class=\"line\">#复制表结构和内容</div><div class=\"line\">create table cc as select * from bb;</div></pre></td></tr></table></figure></p>\n<h4 id=\"alter-关键字\"><a href=\"#alter-关键字\" class=\"headerlink\" title=\"alter 关键字\"></a>alter 关键字</h4><p>修改表(或者视图…)的结构，如添加，删除字段<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">#增加字段</div><div class=\"line\">#alter table table_name add (column_name column_dataStructure);  --可以多个字段，一个可以去除括号</div><div class=\"line\">alter table aa add (address varchar2(20));</div><div class=\"line\">#修改字段</div><div class=\"line\">#alter table table_name modify (column_name column_dataStructure);  --可以多个字段，一个可以去除括号</div><div class=\"line\">alter table aa modify (address varchar2(18));</div><div class=\"line\">#删除字段</div><div class=\"line\">#alter table table_name drop (column_name); --无论单个还是多个字段，都需要加括号</div><div class=\"line\">alter table aa drop (address);</div></pre></td></tr></table></figure></p>\n<h4 id=\"rename-关键字\"><a href=\"#rename-关键字\" class=\"headerlink\" title=\"rename 关键字\"></a>rename 关键字</h4><p>修改表(或者视图…)的名称<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#alter table table_oldName rename to table_newName;</div><div class=\"line\">alter table aa rename to bb;</div></pre></td></tr></table></figure></p>\n<h4 id=\"drop-关键字\"><a href=\"#drop-关键字\" class=\"headerlink\" title=\"drop 关键字\"></a>drop 关键字</h4><p>删除表(或者视图…)的结构<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#drop table table_name;</div><div class=\"line\">drop table aa;</div></pre></td></tr></table></figure></p>\n<h4 id=\"truncate-关键字\"><a href=\"#truncate-关键字\" class=\"headerlink\" title=\"truncate 关键字\"></a>truncate 关键字</h4><p>truncate与delete相似，都是删除表(视图…)数据</p>\n<ul>\n<li>delete可以删除单条语句，truncate只能删除全部数据</li>\n<li>delete可以回滚，而truncate不可以</li>\n<li>delete效率低，而truncate效率高<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># truncate table table_name</div><div class=\"line\">truncate table aa</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"comment-关键字\"><a href=\"#comment-关键字\" class=\"headerlink\" title=\"comment 关键字\"></a>comment 关键字</h4><p>为表/字段(或者视图…)添加注释<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">#添加注释</div><div class=\"line\">#comment on table table_name is '内容';</div><div class=\"line\">comment on table aa is 'aa table';</div><div class=\"line\">comment on column aa.name is '姓名';</div><div class=\"line\">#删除注释  --将注释改为空</div><div class=\"line\">comment on column aa.name is ‘’；</div></pre></td></tr></table></figure></p>\n","excerpt":"<h3 id=\"Oracle基本数据类型\"><a href=\"#Oracle基本数据类型\" class=\"headerlink\" title=\"Oracle基本数据类型\"></a>Oracle基本数据类型</h3><p>对于Oracle来说，基本的数据类型就是对字符，数字，时间，文件这几类数据进行处理的</p>\n<h4 id=\"字符类\"><a href=\"#字符类\" class=\"headerlink\" title=\"字符类\"></a>字符类</h4><ul>\n<li>char : 固定长度(空间大小一定)，会用空格填充来达到其最大长度，对已知长度的字符处理，效率极高</li>\n<li>nchar : 与char相同，不过是unicode的形式存储</li>\n<li>varchar ：可变长度，不会用空格填满空间 </li>\n<li>varchar2 ：与varchar相似，但在其基础上进行了修改(一般使用varchar2,而非varchar)","more":"</li>\n<li>nvarchar2 : 与varchar2相同，不过是unicode的形式存储</li>\n</ul>\n<h4 id=\"数字类\"><a href=\"#数字类\" class=\"headerlink\" title=\"数字类\"></a>数字类</h4><ul>\n<li>number ：既可以表示整数(number(n))，也可以表示浮点数(number(m,n))</li>\n<li>float : 浮点型</li>\n<li>binary_float : 32位单精度浮点型</li>\n<li>binary_double : 64位双精度浮点型</li>\n</ul>\n<h4 id=\"时间类\"><a href=\"#时间类\" class=\"headerlink\" title=\"时间类\"></a>时间类</h4><ul>\n<li>date : 包含年月日，时分秒</li>\n<li>timestamp ： 比date更加精确，可以精确到9位小数秒</li>\n</ul>\n<h4 id=\"文件类-lob\"><a href=\"#文件类-lob\" class=\"headerlink\" title=\"文件类(lob)\"></a>文件类(lob)</h4><ul>\n<li>clob : 存储单字节和多字节字符数据,最大存储4G</li>\n<li>nclob : 存储UNICODE类型的数据,最大存储4G</li>\n<li>blob : 存储非结构化的二进制数据大对象,一般是图像、声音、视频等文件,最大存储4G</li>\n<li>nfile : 存储二进制文件，最大存储4G</li>\n</ul>\n<blockquote>\n<p>oracle不区分大小写，但是字符比较时’name’ –&gt; name是区分大小写的</p>\n</blockquote>\n<h3 id=\"DDL语句\"><a href=\"#DDL语句\" class=\"headerlink\" title=\"DDL语句\"></a>DDL语句</h3><p>DDL(Data Definition Language)数据库定义语言,用于定义数据库的三级结构，包括外模式、概念模式、内模式及其相互之间的映像，定义数据的完整性、安全控制等约束，不需要commit</p>\n<h4 id=\"create-关键字\"><a href=\"#create-关键字\" class=\"headerlink\" title=\"create 关键字\"></a>create 关键字</h4><p>create(创建)一般指创建表，视图……，这里以建表为例<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"># create table table_name(字段...);</div><div class=\"line\">create table aa (</div><div class=\"line\">\tname varchar2(20),</div><div class=\"line\">\tage number(3),</div><div class=\"line\">\tsex char(2),</div><div class=\"line\">\tbirthday date</div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<p>当你用前面创建的用户sakuraffy操作时，会提示你权限不足</p>\n<blockquote>\n<p>对于表的操作，需要赋予创建(create table)增(insert any table)删(drop any table)改(update any table)注释(comment any table)的权限</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">create</span> <span class=\"keyword\">table</span>,<span class=\"keyword\">insert</span> <span class=\"keyword\">any</span> <span class=\"keyword\">table</span>,<span class=\"keyword\">update</span> <span class=\"keyword\">any</span> <span class=\"keyword\">table</span>,<span class=\"keyword\">delete</span> <span class=\"keyword\">any</span> <span class=\"keyword\">table</span>,<span class=\"keyword\">comment</span> <span class=\"keyword\">any</span> <span class=\"keyword\">table</span> <span class=\"keyword\">to</span> sakuraffy;</div></pre></td></tr></table></figure>\n<p>表复制<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">#只复制表结构</div><div class=\"line\">create table cc as select * from bb where 1 = 0;</div><div class=\"line\">create table cc like bb;</div><div class=\"line\">#复制表结构和内容</div><div class=\"line\">create table cc as select * from bb;</div></pre></td></tr></table></figure></p>\n<h4 id=\"alter-关键字\"><a href=\"#alter-关键字\" class=\"headerlink\" title=\"alter 关键字\"></a>alter 关键字</h4><p>修改表(或者视图…)的结构，如添加，删除字段<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">#增加字段</div><div class=\"line\">#alter table table_name add (column_name column_dataStructure);  --可以多个字段，一个可以去除括号</div><div class=\"line\">alter table aa add (address varchar2(20));</div><div class=\"line\">#修改字段</div><div class=\"line\">#alter table table_name modify (column_name column_dataStructure);  --可以多个字段，一个可以去除括号</div><div class=\"line\">alter table aa modify (address varchar2(18));</div><div class=\"line\">#删除字段</div><div class=\"line\">#alter table table_name drop (column_name); --无论单个还是多个字段，都需要加括号</div><div class=\"line\">alter table aa drop (address);</div></pre></td></tr></table></figure></p>\n<h4 id=\"rename-关键字\"><a href=\"#rename-关键字\" class=\"headerlink\" title=\"rename 关键字\"></a>rename 关键字</h4><p>修改表(或者视图…)的名称<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#alter table table_oldName rename to table_newName;</div><div class=\"line\">alter table aa rename to bb;</div></pre></td></tr></table></figure></p>\n<h4 id=\"drop-关键字\"><a href=\"#drop-关键字\" class=\"headerlink\" title=\"drop 关键字\"></a>drop 关键字</h4><p>删除表(或者视图…)的结构<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#drop table table_name;</div><div class=\"line\">drop table aa;</div></pre></td></tr></table></figure></p>\n<h4 id=\"truncate-关键字\"><a href=\"#truncate-关键字\" class=\"headerlink\" title=\"truncate 关键字\"></a>truncate 关键字</h4><p>truncate与delete相似，都是删除表(视图…)数据</p>\n<ul>\n<li>delete可以删除单条语句，truncate只能删除全部数据</li>\n<li>delete可以回滚，而truncate不可以</li>\n<li>delete效率低，而truncate效率高<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># truncate table table_name</div><div class=\"line\">truncate table aa</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"comment-关键字\"><a href=\"#comment-关键字\" class=\"headerlink\" title=\"comment 关键字\"></a>comment 关键字</h4><p>为表/字段(或者视图…)添加注释<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">#添加注释</div><div class=\"line\">#comment on table table_name is '内容';</div><div class=\"line\">comment on table aa is 'aa table';</div><div class=\"line\">comment on column aa.name is '姓名';</div><div class=\"line\">#删除注释  --将注释改为空</div><div class=\"line\">comment on column aa.name is ‘’；</div></pre></td></tr></table></figure></p>"},{"title":"Oracle 基本DML语句","date":"2016-08-24T13:56:08.000Z","_content":"### 什么是DML语句\nDML(Data Manipulation Language)数据操纵语言,用户或程序员实现对数据库数据的操作\n\n这里为了方便测试，我们先建一个简单的表student\n``` sql\n\tcreate table student (\n\t\tsid number(4),\n\t\tssex char(2),\n\t\tsname varchar2(20),\n\t\tsbirthday date\n\t);\n```\n\n<!-- more -->\n\n### select 关键字\n``` sql \n\tselect column_name from table_name;\n\tselect sid,sname from student;\n```\n\n### insert 关键字\n``` sql\n\t# insert into table_name(column_name...) values(column_value);\n\t# column可以写任意个数，也可以不写(不写默认全部添加),但必须一一对应\n\tinsert into student(sid,ssex,sname,sbirthday) values(1001,'男','jack','11-3月-1995');\n```\n\n> 时间必须以11-3月-1995这种格式录入，当然也可以用to_date(),后面再说\n\n当我们用前面创建的用户sakuraffy插入数据的时候，会出现ORA-01950: 对表空间 'USERS' 无权限，这又是怎么回事呢？\n\n这是因为我们没有使用表空间的权限，关于表空间，请参考[Oracle 表空间](https://sakuraffy.github.io/oracle_tablespace)\n``` sql\n\t# 这里提供两个方案(必须是管理员用户)\n\t# alter user user_name quota unlimited on tablespace_name(建用户时，没有指定，默认为users)\n\talter user sakuraffy quota unlimited on users;\n\t# grant resource to user_name  \n\tgrant resource to sakuraffy\n```\n\n### update 关键字\n``` sql \n\t# update table_name set column_name = newValue [where column_name = oldValue] \n\t# where 限制条件，没有where全部更新\n\tupdate student set sname = 'jackjack' where sid = 101;\n```\n\n### delete 关键字\n``` sql \n\t# delete from table_name [where column_name = oldValue] \n\tdelete from student where sid = 101;\n```\n\n### merge 关键字\nmerge into 解决用B表跟新A表数据，如果A表中没有，则把B表的数据插入A表\n\nDML语句的关键字还有call、explain plan、lock table 这些后面用到了在详细说","source":"_posts/oracle_sql_dml.md","raw":"---\ntitle: Oracle 基本DML语句\ndate: 2016-8-24 21:56:08\ntags:\n\t- Oracle\n---\n### 什么是DML语句\nDML(Data Manipulation Language)数据操纵语言,用户或程序员实现对数据库数据的操作\n\n这里为了方便测试，我们先建一个简单的表student\n``` sql\n\tcreate table student (\n\t\tsid number(4),\n\t\tssex char(2),\n\t\tsname varchar2(20),\n\t\tsbirthday date\n\t);\n```\n\n<!-- more -->\n\n### select 关键字\n``` sql \n\tselect column_name from table_name;\n\tselect sid,sname from student;\n```\n\n### insert 关键字\n``` sql\n\t# insert into table_name(column_name...) values(column_value);\n\t# column可以写任意个数，也可以不写(不写默认全部添加),但必须一一对应\n\tinsert into student(sid,ssex,sname,sbirthday) values(1001,'男','jack','11-3月-1995');\n```\n\n> 时间必须以11-3月-1995这种格式录入，当然也可以用to_date(),后面再说\n\n当我们用前面创建的用户sakuraffy插入数据的时候，会出现ORA-01950: 对表空间 'USERS' 无权限，这又是怎么回事呢？\n\n这是因为我们没有使用表空间的权限，关于表空间，请参考[Oracle 表空间](https://sakuraffy.github.io/oracle_tablespace)\n``` sql\n\t# 这里提供两个方案(必须是管理员用户)\n\t# alter user user_name quota unlimited on tablespace_name(建用户时，没有指定，默认为users)\n\talter user sakuraffy quota unlimited on users;\n\t# grant resource to user_name  \n\tgrant resource to sakuraffy\n```\n\n### update 关键字\n``` sql \n\t# update table_name set column_name = newValue [where column_name = oldValue] \n\t# where 限制条件，没有where全部更新\n\tupdate student set sname = 'jackjack' where sid = 101;\n```\n\n### delete 关键字\n``` sql \n\t# delete from table_name [where column_name = oldValue] \n\tdelete from student where sid = 101;\n```\n\n### merge 关键字\nmerge into 解决用B表跟新A表数据，如果A表中没有，则把B表的数据插入A表\n\nDML语句的关键字还有call、explain plan、lock table 这些后面用到了在详细说","slug":"oracle_sql_dml","published":1,"updated":"2017-03-08T11:16:38.868Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5eu003mqoq12kyi43vm","content":"<h3 id=\"什么是DML语句\"><a href=\"#什么是DML语句\" class=\"headerlink\" title=\"什么是DML语句\"></a>什么是DML语句</h3><p>DML(Data Manipulation Language)数据操纵语言,用户或程序员实现对数据库数据的操作</p>\n<p>这里为了方便测试，我们先建一个简单的表student<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> student (</div><div class=\"line\">\t<span class=\"keyword\">sid</span> <span class=\"built_in\">number</span>(<span class=\"number\">4</span>),</div><div class=\"line\">\tssex <span class=\"built_in\">char</span>(<span class=\"number\">2</span>),</div><div class=\"line\">\tsname varchar2(<span class=\"number\">20</span>),</div><div class=\"line\">\tsbirthday <span class=\"built_in\">date</span></div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h3 id=\"select-关键字\"><a href=\"#select-关键字\" class=\"headerlink\" title=\"select 关键字\"></a>select 关键字</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> column_name <span class=\"keyword\">from</span> table_name;</div><div class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">sid</span>,sname <span class=\"keyword\">from</span> student;</div></pre></td></tr></table></figure>\n<h3 id=\"insert-关键字\"><a href=\"#insert-关键字\" class=\"headerlink\" title=\"insert 关键字\"></a>insert 关键字</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"># insert into table_name(column_name...) values(column_value);</div><div class=\"line\"># column可以写任意个数，也可以不写(不写默认全部添加),但必须一一对应</div><div class=\"line\">insert into student(sid,ssex,sname,sbirthday) values(1001,'男','jack','11-3月-1995');</div></pre></td></tr></table></figure>\n<blockquote>\n<p>时间必须以11-3月-1995这种格式录入，当然也可以用to_date(),后面再说</p>\n</blockquote>\n<p>当我们用前面创建的用户sakuraffy插入数据的时候，会出现ORA-01950: 对表空间 ‘USERS’ 无权限，这又是怎么回事呢？</p>\n<p>这是因为我们没有使用表空间的权限，关于表空间，请参考<a href=\"https://sakuraffy.github.io/oracle_tablespace\">Oracle 表空间</a><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 这里提供两个方案(必须是管理员用户)</div><div class=\"line\"># alter user user_name quota unlimited on tablespace_name(建用户时，没有指定，默认为users)</div><div class=\"line\">alter user sakuraffy quota unlimited on users;</div><div class=\"line\"># grant resource to user_name  </div><div class=\"line\">grant resource to sakuraffy</div></pre></td></tr></table></figure></p>\n<h3 id=\"update-关键字\"><a href=\"#update-关键字\" class=\"headerlink\" title=\"update 关键字\"></a>update 关键字</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"># update table_name set column_name = newValue [where column_name = oldValue] </div><div class=\"line\"># where 限制条件，没有where全部更新</div><div class=\"line\">update student set sname = 'jackjack' where sid = 101;</div></pre></td></tr></table></figure>\n<h3 id=\"delete-关键字\"><a href=\"#delete-关键字\" class=\"headerlink\" title=\"delete 关键字\"></a>delete 关键字</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># delete from table_name [where column_name = oldValue] </div><div class=\"line\">delete from student where sid = 101;</div></pre></td></tr></table></figure>\n<h3 id=\"merge-关键字\"><a href=\"#merge-关键字\" class=\"headerlink\" title=\"merge 关键字\"></a>merge 关键字</h3><p>merge into 解决用B表跟新A表数据，如果A表中没有，则把B表的数据插入A表</p>\n<p>DML语句的关键字还有call、explain plan、lock table 这些后面用到了在详细说</p>\n","excerpt":"<h3 id=\"什么是DML语句\"><a href=\"#什么是DML语句\" class=\"headerlink\" title=\"什么是DML语句\"></a>什么是DML语句</h3><p>DML(Data Manipulation Language)数据操纵语言,用户或程序员实现对数据库数据的操作</p>\n<p>这里为了方便测试，我们先建一个简单的表student<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> student (</div><div class=\"line\">\t<span class=\"keyword\">sid</span> <span class=\"built_in\">number</span>(<span class=\"number\">4</span>),</div><div class=\"line\">\tssex <span class=\"built_in\">char</span>(<span class=\"number\">2</span>),</div><div class=\"line\">\tsname varchar2(<span class=\"number\">20</span>),</div><div class=\"line\">\tsbirthday <span class=\"built_in\">date</span></div><div class=\"line\">);</div></pre></td></tr></table></figure></p>","more":"<h3 id=\"select-关键字\"><a href=\"#select-关键字\" class=\"headerlink\" title=\"select 关键字\"></a>select 关键字</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> column_name <span class=\"keyword\">from</span> table_name;</div><div class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">sid</span>,sname <span class=\"keyword\">from</span> student;</div></pre></td></tr></table></figure>\n<h3 id=\"insert-关键字\"><a href=\"#insert-关键字\" class=\"headerlink\" title=\"insert 关键字\"></a>insert 关键字</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"># insert into table_name(column_name...) values(column_value);</div><div class=\"line\"># column可以写任意个数，也可以不写(不写默认全部添加),但必须一一对应</div><div class=\"line\">insert into student(sid,ssex,sname,sbirthday) values(1001,'男','jack','11-3月-1995');</div></pre></td></tr></table></figure>\n<blockquote>\n<p>时间必须以11-3月-1995这种格式录入，当然也可以用to_date(),后面再说</p>\n</blockquote>\n<p>当我们用前面创建的用户sakuraffy插入数据的时候，会出现ORA-01950: 对表空间 ‘USERS’ 无权限，这又是怎么回事呢？</p>\n<p>这是因为我们没有使用表空间的权限，关于表空间，请参考<a href=\"https://sakuraffy.github.io/oracle_tablespace\">Oracle 表空间</a><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 这里提供两个方案(必须是管理员用户)</div><div class=\"line\"># alter user user_name quota unlimited on tablespace_name(建用户时，没有指定，默认为users)</div><div class=\"line\">alter user sakuraffy quota unlimited on users;</div><div class=\"line\"># grant resource to user_name  </div><div class=\"line\">grant resource to sakuraffy</div></pre></td></tr></table></figure></p>\n<h3 id=\"update-关键字\"><a href=\"#update-关键字\" class=\"headerlink\" title=\"update 关键字\"></a>update 关键字</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"># update table_name set column_name = newValue [where column_name = oldValue] </div><div class=\"line\"># where 限制条件，没有where全部更新</div><div class=\"line\">update student set sname = 'jackjack' where sid = 101;</div></pre></td></tr></table></figure>\n<h3 id=\"delete-关键字\"><a href=\"#delete-关键字\" class=\"headerlink\" title=\"delete 关键字\"></a>delete 关键字</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># delete from table_name [where column_name = oldValue] </div><div class=\"line\">delete from student where sid = 101;</div></pre></td></tr></table></figure>\n<h3 id=\"merge-关键字\"><a href=\"#merge-关键字\" class=\"headerlink\" title=\"merge 关键字\"></a>merge 关键字</h3><p>merge into 解决用B表跟新A表数据，如果A表中没有，则把B表的数据插入A表</p>\n<p>DML语句的关键字还有call、explain plan、lock table 这些后面用到了在详细说</p>"},{"title":"Oracle 常用函数与子查询","date":"2016-08-27T09:39:05.000Z","_content":"### 常用限定词\n``` sql\n\tselect * from student;\n```\n像上面的查询，我们会查询到所有的列，但是有时候需要对其做一些限定，这时候就需要where限定词 <!-- more -->\n#### 通配符(like)\n- % : 任意个数字符\n- _ : 1个字符\n\n#### 集合限定\n- in : 在集合内\n- any : > any() <==> 大于集合中最小的\n- all : > all() <==> 大于集合中最大的\n\n#### between and\n``` sql\n\t#btween and 是双闭区间\n\tselect ename , sal from emp where sal between 800 and 1600;\n```\n查询结果 ：\n{% qnimg oracle/sql/method-select_child/p3.png 'class:class1 class2' normal:yes %}\n\n### 常用函数\n为了方便，所有的查询都已scott用户以及该用户下的表\n\n#### 字符类函数\n- upper(char) : 将字符转为大写\n- lower(char) : 将字符转为小写\n- length(char) : 字符长度\n- substr(char,m,n) : 字符截取,从第m位向后截取n位\n- replace(char,oldChar,newChar) : 字符替换,用newChar替换oldChar\n- to_char(char,'yy') : 将字符以什么的形式展现\n\n``` sql\n\t# 展现所有员工的姓名，薪水，并且姓名首字母大写，其它小写\n\t# 薪水以99，999.99的形式展现\n\tselect upper(substr(ename,1,1)) || lower(substr(ename,2,length(ename)-1)) ename,\n\t\tto_char(sal,'99,999.99') sal from emp;\n```\n查询结果 ：\n{% qnimg oracle/sql/method-select_child/p1.png 'class:class1 class2' normal:yes %}\n\n#### 时间类函数\n- to_date(date,'') :  将date数据以特定字符格式展现\n- sysdate() ： 系统时间\n- year(date) 获取年份\n- add_months(date, n) :  以该日期为几点，向后加n个月\n- last_day(date, n) : 月份的最后几天\n\n#### 数字类函数\n- count(number) : 总数(分组函数) \n- max(number) ： 最大值(分组函数) \n- min(number) ： 最小值(分组函数) \n- avg(number) ： 平均值\n- round(number) ： 四舍五入\n- floor(number) ： 向下取整\n- ceil(number) ： 向上取整\n- mod(number,n) ： 字段对n取模\n{% qnimg oracle/sql/method-select_child/p2.png 'class:class1 class2' normal:yes %}\n\n> dual 是用来测试的虚拟表\n\n#### sys_context\n- language : 数据库语言\n- db_name : 数据库名称\n- session_user : 当前用户\n- nls_date_format : 时间格式\n``` sql\n\tselect sys_context('userevn','language') from dual;\n```\n\n#### group by\n分组，查询的都是组数据，对于分组数据过滤只能用having，不能用where\n``` sql\n\t# 查询部门编号大于10，所在部门的人数，平均工资\n\tselect count(*) ,avg(sal) avg_sal from emp group by deptno having deptno > 10;\n```\n{% qnimg oracle/sql/method-select_child/p4.png 'class:class1 class2' normal:yes %}\n\n#### order by\n``` sql\n\tselect empno,ename,sal from emp order by sal desc;\n```\n{% qnimg oracle/sql/method-select_child/p5.png 'class:class1 class2' normal:yes %}\n\n### 子查询\n#### 什么是子查询\n子查询就是将查询运算后的表再作为一个表供我们查询\n\n#### 单行子查询\n``` sql \n\t# 查询薪水最高员工的姓名和薪水\n\t# select ename,sal from emp where sal = (select max(sal) from emp);\n```\n{% qnimg oracle/sql/method-select_child/p6.png 'class:class1 class2' normal:yes %}\n\n#### 多行子查询\n``` sql \n\t# 查询与scott同部门员工的姓名，薪水，部门号\n\tselect ename,sal,deptno from emp where deptno = (select deptno from emp where ename = 'SCOTT');\n```\n{% qnimg oracle/sql/method-select_child/p7.png 'class:class1 class2' normal:yes %}\n\n#### 利用子查询修改数据\n``` sql\n\t# 利用子查询修改数据（将7499的薪水和职位改为7369的）\n\tupdate emp set (sal,job) = (select sal,job from emp where empno = 7499) where empno = 7369;\n```\n\n#### 分页查询\n``` sql\n\t# 使用rownum (查出1-9条记录)\n\tselect * from \n\t\t(select rownum r, t.* from \n\t\t\t(select empno,job,sal from emp) t \n\t\twhere rownum < 10) \n\twhere r > 0;\n```\n分页查询的关键在于子查询与二分法","source":"_posts/oracle_sql_method-select_child.md","raw":"---\ntitle: Oracle 常用函数与子查询\ndate: 2016-08-27 17:39:05\ntags:\n\t- Oracle\n---\n### 常用限定词\n``` sql\n\tselect * from student;\n```\n像上面的查询，我们会查询到所有的列，但是有时候需要对其做一些限定，这时候就需要where限定词 <!-- more -->\n#### 通配符(like)\n- % : 任意个数字符\n- _ : 1个字符\n\n#### 集合限定\n- in : 在集合内\n- any : > any() <==> 大于集合中最小的\n- all : > all() <==> 大于集合中最大的\n\n#### between and\n``` sql\n\t#btween and 是双闭区间\n\tselect ename , sal from emp where sal between 800 and 1600;\n```\n查询结果 ：\n{% qnimg oracle/sql/method-select_child/p3.png 'class:class1 class2' normal:yes %}\n\n### 常用函数\n为了方便，所有的查询都已scott用户以及该用户下的表\n\n#### 字符类函数\n- upper(char) : 将字符转为大写\n- lower(char) : 将字符转为小写\n- length(char) : 字符长度\n- substr(char,m,n) : 字符截取,从第m位向后截取n位\n- replace(char,oldChar,newChar) : 字符替换,用newChar替换oldChar\n- to_char(char,'yy') : 将字符以什么的形式展现\n\n``` sql\n\t# 展现所有员工的姓名，薪水，并且姓名首字母大写，其它小写\n\t# 薪水以99，999.99的形式展现\n\tselect upper(substr(ename,1,1)) || lower(substr(ename,2,length(ename)-1)) ename,\n\t\tto_char(sal,'99,999.99') sal from emp;\n```\n查询结果 ：\n{% qnimg oracle/sql/method-select_child/p1.png 'class:class1 class2' normal:yes %}\n\n#### 时间类函数\n- to_date(date,'') :  将date数据以特定字符格式展现\n- sysdate() ： 系统时间\n- year(date) 获取年份\n- add_months(date, n) :  以该日期为几点，向后加n个月\n- last_day(date, n) : 月份的最后几天\n\n#### 数字类函数\n- count(number) : 总数(分组函数) \n- max(number) ： 最大值(分组函数) \n- min(number) ： 最小值(分组函数) \n- avg(number) ： 平均值\n- round(number) ： 四舍五入\n- floor(number) ： 向下取整\n- ceil(number) ： 向上取整\n- mod(number,n) ： 字段对n取模\n{% qnimg oracle/sql/method-select_child/p2.png 'class:class1 class2' normal:yes %}\n\n> dual 是用来测试的虚拟表\n\n#### sys_context\n- language : 数据库语言\n- db_name : 数据库名称\n- session_user : 当前用户\n- nls_date_format : 时间格式\n``` sql\n\tselect sys_context('userevn','language') from dual;\n```\n\n#### group by\n分组，查询的都是组数据，对于分组数据过滤只能用having，不能用where\n``` sql\n\t# 查询部门编号大于10，所在部门的人数，平均工资\n\tselect count(*) ,avg(sal) avg_sal from emp group by deptno having deptno > 10;\n```\n{% qnimg oracle/sql/method-select_child/p4.png 'class:class1 class2' normal:yes %}\n\n#### order by\n``` sql\n\tselect empno,ename,sal from emp order by sal desc;\n```\n{% qnimg oracle/sql/method-select_child/p5.png 'class:class1 class2' normal:yes %}\n\n### 子查询\n#### 什么是子查询\n子查询就是将查询运算后的表再作为一个表供我们查询\n\n#### 单行子查询\n``` sql \n\t# 查询薪水最高员工的姓名和薪水\n\t# select ename,sal from emp where sal = (select max(sal) from emp);\n```\n{% qnimg oracle/sql/method-select_child/p6.png 'class:class1 class2' normal:yes %}\n\n#### 多行子查询\n``` sql \n\t# 查询与scott同部门员工的姓名，薪水，部门号\n\tselect ename,sal,deptno from emp where deptno = (select deptno from emp where ename = 'SCOTT');\n```\n{% qnimg oracle/sql/method-select_child/p7.png 'class:class1 class2' normal:yes %}\n\n#### 利用子查询修改数据\n``` sql\n\t# 利用子查询修改数据（将7499的薪水和职位改为7369的）\n\tupdate emp set (sal,job) = (select sal,job from emp where empno = 7499) where empno = 7369;\n```\n\n#### 分页查询\n``` sql\n\t# 使用rownum (查出1-9条记录)\n\tselect * from \n\t\t(select rownum r, t.* from \n\t\t\t(select empno,job,sal from emp) t \n\t\twhere rownum < 10) \n\twhere r > 0;\n```\n分页查询的关键在于子查询与二分法","slug":"oracle_sql_method-select_child","published":1,"updated":"2017-03-08T11:23:27.729Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5ex003pqoq1251ao9j8","content":"<h3 id=\"常用限定词\"><a href=\"#常用限定词\" class=\"headerlink\" title=\"常用限定词\"></a>常用限定词</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> student;</div></pre></td></tr></table></figure>\n<p>像上面的查询，我们会查询到所有的列，但是有时候需要对其做一些限定，这时候就需要where限定词 <a id=\"more\"></a></p>\n<h4 id=\"通配符-like\"><a href=\"#通配符-like\" class=\"headerlink\" title=\"通配符(like)\"></a>通配符(like)</h4><ul>\n<li>% : 任意个数字符</li>\n<li>_ : 1个字符</li>\n</ul>\n<h4 id=\"集合限定\"><a href=\"#集合限定\" class=\"headerlink\" title=\"集合限定\"></a>集合限定</h4><ul>\n<li>in : 在集合内</li>\n<li>any : &gt; any() &lt;==&gt; 大于集合中最小的</li>\n<li>all : &gt; all() &lt;==&gt; 大于集合中最大的</li>\n</ul>\n<h4 id=\"between-and\"><a href=\"#between-and\" class=\"headerlink\" title=\"between and\"></a>between and</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#btween and 是双闭区间</div><div class=\"line\">select ename , sal from emp where sal between 800 and 1600;</div></pre></td></tr></table></figure>\n<p>查询结果 ：<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/sql/method-select_child/p3.png\"></p>\n<h3 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h3><p>为了方便，所有的查询都已scott用户以及该用户下的表</p>\n<h4 id=\"字符类函数\"><a href=\"#字符类函数\" class=\"headerlink\" title=\"字符类函数\"></a>字符类函数</h4><ul>\n<li>upper(char) : 将字符转为大写</li>\n<li>lower(char) : 将字符转为小写</li>\n<li>length(char) : 字符长度</li>\n<li>substr(char,m,n) : 字符截取,从第m位向后截取n位</li>\n<li>replace(char,oldChar,newChar) : 字符替换,用newChar替换oldChar</li>\n<li>to_char(char,’yy’) : 将字符以什么的形式展现</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 展现所有员工的姓名，薪水，并且姓名首字母大写，其它小写</div><div class=\"line\"># 薪水以99，999.99的形式展现</div><div class=\"line\">select upper(substr(ename,1,1)) || lower(substr(ename,2,length(ename)-1)) ename,</div><div class=\"line\">\tto_char(sal,'99,999.99') sal from emp;</div></pre></td></tr></table></figure>\n<p>查询结果 ：<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/sql/method-select_child/p1.png\"></p>\n<h4 id=\"时间类函数\"><a href=\"#时间类函数\" class=\"headerlink\" title=\"时间类函数\"></a>时间类函数</h4><ul>\n<li>to_date(date,’’) :  将date数据以特定字符格式展现</li>\n<li>sysdate() ： 系统时间</li>\n<li>year(date) 获取年份</li>\n<li>add_months(date, n) :  以该日期为几点，向后加n个月</li>\n<li>last_day(date, n) : 月份的最后几天</li>\n</ul>\n<h4 id=\"数字类函数\"><a href=\"#数字类函数\" class=\"headerlink\" title=\"数字类函数\"></a>数字类函数</h4><ul>\n<li>count(number) : 总数(分组函数) </li>\n<li>max(number) ： 最大值(分组函数) </li>\n<li>min(number) ： 最小值(分组函数) </li>\n<li>avg(number) ： 平均值</li>\n<li>round(number) ： 四舍五入</li>\n<li>floor(number) ： 向下取整</li>\n<li>ceil(number) ： 向上取整</li>\n<li>mod(number,n) ： 字段对n取模<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/sql/method-select_child/p2.png\">\n</li>\n</ul>\n<blockquote>\n<p>dual 是用来测试的虚拟表</p>\n</blockquote>\n<h4 id=\"sys-context\"><a href=\"#sys-context\" class=\"headerlink\" title=\"sys_context\"></a>sys_context</h4><ul>\n<li>language : 数据库语言</li>\n<li>db_name : 数据库名称</li>\n<li>session_user : 当前用户</li>\n<li>nls_date_format : 时间格式<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> sys_context(<span class=\"string\">'userevn'</span>,<span class=\"string\">'language'</span>) <span class=\"keyword\">from</span> dual;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"group-by\"><a href=\"#group-by\" class=\"headerlink\" title=\"group by\"></a>group by</h4><p>分组，查询的都是组数据，对于分组数据过滤只能用having，不能用where<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 查询部门编号大于10，所在部门的人数，平均工资</div><div class=\"line\">select count(*) ,avg(sal) avg_sal from emp group by deptno having deptno &gt; 10;</div></pre></td></tr></table></figure></p>\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/sql/method-select_child/p4.png\">\n<h4 id=\"order-by\"><a href=\"#order-by\" class=\"headerlink\" title=\"order by\"></a>order by</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> empno,ename,sal <span class=\"keyword\">from</span> emp <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> sal <span class=\"keyword\">desc</span>;</div></pre></td></tr></table></figure>\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/sql/method-select_child/p5.png\">\n<h3 id=\"子查询\"><a href=\"#子查询\" class=\"headerlink\" title=\"子查询\"></a>子查询</h3><h4 id=\"什么是子查询\"><a href=\"#什么是子查询\" class=\"headerlink\" title=\"什么是子查询\"></a>什么是子查询</h4><p>子查询就是将查询运算后的表再作为一个表供我们查询</p>\n<h4 id=\"单行子查询\"><a href=\"#单行子查询\" class=\"headerlink\" title=\"单行子查询\"></a>单行子查询</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 查询薪水最高员工的姓名和薪水</div><div class=\"line\"># select ename,sal from emp where sal = (select max(sal) from emp);</div></pre></td></tr></table></figure>\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/sql/method-select_child/p6.png\">\n<h4 id=\"多行子查询\"><a href=\"#多行子查询\" class=\"headerlink\" title=\"多行子查询\"></a>多行子查询</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 查询与scott同部门员工的姓名，薪水，部门号</div><div class=\"line\">select ename,sal,deptno from emp where deptno = (select deptno from emp where ename = 'SCOTT');</div></pre></td></tr></table></figure>\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/sql/method-select_child/p7.png\">\n<h4 id=\"利用子查询修改数据\"><a href=\"#利用子查询修改数据\" class=\"headerlink\" title=\"利用子查询修改数据\"></a>利用子查询修改数据</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 利用子查询修改数据（将7499的薪水和职位改为7369的）</div><div class=\"line\">update emp set (sal,job) = (select sal,job from emp where empno = 7499) where empno = 7369;</div></pre></td></tr></table></figure>\n<h4 id=\"分页查询\"><a href=\"#分页查询\" class=\"headerlink\" title=\"分页查询\"></a>分页查询</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 使用rownum (查出1-9条记录)</div><div class=\"line\">select * from </div><div class=\"line\">\t(select rownum r, t.* from </div><div class=\"line\">\t\t(select empno,job,sal from emp) t </div><div class=\"line\">\twhere rownum &lt; 10) </div><div class=\"line\">where r &gt; 0;</div></pre></td></tr></table></figure>\n<p>分页查询的关键在于子查询与二分法</p>\n","excerpt":"<h3 id=\"常用限定词\"><a href=\"#常用限定词\" class=\"headerlink\" title=\"常用限定词\"></a>常用限定词</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> student;</div></pre></td></tr></table></figure>\n<p>像上面的查询，我们会查询到所有的列，但是有时候需要对其做一些限定，这时候就需要where限定词","more":"</p>\n<h4 id=\"通配符-like\"><a href=\"#通配符-like\" class=\"headerlink\" title=\"通配符(like)\"></a>通配符(like)</h4><ul>\n<li>% : 任意个数字符</li>\n<li>_ : 1个字符</li>\n</ul>\n<h4 id=\"集合限定\"><a href=\"#集合限定\" class=\"headerlink\" title=\"集合限定\"></a>集合限定</h4><ul>\n<li>in : 在集合内</li>\n<li>any : &gt; any() &lt;==&gt; 大于集合中最小的</li>\n<li>all : &gt; all() &lt;==&gt; 大于集合中最大的</li>\n</ul>\n<h4 id=\"between-and\"><a href=\"#between-and\" class=\"headerlink\" title=\"between and\"></a>between and</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#btween and 是双闭区间</div><div class=\"line\">select ename , sal from emp where sal between 800 and 1600;</div></pre></td></tr></table></figure>\n<p>查询结果 ：<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/sql/method-select_child/p3.png\"></p>\n<h3 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h3><p>为了方便，所有的查询都已scott用户以及该用户下的表</p>\n<h4 id=\"字符类函数\"><a href=\"#字符类函数\" class=\"headerlink\" title=\"字符类函数\"></a>字符类函数</h4><ul>\n<li>upper(char) : 将字符转为大写</li>\n<li>lower(char) : 将字符转为小写</li>\n<li>length(char) : 字符长度</li>\n<li>substr(char,m,n) : 字符截取,从第m位向后截取n位</li>\n<li>replace(char,oldChar,newChar) : 字符替换,用newChar替换oldChar</li>\n<li>to_char(char,’yy’) : 将字符以什么的形式展现</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 展现所有员工的姓名，薪水，并且姓名首字母大写，其它小写</div><div class=\"line\"># 薪水以99，999.99的形式展现</div><div class=\"line\">select upper(substr(ename,1,1)) || lower(substr(ename,2,length(ename)-1)) ename,</div><div class=\"line\">\tto_char(sal,'99,999.99') sal from emp;</div></pre></td></tr></table></figure>\n<p>查询结果 ：<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/sql/method-select_child/p1.png\"></p>\n<h4 id=\"时间类函数\"><a href=\"#时间类函数\" class=\"headerlink\" title=\"时间类函数\"></a>时间类函数</h4><ul>\n<li>to_date(date,’’) :  将date数据以特定字符格式展现</li>\n<li>sysdate() ： 系统时间</li>\n<li>year(date) 获取年份</li>\n<li>add_months(date, n) :  以该日期为几点，向后加n个月</li>\n<li>last_day(date, n) : 月份的最后几天</li>\n</ul>\n<h4 id=\"数字类函数\"><a href=\"#数字类函数\" class=\"headerlink\" title=\"数字类函数\"></a>数字类函数</h4><ul>\n<li>count(number) : 总数(分组函数) </li>\n<li>max(number) ： 最大值(分组函数) </li>\n<li>min(number) ： 最小值(分组函数) </li>\n<li>avg(number) ： 平均值</li>\n<li>round(number) ： 四舍五入</li>\n<li>floor(number) ： 向下取整</li>\n<li>ceil(number) ： 向上取整</li>\n<li>mod(number,n) ： 字段对n取模<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/sql/method-select_child/p2.png\">\n</li>\n</ul>\n<blockquote>\n<p>dual 是用来测试的虚拟表</p>\n</blockquote>\n<h4 id=\"sys-context\"><a href=\"#sys-context\" class=\"headerlink\" title=\"sys_context\"></a>sys_context</h4><ul>\n<li>language : 数据库语言</li>\n<li>db_name : 数据库名称</li>\n<li>session_user : 当前用户</li>\n<li>nls_date_format : 时间格式<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> sys_context(<span class=\"string\">'userevn'</span>,<span class=\"string\">'language'</span>) <span class=\"keyword\">from</span> dual;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"group-by\"><a href=\"#group-by\" class=\"headerlink\" title=\"group by\"></a>group by</h4><p>分组，查询的都是组数据，对于分组数据过滤只能用having，不能用where<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 查询部门编号大于10，所在部门的人数，平均工资</div><div class=\"line\">select count(*) ,avg(sal) avg_sal from emp group by deptno having deptno &gt; 10;</div></pre></td></tr></table></figure></p>\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/sql/method-select_child/p4.png\">\n<h4 id=\"order-by\"><a href=\"#order-by\" class=\"headerlink\" title=\"order by\"></a>order by</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> empno,ename,sal <span class=\"keyword\">from</span> emp <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> sal <span class=\"keyword\">desc</span>;</div></pre></td></tr></table></figure>\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/sql/method-select_child/p5.png\">\n<h3 id=\"子查询\"><a href=\"#子查询\" class=\"headerlink\" title=\"子查询\"></a>子查询</h3><h4 id=\"什么是子查询\"><a href=\"#什么是子查询\" class=\"headerlink\" title=\"什么是子查询\"></a>什么是子查询</h4><p>子查询就是将查询运算后的表再作为一个表供我们查询</p>\n<h4 id=\"单行子查询\"><a href=\"#单行子查询\" class=\"headerlink\" title=\"单行子查询\"></a>单行子查询</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 查询薪水最高员工的姓名和薪水</div><div class=\"line\"># select ename,sal from emp where sal = (select max(sal) from emp);</div></pre></td></tr></table></figure>\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/sql/method-select_child/p6.png\">\n<h4 id=\"多行子查询\"><a href=\"#多行子查询\" class=\"headerlink\" title=\"多行子查询\"></a>多行子查询</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 查询与scott同部门员工的姓名，薪水，部门号</div><div class=\"line\">select ename,sal,deptno from emp where deptno = (select deptno from emp where ename = 'SCOTT');</div></pre></td></tr></table></figure>\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/sql/method-select_child/p7.png\">\n<h4 id=\"利用子查询修改数据\"><a href=\"#利用子查询修改数据\" class=\"headerlink\" title=\"利用子查询修改数据\"></a>利用子查询修改数据</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 利用子查询修改数据（将7499的薪水和职位改为7369的）</div><div class=\"line\">update emp set (sal,job) = (select sal,job from emp where empno = 7499) where empno = 7369;</div></pre></td></tr></table></figure>\n<h4 id=\"分页查询\"><a href=\"#分页查询\" class=\"headerlink\" title=\"分页查询\"></a>分页查询</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 使用rownum (查出1-9条记录)</div><div class=\"line\">select * from </div><div class=\"line\">\t(select rownum r, t.* from </div><div class=\"line\">\t\t(select empno,job,sal from emp) t </div><div class=\"line\">\twhere rownum &lt; 10) </div><div class=\"line\">where r &gt; 0;</div></pre></td></tr></table></figure>\n<p>分页查询的关键在于子查询与二分法</p>"},{"title":"Oracle 复杂查询SQL拼接","date":"2016-08-28T12:00:57.000Z","_content":"在日常开发中，我们往往需要连接几个表进行复杂查询，那么SQL语句的编写就显得尤为重要，但我们也知道，一个复杂的语句往往并不能信手拈来，尤其对于新手来说。那么形成一个好的清晰的思路能是我们更快更准确地写出SQL语句。下面就以一个具体的实例来整理一下我的思路\n\n<!-- more -->\n\n> 列出薪金比“SMITH”或“ALLEN”多的所有员工编号，姓名，部门名称，其领导姓名，部门人数，平均工资，最高及最低工资\n\n### SQL拼接准备\n\n#### 确定要使用的数据表\n- emp ：员工编号，姓名\n- dept ：部门名称\n- emp ：领导名称\n- emp : 统计信息\n\n#### 确定以知的关联字段\n员工表与部门表 ： emp.deptno = dept.deptno\n雇员与领导 ： emp.mgr = emp.empno\n\n### SQL拼接\n\n#### 1. 查出“SMITH”或\"ALLEN\"的薪金\n``` sql \n\tSELECT sal \n\tFROM emp \n\tWHERE ename IN ('SMITH','ALLEN'); \n```\n{% qnimg oracle/sql/select_complex/p1.png 'class:class1 class2' normal:yes %}\n\n#### 2. 找出比\"SMITH\"或\"ALLEN\"薪金多的人，但要刨除他们两个\n上面的结果为多行单列，使用>any完成\n``` sql \n\tSELECT e.empno,e.ename\n\tFROM emp e\n\tWHERE e.sal > ANY(SELECT SAL \n\t\t\tFROM EMP \n\t\t\tWHERE ENAME IN ('SMITH','ALLEN'))\n\t\tAND e.ename NOT IN ('SMITH','ALLEN');\n```\n{% qnimg oracle/sql/select_complex/p2.png 'class:class1 class2' normal:yes %}\n\n#### 3. 查询部门名称\n``` sql \n\tSELECT e.empno,e.ename,d.dname\n\tFROM emp e,dept d\n\tWHERE e.sal > ANY(SELECT SAL \n\t\t\tFROM EMP \n\t\t\tWHERE ENAME IN ('SMITH','ALLEN'))\n\t\tAND e.ename NOT IN ('SMITH','ALLEN')\n\t\tAND e.deptno = d.deptno;\n```\n{% qnimg oracle/sql/select_complex/p3.png 'class:class1 class2' normal:yes %}\n\n#### 4. 查询领导名称\n``` sql \n\tSELECT e.empno,e.ename,d.dname,m.ename mgr\n\tFROM emp e,dept d，emp m\n\tWHERE e.sal > ANY(SELECT SAL \n\t\t\tFROM EMP \n\t\t\tWHERE ENAME IN ('SMITH','ALLEN'))\n\t\tAND e.ename NOT IN ('SMITH','ALLEN')\n\t\tAND e.deptno = d.deptno\n\t\tAND e.mgr = m.empno(+);\n```\n{% qnimg oracle/sql/select_complex/p4.png 'class:class1 class2' normal:yes %}\n\n#### 5. 查询分组信息\n查询分组信息一般要用到GROUP BY，但是由于员工信息之类的信息不能添加在最后进行分组，这里只能使用子查询\n``` sql \n\tSELECT e.empno,e.ename,d.dname,m.ename mgr,temp.count,temp.avg_sal,temp.max_sal,temp.min_sal\n\tFROM emp e,dept d，emp m, (\n\t\tSELECT deptno,COUNT(empno) count, AVG(sal) avg_sal, MAX(sal) max_sal,MIN(sal) min_sal\n\t\tFROM emp \n\t\tGROUP BY deptno) temp\n\tWHERE e.sal > ANY(SELECT SAL \n\t\t\tFROM EMP \n\t\t\tWHERE ENAME IN ('SMITH','ALLEN'))\n\t\tAND e.ename NOT IN ('SMITH','ALLEN')\n\t\tAND e.deptno = d.deptno\n\t\tAND e.mgr = m.empno(+)\n\t\tAND d.deptno = temp.deptno;\n```\n{% qnimg oracle/sql/select_complex/p5.png 'class:class1 class2' normal:yes %}","source":"_posts/oracle_sql_select_complex.md","raw":"---\ntitle: Oracle 复杂查询SQL拼接\ndate: 2016-08-28 20:00:57\ntags:\n\t- Oracle\n---\n在日常开发中，我们往往需要连接几个表进行复杂查询，那么SQL语句的编写就显得尤为重要，但我们也知道，一个复杂的语句往往并不能信手拈来，尤其对于新手来说。那么形成一个好的清晰的思路能是我们更快更准确地写出SQL语句。下面就以一个具体的实例来整理一下我的思路\n\n<!-- more -->\n\n> 列出薪金比“SMITH”或“ALLEN”多的所有员工编号，姓名，部门名称，其领导姓名，部门人数，平均工资，最高及最低工资\n\n### SQL拼接准备\n\n#### 确定要使用的数据表\n- emp ：员工编号，姓名\n- dept ：部门名称\n- emp ：领导名称\n- emp : 统计信息\n\n#### 确定以知的关联字段\n员工表与部门表 ： emp.deptno = dept.deptno\n雇员与领导 ： emp.mgr = emp.empno\n\n### SQL拼接\n\n#### 1. 查出“SMITH”或\"ALLEN\"的薪金\n``` sql \n\tSELECT sal \n\tFROM emp \n\tWHERE ename IN ('SMITH','ALLEN'); \n```\n{% qnimg oracle/sql/select_complex/p1.png 'class:class1 class2' normal:yes %}\n\n#### 2. 找出比\"SMITH\"或\"ALLEN\"薪金多的人，但要刨除他们两个\n上面的结果为多行单列，使用>any完成\n``` sql \n\tSELECT e.empno,e.ename\n\tFROM emp e\n\tWHERE e.sal > ANY(SELECT SAL \n\t\t\tFROM EMP \n\t\t\tWHERE ENAME IN ('SMITH','ALLEN'))\n\t\tAND e.ename NOT IN ('SMITH','ALLEN');\n```\n{% qnimg oracle/sql/select_complex/p2.png 'class:class1 class2' normal:yes %}\n\n#### 3. 查询部门名称\n``` sql \n\tSELECT e.empno,e.ename,d.dname\n\tFROM emp e,dept d\n\tWHERE e.sal > ANY(SELECT SAL \n\t\t\tFROM EMP \n\t\t\tWHERE ENAME IN ('SMITH','ALLEN'))\n\t\tAND e.ename NOT IN ('SMITH','ALLEN')\n\t\tAND e.deptno = d.deptno;\n```\n{% qnimg oracle/sql/select_complex/p3.png 'class:class1 class2' normal:yes %}\n\n#### 4. 查询领导名称\n``` sql \n\tSELECT e.empno,e.ename,d.dname,m.ename mgr\n\tFROM emp e,dept d，emp m\n\tWHERE e.sal > ANY(SELECT SAL \n\t\t\tFROM EMP \n\t\t\tWHERE ENAME IN ('SMITH','ALLEN'))\n\t\tAND e.ename NOT IN ('SMITH','ALLEN')\n\t\tAND e.deptno = d.deptno\n\t\tAND e.mgr = m.empno(+);\n```\n{% qnimg oracle/sql/select_complex/p4.png 'class:class1 class2' normal:yes %}\n\n#### 5. 查询分组信息\n查询分组信息一般要用到GROUP BY，但是由于员工信息之类的信息不能添加在最后进行分组，这里只能使用子查询\n``` sql \n\tSELECT e.empno,e.ename,d.dname,m.ename mgr,temp.count,temp.avg_sal,temp.max_sal,temp.min_sal\n\tFROM emp e,dept d，emp m, (\n\t\tSELECT deptno,COUNT(empno) count, AVG(sal) avg_sal, MAX(sal) max_sal,MIN(sal) min_sal\n\t\tFROM emp \n\t\tGROUP BY deptno) temp\n\tWHERE e.sal > ANY(SELECT SAL \n\t\t\tFROM EMP \n\t\t\tWHERE ENAME IN ('SMITH','ALLEN'))\n\t\tAND e.ename NOT IN ('SMITH','ALLEN')\n\t\tAND e.deptno = d.deptno\n\t\tAND e.mgr = m.empno(+)\n\t\tAND d.deptno = temp.deptno;\n```\n{% qnimg oracle/sql/select_complex/p5.png 'class:class1 class2' normal:yes %}","slug":"oracle_sql_select_complex","published":1,"updated":"2017-03-08T11:23:02.719Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5f0003rqoq14kmcvrxt","content":"<p>在日常开发中，我们往往需要连接几个表进行复杂查询，那么SQL语句的编写就显得尤为重要，但我们也知道，一个复杂的语句往往并不能信手拈来，尤其对于新手来说。那么形成一个好的清晰的思路能是我们更快更准确地写出SQL语句。下面就以一个具体的实例来整理一下我的思路</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>列出薪金比“SMITH”或“ALLEN”多的所有员工编号，姓名，部门名称，其领导姓名，部门人数，平均工资，最高及最低工资</p>\n</blockquote>\n<h3 id=\"SQL拼接准备\"><a href=\"#SQL拼接准备\" class=\"headerlink\" title=\"SQL拼接准备\"></a>SQL拼接准备</h3><h4 id=\"确定要使用的数据表\"><a href=\"#确定要使用的数据表\" class=\"headerlink\" title=\"确定要使用的数据表\"></a>确定要使用的数据表</h4><ul>\n<li>emp ：员工编号，姓名</li>\n<li>dept ：部门名称</li>\n<li>emp ：领导名称</li>\n<li>emp : 统计信息</li>\n</ul>\n<h4 id=\"确定以知的关联字段\"><a href=\"#确定以知的关联字段\" class=\"headerlink\" title=\"确定以知的关联字段\"></a>确定以知的关联字段</h4><p>员工表与部门表 ： emp.deptno = dept.deptno<br>雇员与领导 ： emp.mgr = emp.empno</p>\n<h3 id=\"SQL拼接\"><a href=\"#SQL拼接\" class=\"headerlink\" title=\"SQL拼接\"></a>SQL拼接</h3><h4 id=\"1-查出“SMITH”或”ALLEN”的薪金\"><a href=\"#1-查出“SMITH”或”ALLEN”的薪金\" class=\"headerlink\" title=\"1. 查出“SMITH”或”ALLEN”的薪金\"></a>1. 查出“SMITH”或”ALLEN”的薪金</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> sal </div><div class=\"line\"><span class=\"keyword\">FROM</span> emp </div><div class=\"line\"><span class=\"keyword\">WHERE</span> ename <span class=\"keyword\">IN</span> (<span class=\"string\">'SMITH'</span>,<span class=\"string\">'ALLEN'</span>);</div></pre></td></tr></table></figure>\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/sql/select_complex/p1.png\">\n<h4 id=\"2-找出比”SMITH”或”ALLEN”薪金多的人，但要刨除他们两个\"><a href=\"#2-找出比”SMITH”或”ALLEN”薪金多的人，但要刨除他们两个\" class=\"headerlink\" title=\"2. 找出比”SMITH”或”ALLEN”薪金多的人，但要刨除他们两个\"></a>2. 找出比”SMITH”或”ALLEN”薪金多的人，但要刨除他们两个</h4><p>上面的结果为多行单列，使用&gt;any完成<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> e.empno,e.ename</div><div class=\"line\"><span class=\"keyword\">FROM</span> emp e</div><div class=\"line\"><span class=\"keyword\">WHERE</span> e.sal &gt; <span class=\"keyword\">ANY</span>(<span class=\"keyword\">SELECT</span> SAL </div><div class=\"line\">\t\t<span class=\"keyword\">FROM</span> EMP </div><div class=\"line\">\t\t<span class=\"keyword\">WHERE</span> ENAME <span class=\"keyword\">IN</span> (<span class=\"string\">'SMITH'</span>,<span class=\"string\">'ALLEN'</span>))</div><div class=\"line\">\t<span class=\"keyword\">AND</span> e.ename <span class=\"keyword\">NOT</span> <span class=\"keyword\">IN</span> (<span class=\"string\">'SMITH'</span>,<span class=\"string\">'ALLEN'</span>);</div></pre></td></tr></table></figure></p>\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/sql/select_complex/p2.png\">\n<h4 id=\"3-查询部门名称\"><a href=\"#3-查询部门名称\" class=\"headerlink\" title=\"3. 查询部门名称\"></a>3. 查询部门名称</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> e.empno,e.ename,d.dname</div><div class=\"line\"><span class=\"keyword\">FROM</span> emp e,dept d</div><div class=\"line\"><span class=\"keyword\">WHERE</span> e.sal &gt; <span class=\"keyword\">ANY</span>(<span class=\"keyword\">SELECT</span> SAL </div><div class=\"line\">\t\t<span class=\"keyword\">FROM</span> EMP </div><div class=\"line\">\t\t<span class=\"keyword\">WHERE</span> ENAME <span class=\"keyword\">IN</span> (<span class=\"string\">'SMITH'</span>,<span class=\"string\">'ALLEN'</span>))</div><div class=\"line\">\t<span class=\"keyword\">AND</span> e.ename <span class=\"keyword\">NOT</span> <span class=\"keyword\">IN</span> (<span class=\"string\">'SMITH'</span>,<span class=\"string\">'ALLEN'</span>)</div><div class=\"line\">\t<span class=\"keyword\">AND</span> e.deptno = d.deptno;</div></pre></td></tr></table></figure>\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/sql/select_complex/p3.png\">\n<h4 id=\"4-查询领导名称\"><a href=\"#4-查询领导名称\" class=\"headerlink\" title=\"4. 查询领导名称\"></a>4. 查询领导名称</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> e.empno,e.ename,d.dname,m.ename mgr</div><div class=\"line\"><span class=\"keyword\">FROM</span> emp e,dept d，emp m</div><div class=\"line\"><span class=\"keyword\">WHERE</span> e.sal &gt; <span class=\"keyword\">ANY</span>(<span class=\"keyword\">SELECT</span> SAL </div><div class=\"line\">\t\t<span class=\"keyword\">FROM</span> EMP </div><div class=\"line\">\t\t<span class=\"keyword\">WHERE</span> ENAME <span class=\"keyword\">IN</span> (<span class=\"string\">'SMITH'</span>,<span class=\"string\">'ALLEN'</span>))</div><div class=\"line\">\t<span class=\"keyword\">AND</span> e.ename <span class=\"keyword\">NOT</span> <span class=\"keyword\">IN</span> (<span class=\"string\">'SMITH'</span>,<span class=\"string\">'ALLEN'</span>)</div><div class=\"line\">\t<span class=\"keyword\">AND</span> e.deptno = d.deptno</div><div class=\"line\">\t<span class=\"keyword\">AND</span> e.mgr = m.empno(+);</div></pre></td></tr></table></figure>\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/sql/select_complex/p4.png\">\n<h4 id=\"5-查询分组信息\"><a href=\"#5-查询分组信息\" class=\"headerlink\" title=\"5. 查询分组信息\"></a>5. 查询分组信息</h4><p>查询分组信息一般要用到GROUP BY，但是由于员工信息之类的信息不能添加在最后进行分组，这里只能使用子查询<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> e.empno,e.ename,d.dname,m.ename mgr,temp.count,temp.avg_sal,temp.max_sal,temp.min_sal</div><div class=\"line\"><span class=\"keyword\">FROM</span> emp e,dept d，emp m, (</div><div class=\"line\">\t<span class=\"keyword\">SELECT</span> deptno,<span class=\"keyword\">COUNT</span>(empno) <span class=\"keyword\">count</span>, <span class=\"keyword\">AVG</span>(sal) avg_sal, <span class=\"keyword\">MAX</span>(sal) max_sal,<span class=\"keyword\">MIN</span>(sal) min_sal</div><div class=\"line\">\t<span class=\"keyword\">FROM</span> emp </div><div class=\"line\">\t<span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> deptno) temp</div><div class=\"line\"><span class=\"keyword\">WHERE</span> e.sal &gt; <span class=\"keyword\">ANY</span>(<span class=\"keyword\">SELECT</span> SAL </div><div class=\"line\">\t\t<span class=\"keyword\">FROM</span> EMP </div><div class=\"line\">\t\t<span class=\"keyword\">WHERE</span> ENAME <span class=\"keyword\">IN</span> (<span class=\"string\">'SMITH'</span>,<span class=\"string\">'ALLEN'</span>))</div><div class=\"line\">\t<span class=\"keyword\">AND</span> e.ename <span class=\"keyword\">NOT</span> <span class=\"keyword\">IN</span> (<span class=\"string\">'SMITH'</span>,<span class=\"string\">'ALLEN'</span>)</div><div class=\"line\">\t<span class=\"keyword\">AND</span> e.deptno = d.deptno</div><div class=\"line\">\t<span class=\"keyword\">AND</span> e.mgr = m.empno(+)</div><div class=\"line\">\t<span class=\"keyword\">AND</span> d.deptno = temp.deptno;</div></pre></td></tr></table></figure></p>\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/sql/select_complex/p5.png\">","excerpt":"<p>在日常开发中，我们往往需要连接几个表进行复杂查询，那么SQL语句的编写就显得尤为重要，但我们也知道，一个复杂的语句往往并不能信手拈来，尤其对于新手来说。那么形成一个好的清晰的思路能是我们更快更准确地写出SQL语句。下面就以一个具体的实例来整理一下我的思路</p>","more":"<blockquote>\n<p>列出薪金比“SMITH”或“ALLEN”多的所有员工编号，姓名，部门名称，其领导姓名，部门人数，平均工资，最高及最低工资</p>\n</blockquote>\n<h3 id=\"SQL拼接准备\"><a href=\"#SQL拼接准备\" class=\"headerlink\" title=\"SQL拼接准备\"></a>SQL拼接准备</h3><h4 id=\"确定要使用的数据表\"><a href=\"#确定要使用的数据表\" class=\"headerlink\" title=\"确定要使用的数据表\"></a>确定要使用的数据表</h4><ul>\n<li>emp ：员工编号，姓名</li>\n<li>dept ：部门名称</li>\n<li>emp ：领导名称</li>\n<li>emp : 统计信息</li>\n</ul>\n<h4 id=\"确定以知的关联字段\"><a href=\"#确定以知的关联字段\" class=\"headerlink\" title=\"确定以知的关联字段\"></a>确定以知的关联字段</h4><p>员工表与部门表 ： emp.deptno = dept.deptno<br>雇员与领导 ： emp.mgr = emp.empno</p>\n<h3 id=\"SQL拼接\"><a href=\"#SQL拼接\" class=\"headerlink\" title=\"SQL拼接\"></a>SQL拼接</h3><h4 id=\"1-查出“SMITH”或”ALLEN”的薪金\"><a href=\"#1-查出“SMITH”或”ALLEN”的薪金\" class=\"headerlink\" title=\"1. 查出“SMITH”或”ALLEN”的薪金\"></a>1. 查出“SMITH”或”ALLEN”的薪金</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> sal </div><div class=\"line\"><span class=\"keyword\">FROM</span> emp </div><div class=\"line\"><span class=\"keyword\">WHERE</span> ename <span class=\"keyword\">IN</span> (<span class=\"string\">'SMITH'</span>,<span class=\"string\">'ALLEN'</span>);</div></pre></td></tr></table></figure>\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/sql/select_complex/p1.png\">\n<h4 id=\"2-找出比”SMITH”或”ALLEN”薪金多的人，但要刨除他们两个\"><a href=\"#2-找出比”SMITH”或”ALLEN”薪金多的人，但要刨除他们两个\" class=\"headerlink\" title=\"2. 找出比”SMITH”或”ALLEN”薪金多的人，但要刨除他们两个\"></a>2. 找出比”SMITH”或”ALLEN”薪金多的人，但要刨除他们两个</h4><p>上面的结果为多行单列，使用&gt;any完成<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> e.empno,e.ename</div><div class=\"line\"><span class=\"keyword\">FROM</span> emp e</div><div class=\"line\"><span class=\"keyword\">WHERE</span> e.sal &gt; <span class=\"keyword\">ANY</span>(<span class=\"keyword\">SELECT</span> SAL </div><div class=\"line\">\t\t<span class=\"keyword\">FROM</span> EMP </div><div class=\"line\">\t\t<span class=\"keyword\">WHERE</span> ENAME <span class=\"keyword\">IN</span> (<span class=\"string\">'SMITH'</span>,<span class=\"string\">'ALLEN'</span>))</div><div class=\"line\">\t<span class=\"keyword\">AND</span> e.ename <span class=\"keyword\">NOT</span> <span class=\"keyword\">IN</span> (<span class=\"string\">'SMITH'</span>,<span class=\"string\">'ALLEN'</span>);</div></pre></td></tr></table></figure></p>\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/sql/select_complex/p2.png\">\n<h4 id=\"3-查询部门名称\"><a href=\"#3-查询部门名称\" class=\"headerlink\" title=\"3. 查询部门名称\"></a>3. 查询部门名称</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> e.empno,e.ename,d.dname</div><div class=\"line\"><span class=\"keyword\">FROM</span> emp e,dept d</div><div class=\"line\"><span class=\"keyword\">WHERE</span> e.sal &gt; <span class=\"keyword\">ANY</span>(<span class=\"keyword\">SELECT</span> SAL </div><div class=\"line\">\t\t<span class=\"keyword\">FROM</span> EMP </div><div class=\"line\">\t\t<span class=\"keyword\">WHERE</span> ENAME <span class=\"keyword\">IN</span> (<span class=\"string\">'SMITH'</span>,<span class=\"string\">'ALLEN'</span>))</div><div class=\"line\">\t<span class=\"keyword\">AND</span> e.ename <span class=\"keyword\">NOT</span> <span class=\"keyword\">IN</span> (<span class=\"string\">'SMITH'</span>,<span class=\"string\">'ALLEN'</span>)</div><div class=\"line\">\t<span class=\"keyword\">AND</span> e.deptno = d.deptno;</div></pre></td></tr></table></figure>\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/sql/select_complex/p3.png\">\n<h4 id=\"4-查询领导名称\"><a href=\"#4-查询领导名称\" class=\"headerlink\" title=\"4. 查询领导名称\"></a>4. 查询领导名称</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> e.empno,e.ename,d.dname,m.ename mgr</div><div class=\"line\"><span class=\"keyword\">FROM</span> emp e,dept d，emp m</div><div class=\"line\"><span class=\"keyword\">WHERE</span> e.sal &gt; <span class=\"keyword\">ANY</span>(<span class=\"keyword\">SELECT</span> SAL </div><div class=\"line\">\t\t<span class=\"keyword\">FROM</span> EMP </div><div class=\"line\">\t\t<span class=\"keyword\">WHERE</span> ENAME <span class=\"keyword\">IN</span> (<span class=\"string\">'SMITH'</span>,<span class=\"string\">'ALLEN'</span>))</div><div class=\"line\">\t<span class=\"keyword\">AND</span> e.ename <span class=\"keyword\">NOT</span> <span class=\"keyword\">IN</span> (<span class=\"string\">'SMITH'</span>,<span class=\"string\">'ALLEN'</span>)</div><div class=\"line\">\t<span class=\"keyword\">AND</span> e.deptno = d.deptno</div><div class=\"line\">\t<span class=\"keyword\">AND</span> e.mgr = m.empno(+);</div></pre></td></tr></table></figure>\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/sql/select_complex/p4.png\">\n<h4 id=\"5-查询分组信息\"><a href=\"#5-查询分组信息\" class=\"headerlink\" title=\"5. 查询分组信息\"></a>5. 查询分组信息</h4><p>查询分组信息一般要用到GROUP BY，但是由于员工信息之类的信息不能添加在最后进行分组，这里只能使用子查询<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> e.empno,e.ename,d.dname,m.ename mgr,temp.count,temp.avg_sal,temp.max_sal,temp.min_sal</div><div class=\"line\"><span class=\"keyword\">FROM</span> emp e,dept d，emp m, (</div><div class=\"line\">\t<span class=\"keyword\">SELECT</span> deptno,<span class=\"keyword\">COUNT</span>(empno) <span class=\"keyword\">count</span>, <span class=\"keyword\">AVG</span>(sal) avg_sal, <span class=\"keyword\">MAX</span>(sal) max_sal,<span class=\"keyword\">MIN</span>(sal) min_sal</div><div class=\"line\">\t<span class=\"keyword\">FROM</span> emp </div><div class=\"line\">\t<span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> deptno) temp</div><div class=\"line\"><span class=\"keyword\">WHERE</span> e.sal &gt; <span class=\"keyword\">ANY</span>(<span class=\"keyword\">SELECT</span> SAL </div><div class=\"line\">\t\t<span class=\"keyword\">FROM</span> EMP </div><div class=\"line\">\t\t<span class=\"keyword\">WHERE</span> ENAME <span class=\"keyword\">IN</span> (<span class=\"string\">'SMITH'</span>,<span class=\"string\">'ALLEN'</span>))</div><div class=\"line\">\t<span class=\"keyword\">AND</span> e.ename <span class=\"keyword\">NOT</span> <span class=\"keyword\">IN</span> (<span class=\"string\">'SMITH'</span>,<span class=\"string\">'ALLEN'</span>)</div><div class=\"line\">\t<span class=\"keyword\">AND</span> e.deptno = d.deptno</div><div class=\"line\">\t<span class=\"keyword\">AND</span> e.mgr = m.empno(+)</div><div class=\"line\">\t<span class=\"keyword\">AND</span> d.deptno = temp.deptno;</div></pre></td></tr></table></figure></p>\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/sql/select_complex/p5.png\">"},{"title":"Oracle 表空间(tablespace)","date":"2016-08-14T00:39:55.000Z","_content":"### 什么是表空间\n我们知道数据库真正存放的是数据文件，而数据文件的集合就是表空间，表空间是一个逻辑结构。数据库与表空间是一对多的关系，而表空间与数据文件也是一对多的关系\n <!-- more -->\n{% qnimg oracle/tablespace/p1.png 'class:class1 class2' normal:yes %}\n\n### 表空间的组成\n对于表空间来说，逻辑结构如图\n{% qnimg oracle/tablespace/p2.png 'class:class1 class2' normal:yes %}\n\n#### Segment(段)\n段是指占用数据文件空间的通称，或数据库对象使用的空间的集合；段可以有表段、索引段、回滚段、临时段和高速缓存段...\n\n#### Extent(区间)\n分配给对象（如表）的任何连续块叫区间；区间也叫扩展，因为当它用完已经分配的区间后，再有新的记录插入就必须在分配新的区间（即扩展一些块）；一旦区间分配给某个对象（表、索引及簇），则该区间就不能再分配给其它的对象\n\n### 表空间的分类\n- 永久表空间 ：用来存放永久性数据，如表...\n- 临时表空间 ：用来存放排序，分组时产生的临时数据\n- undo表空间 ：用来保存修改前的镜像\n\n### 表空间的操作\n对表空间的管理分为两种\n- 字典管理 ： 表空间内的区间占用与否都存在字典里，分配或释放表空间时，这个表空间内的数据文件都会被修改\n- 本地管理 ： 表空间分配不放在数据字典，而在每个数据文件头部的第3到第8个块的位图块，来管理空间分配\n\n#### 默认表空间\n当我们创建用户时，不指定表空间，oracle会默认指定users表空间\n\n#### 创建表空间\n``` sql\n\t#create [TEMPORARY] TABLESPACE tablespace_name TEMPFILE|DATAFILE 'fileName.dbf' size xx;  \n\t# 创建临时表空间 --size 为数据文件大小\n\tcreate TEMPORARY TABLESPACE tempts TEMPFILE 'e:\\tempts.dbf' size 20M; \n\t# 创建表空间 数据文件默认为安装路径\n\tcreate TABLESPACE ts DATAFILE 'ts.dbf' size 20M; \n```\n\n#### 修改表空间\n可以修改表空间名称，是否联机，文件大小是否可以扩展...\n``` sql\n\t# offline 不可使用，默认为online\n\talter tablespace ts offline;\n\t# 扩展数据文件大小  --不能扩展表空间大小\n\talter database datafile 'ts1.dbf' autoextend on next 10M maxsize 100M;\n```\n\n> 不能删除表空间第一个数据文件，如果将第一个数据文件删除的话，相当于删除了整个表空间\n\n#### 删除表空间\n``` sql\n\t# drop tablespace tablespace_name [including contents]; --加上including contents则表示连同数据文件都删除\n\t drop tablespace ts1 including contents;\n```","source":"_posts/oracle_tablespace.md","raw":"---\ntitle: Oracle 表空间(tablespace)\ndate: 2016-8-14 08:39:55\ntags:\n\t- Oracle\n---\n### 什么是表空间\n我们知道数据库真正存放的是数据文件，而数据文件的集合就是表空间，表空间是一个逻辑结构。数据库与表空间是一对多的关系，而表空间与数据文件也是一对多的关系\n <!-- more -->\n{% qnimg oracle/tablespace/p1.png 'class:class1 class2' normal:yes %}\n\n### 表空间的组成\n对于表空间来说，逻辑结构如图\n{% qnimg oracle/tablespace/p2.png 'class:class1 class2' normal:yes %}\n\n#### Segment(段)\n段是指占用数据文件空间的通称，或数据库对象使用的空间的集合；段可以有表段、索引段、回滚段、临时段和高速缓存段...\n\n#### Extent(区间)\n分配给对象（如表）的任何连续块叫区间；区间也叫扩展，因为当它用完已经分配的区间后，再有新的记录插入就必须在分配新的区间（即扩展一些块）；一旦区间分配给某个对象（表、索引及簇），则该区间就不能再分配给其它的对象\n\n### 表空间的分类\n- 永久表空间 ：用来存放永久性数据，如表...\n- 临时表空间 ：用来存放排序，分组时产生的临时数据\n- undo表空间 ：用来保存修改前的镜像\n\n### 表空间的操作\n对表空间的管理分为两种\n- 字典管理 ： 表空间内的区间占用与否都存在字典里，分配或释放表空间时，这个表空间内的数据文件都会被修改\n- 本地管理 ： 表空间分配不放在数据字典，而在每个数据文件头部的第3到第8个块的位图块，来管理空间分配\n\n#### 默认表空间\n当我们创建用户时，不指定表空间，oracle会默认指定users表空间\n\n#### 创建表空间\n``` sql\n\t#create [TEMPORARY] TABLESPACE tablespace_name TEMPFILE|DATAFILE 'fileName.dbf' size xx;  \n\t# 创建临时表空间 --size 为数据文件大小\n\tcreate TEMPORARY TABLESPACE tempts TEMPFILE 'e:\\tempts.dbf' size 20M; \n\t# 创建表空间 数据文件默认为安装路径\n\tcreate TABLESPACE ts DATAFILE 'ts.dbf' size 20M; \n```\n\n#### 修改表空间\n可以修改表空间名称，是否联机，文件大小是否可以扩展...\n``` sql\n\t# offline 不可使用，默认为online\n\talter tablespace ts offline;\n\t# 扩展数据文件大小  --不能扩展表空间大小\n\talter database datafile 'ts1.dbf' autoextend on next 10M maxsize 100M;\n```\n\n> 不能删除表空间第一个数据文件，如果将第一个数据文件删除的话，相当于删除了整个表空间\n\n#### 删除表空间\n``` sql\n\t# drop tablespace tablespace_name [including contents]; --加上including contents则表示连同数据文件都删除\n\t drop tablespace ts1 including contents;\n```","slug":"oracle_tablespace","published":1,"updated":"2017-03-08T11:15:04.728Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5f1003uqoq19x7xg1mi","content":"<h3 id=\"什么是表空间\"><a href=\"#什么是表空间\" class=\"headerlink\" title=\"什么是表空间\"></a>什么是表空间</h3><p>我们知道数据库真正存放的是数据文件，而数据文件的集合就是表空间，表空间是一个逻辑结构。数据库与表空间是一对多的关系，而表空间与数据文件也是一对多的关系<br> <a id=\"more\"></a><br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/tablespace/p1.png\"></p>\n<h3 id=\"表空间的组成\"><a href=\"#表空间的组成\" class=\"headerlink\" title=\"表空间的组成\"></a>表空间的组成</h3><p>对于表空间来说，逻辑结构如图<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/tablespace/p2.png\"></p>\n<h4 id=\"Segment-段\"><a href=\"#Segment-段\" class=\"headerlink\" title=\"Segment(段)\"></a>Segment(段)</h4><p>段是指占用数据文件空间的通称，或数据库对象使用的空间的集合；段可以有表段、索引段、回滚段、临时段和高速缓存段…</p>\n<h4 id=\"Extent-区间\"><a href=\"#Extent-区间\" class=\"headerlink\" title=\"Extent(区间)\"></a>Extent(区间)</h4><p>分配给对象（如表）的任何连续块叫区间；区间也叫扩展，因为当它用完已经分配的区间后，再有新的记录插入就必须在分配新的区间（即扩展一些块）；一旦区间分配给某个对象（表、索引及簇），则该区间就不能再分配给其它的对象</p>\n<h3 id=\"表空间的分类\"><a href=\"#表空间的分类\" class=\"headerlink\" title=\"表空间的分类\"></a>表空间的分类</h3><ul>\n<li>永久表空间 ：用来存放永久性数据，如表…</li>\n<li>临时表空间 ：用来存放排序，分组时产生的临时数据</li>\n<li>undo表空间 ：用来保存修改前的镜像</li>\n</ul>\n<h3 id=\"表空间的操作\"><a href=\"#表空间的操作\" class=\"headerlink\" title=\"表空间的操作\"></a>表空间的操作</h3><p>对表空间的管理分为两种</p>\n<ul>\n<li>字典管理 ： 表空间内的区间占用与否都存在字典里，分配或释放表空间时，这个表空间内的数据文件都会被修改</li>\n<li>本地管理 ： 表空间分配不放在数据字典，而在每个数据文件头部的第3到第8个块的位图块，来管理空间分配</li>\n</ul>\n<h4 id=\"默认表空间\"><a href=\"#默认表空间\" class=\"headerlink\" title=\"默认表空间\"></a>默认表空间</h4><p>当我们创建用户时，不指定表空间，oracle会默认指定users表空间</p>\n<h4 id=\"创建表空间\"><a href=\"#创建表空间\" class=\"headerlink\" title=\"创建表空间\"></a>创建表空间</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">#create [TEMPORARY] TABLESPACE tablespace_name TEMPFILE|DATAFILE 'fileName.dbf' size xx;  </div><div class=\"line\"># 创建临时表空间 --size 为数据文件大小</div><div class=\"line\">create TEMPORARY TABLESPACE tempts TEMPFILE 'e:\\tempts.dbf' size 20M; </div><div class=\"line\"># 创建表空间 数据文件默认为安装路径</div><div class=\"line\">create TABLESPACE ts DATAFILE 'ts.dbf' size 20M;</div></pre></td></tr></table></figure>\n<h4 id=\"修改表空间\"><a href=\"#修改表空间\" class=\"headerlink\" title=\"修改表空间\"></a>修改表空间</h4><p>可以修改表空间名称，是否联机，文件大小是否可以扩展…<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># offline 不可使用，默认为online</div><div class=\"line\">alter tablespace ts offline;</div><div class=\"line\"># 扩展数据文件大小  --不能扩展表空间大小</div><div class=\"line\">alter database datafile 'ts1.dbf' autoextend on next 10M maxsize 100M;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>不能删除表空间第一个数据文件，如果将第一个数据文件删除的话，相当于删除了整个表空间</p>\n</blockquote>\n<h4 id=\"删除表空间\"><a href=\"#删除表空间\" class=\"headerlink\" title=\"删除表空间\"></a>删除表空间</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># drop tablespace tablespace_name [including contents]; --加上including contents则表示连同数据文件都删除</div><div class=\"line\"> drop tablespace ts1 including contents;</div></pre></td></tr></table></figure>","excerpt":"<h3 id=\"什么是表空间\"><a href=\"#什么是表空间\" class=\"headerlink\" title=\"什么是表空间\"></a>什么是表空间</h3><p>我们知道数据库真正存放的是数据文件，而数据文件的集合就是表空间，表空间是一个逻辑结构。数据库与表空间是一对多的关系，而表空间与数据文件也是一对多的关系<br>","more":"<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/tablespace/p1.png\"></p>\n<h3 id=\"表空间的组成\"><a href=\"#表空间的组成\" class=\"headerlink\" title=\"表空间的组成\"></a>表空间的组成</h3><p>对于表空间来说，逻辑结构如图<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/tablespace/p2.png\"></p>\n<h4 id=\"Segment-段\"><a href=\"#Segment-段\" class=\"headerlink\" title=\"Segment(段)\"></a>Segment(段)</h4><p>段是指占用数据文件空间的通称，或数据库对象使用的空间的集合；段可以有表段、索引段、回滚段、临时段和高速缓存段…</p>\n<h4 id=\"Extent-区间\"><a href=\"#Extent-区间\" class=\"headerlink\" title=\"Extent(区间)\"></a>Extent(区间)</h4><p>分配给对象（如表）的任何连续块叫区间；区间也叫扩展，因为当它用完已经分配的区间后，再有新的记录插入就必须在分配新的区间（即扩展一些块）；一旦区间分配给某个对象（表、索引及簇），则该区间就不能再分配给其它的对象</p>\n<h3 id=\"表空间的分类\"><a href=\"#表空间的分类\" class=\"headerlink\" title=\"表空间的分类\"></a>表空间的分类</h3><ul>\n<li>永久表空间 ：用来存放永久性数据，如表…</li>\n<li>临时表空间 ：用来存放排序，分组时产生的临时数据</li>\n<li>undo表空间 ：用来保存修改前的镜像</li>\n</ul>\n<h3 id=\"表空间的操作\"><a href=\"#表空间的操作\" class=\"headerlink\" title=\"表空间的操作\"></a>表空间的操作</h3><p>对表空间的管理分为两种</p>\n<ul>\n<li>字典管理 ： 表空间内的区间占用与否都存在字典里，分配或释放表空间时，这个表空间内的数据文件都会被修改</li>\n<li>本地管理 ： 表空间分配不放在数据字典，而在每个数据文件头部的第3到第8个块的位图块，来管理空间分配</li>\n</ul>\n<h4 id=\"默认表空间\"><a href=\"#默认表空间\" class=\"headerlink\" title=\"默认表空间\"></a>默认表空间</h4><p>当我们创建用户时，不指定表空间，oracle会默认指定users表空间</p>\n<h4 id=\"创建表空间\"><a href=\"#创建表空间\" class=\"headerlink\" title=\"创建表空间\"></a>创建表空间</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">#create [TEMPORARY] TABLESPACE tablespace_name TEMPFILE|DATAFILE 'fileName.dbf' size xx;  </div><div class=\"line\"># 创建临时表空间 --size 为数据文件大小</div><div class=\"line\">create TEMPORARY TABLESPACE tempts TEMPFILE 'e:\\tempts.dbf' size 20M; </div><div class=\"line\"># 创建表空间 数据文件默认为安装路径</div><div class=\"line\">create TABLESPACE ts DATAFILE 'ts.dbf' size 20M;</div></pre></td></tr></table></figure>\n<h4 id=\"修改表空间\"><a href=\"#修改表空间\" class=\"headerlink\" title=\"修改表空间\"></a>修改表空间</h4><p>可以修改表空间名称，是否联机，文件大小是否可以扩展…<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># offline 不可使用，默认为online</div><div class=\"line\">alter tablespace ts offline;</div><div class=\"line\"># 扩展数据文件大小  --不能扩展表空间大小</div><div class=\"line\">alter database datafile 'ts1.dbf' autoextend on next 10M maxsize 100M;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>不能删除表空间第一个数据文件，如果将第一个数据文件删除的话，相当于删除了整个表空间</p>\n</blockquote>\n<h4 id=\"删除表空间\"><a href=\"#删除表空间\" class=\"headerlink\" title=\"删除表空间\"></a>删除表空间</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># drop tablespace tablespace_name [including contents]; --加上including contents则表示连同数据文件都删除</div><div class=\"line\"> drop tablespace ts1 including contents;</div></pre></td></tr></table></figure>"},{"title":"Oracle 多表连接查询","date":"2016-08-26T13:57:10.000Z","_content":"前面说到了单表查询，但在现实开发中，数据处理往往需要依赖多个表，这时候，我们就需要用到多表连接查询\n\n### 笛卡尔集\n\n#### 什么是笛卡尔积\n\n简单来说，两个集合相乘，形成XY形式，就是笛卡儿积\n\n<!-- more -->\n\n``` sql\n\tselect empno,ename,sal,dept.* from emp,dept;\n```\n{% qnimg oracle/sql/select_multable/p1.png 'class:class1 class2' normal:yes %}\n\n#### 笛卡尔积产生条件\n- 省略连接条件\n- 选择条件无效\n- 所有表中的所有行互相连接\n\n### 查询连接\n去除重复的记录就需要添加连接条件，连接 n个表,至少需要 n-1个连接条件\n\n#### 等值连接\n``` sql\n\tselect empno, ename, d.deptno, dname from emp e, dept d \n\t\twhere e.deptno = d.deptno;\n```\n{% qnimg oracle/sql/select_multable/p2.png 'class:class1 class2' normal:yes %}\n\n#### 非等值连接\n``` sql\n\tselect empno, ename,sal, grade from emp, salgrade\n\t\twhere sal between losal and hisal;\n```\n{% qnimg oracle/sql/select_multable/p3.png 'class:class1 class2' normal:yes %}\n\n> 当最后查询结果只需要一个表的数据，却依赖另一个表的数据，此时用子查询(m+n)而非多表查询(m*n)\n\n### 内连接\n\n#### 等值内连接\n``` sql\n\t# join on的形式\n\tselect empno, ename, d.deptno, dname from emp e [inner] join dept d on e.deptno = d.deptno;\n\n\t# join Using的形式\n\t# 只适合外键名与该外键所属表主键名相同且不能给选中的列中加上表名缀或别名\n\tselect empno, ename, deptno, dname from emp [inner] join dept using (deptno);\n```\n{% qnimg oracle/sql/select_multable/p2.png 'class:class1 class2' normal:yes %}\n\n#### 非等值内连接\n``` sql\n\tselect empno, ename,grade from emp e [inner] join salgrade s on e.sal between s.losal and s.hisal;\n```\n\n#### 自然连接\n``` sql \n\tselect empno,ename,deptno,dname from emp natural join dept;\n```\n{% qnimg oracle/sql/select_multable/p2.png 'class:class1 class2' normal:yes %}\n\n### 外连接\n一般来说外连接分为三类 ：\n- 左外连接(左边的表不加限制)\n- 右外连接(右边的表不加限制)\n- 全外连接(左右两边的表不加限制)\n\n#### 左外连接(left [outer] join)\n``` sql \n\tselect e.empno,e.ename,d.deptno,d.dname from dept d left join emp e on e.deptno = d.deptno;\n```\n\n#### 右外连接(right [outer] join)\n``` sql \n\tselect e.empno,e.ename,d.deptno,d.dname from emp e right join dept d on e.deptno = d.deptno;\n```\n\n#### 全外连接(full [outer] join)\n``` sql \n\tselect e.empno,e.ename,d.deptno,d.dname from emp e full join dept d on e.deptno = d.deptno;\n```\n#### 使用(+)\n``` sql \n\tselect e.empno,e.ename,d.deptno,d.dname from dept d,emp e where e.deptno(+) = d.deptno;\n```\n\n> 全外连接不能使用(+)\n\n由于emp表和dept表的原因，外连接查询的输出都如下\n{% qnimg oracle/sql/select_multable/p4.png 'class:class1 class2' normal:yes %}\n\n\n","source":"_posts/oracle_sql_select_multable.md","raw":"---\ntitle: Oracle 多表连接查询\ndate: 2016-8-26 21:57:10\ntags:\n\t- Oracle\n---\n前面说到了单表查询，但在现实开发中，数据处理往往需要依赖多个表，这时候，我们就需要用到多表连接查询\n\n### 笛卡尔集\n\n#### 什么是笛卡尔积\n\n简单来说，两个集合相乘，形成XY形式，就是笛卡儿积\n\n<!-- more -->\n\n``` sql\n\tselect empno,ename,sal,dept.* from emp,dept;\n```\n{% qnimg oracle/sql/select_multable/p1.png 'class:class1 class2' normal:yes %}\n\n#### 笛卡尔积产生条件\n- 省略连接条件\n- 选择条件无效\n- 所有表中的所有行互相连接\n\n### 查询连接\n去除重复的记录就需要添加连接条件，连接 n个表,至少需要 n-1个连接条件\n\n#### 等值连接\n``` sql\n\tselect empno, ename, d.deptno, dname from emp e, dept d \n\t\twhere e.deptno = d.deptno;\n```\n{% qnimg oracle/sql/select_multable/p2.png 'class:class1 class2' normal:yes %}\n\n#### 非等值连接\n``` sql\n\tselect empno, ename,sal, grade from emp, salgrade\n\t\twhere sal between losal and hisal;\n```\n{% qnimg oracle/sql/select_multable/p3.png 'class:class1 class2' normal:yes %}\n\n> 当最后查询结果只需要一个表的数据，却依赖另一个表的数据，此时用子查询(m+n)而非多表查询(m*n)\n\n### 内连接\n\n#### 等值内连接\n``` sql\n\t# join on的形式\n\tselect empno, ename, d.deptno, dname from emp e [inner] join dept d on e.deptno = d.deptno;\n\n\t# join Using的形式\n\t# 只适合外键名与该外键所属表主键名相同且不能给选中的列中加上表名缀或别名\n\tselect empno, ename, deptno, dname from emp [inner] join dept using (deptno);\n```\n{% qnimg oracle/sql/select_multable/p2.png 'class:class1 class2' normal:yes %}\n\n#### 非等值内连接\n``` sql\n\tselect empno, ename,grade from emp e [inner] join salgrade s on e.sal between s.losal and s.hisal;\n```\n\n#### 自然连接\n``` sql \n\tselect empno,ename,deptno,dname from emp natural join dept;\n```\n{% qnimg oracle/sql/select_multable/p2.png 'class:class1 class2' normal:yes %}\n\n### 外连接\n一般来说外连接分为三类 ：\n- 左外连接(左边的表不加限制)\n- 右外连接(右边的表不加限制)\n- 全外连接(左右两边的表不加限制)\n\n#### 左外连接(left [outer] join)\n``` sql \n\tselect e.empno,e.ename,d.deptno,d.dname from dept d left join emp e on e.deptno = d.deptno;\n```\n\n#### 右外连接(right [outer] join)\n``` sql \n\tselect e.empno,e.ename,d.deptno,d.dname from emp e right join dept d on e.deptno = d.deptno;\n```\n\n#### 全外连接(full [outer] join)\n``` sql \n\tselect e.empno,e.ename,d.deptno,d.dname from emp e full join dept d on e.deptno = d.deptno;\n```\n#### 使用(+)\n``` sql \n\tselect e.empno,e.ename,d.deptno,d.dname from dept d,emp e where e.deptno(+) = d.deptno;\n```\n\n> 全外连接不能使用(+)\n\n由于emp表和dept表的原因，外连接查询的输出都如下\n{% qnimg oracle/sql/select_multable/p4.png 'class:class1 class2' normal:yes %}\n\n\n","slug":"oracle_sql_select_multable","published":1,"updated":"2017-03-08T11:17:18.879Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5f2003wqoq1f5hp991i","content":"<p>前面说到了单表查询，但在现实开发中，数据处理往往需要依赖多个表，这时候，我们就需要用到多表连接查询</p>\n<h3 id=\"笛卡尔集\"><a href=\"#笛卡尔集\" class=\"headerlink\" title=\"笛卡尔集\"></a>笛卡尔集</h3><h4 id=\"什么是笛卡尔积\"><a href=\"#什么是笛卡尔积\" class=\"headerlink\" title=\"什么是笛卡尔积\"></a>什么是笛卡尔积</h4><p>简单来说，两个集合相乘，形成XY形式，就是笛卡儿积</p>\n<a id=\"more\"></a>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> empno,ename,sal,dept.* <span class=\"keyword\">from</span> emp,dept;</div></pre></td></tr></table></figure>\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/sql/select_multable/p1.png\">\n<h4 id=\"笛卡尔积产生条件\"><a href=\"#笛卡尔积产生条件\" class=\"headerlink\" title=\"笛卡尔积产生条件\"></a>笛卡尔积产生条件</h4><ul>\n<li>省略连接条件</li>\n<li>选择条件无效</li>\n<li>所有表中的所有行互相连接</li>\n</ul>\n<h3 id=\"查询连接\"><a href=\"#查询连接\" class=\"headerlink\" title=\"查询连接\"></a>查询连接</h3><p>去除重复的记录就需要添加连接条件，连接 n个表,至少需要 n-1个连接条件</p>\n<h4 id=\"等值连接\"><a href=\"#等值连接\" class=\"headerlink\" title=\"等值连接\"></a>等值连接</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> empno, ename, d.deptno, dname <span class=\"keyword\">from</span> emp e, dept d </div><div class=\"line\">\t<span class=\"keyword\">where</span> e.deptno = d.deptno;</div></pre></td></tr></table></figure>\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/sql/select_multable/p2.png\">\n<h4 id=\"非等值连接\"><a href=\"#非等值连接\" class=\"headerlink\" title=\"非等值连接\"></a>非等值连接</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> empno, ename,sal, grade <span class=\"keyword\">from</span> emp, salgrade</div><div class=\"line\">\t<span class=\"keyword\">where</span> sal <span class=\"keyword\">between</span> losal <span class=\"keyword\">and</span> hisal;</div></pre></td></tr></table></figure>\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/sql/select_multable/p3.png\">\n<blockquote>\n<p>当最后查询结果只需要一个表的数据，却依赖另一个表的数据，此时用子查询(m+n)而非多表查询(m*n)</p>\n</blockquote>\n<h3 id=\"内连接\"><a href=\"#内连接\" class=\"headerlink\" title=\"内连接\"></a>内连接</h3><h4 id=\"等值内连接\"><a href=\"#等值内连接\" class=\"headerlink\" title=\"等值内连接\"></a>等值内连接</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># join on的形式</div><div class=\"line\">select empno, ename, d.deptno, dname from emp e [inner] join dept d on e.deptno = d.deptno;</div><div class=\"line\"></div><div class=\"line\"># join Using的形式</div><div class=\"line\"># 只适合外键名与该外键所属表主键名相同且不能给选中的列中加上表名缀或别名</div><div class=\"line\">select empno, ename, deptno, dname from emp [inner] join dept using (deptno);</div></pre></td></tr></table></figure>\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/sql/select_multable/p2.png\">\n<h4 id=\"非等值内连接\"><a href=\"#非等值内连接\" class=\"headerlink\" title=\"非等值内连接\"></a>非等值内连接</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> empno, ename,grade <span class=\"keyword\">from</span> emp e [<span class=\"keyword\">inner</span>] <span class=\"keyword\">join</span> salgrade s <span class=\"keyword\">on</span> e.sal <span class=\"keyword\">between</span> s.losal <span class=\"keyword\">and</span> s.hisal;</div></pre></td></tr></table></figure>\n<h4 id=\"自然连接\"><a href=\"#自然连接\" class=\"headerlink\" title=\"自然连接\"></a>自然连接</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> empno,ename,deptno,dname <span class=\"keyword\">from</span> emp <span class=\"keyword\">natural</span> <span class=\"keyword\">join</span> dept;</div></pre></td></tr></table></figure>\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/sql/select_multable/p2.png\">\n<h3 id=\"外连接\"><a href=\"#外连接\" class=\"headerlink\" title=\"外连接\"></a>外连接</h3><p>一般来说外连接分为三类 ：</p>\n<ul>\n<li>左外连接(左边的表不加限制)</li>\n<li>右外连接(右边的表不加限制)</li>\n<li>全外连接(左右两边的表不加限制)</li>\n</ul>\n<h4 id=\"左外连接-left-outer-join\"><a href=\"#左外连接-left-outer-join\" class=\"headerlink\" title=\"左外连接(left [outer] join)\"></a>左外连接(left [outer] join)</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> e.empno,e.ename,d.deptno,d.dname <span class=\"keyword\">from</span> dept d <span class=\"keyword\">left</span> <span class=\"keyword\">join</span> emp e <span class=\"keyword\">on</span> e.deptno = d.deptno;</div></pre></td></tr></table></figure>\n<h4 id=\"右外连接-right-outer-join\"><a href=\"#右外连接-right-outer-join\" class=\"headerlink\" title=\"右外连接(right [outer] join)\"></a>右外连接(right [outer] join)</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> e.empno,e.ename,d.deptno,d.dname <span class=\"keyword\">from</span> emp e <span class=\"keyword\">right</span> <span class=\"keyword\">join</span> dept d <span class=\"keyword\">on</span> e.deptno = d.deptno;</div></pre></td></tr></table></figure>\n<h4 id=\"全外连接-full-outer-join\"><a href=\"#全外连接-full-outer-join\" class=\"headerlink\" title=\"全外连接(full [outer] join)\"></a>全外连接(full [outer] join)</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> e.empno,e.ename,d.deptno,d.dname <span class=\"keyword\">from</span> emp e <span class=\"keyword\">full</span> <span class=\"keyword\">join</span> dept d <span class=\"keyword\">on</span> e.deptno = d.deptno;</div></pre></td></tr></table></figure>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用(+)\"></a>使用(+)</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> e.empno,e.ename,d.deptno,d.dname <span class=\"keyword\">from</span> dept d,emp e <span class=\"keyword\">where</span> e.deptno(+) = d.deptno;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>全外连接不能使用(+)</p>\n</blockquote>\n<p>由于emp表和dept表的原因，外连接查询的输出都如下<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/sql/select_multable/p4.png\"></p>\n","excerpt":"<p>前面说到了单表查询，但在现实开发中，数据处理往往需要依赖多个表，这时候，我们就需要用到多表连接查询</p>\n<h3 id=\"笛卡尔集\"><a href=\"#笛卡尔集\" class=\"headerlink\" title=\"笛卡尔集\"></a>笛卡尔集</h3><h4 id=\"什么是笛卡尔积\"><a href=\"#什么是笛卡尔积\" class=\"headerlink\" title=\"什么是笛卡尔积\"></a>什么是笛卡尔积</h4><p>简单来说，两个集合相乘，形成XY形式，就是笛卡儿积</p>","more":"<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> empno,ename,sal,dept.* <span class=\"keyword\">from</span> emp,dept;</div></pre></td></tr></table></figure>\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/sql/select_multable/p1.png\">\n<h4 id=\"笛卡尔积产生条件\"><a href=\"#笛卡尔积产生条件\" class=\"headerlink\" title=\"笛卡尔积产生条件\"></a>笛卡尔积产生条件</h4><ul>\n<li>省略连接条件</li>\n<li>选择条件无效</li>\n<li>所有表中的所有行互相连接</li>\n</ul>\n<h3 id=\"查询连接\"><a href=\"#查询连接\" class=\"headerlink\" title=\"查询连接\"></a>查询连接</h3><p>去除重复的记录就需要添加连接条件，连接 n个表,至少需要 n-1个连接条件</p>\n<h4 id=\"等值连接\"><a href=\"#等值连接\" class=\"headerlink\" title=\"等值连接\"></a>等值连接</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> empno, ename, d.deptno, dname <span class=\"keyword\">from</span> emp e, dept d </div><div class=\"line\">\t<span class=\"keyword\">where</span> e.deptno = d.deptno;</div></pre></td></tr></table></figure>\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/sql/select_multable/p2.png\">\n<h4 id=\"非等值连接\"><a href=\"#非等值连接\" class=\"headerlink\" title=\"非等值连接\"></a>非等值连接</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> empno, ename,sal, grade <span class=\"keyword\">from</span> emp, salgrade</div><div class=\"line\">\t<span class=\"keyword\">where</span> sal <span class=\"keyword\">between</span> losal <span class=\"keyword\">and</span> hisal;</div></pre></td></tr></table></figure>\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/sql/select_multable/p3.png\">\n<blockquote>\n<p>当最后查询结果只需要一个表的数据，却依赖另一个表的数据，此时用子查询(m+n)而非多表查询(m*n)</p>\n</blockquote>\n<h3 id=\"内连接\"><a href=\"#内连接\" class=\"headerlink\" title=\"内连接\"></a>内连接</h3><h4 id=\"等值内连接\"><a href=\"#等值内连接\" class=\"headerlink\" title=\"等值内连接\"></a>等值内连接</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># join on的形式</div><div class=\"line\">select empno, ename, d.deptno, dname from emp e [inner] join dept d on e.deptno = d.deptno;</div><div class=\"line\"></div><div class=\"line\"># join Using的形式</div><div class=\"line\"># 只适合外键名与该外键所属表主键名相同且不能给选中的列中加上表名缀或别名</div><div class=\"line\">select empno, ename, deptno, dname from emp [inner] join dept using (deptno);</div></pre></td></tr></table></figure>\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/sql/select_multable/p2.png\">\n<h4 id=\"非等值内连接\"><a href=\"#非等值内连接\" class=\"headerlink\" title=\"非等值内连接\"></a>非等值内连接</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> empno, ename,grade <span class=\"keyword\">from</span> emp e [<span class=\"keyword\">inner</span>] <span class=\"keyword\">join</span> salgrade s <span class=\"keyword\">on</span> e.sal <span class=\"keyword\">between</span> s.losal <span class=\"keyword\">and</span> s.hisal;</div></pre></td></tr></table></figure>\n<h4 id=\"自然连接\"><a href=\"#自然连接\" class=\"headerlink\" title=\"自然连接\"></a>自然连接</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> empno,ename,deptno,dname <span class=\"keyword\">from</span> emp <span class=\"keyword\">natural</span> <span class=\"keyword\">join</span> dept;</div></pre></td></tr></table></figure>\n<img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/sql/select_multable/p2.png\">\n<h3 id=\"外连接\"><a href=\"#外连接\" class=\"headerlink\" title=\"外连接\"></a>外连接</h3><p>一般来说外连接分为三类 ：</p>\n<ul>\n<li>左外连接(左边的表不加限制)</li>\n<li>右外连接(右边的表不加限制)</li>\n<li>全外连接(左右两边的表不加限制)</li>\n</ul>\n<h4 id=\"左外连接-left-outer-join\"><a href=\"#左外连接-left-outer-join\" class=\"headerlink\" title=\"左外连接(left [outer] join)\"></a>左外连接(left [outer] join)</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> e.empno,e.ename,d.deptno,d.dname <span class=\"keyword\">from</span> dept d <span class=\"keyword\">left</span> <span class=\"keyword\">join</span> emp e <span class=\"keyword\">on</span> e.deptno = d.deptno;</div></pre></td></tr></table></figure>\n<h4 id=\"右外连接-right-outer-join\"><a href=\"#右外连接-right-outer-join\" class=\"headerlink\" title=\"右外连接(right [outer] join)\"></a>右外连接(right [outer] join)</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> e.empno,e.ename,d.deptno,d.dname <span class=\"keyword\">from</span> emp e <span class=\"keyword\">right</span> <span class=\"keyword\">join</span> dept d <span class=\"keyword\">on</span> e.deptno = d.deptno;</div></pre></td></tr></table></figure>\n<h4 id=\"全外连接-full-outer-join\"><a href=\"#全外连接-full-outer-join\" class=\"headerlink\" title=\"全外连接(full [outer] join)\"></a>全外连接(full [outer] join)</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> e.empno,e.ename,d.deptno,d.dname <span class=\"keyword\">from</span> emp e <span class=\"keyword\">full</span> <span class=\"keyword\">join</span> dept d <span class=\"keyword\">on</span> e.deptno = d.deptno;</div></pre></td></tr></table></figure>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用(+)\"></a>使用(+)</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> e.empno,e.ename,d.deptno,d.dname <span class=\"keyword\">from</span> dept d,emp e <span class=\"keyword\">where</span> e.deptno(+) = d.deptno;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>全外连接不能使用(+)</p>\n</blockquote>\n<p>由于emp表和dept表的原因，外连接查询的输出都如下<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/oracle/sql/select_multable/p4.png\"></p>"},{"title":"Oracle用户与权限","date":"2016-08-17T06:24:25.000Z","_content":"我们知道Oracle与其它数据库（如mysql）其中一个很大的不同就是mysql只有一个root用户，而Oracle则是多用户处理，甚至可以自己新建用户\nOracle安装完成后，用户的默认密码 :\n- sys(系统管理员，拥有最高权限) --> chang_on_install\n- system(本地管理员) --> manager\n- scott(普通用户) --> tiger\n\n<!--more-->\n\n### 用户连接与退出\n\n#### 连接\n``` sql\n\t# 本地管理员可以加上 as sysdba\n\t# 系统管理员必须加上 as sysdba\n\t# conn[ect] user_name/user_password as sysdba\n\tconn[ect] sys/chang_on_install as sysdba\n```\n#### 显示当前用户\n``` sql \n\tshow user\n```\n#### 退出\n``` sql\n\t# 退出页面\n\texit;\n\t# 断开连接\n\t# disconn[ect] user_name\n\tdisconn[ect] sys\n```\n\n### 用户创建和删除\n\n只用管理员用户才可以创建和删除用户，普通用户不可以\n``` sql\n\t# create user\n\t# create user user_name identified by user_password;\n\tcreate user sakuraffy identified by root;\n\t\n\t# drop user\n\t# drop user user_name [cascade]\n\t# drop user sakura\t\t\t# 只删除用户\n\t# drop user sakura cascade  # 删除用户并删除数据对象\n```\n但是当你用sakuraffy用户登录发现报错了，这又是为什么呢？\n\n### 权限管理\n\n这是因为sakuraffy用户没有登陆的权限，这里先来简单说下权限，权限分为两类：系统权限和对象权限\n- 系统权限 ： 用户对数据库操作(创建用户，表空间，存储过程……)的权限\n- 对象权限 ： 用户对其他用户的数据对象操作(查询，修改其它用户的表，存储过程……)的权限\n\n这里登陆的权限为CREATE SESSION\n\n### 权限的授予与收回\n\n#### 授予权限\n``` sql\n\t# 系统权限\n\t# grant privilege_name to user_name;\n\tgrant create session to sakuraffy;\n\t\n\t# 对象权限\n\t# grant dml on data_object to user_name;\n\tgrant select on emp to sakuraffy; #scott用户下\n\tgrant select on scott.emp to sakuraffy; #管理员用户下\n```\n#### 收回权限\n``` sql\n\t# 系统权限\n\t# revoke privilege_name from user_name;\n\trevoke create session from sakuraffy;\n\t\n\t# 对象权限\n\t# revoke dml on data_object from user_name;\n\trevoke select on emp from sakuraffy; #scott用户下\n\trevoke select on scott.emp from sakuraffy; #管理员用户下\n```\n#### 授予权限,并拥有所有权（它可以将其权限再授予其它用户）\n``` sql\n\t# 系统权限\n\t# grant privilege_name to user_name with admin option;\n\tgrant create session to sakuraffy with admin option;\n\t\n\t# 对象权限\n\t# grant dml on data_object to user_name with grant option;\n\tgrant select on emp to sakuraffy with grant option; #scott用户下\n\tgrant select on scott.emp to sakuraffy with grant option; #管理员用户下\n```\n这里值得说的一点是当system将CREATE SESSION授予user1，user1赋予user2。当user1 CREATE SESSION授予收回时，user1授予user2的CREATE SESSION也将被收回\n\n### 角色\n\n简单一点来说 : 角色就是一系列权限的集合\n\n对于上面登陆权限，也可以用角色授予\n``` sql\n\t# grant role_name to user_name;\n\tgrant connect to sakuraffy;\n```\n\n### 用户锁定与解锁\n\n#### profile\n``` sql\n\t# 创建profile\n\t# create profile profile_name limit opretion num password_lock_time num(day);\n\tcreate profile lock_account limit fail_login_attempt 3 password_lock_time 2;\n\t# 删除profile\n\t# drop profile profile_name [cascade]; 有用户使用这个文件，必须带有 cascade\n\tdrop profile lock_account;\n```\n#### 用户锁定\n``` sql\n\t# 直接锁定\n\t# alter user user_name account lock\n\talter user sakuraffy account lock;\n\n\t# 满足了一定profile的用户锁定\n\t# alter user user_name profile profile_name;\n\talter user sakuraffy profile lock_account;\n```\n#### 用户解锁\n``` sql\n\t# alter user user_name account unlock;\n\talter user sakuraffy account unlock;\n```","source":"_posts/oracle_user.md","raw":"---\ntitle: Oracle用户与权限\ndate: 2016-8-17 14:24:25\ntags:\n\t- Oracle\n---\n我们知道Oracle与其它数据库（如mysql）其中一个很大的不同就是mysql只有一个root用户，而Oracle则是多用户处理，甚至可以自己新建用户\nOracle安装完成后，用户的默认密码 :\n- sys(系统管理员，拥有最高权限) --> chang_on_install\n- system(本地管理员) --> manager\n- scott(普通用户) --> tiger\n\n<!--more-->\n\n### 用户连接与退出\n\n#### 连接\n``` sql\n\t# 本地管理员可以加上 as sysdba\n\t# 系统管理员必须加上 as sysdba\n\t# conn[ect] user_name/user_password as sysdba\n\tconn[ect] sys/chang_on_install as sysdba\n```\n#### 显示当前用户\n``` sql \n\tshow user\n```\n#### 退出\n``` sql\n\t# 退出页面\n\texit;\n\t# 断开连接\n\t# disconn[ect] user_name\n\tdisconn[ect] sys\n```\n\n### 用户创建和删除\n\n只用管理员用户才可以创建和删除用户，普通用户不可以\n``` sql\n\t# create user\n\t# create user user_name identified by user_password;\n\tcreate user sakuraffy identified by root;\n\t\n\t# drop user\n\t# drop user user_name [cascade]\n\t# drop user sakura\t\t\t# 只删除用户\n\t# drop user sakura cascade  # 删除用户并删除数据对象\n```\n但是当你用sakuraffy用户登录发现报错了，这又是为什么呢？\n\n### 权限管理\n\n这是因为sakuraffy用户没有登陆的权限，这里先来简单说下权限，权限分为两类：系统权限和对象权限\n- 系统权限 ： 用户对数据库操作(创建用户，表空间，存储过程……)的权限\n- 对象权限 ： 用户对其他用户的数据对象操作(查询，修改其它用户的表，存储过程……)的权限\n\n这里登陆的权限为CREATE SESSION\n\n### 权限的授予与收回\n\n#### 授予权限\n``` sql\n\t# 系统权限\n\t# grant privilege_name to user_name;\n\tgrant create session to sakuraffy;\n\t\n\t# 对象权限\n\t# grant dml on data_object to user_name;\n\tgrant select on emp to sakuraffy; #scott用户下\n\tgrant select on scott.emp to sakuraffy; #管理员用户下\n```\n#### 收回权限\n``` sql\n\t# 系统权限\n\t# revoke privilege_name from user_name;\n\trevoke create session from sakuraffy;\n\t\n\t# 对象权限\n\t# revoke dml on data_object from user_name;\n\trevoke select on emp from sakuraffy; #scott用户下\n\trevoke select on scott.emp from sakuraffy; #管理员用户下\n```\n#### 授予权限,并拥有所有权（它可以将其权限再授予其它用户）\n``` sql\n\t# 系统权限\n\t# grant privilege_name to user_name with admin option;\n\tgrant create session to sakuraffy with admin option;\n\t\n\t# 对象权限\n\t# grant dml on data_object to user_name with grant option;\n\tgrant select on emp to sakuraffy with grant option; #scott用户下\n\tgrant select on scott.emp to sakuraffy with grant option; #管理员用户下\n```\n这里值得说的一点是当system将CREATE SESSION授予user1，user1赋予user2。当user1 CREATE SESSION授予收回时，user1授予user2的CREATE SESSION也将被收回\n\n### 角色\n\n简单一点来说 : 角色就是一系列权限的集合\n\n对于上面登陆权限，也可以用角色授予\n``` sql\n\t# grant role_name to user_name;\n\tgrant connect to sakuraffy;\n```\n\n### 用户锁定与解锁\n\n#### profile\n``` sql\n\t# 创建profile\n\t# create profile profile_name limit opretion num password_lock_time num(day);\n\tcreate profile lock_account limit fail_login_attempt 3 password_lock_time 2;\n\t# 删除profile\n\t# drop profile profile_name [cascade]; 有用户使用这个文件，必须带有 cascade\n\tdrop profile lock_account;\n```\n#### 用户锁定\n``` sql\n\t# 直接锁定\n\t# alter user user_name account lock\n\talter user sakuraffy account lock;\n\n\t# 满足了一定profile的用户锁定\n\t# alter user user_name profile profile_name;\n\talter user sakuraffy profile lock_account;\n```\n#### 用户解锁\n``` sql\n\t# alter user user_name account unlock;\n\talter user sakuraffy account unlock;\n```","slug":"oracle_user","published":1,"updated":"2017-03-08T11:15:23.465Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5f5003zqoq1c020g9gu","content":"<p>我们知道Oracle与其它数据库（如mysql）其中一个很大的不同就是mysql只有一个root用户，而Oracle则是多用户处理，甚至可以自己新建用户<br>Oracle安装完成后，用户的默认密码 :</p>\n<ul>\n<li>sys(系统管理员，拥有最高权限) –&gt; chang_on_install</li>\n<li>system(本地管理员) –&gt; manager</li>\n<li>scott(普通用户) –&gt; tiger</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"用户连接与退出\"><a href=\"#用户连接与退出\" class=\"headerlink\" title=\"用户连接与退出\"></a>用户连接与退出</h3><h4 id=\"连接\"><a href=\"#连接\" class=\"headerlink\" title=\"连接\"></a>连接</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 本地管理员可以加上 as sysdba</div><div class=\"line\"># 系统管理员必须加上 as sysdba</div><div class=\"line\"># conn[ect] user_name/user_password as sysdba</div><div class=\"line\">conn[ect] sys/chang_on_install as sysdba</div></pre></td></tr></table></figure>\n<h4 id=\"显示当前用户\"><a href=\"#显示当前用户\" class=\"headerlink\" title=\"显示当前用户\"></a>显示当前用户</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">user</span></div></pre></td></tr></table></figure>\n<h4 id=\"退出\"><a href=\"#退出\" class=\"headerlink\" title=\"退出\"></a>退出</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 退出页面</div><div class=\"line\">exit;</div><div class=\"line\"># 断开连接</div><div class=\"line\"># disconn[ect] user_name</div><div class=\"line\">disconn[ect] sys</div></pre></td></tr></table></figure>\n<h3 id=\"用户创建和删除\"><a href=\"#用户创建和删除\" class=\"headerlink\" title=\"用户创建和删除\"></a>用户创建和删除</h3><p>只用管理员用户才可以创建和删除用户，普通用户不可以<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"># create user</div><div class=\"line\"># create user user_name identified by user_password;</div><div class=\"line\">create user sakuraffy identified by root;</div><div class=\"line\"></div><div class=\"line\"># drop user</div><div class=\"line\"># drop user user_name [cascade]</div><div class=\"line\"># drop user sakura\t\t\t# 只删除用户</div><div class=\"line\"># drop user sakura cascade  # 删除用户并删除数据对象</div></pre></td></tr></table></figure></p>\n<p>但是当你用sakuraffy用户登录发现报错了，这又是为什么呢？</p>\n<h3 id=\"权限管理\"><a href=\"#权限管理\" class=\"headerlink\" title=\"权限管理\"></a>权限管理</h3><p>这是因为sakuraffy用户没有登陆的权限，这里先来简单说下权限，权限分为两类：系统权限和对象权限</p>\n<ul>\n<li>系统权限 ： 用户对数据库操作(创建用户，表空间，存储过程……)的权限</li>\n<li>对象权限 ： 用户对其他用户的数据对象操作(查询，修改其它用户的表，存储过程……)的权限</li>\n</ul>\n<p>这里登陆的权限为CREATE SESSION</p>\n<h3 id=\"权限的授予与收回\"><a href=\"#权限的授予与收回\" class=\"headerlink\" title=\"权限的授予与收回\"></a>权限的授予与收回</h3><h4 id=\"授予权限\"><a href=\"#授予权限\" class=\"headerlink\" title=\"授予权限\"></a>授予权限</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 系统权限</div><div class=\"line\"># grant privilege_name to user_name;</div><div class=\"line\">grant create session to sakuraffy;</div><div class=\"line\"></div><div class=\"line\"># 对象权限</div><div class=\"line\"># grant dml on data_object to user_name;</div><div class=\"line\">grant select on emp to sakuraffy; #scott用户下</div><div class=\"line\">grant select on scott.emp to sakuraffy; #管理员用户下</div></pre></td></tr></table></figure>\n<h4 id=\"收回权限\"><a href=\"#收回权限\" class=\"headerlink\" title=\"收回权限\"></a>收回权限</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 系统权限</div><div class=\"line\"># revoke privilege_name from user_name;</div><div class=\"line\">revoke create session from sakuraffy;</div><div class=\"line\"></div><div class=\"line\"># 对象权限</div><div class=\"line\"># revoke dml on data_object from user_name;</div><div class=\"line\">revoke select on emp from sakuraffy; #scott用户下</div><div class=\"line\">revoke select on scott.emp from sakuraffy; #管理员用户下</div></pre></td></tr></table></figure>\n<h4 id=\"授予权限-并拥有所有权（它可以将其权限再授予其它用户）\"><a href=\"#授予权限-并拥有所有权（它可以将其权限再授予其它用户）\" class=\"headerlink\" title=\"授予权限,并拥有所有权（它可以将其权限再授予其它用户）\"></a>授予权限,并拥有所有权（它可以将其权限再授予其它用户）</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 系统权限</div><div class=\"line\"># grant privilege_name to user_name with admin option;</div><div class=\"line\">grant create session to sakuraffy with admin option;</div><div class=\"line\"></div><div class=\"line\"># 对象权限</div><div class=\"line\"># grant dml on data_object to user_name with grant option;</div><div class=\"line\">grant select on emp to sakuraffy with grant option; #scott用户下</div><div class=\"line\">grant select on scott.emp to sakuraffy with grant option; #管理员用户下</div></pre></td></tr></table></figure>\n<p>这里值得说的一点是当system将CREATE SESSION授予user1，user1赋予user2。当user1 CREATE SESSION授予收回时，user1授予user2的CREATE SESSION也将被收回</p>\n<h3 id=\"角色\"><a href=\"#角色\" class=\"headerlink\" title=\"角色\"></a>角色</h3><p>简单一点来说 : 角色就是一系列权限的集合</p>\n<p>对于上面登陆权限，也可以用角色授予<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># grant role_name to user_name;</div><div class=\"line\">grant connect to sakuraffy;</div></pre></td></tr></table></figure></p>\n<h3 id=\"用户锁定与解锁\"><a href=\"#用户锁定与解锁\" class=\"headerlink\" title=\"用户锁定与解锁\"></a>用户锁定与解锁</h3><h4 id=\"profile\"><a href=\"#profile\" class=\"headerlink\" title=\"profile\"></a>profile</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 创建profile</div><div class=\"line\"># create profile profile_name limit opretion num password_lock_time num(day);</div><div class=\"line\">create profile lock_account limit fail_login_attempt 3 password_lock_time 2;</div><div class=\"line\"># 删除profile</div><div class=\"line\"># drop profile profile_name [cascade]; 有用户使用这个文件，必须带有 cascade</div><div class=\"line\">drop profile lock_account;</div></pre></td></tr></table></figure>\n<h4 id=\"用户锁定\"><a href=\"#用户锁定\" class=\"headerlink\" title=\"用户锁定\"></a>用户锁定</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 直接锁定</div><div class=\"line\"># alter user user_name account lock</div><div class=\"line\">alter user sakuraffy account lock;</div><div class=\"line\"></div><div class=\"line\"># 满足了一定profile的用户锁定</div><div class=\"line\"># alter user user_name profile profile_name;</div><div class=\"line\">alter user sakuraffy profile lock_account;</div></pre></td></tr></table></figure>\n<h4 id=\"用户解锁\"><a href=\"#用户解锁\" class=\"headerlink\" title=\"用户解锁\"></a>用户解锁</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># alter user user_name account unlock;</div><div class=\"line\">alter user sakuraffy account unlock;</div></pre></td></tr></table></figure>","excerpt":"<p>我们知道Oracle与其它数据库（如mysql）其中一个很大的不同就是mysql只有一个root用户，而Oracle则是多用户处理，甚至可以自己新建用户<br>Oracle安装完成后，用户的默认密码 :</p>\n<ul>\n<li>sys(系统管理员，拥有最高权限) –&gt; chang_on_install</li>\n<li>system(本地管理员) –&gt; manager</li>\n<li>scott(普通用户) –&gt; tiger</li>\n</ul>","more":"<h3 id=\"用户连接与退出\"><a href=\"#用户连接与退出\" class=\"headerlink\" title=\"用户连接与退出\"></a>用户连接与退出</h3><h4 id=\"连接\"><a href=\"#连接\" class=\"headerlink\" title=\"连接\"></a>连接</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 本地管理员可以加上 as sysdba</div><div class=\"line\"># 系统管理员必须加上 as sysdba</div><div class=\"line\"># conn[ect] user_name/user_password as sysdba</div><div class=\"line\">conn[ect] sys/chang_on_install as sysdba</div></pre></td></tr></table></figure>\n<h4 id=\"显示当前用户\"><a href=\"#显示当前用户\" class=\"headerlink\" title=\"显示当前用户\"></a>显示当前用户</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">user</span></div></pre></td></tr></table></figure>\n<h4 id=\"退出\"><a href=\"#退出\" class=\"headerlink\" title=\"退出\"></a>退出</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 退出页面</div><div class=\"line\">exit;</div><div class=\"line\"># 断开连接</div><div class=\"line\"># disconn[ect] user_name</div><div class=\"line\">disconn[ect] sys</div></pre></td></tr></table></figure>\n<h3 id=\"用户创建和删除\"><a href=\"#用户创建和删除\" class=\"headerlink\" title=\"用户创建和删除\"></a>用户创建和删除</h3><p>只用管理员用户才可以创建和删除用户，普通用户不可以<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"># create user</div><div class=\"line\"># create user user_name identified by user_password;</div><div class=\"line\">create user sakuraffy identified by root;</div><div class=\"line\"></div><div class=\"line\"># drop user</div><div class=\"line\"># drop user user_name [cascade]</div><div class=\"line\"># drop user sakura\t\t\t# 只删除用户</div><div class=\"line\"># drop user sakura cascade  # 删除用户并删除数据对象</div></pre></td></tr></table></figure></p>\n<p>但是当你用sakuraffy用户登录发现报错了，这又是为什么呢？</p>\n<h3 id=\"权限管理\"><a href=\"#权限管理\" class=\"headerlink\" title=\"权限管理\"></a>权限管理</h3><p>这是因为sakuraffy用户没有登陆的权限，这里先来简单说下权限，权限分为两类：系统权限和对象权限</p>\n<ul>\n<li>系统权限 ： 用户对数据库操作(创建用户，表空间，存储过程……)的权限</li>\n<li>对象权限 ： 用户对其他用户的数据对象操作(查询，修改其它用户的表，存储过程……)的权限</li>\n</ul>\n<p>这里登陆的权限为CREATE SESSION</p>\n<h3 id=\"权限的授予与收回\"><a href=\"#权限的授予与收回\" class=\"headerlink\" title=\"权限的授予与收回\"></a>权限的授予与收回</h3><h4 id=\"授予权限\"><a href=\"#授予权限\" class=\"headerlink\" title=\"授予权限\"></a>授予权限</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 系统权限</div><div class=\"line\"># grant privilege_name to user_name;</div><div class=\"line\">grant create session to sakuraffy;</div><div class=\"line\"></div><div class=\"line\"># 对象权限</div><div class=\"line\"># grant dml on data_object to user_name;</div><div class=\"line\">grant select on emp to sakuraffy; #scott用户下</div><div class=\"line\">grant select on scott.emp to sakuraffy; #管理员用户下</div></pre></td></tr></table></figure>\n<h4 id=\"收回权限\"><a href=\"#收回权限\" class=\"headerlink\" title=\"收回权限\"></a>收回权限</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 系统权限</div><div class=\"line\"># revoke privilege_name from user_name;</div><div class=\"line\">revoke create session from sakuraffy;</div><div class=\"line\"></div><div class=\"line\"># 对象权限</div><div class=\"line\"># revoke dml on data_object from user_name;</div><div class=\"line\">revoke select on emp from sakuraffy; #scott用户下</div><div class=\"line\">revoke select on scott.emp from sakuraffy; #管理员用户下</div></pre></td></tr></table></figure>\n<h4 id=\"授予权限-并拥有所有权（它可以将其权限再授予其它用户）\"><a href=\"#授予权限-并拥有所有权（它可以将其权限再授予其它用户）\" class=\"headerlink\" title=\"授予权限,并拥有所有权（它可以将其权限再授予其它用户）\"></a>授予权限,并拥有所有权（它可以将其权限再授予其它用户）</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 系统权限</div><div class=\"line\"># grant privilege_name to user_name with admin option;</div><div class=\"line\">grant create session to sakuraffy with admin option;</div><div class=\"line\"></div><div class=\"line\"># 对象权限</div><div class=\"line\"># grant dml on data_object to user_name with grant option;</div><div class=\"line\">grant select on emp to sakuraffy with grant option; #scott用户下</div><div class=\"line\">grant select on scott.emp to sakuraffy with grant option; #管理员用户下</div></pre></td></tr></table></figure>\n<p>这里值得说的一点是当system将CREATE SESSION授予user1，user1赋予user2。当user1 CREATE SESSION授予收回时，user1授予user2的CREATE SESSION也将被收回</p>\n<h3 id=\"角色\"><a href=\"#角色\" class=\"headerlink\" title=\"角色\"></a>角色</h3><p>简单一点来说 : 角色就是一系列权限的集合</p>\n<p>对于上面登陆权限，也可以用角色授予<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># grant role_name to user_name;</div><div class=\"line\">grant connect to sakuraffy;</div></pre></td></tr></table></figure></p>\n<h3 id=\"用户锁定与解锁\"><a href=\"#用户锁定与解锁\" class=\"headerlink\" title=\"用户锁定与解锁\"></a>用户锁定与解锁</h3><h4 id=\"profile\"><a href=\"#profile\" class=\"headerlink\" title=\"profile\"></a>profile</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 创建profile</div><div class=\"line\"># create profile profile_name limit opretion num password_lock_time num(day);</div><div class=\"line\">create profile lock_account limit fail_login_attempt 3 password_lock_time 2;</div><div class=\"line\"># 删除profile</div><div class=\"line\"># drop profile profile_name [cascade]; 有用户使用这个文件，必须带有 cascade</div><div class=\"line\">drop profile lock_account;</div></pre></td></tr></table></figure>\n<h4 id=\"用户锁定\"><a href=\"#用户锁定\" class=\"headerlink\" title=\"用户锁定\"></a>用户锁定</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 直接锁定</div><div class=\"line\"># alter user user_name account lock</div><div class=\"line\">alter user sakuraffy account lock;</div><div class=\"line\"></div><div class=\"line\"># 满足了一定profile的用户锁定</div><div class=\"line\"># alter user user_name profile profile_name;</div><div class=\"line\">alter user sakuraffy profile lock_account;</div></pre></td></tr></table></figure>\n<h4 id=\"用户解锁\"><a href=\"#用户解锁\" class=\"headerlink\" title=\"用户解锁\"></a>用户解锁</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># alter user user_name account unlock;</div><div class=\"line\">alter user sakuraffy account unlock;</div></pre></td></tr></table></figure>"},{"title":"适配器模式(Adapter)","date":"2017-02-10T10:33:23.000Z","_content":"","source":"_posts/pattern_adapter.md","raw":"---\ntitle: 适配器模式(Adapter)\ndate: 2017-02-10 18:33:23\ntags:\n\t- 设计模式\n---\n","slug":"pattern_adapter","published":1,"updated":"2017-03-08T12:34:26.004Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5f60041qoq1ysqyuhup","content":"","excerpt":"","more":""},{"title":"责任链模式(Chain of Responsibility)","date":"2016-12-05T10:43:49.000Z","_content":"### 什么是责任链\n\n责任链，顾名思义就是将责任以链的形式连接起来，什么是责任，我们可以理解为，对某件事情进行操作，专业一点说就是使多个对象都能对同一对象进行操作，我们每个对象都有下一对象的引用，直到链上的某一个对象处理此请求，但客户并不知道是哪个对象进行处理的，这使得系统可以在不影响客户端的情况下动态地重新组织和分配责任。\n\n责任链模式一个很重要的应用就是对Servlet，request的操作\n\n<!--more-->\n\n### 责任链所涉及的角色\n\n抽象处理者 ： 定义请求接口，一般用抽象类或接口实现\n具体处理者 ： 具体实现接口的实现者\n\n### 纯的责任链模式\n\n传统的责任链模式就是被处理对象会被多个对象处理，直到有一个对其进行处理就结束。举一个很简单的例子：公司聚餐费用申请，小组长假设只能批500以内，部门经理可以批1000，而CEO则可以任意额度\n\n下面就对小马虎的申请额度进行审核\n\n#### 抽象处理\n``` java\n\tpackage cn.sakuraffy.cor;\n\n\tpublic interface SimpleFilter {\n\t\tboolean doFilter(int num) ;\n\t}\n```\n\n#### 小组长处理\n``` java\n\tpackage cn.sakuraffy.cor;\n\n\tpublic class GroupFilter implements SimpleFilter {\n\t\tprivate SimpleFilter next;\n\t\t\n\t\tpublic final SimpleFilter getNext() {\n\t\t\treturn next;\n\t\t}\n\t\tpublic final void setNext(SimpleFilter next) {                                        \n\t\t\tthis.next = next;\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic boolean doFilter(int num) {\n\t\t\tif(num < 500) {\n\t\t\t\tSystem.out.println(\"group deal\");\n\t\t\t\treturn true;\n\t\t\t}else {\n\t\t\t\treturn getNext().doFilter(num);\n\t\t\t}\n\t\t}\n\t}\n```\n\n#### 经理处理\n``` java\n\tpackage cn.sakuraffy.cor;\n\n\tpublic class ManagerFilter implements SimpleFilter {\n\t\tprivate SimpleFilter next;\n\t\t\n\t\t@Override\n\t\tpublic boolean doFilter(int num) {\n\t\t\tif(num < 1000) {\n\t\t\t\tSystem.out.println(\"manager deal\");\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn getNext().doFilter(num);\n\t\t}\n\n\t\tpublic final SimpleFilter getNext() {\n\t\t\treturn next;\n\t\t}\n\n\t\tpublic final void setNext(SimpleFilter next) {\n\t\t\tthis.next = next;\n\t\t}\n\t}\n```\n\n#### CEO处理\n``` java\n\tpackage cn.sakuraffy.cor;\n\n\tpublic class CEOFilter implements SimpleFilter {\n\t\tprivate SimpleFilter next;\n\t\t\n\t\t@Override\n\t\tpublic boolean doFilter(int num) {\n\t\t\tSystem.out.println(\"ceo deal\");\n\t\t\treturn true;\n\t\t}\n\n\t\tpublic final SimpleFilter getNext() {\n\t\t\treturn next;\n\t\t}\n\n\t\tpublic final void setNext(SimpleFilter next) {\n\t\t\tthis.next = next;\n\t\t}\n\t}\n```\n\n#### 小马虎的测试\n``` java\n\tpackage cn.sakuraffy.cor;\n\n\tpublic class SimpleClient {\n\t\tpublic static void main(String[] args) {\n\t\t\tint num = 800;\n\t\t\tGroupFilter gf = new GroupFilter();\n\t\t\tManagerFilter mf = new ManagerFilter();\n\t\t\tCEOFilter cf = new CEOFilter();\n\t\t\tgf.setNext(mf);\n\t\t\tmf.setNext(cf);\n\t\t\tSystem.out.println(gf.doFilter(num));\n\t\t}\n\t}\n```\n\n输出结果 ： \n``` java\nmanager deal\ntrue\n```\n\n源码解析 ：\n- 这里是为了演示过程，其实小马虎根本不知道是谁处理申请\n- 测试中将审核顺序自己设置，也可以在具体的实现中写死（不推荐）\n\n### 不纯的责任链\n\n下面简单模拟一下Servlet的request\n\n#### 抽象处理,FilterChain下面会介绍\n``` java \n\tpackage cn.sakuraffy.cor;\n\n\tpublic interface Filter {\n\t\tvoid doFilter(String request, String response, FilterChain chain);\n\t}\n```\n#### WorldFilter\n``` java\n\tpackage cn.sakuraffy.cor;\n\n\tpublic class WorldFilter implements Filter {\n\n\t\t@Override\n\t\tpublic void doFilter(String request, String response,FilterChain chain) {\n\t\t\trequest = request.replace(\"hello\", \"nihao\");\n\t\t\tSystem.out.println(request);\n\t\t\tSystem.out.println(\"WordFilter request\");\n\t\t\tchain.doFilter(request, response, chain);\n\t\t\tresponse = request.replace(\"nihao\", \"hello\");\n\t\t\tSystem.out.println(response);\n\t\t\tSystem.out.println(\"WordFilter response\");\n\t\t}\n\t\t\n\t}\n```\n#### NumberFilter\n``` java\n\tpackage cn.sakuraffy.cor;\n\n\tpublic class NumberFilter implements Filter {\n\t\t\n\t\t@Override\n\t\tpublic void doFilter(String request, String response, FilterChain chain) {\n\t\t\trequest = request.replace('6', '4');\n\t\t\tSystem.out.println(request);\n\t\t\tSystem.out.println(\"NumberFilter request\");\n\t\t\tchain.doFilter(request, response, chain);\n\t\t\tresponse = request.replace('4', '6');\n\t\t\tSystem.out.println(response);\n\t\t\tSystem.out.println(\"NumberFilter response\");\n\t\t}\n\n\t}\n```\n#### FilterChain,我们依然可以用引用下一个对象进行多个对象处理，但这里我们可以一下小小的改动，增加一个FilterChain专门用来管理Filter，同时它也实现Filter接口，而它的doFilter()则获取Filter，并调用该Filter相对应的doFilter()\n\n``` java\n\tpackage cn.sakuraffy.cor;\n\n\timport java.util.ArrayList;\n\timport java.util.List;\n\n\tpublic class FilterChain implements Filter {\n\t\tprivate int index = 0;\n\t\tprivate List<Filter> filters = new ArrayList<Filter>();\n\n\t\t@Override\n\t\tpublic void doFilter(String request, String response, FilterChain chain) {           \n\t\t\tif(index < filters.size()) {\n\t\t\t\tFilter filter = filters.get(index);\n\t\t\t\tindex ++;\n\t\t\t\tfilter.doFilter(request, response, chain);\n\t\t\t}\n\t\t}\n\t\t\n\t\t//链式编程\n\t\tpublic FilterChain add(Filter filter) {\n\t\t\tfilters.add(filter);\n\t\t\treturn this;\n\t\t}\n\t}\n```\n\n#### 小马虎的测试\n``` java\n\tpackage cn.sakuraffy.cor;\n\n\tpublic class Client {\n\t\tpublic static void main(String[] args) {\n\t\t\tString request = \"hello everyone 2016\";\n\t\t\tString response = \"\";\n\t\t\tNumberFilter nf = new NumberFilter();\n\t\t\tWorldFilter wf = new WorldFilter();\n\t\t\tFilterChain fc = new FilterChain();\n\t\t\tfc.add(nf).add(wf);\n\t\t\tfc.doFilter(request, response, fc);\n\t\t}\n\t}\n```\n\n输出结果 ：\n``` java\nhello everyone 2014\nNumberFilter request\nnihao everyone 2014\nWordFilter request\nhello everyone 2014\nWordFilter response\nhello everyone 2016\nNumberFilter response\n```\n\n源码解析 ：\n- FilterChain 里面的 index一定要是成员变量，并且使用后要自增，否则会抛出java.lang.StackOverflowError\n- public FilterChain add(Filter filter ) 采用的是链式编程，也可以不用，这里只是为了简便\n- 在具体的实现类都是调用FilterChain的doFilter(),因为已经将Filter加进FilterChain，我们只需要对链进行操作就行\n\n### 责任链的补充\n\n有时候，我们不需要太拘泥责任链的纯与否，也不要局限于设计模式的条条框框，跳出来可能看到更广阔的天空。我们最终的目的还是业务。另外说一下，过滤器和拦截器都是用的都是责任链模式，只是侧重点不同。\n","source":"_posts/pattern_chain.md","raw":"---\ntitle: 责任链模式(Chain of Responsibility)\ndate: 2016-12-05 18:43:49\ntags: \n\t- 设计模式\n---\n### 什么是责任链\n\n责任链，顾名思义就是将责任以链的形式连接起来，什么是责任，我们可以理解为，对某件事情进行操作，专业一点说就是使多个对象都能对同一对象进行操作，我们每个对象都有下一对象的引用，直到链上的某一个对象处理此请求，但客户并不知道是哪个对象进行处理的，这使得系统可以在不影响客户端的情况下动态地重新组织和分配责任。\n\n责任链模式一个很重要的应用就是对Servlet，request的操作\n\n<!--more-->\n\n### 责任链所涉及的角色\n\n抽象处理者 ： 定义请求接口，一般用抽象类或接口实现\n具体处理者 ： 具体实现接口的实现者\n\n### 纯的责任链模式\n\n传统的责任链模式就是被处理对象会被多个对象处理，直到有一个对其进行处理就结束。举一个很简单的例子：公司聚餐费用申请，小组长假设只能批500以内，部门经理可以批1000，而CEO则可以任意额度\n\n下面就对小马虎的申请额度进行审核\n\n#### 抽象处理\n``` java\n\tpackage cn.sakuraffy.cor;\n\n\tpublic interface SimpleFilter {\n\t\tboolean doFilter(int num) ;\n\t}\n```\n\n#### 小组长处理\n``` java\n\tpackage cn.sakuraffy.cor;\n\n\tpublic class GroupFilter implements SimpleFilter {\n\t\tprivate SimpleFilter next;\n\t\t\n\t\tpublic final SimpleFilter getNext() {\n\t\t\treturn next;\n\t\t}\n\t\tpublic final void setNext(SimpleFilter next) {                                        \n\t\t\tthis.next = next;\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic boolean doFilter(int num) {\n\t\t\tif(num < 500) {\n\t\t\t\tSystem.out.println(\"group deal\");\n\t\t\t\treturn true;\n\t\t\t}else {\n\t\t\t\treturn getNext().doFilter(num);\n\t\t\t}\n\t\t}\n\t}\n```\n\n#### 经理处理\n``` java\n\tpackage cn.sakuraffy.cor;\n\n\tpublic class ManagerFilter implements SimpleFilter {\n\t\tprivate SimpleFilter next;\n\t\t\n\t\t@Override\n\t\tpublic boolean doFilter(int num) {\n\t\t\tif(num < 1000) {\n\t\t\t\tSystem.out.println(\"manager deal\");\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn getNext().doFilter(num);\n\t\t}\n\n\t\tpublic final SimpleFilter getNext() {\n\t\t\treturn next;\n\t\t}\n\n\t\tpublic final void setNext(SimpleFilter next) {\n\t\t\tthis.next = next;\n\t\t}\n\t}\n```\n\n#### CEO处理\n``` java\n\tpackage cn.sakuraffy.cor;\n\n\tpublic class CEOFilter implements SimpleFilter {\n\t\tprivate SimpleFilter next;\n\t\t\n\t\t@Override\n\t\tpublic boolean doFilter(int num) {\n\t\t\tSystem.out.println(\"ceo deal\");\n\t\t\treturn true;\n\t\t}\n\n\t\tpublic final SimpleFilter getNext() {\n\t\t\treturn next;\n\t\t}\n\n\t\tpublic final void setNext(SimpleFilter next) {\n\t\t\tthis.next = next;\n\t\t}\n\t}\n```\n\n#### 小马虎的测试\n``` java\n\tpackage cn.sakuraffy.cor;\n\n\tpublic class SimpleClient {\n\t\tpublic static void main(String[] args) {\n\t\t\tint num = 800;\n\t\t\tGroupFilter gf = new GroupFilter();\n\t\t\tManagerFilter mf = new ManagerFilter();\n\t\t\tCEOFilter cf = new CEOFilter();\n\t\t\tgf.setNext(mf);\n\t\t\tmf.setNext(cf);\n\t\t\tSystem.out.println(gf.doFilter(num));\n\t\t}\n\t}\n```\n\n输出结果 ： \n``` java\nmanager deal\ntrue\n```\n\n源码解析 ：\n- 这里是为了演示过程，其实小马虎根本不知道是谁处理申请\n- 测试中将审核顺序自己设置，也可以在具体的实现中写死（不推荐）\n\n### 不纯的责任链\n\n下面简单模拟一下Servlet的request\n\n#### 抽象处理,FilterChain下面会介绍\n``` java \n\tpackage cn.sakuraffy.cor;\n\n\tpublic interface Filter {\n\t\tvoid doFilter(String request, String response, FilterChain chain);\n\t}\n```\n#### WorldFilter\n``` java\n\tpackage cn.sakuraffy.cor;\n\n\tpublic class WorldFilter implements Filter {\n\n\t\t@Override\n\t\tpublic void doFilter(String request, String response,FilterChain chain) {\n\t\t\trequest = request.replace(\"hello\", \"nihao\");\n\t\t\tSystem.out.println(request);\n\t\t\tSystem.out.println(\"WordFilter request\");\n\t\t\tchain.doFilter(request, response, chain);\n\t\t\tresponse = request.replace(\"nihao\", \"hello\");\n\t\t\tSystem.out.println(response);\n\t\t\tSystem.out.println(\"WordFilter response\");\n\t\t}\n\t\t\n\t}\n```\n#### NumberFilter\n``` java\n\tpackage cn.sakuraffy.cor;\n\n\tpublic class NumberFilter implements Filter {\n\t\t\n\t\t@Override\n\t\tpublic void doFilter(String request, String response, FilterChain chain) {\n\t\t\trequest = request.replace('6', '4');\n\t\t\tSystem.out.println(request);\n\t\t\tSystem.out.println(\"NumberFilter request\");\n\t\t\tchain.doFilter(request, response, chain);\n\t\t\tresponse = request.replace('4', '6');\n\t\t\tSystem.out.println(response);\n\t\t\tSystem.out.println(\"NumberFilter response\");\n\t\t}\n\n\t}\n```\n#### FilterChain,我们依然可以用引用下一个对象进行多个对象处理，但这里我们可以一下小小的改动，增加一个FilterChain专门用来管理Filter，同时它也实现Filter接口，而它的doFilter()则获取Filter，并调用该Filter相对应的doFilter()\n\n``` java\n\tpackage cn.sakuraffy.cor;\n\n\timport java.util.ArrayList;\n\timport java.util.List;\n\n\tpublic class FilterChain implements Filter {\n\t\tprivate int index = 0;\n\t\tprivate List<Filter> filters = new ArrayList<Filter>();\n\n\t\t@Override\n\t\tpublic void doFilter(String request, String response, FilterChain chain) {           \n\t\t\tif(index < filters.size()) {\n\t\t\t\tFilter filter = filters.get(index);\n\t\t\t\tindex ++;\n\t\t\t\tfilter.doFilter(request, response, chain);\n\t\t\t}\n\t\t}\n\t\t\n\t\t//链式编程\n\t\tpublic FilterChain add(Filter filter) {\n\t\t\tfilters.add(filter);\n\t\t\treturn this;\n\t\t}\n\t}\n```\n\n#### 小马虎的测试\n``` java\n\tpackage cn.sakuraffy.cor;\n\n\tpublic class Client {\n\t\tpublic static void main(String[] args) {\n\t\t\tString request = \"hello everyone 2016\";\n\t\t\tString response = \"\";\n\t\t\tNumberFilter nf = new NumberFilter();\n\t\t\tWorldFilter wf = new WorldFilter();\n\t\t\tFilterChain fc = new FilterChain();\n\t\t\tfc.add(nf).add(wf);\n\t\t\tfc.doFilter(request, response, fc);\n\t\t}\n\t}\n```\n\n输出结果 ：\n``` java\nhello everyone 2014\nNumberFilter request\nnihao everyone 2014\nWordFilter request\nhello everyone 2014\nWordFilter response\nhello everyone 2016\nNumberFilter response\n```\n\n源码解析 ：\n- FilterChain 里面的 index一定要是成员变量，并且使用后要自增，否则会抛出java.lang.StackOverflowError\n- public FilterChain add(Filter filter ) 采用的是链式编程，也可以不用，这里只是为了简便\n- 在具体的实现类都是调用FilterChain的doFilter(),因为已经将Filter加进FilterChain，我们只需要对链进行操作就行\n\n### 责任链的补充\n\n有时候，我们不需要太拘泥责任链的纯与否，也不要局限于设计模式的条条框框，跳出来可能看到更广阔的天空。我们最终的目的还是业务。另外说一下，过滤器和拦截器都是用的都是责任链模式，只是侧重点不同。\n","slug":"pattern_chain","published":1,"updated":"2017-03-08T12:37:02.455Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5f90044qoq1iuyc1nua","content":"<h3 id=\"什么是责任链\"><a href=\"#什么是责任链\" class=\"headerlink\" title=\"什么是责任链\"></a>什么是责任链</h3><p>责任链，顾名思义就是将责任以链的形式连接起来，什么是责任，我们可以理解为，对某件事情进行操作，专业一点说就是使多个对象都能对同一对象进行操作，我们每个对象都有下一对象的引用，直到链上的某一个对象处理此请求，但客户并不知道是哪个对象进行处理的，这使得系统可以在不影响客户端的情况下动态地重新组织和分配责任。</p>\n<p>责任链模式一个很重要的应用就是对Servlet，request的操作</p>\n<a id=\"more\"></a>\n<h3 id=\"责任链所涉及的角色\"><a href=\"#责任链所涉及的角色\" class=\"headerlink\" title=\"责任链所涉及的角色\"></a>责任链所涉及的角色</h3><p>抽象处理者 ： 定义请求接口，一般用抽象类或接口实现<br>具体处理者 ： 具体实现接口的实现者</p>\n<h3 id=\"纯的责任链模式\"><a href=\"#纯的责任链模式\" class=\"headerlink\" title=\"纯的责任链模式\"></a>纯的责任链模式</h3><p>传统的责任链模式就是被处理对象会被多个对象处理，直到有一个对其进行处理就结束。举一个很简单的例子：公司聚餐费用申请，小组长假设只能批500以内，部门经理可以批1000，而CEO则可以任意额度</p>\n<p>下面就对小马虎的申请额度进行审核</p>\n<h4 id=\"抽象处理\"><a href=\"#抽象处理\" class=\"headerlink\" title=\"抽象处理\"></a>抽象处理</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.cor;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">SimpleFilter</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">doFilter</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"小组长处理\"><a href=\"#小组长处理\" class=\"headerlink\" title=\"小组长处理\"></a>小组长处理</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.cor;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GroupFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">SimpleFilter</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> SimpleFilter next;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> SimpleFilter <span class=\"title\">getNext</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> next;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setNext</span><span class=\"params\">(SimpleFilter next)</span> </span>&#123;                                        </div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.next = next;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">doFilter</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(num &lt; <span class=\"number\">500</span>) &#123;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"group deal\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> getNext().doFilter(num);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"经理处理\"><a href=\"#经理处理\" class=\"headerlink\" title=\"经理处理\"></a>经理处理</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.cor;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ManagerFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">SimpleFilter</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> SimpleFilter next;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">doFilter</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(num &lt; <span class=\"number\">1000</span>) &#123;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"manager deal\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> getNext().doFilter(num);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> SimpleFilter <span class=\"title\">getNext</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> next;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setNext</span><span class=\"params\">(SimpleFilter next)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.next = next;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"CEO处理\"><a href=\"#CEO处理\" class=\"headerlink\" title=\"CEO处理\"></a>CEO处理</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.cor;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CEOFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">SimpleFilter</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> SimpleFilter next;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">doFilter</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"ceo deal\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> SimpleFilter <span class=\"title\">getNext</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> next;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setNext</span><span class=\"params\">(SimpleFilter next)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.next = next;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"小马虎的测试\"><a href=\"#小马虎的测试\" class=\"headerlink\" title=\"小马虎的测试\"></a>小马虎的测试</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.cor;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleClient</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> num = <span class=\"number\">800</span>;</div><div class=\"line\">\t\tGroupFilter gf = <span class=\"keyword\">new</span> GroupFilter();</div><div class=\"line\">\t\tManagerFilter mf = <span class=\"keyword\">new</span> ManagerFilter();</div><div class=\"line\">\t\tCEOFilter cf = <span class=\"keyword\">new</span> CEOFilter();</div><div class=\"line\">\t\tgf.setNext(mf);</div><div class=\"line\">\t\tmf.setNext(cf);</div><div class=\"line\">\t\tSystem.out.println(gf.doFilter(num));</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">manager deal</div><div class=\"line\"><span class=\"keyword\">true</span></div></pre></td></tr></table></figure></p>\n<p>源码解析 ：</p>\n<ul>\n<li>这里是为了演示过程，其实小马虎根本不知道是谁处理申请</li>\n<li>测试中将审核顺序自己设置，也可以在具体的实现中写死（不推荐）</li>\n</ul>\n<h3 id=\"不纯的责任链\"><a href=\"#不纯的责任链\" class=\"headerlink\" title=\"不纯的责任链\"></a>不纯的责任链</h3><p>下面简单模拟一下Servlet的request</p>\n<h4 id=\"抽象处理-FilterChain下面会介绍\"><a href=\"#抽象处理-FilterChain下面会介绍\" class=\"headerlink\" title=\"抽象处理,FilterChain下面会介绍\"></a>抽象处理,FilterChain下面会介绍</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.cor;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Filter</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(String request, String response, FilterChain chain)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"WorldFilter\"><a href=\"#WorldFilter\" class=\"headerlink\" title=\"WorldFilter\"></a>WorldFilter</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.cor;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WorldFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(String request, String response,FilterChain chain)</span> </span>&#123;</div><div class=\"line\">\t\trequest = request.replace(<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"nihao\"</span>);</div><div class=\"line\">\t\tSystem.out.println(request);</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"WordFilter request\"</span>);</div><div class=\"line\">\t\tchain.doFilter(request, response, chain);</div><div class=\"line\">\t\tresponse = request.replace(<span class=\"string\">\"nihao\"</span>, <span class=\"string\">\"hello\"</span>);</div><div class=\"line\">\t\tSystem.out.println(response);</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"WordFilter response\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"NumberFilter\"><a href=\"#NumberFilter\" class=\"headerlink\" title=\"NumberFilter\"></a>NumberFilter</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.cor;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NumberFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(String request, String response, FilterChain chain)</span> </span>&#123;</div><div class=\"line\">\t\trequest = request.replace(<span class=\"string\">'6'</span>, <span class=\"string\">'4'</span>);</div><div class=\"line\">\t\tSystem.out.println(request);</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"NumberFilter request\"</span>);</div><div class=\"line\">\t\tchain.doFilter(request, response, chain);</div><div class=\"line\">\t\tresponse = request.replace(<span class=\"string\">'4'</span>, <span class=\"string\">'6'</span>);</div><div class=\"line\">\t\tSystem.out.println(response);</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"NumberFilter response\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"FilterChain-我们依然可以用引用下一个对象进行多个对象处理，但这里我们可以一下小小的改动，增加一个FilterChain专门用来管理Filter，同时它也实现Filter接口，而它的doFilter-则获取Filter，并调用该Filter相对应的doFilter\"><a href=\"#FilterChain-我们依然可以用引用下一个对象进行多个对象处理，但这里我们可以一下小小的改动，增加一个FilterChain专门用来管理Filter，同时它也实现Filter接口，而它的doFilter-则获取Filter，并调用该Filter相对应的doFilter\" class=\"headerlink\" title=\"FilterChain,我们依然可以用引用下一个对象进行多个对象处理，但这里我们可以一下小小的改动，增加一个FilterChain专门用来管理Filter，同时它也实现Filter接口，而它的doFilter()则获取Filter，并调用该Filter相对应的doFilter()\"></a>FilterChain,我们依然可以用引用下一个对象进行多个对象处理，但这里我们可以一下小小的改动，增加一个FilterChain专门用来管理Filter，同时它也实现Filter接口，而它的doFilter()则获取Filter，并调用该Filter相对应的doFilter()</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.cor;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FilterChain</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> List&lt;Filter&gt; filters = <span class=\"keyword\">new</span> ArrayList&lt;Filter&gt;();</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(String request, String response, FilterChain chain)</span> </span>&#123;           </div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(index &lt; filters.size()) &#123;</div><div class=\"line\">\t\t\tFilter filter = filters.get(index);</div><div class=\"line\">\t\t\tindex ++;</div><div class=\"line\">\t\t\tfilter.doFilter(request, response, chain);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//链式编程</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> FilterChain <span class=\"title\">add</span><span class=\"params\">(Filter filter)</span> </span>&#123;</div><div class=\"line\">\t\tfilters.add(filter);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"小马虎的测试-1\"><a href=\"#小马虎的测试-1\" class=\"headerlink\" title=\"小马虎的测试\"></a>小马虎的测试</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.cor;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tString request = <span class=\"string\">\"hello everyone 2016\"</span>;</div><div class=\"line\">\t\tString response = <span class=\"string\">\"\"</span>;</div><div class=\"line\">\t\tNumberFilter nf = <span class=\"keyword\">new</span> NumberFilter();</div><div class=\"line\">\t\tWorldFilter wf = <span class=\"keyword\">new</span> WorldFilter();</div><div class=\"line\">\t\tFilterChain fc = <span class=\"keyword\">new</span> FilterChain();</div><div class=\"line\">\t\tfc.add(nf).add(wf);</div><div class=\"line\">\t\tfc.doFilter(request, response, fc);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">hello everyone <span class=\"number\">2014</span></div><div class=\"line\">NumberFilter request</div><div class=\"line\">nihao everyone <span class=\"number\">2014</span></div><div class=\"line\">WordFilter request</div><div class=\"line\">hello everyone <span class=\"number\">2014</span></div><div class=\"line\">WordFilter response</div><div class=\"line\">hello everyone <span class=\"number\">2016</span></div><div class=\"line\">NumberFilter response</div></pre></td></tr></table></figure></p>\n<p>源码解析 ：</p>\n<ul>\n<li>FilterChain 里面的 index一定要是成员变量，并且使用后要自增，否则会抛出java.lang.StackOverflowError</li>\n<li>public FilterChain add(Filter filter ) 采用的是链式编程，也可以不用，这里只是为了简便</li>\n<li>在具体的实现类都是调用FilterChain的doFilter(),因为已经将Filter加进FilterChain，我们只需要对链进行操作就行</li>\n</ul>\n<h3 id=\"责任链的补充\"><a href=\"#责任链的补充\" class=\"headerlink\" title=\"责任链的补充\"></a>责任链的补充</h3><p>有时候，我们不需要太拘泥责任链的纯与否，也不要局限于设计模式的条条框框，跳出来可能看到更广阔的天空。我们最终的目的还是业务。另外说一下，过滤器和拦截器都是用的都是责任链模式，只是侧重点不同。</p>\n","excerpt":"<h3 id=\"什么是责任链\"><a href=\"#什么是责任链\" class=\"headerlink\" title=\"什么是责任链\"></a>什么是责任链</h3><p>责任链，顾名思义就是将责任以链的形式连接起来，什么是责任，我们可以理解为，对某件事情进行操作，专业一点说就是使多个对象都能对同一对象进行操作，我们每个对象都有下一对象的引用，直到链上的某一个对象处理此请求，但客户并不知道是哪个对象进行处理的，这使得系统可以在不影响客户端的情况下动态地重新组织和分配责任。</p>\n<p>责任链模式一个很重要的应用就是对Servlet，request的操作</p>","more":"<h3 id=\"责任链所涉及的角色\"><a href=\"#责任链所涉及的角色\" class=\"headerlink\" title=\"责任链所涉及的角色\"></a>责任链所涉及的角色</h3><p>抽象处理者 ： 定义请求接口，一般用抽象类或接口实现<br>具体处理者 ： 具体实现接口的实现者</p>\n<h3 id=\"纯的责任链模式\"><a href=\"#纯的责任链模式\" class=\"headerlink\" title=\"纯的责任链模式\"></a>纯的责任链模式</h3><p>传统的责任链模式就是被处理对象会被多个对象处理，直到有一个对其进行处理就结束。举一个很简单的例子：公司聚餐费用申请，小组长假设只能批500以内，部门经理可以批1000，而CEO则可以任意额度</p>\n<p>下面就对小马虎的申请额度进行审核</p>\n<h4 id=\"抽象处理\"><a href=\"#抽象处理\" class=\"headerlink\" title=\"抽象处理\"></a>抽象处理</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.cor;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">SimpleFilter</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">doFilter</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"小组长处理\"><a href=\"#小组长处理\" class=\"headerlink\" title=\"小组长处理\"></a>小组长处理</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.cor;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GroupFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">SimpleFilter</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> SimpleFilter next;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> SimpleFilter <span class=\"title\">getNext</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> next;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setNext</span><span class=\"params\">(SimpleFilter next)</span> </span>&#123;                                        </div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.next = next;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">doFilter</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(num &lt; <span class=\"number\">500</span>) &#123;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"group deal\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> getNext().doFilter(num);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"经理处理\"><a href=\"#经理处理\" class=\"headerlink\" title=\"经理处理\"></a>经理处理</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.cor;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ManagerFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">SimpleFilter</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> SimpleFilter next;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">doFilter</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(num &lt; <span class=\"number\">1000</span>) &#123;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"manager deal\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> getNext().doFilter(num);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> SimpleFilter <span class=\"title\">getNext</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> next;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setNext</span><span class=\"params\">(SimpleFilter next)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.next = next;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"CEO处理\"><a href=\"#CEO处理\" class=\"headerlink\" title=\"CEO处理\"></a>CEO处理</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.cor;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CEOFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">SimpleFilter</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> SimpleFilter next;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">doFilter</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"ceo deal\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> SimpleFilter <span class=\"title\">getNext</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> next;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setNext</span><span class=\"params\">(SimpleFilter next)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.next = next;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"小马虎的测试\"><a href=\"#小马虎的测试\" class=\"headerlink\" title=\"小马虎的测试\"></a>小马虎的测试</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.cor;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleClient</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> num = <span class=\"number\">800</span>;</div><div class=\"line\">\t\tGroupFilter gf = <span class=\"keyword\">new</span> GroupFilter();</div><div class=\"line\">\t\tManagerFilter mf = <span class=\"keyword\">new</span> ManagerFilter();</div><div class=\"line\">\t\tCEOFilter cf = <span class=\"keyword\">new</span> CEOFilter();</div><div class=\"line\">\t\tgf.setNext(mf);</div><div class=\"line\">\t\tmf.setNext(cf);</div><div class=\"line\">\t\tSystem.out.println(gf.doFilter(num));</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">manager deal</div><div class=\"line\"><span class=\"keyword\">true</span></div></pre></td></tr></table></figure></p>\n<p>源码解析 ：</p>\n<ul>\n<li>这里是为了演示过程，其实小马虎根本不知道是谁处理申请</li>\n<li>测试中将审核顺序自己设置，也可以在具体的实现中写死（不推荐）</li>\n</ul>\n<h3 id=\"不纯的责任链\"><a href=\"#不纯的责任链\" class=\"headerlink\" title=\"不纯的责任链\"></a>不纯的责任链</h3><p>下面简单模拟一下Servlet的request</p>\n<h4 id=\"抽象处理-FilterChain下面会介绍\"><a href=\"#抽象处理-FilterChain下面会介绍\" class=\"headerlink\" title=\"抽象处理,FilterChain下面会介绍\"></a>抽象处理,FilterChain下面会介绍</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.cor;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Filter</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(String request, String response, FilterChain chain)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"WorldFilter\"><a href=\"#WorldFilter\" class=\"headerlink\" title=\"WorldFilter\"></a>WorldFilter</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.cor;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WorldFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(String request, String response,FilterChain chain)</span> </span>&#123;</div><div class=\"line\">\t\trequest = request.replace(<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"nihao\"</span>);</div><div class=\"line\">\t\tSystem.out.println(request);</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"WordFilter request\"</span>);</div><div class=\"line\">\t\tchain.doFilter(request, response, chain);</div><div class=\"line\">\t\tresponse = request.replace(<span class=\"string\">\"nihao\"</span>, <span class=\"string\">\"hello\"</span>);</div><div class=\"line\">\t\tSystem.out.println(response);</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"WordFilter response\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"NumberFilter\"><a href=\"#NumberFilter\" class=\"headerlink\" title=\"NumberFilter\"></a>NumberFilter</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.cor;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NumberFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(String request, String response, FilterChain chain)</span> </span>&#123;</div><div class=\"line\">\t\trequest = request.replace(<span class=\"string\">'6'</span>, <span class=\"string\">'4'</span>);</div><div class=\"line\">\t\tSystem.out.println(request);</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"NumberFilter request\"</span>);</div><div class=\"line\">\t\tchain.doFilter(request, response, chain);</div><div class=\"line\">\t\tresponse = request.replace(<span class=\"string\">'4'</span>, <span class=\"string\">'6'</span>);</div><div class=\"line\">\t\tSystem.out.println(response);</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"NumberFilter response\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"FilterChain-我们依然可以用引用下一个对象进行多个对象处理，但这里我们可以一下小小的改动，增加一个FilterChain专门用来管理Filter，同时它也实现Filter接口，而它的doFilter-则获取Filter，并调用该Filter相对应的doFilter\"><a href=\"#FilterChain-我们依然可以用引用下一个对象进行多个对象处理，但这里我们可以一下小小的改动，增加一个FilterChain专门用来管理Filter，同时它也实现Filter接口，而它的doFilter-则获取Filter，并调用该Filter相对应的doFilter\" class=\"headerlink\" title=\"FilterChain,我们依然可以用引用下一个对象进行多个对象处理，但这里我们可以一下小小的改动，增加一个FilterChain专门用来管理Filter，同时它也实现Filter接口，而它的doFilter()则获取Filter，并调用该Filter相对应的doFilter()\"></a>FilterChain,我们依然可以用引用下一个对象进行多个对象处理，但这里我们可以一下小小的改动，增加一个FilterChain专门用来管理Filter，同时它也实现Filter接口，而它的doFilter()则获取Filter，并调用该Filter相对应的doFilter()</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.cor;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FilterChain</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> List&lt;Filter&gt; filters = <span class=\"keyword\">new</span> ArrayList&lt;Filter&gt;();</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(String request, String response, FilterChain chain)</span> </span>&#123;           </div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(index &lt; filters.size()) &#123;</div><div class=\"line\">\t\t\tFilter filter = filters.get(index);</div><div class=\"line\">\t\t\tindex ++;</div><div class=\"line\">\t\t\tfilter.doFilter(request, response, chain);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//链式编程</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> FilterChain <span class=\"title\">add</span><span class=\"params\">(Filter filter)</span> </span>&#123;</div><div class=\"line\">\t\tfilters.add(filter);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"小马虎的测试-1\"><a href=\"#小马虎的测试-1\" class=\"headerlink\" title=\"小马虎的测试\"></a>小马虎的测试</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.cor;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tString request = <span class=\"string\">\"hello everyone 2016\"</span>;</div><div class=\"line\">\t\tString response = <span class=\"string\">\"\"</span>;</div><div class=\"line\">\t\tNumberFilter nf = <span class=\"keyword\">new</span> NumberFilter();</div><div class=\"line\">\t\tWorldFilter wf = <span class=\"keyword\">new</span> WorldFilter();</div><div class=\"line\">\t\tFilterChain fc = <span class=\"keyword\">new</span> FilterChain();</div><div class=\"line\">\t\tfc.add(nf).add(wf);</div><div class=\"line\">\t\tfc.doFilter(request, response, fc);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">hello everyone <span class=\"number\">2014</span></div><div class=\"line\">NumberFilter request</div><div class=\"line\">nihao everyone <span class=\"number\">2014</span></div><div class=\"line\">WordFilter request</div><div class=\"line\">hello everyone <span class=\"number\">2014</span></div><div class=\"line\">WordFilter response</div><div class=\"line\">hello everyone <span class=\"number\">2016</span></div><div class=\"line\">NumberFilter response</div></pre></td></tr></table></figure></p>\n<p>源码解析 ：</p>\n<ul>\n<li>FilterChain 里面的 index一定要是成员变量，并且使用后要自增，否则会抛出java.lang.StackOverflowError</li>\n<li>public FilterChain add(Filter filter ) 采用的是链式编程，也可以不用，这里只是为了简便</li>\n<li>在具体的实现类都是调用FilterChain的doFilter(),因为已经将Filter加进FilterChain，我们只需要对链进行操作就行</li>\n</ul>\n<h3 id=\"责任链的补充\"><a href=\"#责任链的补充\" class=\"headerlink\" title=\"责任链的补充\"></a>责任链的补充</h3><p>有时候，我们不需要太拘泥责任链的纯与否，也不要局限于设计模式的条条框框，跳出来可能看到更广阔的天空。我们最终的目的还是业务。另外说一下，过滤器和拦截器都是用的都是责任链模式，只是侧重点不同。</p>"},{"title":"装饰者模式(Decorator)","date":"2017-01-23T08:04:50.000Z","_content":"","source":"_posts/pattern_decorator.md","raw":"---\ntitle: 装饰者模式(Decorator)\ndate: 2017-01-23 16:04:50\ntags:\n\t- 设计模式\n---\n","slug":"pattern_decorator","published":1,"updated":"2017-03-08T12:33:34.011Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5fa0046qoq1lvzpbjl6","content":"","excerpt":"","more":""},{"title":"享元模式(Flyweight)","date":"2016-12-21T07:14:28.000Z","_content":"在实际开发中，大量的对象存在，有可能会产生内存溢出，有时候，相同的业务，我们只需要调用内存中已有的对象完成，而不需要创建新的对象，这时候，我们就可以使用享元模式。所谓享元模式就是运行共享技术有效地支持大量细粒度对象的复用。在说到享元模式之前，我们先来了解两个概念\n\n- 内部状态 ： 不受外部环境改变而改变的共享部分\n- 外部状态 ： 由客户端控制不共享部分\n\n<!--more-->\n\n### 享元模式的UML和角色\n\n{% qnimg pattern/flyweight/p1.jpg 'class:class1 class2' normal:yes %}\n\n- Flyweight : 抽象享元类。规定出所有具体享元角色需要实现的方法\n- ConcreteFlyweight : 具体享元类。指定内部状态，为内部状态增加存储空间 \n- UnsharedConcreteFlyweight : 非共享具体享元类。指出那些不需要共享的Flyweight子类（一般不怎么用）\n- FlyweightFactory : 享元工厂类。用来创建并管理Flyweight对象，它主要用来确保合理地共享Flyweight，当用户请求一个Flyweight时，若存在则返回对象，反之则创建新对象并返回\n\n### 享元模式的实现\n\n#### Flyweight\n``` java\n\tpackage cn.sakuraffy.flyweight;\n\n\tpublic interface Flyweight {\n\t\tvoid draw();\n\t}\n```\n#### ConcreteFlyweight\n``` java\n\tpackage cn.sakuraffy.flyweight;\n\n\t//这里以画方块为例\n\tpublic class ConcreteFlyweight implements Flyweight {\n\t\tprivate int width;\n\t\tprivate int hight;\n\t\tprivate Color color;\n\t\t\n\t\tprivate ConcreteFlyweight(int width, int hight) {\n\t\t\tsuper();\n\t\t\tthis.width = width;\n\t\t\tthis.hight = hight;\n\t\t}\n\t\t\n\t\t//构造时，客户端只能控制颜色\n\t\tpublic ConcreteFlyweight(Color color) {\n\t\t\tthis(1,3);\n\t\t\tthis.color = color;\n\t\t}\n\n\t\tpublic final int getWidth() {\n\t\t\treturn width;\n\t\t}\n\n\t\tpublic final int getHight() {\n\t\t\treturn hight;\n\t\t}\n\n\t\tpublic final Color getColor() {\n\t\t\treturn color;\n\t\t}\n\n\t\tpublic final void setColor(Color color) {\n\t\t\tthis.color = color;\n\t\t}\n\n\t\t//打印方块属性\n\t\t@Override\n\t\tpublic void draw() {\n\t\t\tSystem.out.println(\"color =\" + color + \" width=\" + width + \" hight=\" + hight);\n\t\t}\t\n\t}\n```\n#### 枚举型的颜色，当然，也可以用String代替\n``` java\n\tpackage cn.sakuraffy.flyweight;\n\n\tpublic enum Color {\n\t\tYELLOW,BLUE,GREEN,RED\n\t}\n```\n#### ConcreteFlyweight\n``` java\n\tpackage cn.sakuraffy.flyweight;\n\n\timport java.util.HashMap;\n\n\tpublic class FlyweightFactory {\n\t\tprivate HashMap<Color,Flyweight> flyweights = new HashMap<>();\n\t\t\n\t\tpublic Flyweight getFlyweight(Color color) {\n\t\t\tFlyweight fw = flyweights.get(color);\n\t\t\tif (fw == null) {\n\t\t\t\tfw = new ConcreteFlyweight(color);\n\t\t\t\tflyweights.put(color, fw);\n\t\t\t}\n\t\t\treturn fw;\n\t\t}\n\t}\n```\n#### Client\n``` java\n\tpackage cn.sakuraffy.flyweight;\n\n\tpublic class Client {\n\t\tpublic static void main(String[] args) {\n\t\t\tFlyweightFactory ff = new FlyweightFactory();\n\t\t\tFlyweight bf = ff.getFlyweight(Color.BLUE);\n\t\t\tFlyweight bf1 = ff.getFlyweight(Color.BLUE);\n\t\t\tFlyweight rf = ff.getFlyweight(Color.RED);\n\t\t\tbf.draw();\n\t\t\tbf1.draw();\n\t\t\trf.draw();\n\t\t\tSystem.out.println(bf == bf1);\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\ncolor =BLUE width=1 hight=3\ncolor =BLUE width=1 hight=3\ncolor =RED width=1 hight=3\ntrue\n```\n\n### 享元模式的优缺点\n\n- 优点 ： 降低内存中对象的数量\n- 缺点 ： 使其程序逻辑异常复杂\n\n### 享元模式在JDK中的应用\n\nJDK中的String类就很好的使用了享元模式，下面看一下实例\n``` java\n\tpackage cn.sakuraffy.flyweight;\n\n\tpublic class StringDemo {\n\t\tpublic static void main(String[] args) {\n\t\t\tString s1 = \"abc\";\n\t\t\tString s2 = new String(\"abc\"); \n\t\t\tSystem.out.println(s1 == s2);   //false\n\t\t\tSystem.out.println(s1.intern() == s2.intern()); //true\n\t\t}\n\t}\n```\nString中每使用一个字符串都会创建一个String对象，而intern()方法则是通过对象引用去找到那个对象","source":"_posts/pattern_flyweight.md","raw":"---\ntitle: 享元模式(Flyweight)\ndate: 2016-12-21 15:14:28\ntags:\n\t- 设计模式\n---\n在实际开发中，大量的对象存在，有可能会产生内存溢出，有时候，相同的业务，我们只需要调用内存中已有的对象完成，而不需要创建新的对象，这时候，我们就可以使用享元模式。所谓享元模式就是运行共享技术有效地支持大量细粒度对象的复用。在说到享元模式之前，我们先来了解两个概念\n\n- 内部状态 ： 不受外部环境改变而改变的共享部分\n- 外部状态 ： 由客户端控制不共享部分\n\n<!--more-->\n\n### 享元模式的UML和角色\n\n{% qnimg pattern/flyweight/p1.jpg 'class:class1 class2' normal:yes %}\n\n- Flyweight : 抽象享元类。规定出所有具体享元角色需要实现的方法\n- ConcreteFlyweight : 具体享元类。指定内部状态，为内部状态增加存储空间 \n- UnsharedConcreteFlyweight : 非共享具体享元类。指出那些不需要共享的Flyweight子类（一般不怎么用）\n- FlyweightFactory : 享元工厂类。用来创建并管理Flyweight对象，它主要用来确保合理地共享Flyweight，当用户请求一个Flyweight时，若存在则返回对象，反之则创建新对象并返回\n\n### 享元模式的实现\n\n#### Flyweight\n``` java\n\tpackage cn.sakuraffy.flyweight;\n\n\tpublic interface Flyweight {\n\t\tvoid draw();\n\t}\n```\n#### ConcreteFlyweight\n``` java\n\tpackage cn.sakuraffy.flyweight;\n\n\t//这里以画方块为例\n\tpublic class ConcreteFlyweight implements Flyweight {\n\t\tprivate int width;\n\t\tprivate int hight;\n\t\tprivate Color color;\n\t\t\n\t\tprivate ConcreteFlyweight(int width, int hight) {\n\t\t\tsuper();\n\t\t\tthis.width = width;\n\t\t\tthis.hight = hight;\n\t\t}\n\t\t\n\t\t//构造时，客户端只能控制颜色\n\t\tpublic ConcreteFlyweight(Color color) {\n\t\t\tthis(1,3);\n\t\t\tthis.color = color;\n\t\t}\n\n\t\tpublic final int getWidth() {\n\t\t\treturn width;\n\t\t}\n\n\t\tpublic final int getHight() {\n\t\t\treturn hight;\n\t\t}\n\n\t\tpublic final Color getColor() {\n\t\t\treturn color;\n\t\t}\n\n\t\tpublic final void setColor(Color color) {\n\t\t\tthis.color = color;\n\t\t}\n\n\t\t//打印方块属性\n\t\t@Override\n\t\tpublic void draw() {\n\t\t\tSystem.out.println(\"color =\" + color + \" width=\" + width + \" hight=\" + hight);\n\t\t}\t\n\t}\n```\n#### 枚举型的颜色，当然，也可以用String代替\n``` java\n\tpackage cn.sakuraffy.flyweight;\n\n\tpublic enum Color {\n\t\tYELLOW,BLUE,GREEN,RED\n\t}\n```\n#### ConcreteFlyweight\n``` java\n\tpackage cn.sakuraffy.flyweight;\n\n\timport java.util.HashMap;\n\n\tpublic class FlyweightFactory {\n\t\tprivate HashMap<Color,Flyweight> flyweights = new HashMap<>();\n\t\t\n\t\tpublic Flyweight getFlyweight(Color color) {\n\t\t\tFlyweight fw = flyweights.get(color);\n\t\t\tif (fw == null) {\n\t\t\t\tfw = new ConcreteFlyweight(color);\n\t\t\t\tflyweights.put(color, fw);\n\t\t\t}\n\t\t\treturn fw;\n\t\t}\n\t}\n```\n#### Client\n``` java\n\tpackage cn.sakuraffy.flyweight;\n\n\tpublic class Client {\n\t\tpublic static void main(String[] args) {\n\t\t\tFlyweightFactory ff = new FlyweightFactory();\n\t\t\tFlyweight bf = ff.getFlyweight(Color.BLUE);\n\t\t\tFlyweight bf1 = ff.getFlyweight(Color.BLUE);\n\t\t\tFlyweight rf = ff.getFlyweight(Color.RED);\n\t\t\tbf.draw();\n\t\t\tbf1.draw();\n\t\t\trf.draw();\n\t\t\tSystem.out.println(bf == bf1);\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\ncolor =BLUE width=1 hight=3\ncolor =BLUE width=1 hight=3\ncolor =RED width=1 hight=3\ntrue\n```\n\n### 享元模式的优缺点\n\n- 优点 ： 降低内存中对象的数量\n- 缺点 ： 使其程序逻辑异常复杂\n\n### 享元模式在JDK中的应用\n\nJDK中的String类就很好的使用了享元模式，下面看一下实例\n``` java\n\tpackage cn.sakuraffy.flyweight;\n\n\tpublic class StringDemo {\n\t\tpublic static void main(String[] args) {\n\t\t\tString s1 = \"abc\";\n\t\t\tString s2 = new String(\"abc\"); \n\t\t\tSystem.out.println(s1 == s2);   //false\n\t\t\tSystem.out.println(s1.intern() == s2.intern()); //true\n\t\t}\n\t}\n```\nString中每使用一个字符串都会创建一个String对象，而intern()方法则是通过对象引用去找到那个对象","slug":"pattern_flyweight","published":1,"updated":"2017-03-08T12:36:40.690Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5fc0049qoq1xcukb5gn","content":"<p>在实际开发中，大量的对象存在，有可能会产生内存溢出，有时候，相同的业务，我们只需要调用内存中已有的对象完成，而不需要创建新的对象，这时候，我们就可以使用享元模式。所谓享元模式就是运行共享技术有效地支持大量细粒度对象的复用。在说到享元模式之前，我们先来了解两个概念</p>\n<ul>\n<li>内部状态 ： 不受外部环境改变而改变的共享部分</li>\n<li>外部状态 ： 由客户端控制不共享部分</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"享元模式的UML和角色\"><a href=\"#享元模式的UML和角色\" class=\"headerlink\" title=\"享元模式的UML和角色\"></a>享元模式的UML和角色</h3><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/pattern/flyweight/p1.jpg\">\n<ul>\n<li>Flyweight : 抽象享元类。规定出所有具体享元角色需要实现的方法</li>\n<li>ConcreteFlyweight : 具体享元类。指定内部状态，为内部状态增加存储空间 </li>\n<li>UnsharedConcreteFlyweight : 非共享具体享元类。指出那些不需要共享的Flyweight子类（一般不怎么用）</li>\n<li>FlyweightFactory : 享元工厂类。用来创建并管理Flyweight对象，它主要用来确保合理地共享Flyweight，当用户请求一个Flyweight时，若存在则返回对象，反之则创建新对象并返回</li>\n</ul>\n<h3 id=\"享元模式的实现\"><a href=\"#享元模式的实现\" class=\"headerlink\" title=\"享元模式的实现\"></a>享元模式的实现</h3><h4 id=\"Flyweight\"><a href=\"#Flyweight\" class=\"headerlink\" title=\"Flyweight\"></a>Flyweight</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.flyweight;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Flyweight</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"ConcreteFlyweight\"><a href=\"#ConcreteFlyweight\" class=\"headerlink\" title=\"ConcreteFlyweight\"></a>ConcreteFlyweight</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.flyweight;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这里以画方块为例</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteFlyweight</span> <span class=\"keyword\">implements</span> <span class=\"title\">Flyweight</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> width;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> hight;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Color color;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ConcreteFlyweight</span><span class=\"params\">(<span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> hight)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.width = width;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.hight = hight;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//构造时，客户端只能控制颜色</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConcreteFlyweight</span><span class=\"params\">(Color color)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>(<span class=\"number\">1</span>,<span class=\"number\">3</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.color = color;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getWidth</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> width;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getHight</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> hight;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Color <span class=\"title\">getColor</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> color;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setColor</span><span class=\"params\">(Color color)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.color = color;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//打印方块属性</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"color =\"</span> + color + <span class=\"string\">\" width=\"</span> + width + <span class=\"string\">\" hight=\"</span> + hight);</div><div class=\"line\">\t&#125;\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"枚举型的颜色，当然，也可以用String代替\"><a href=\"#枚举型的颜色，当然，也可以用String代替\" class=\"headerlink\" title=\"枚举型的颜色，当然，也可以用String代替\"></a>枚举型的颜色，当然，也可以用String代替</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.flyweight;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Color &#123;</div><div class=\"line\">\tYELLOW,BLUE,GREEN,RED</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"ConcreteFlyweight-1\"><a href=\"#ConcreteFlyweight-1\" class=\"headerlink\" title=\"ConcreteFlyweight\"></a>ConcreteFlyweight</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.flyweight;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlyweightFactory</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> HashMap&lt;Color,Flyweight&gt; flyweights = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Flyweight <span class=\"title\">getFlyweight</span><span class=\"params\">(Color color)</span> </span>&#123;</div><div class=\"line\">\t\tFlyweight fw = flyweights.get(color);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (fw == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\tfw = <span class=\"keyword\">new</span> ConcreteFlyweight(color);</div><div class=\"line\">\t\t\tflyweights.put(color, fw);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> fw;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Client\"><a href=\"#Client\" class=\"headerlink\" title=\"Client\"></a>Client</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.flyweight;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tFlyweightFactory ff = <span class=\"keyword\">new</span> FlyweightFactory();</div><div class=\"line\">\t\tFlyweight bf = ff.getFlyweight(Color.BLUE);</div><div class=\"line\">\t\tFlyweight bf1 = ff.getFlyweight(Color.BLUE);</div><div class=\"line\">\t\tFlyweight rf = ff.getFlyweight(Color.RED);</div><div class=\"line\">\t\tbf.draw();</div><div class=\"line\">\t\tbf1.draw();</div><div class=\"line\">\t\trf.draw();</div><div class=\"line\">\t\tSystem.out.println(bf == bf1);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">color =BLUE width=<span class=\"number\">1</span> hight=<span class=\"number\">3</span></div><div class=\"line\">color =BLUE width=<span class=\"number\">1</span> hight=<span class=\"number\">3</span></div><div class=\"line\">color =RED width=<span class=\"number\">1</span> hight=<span class=\"number\">3</span></div><div class=\"line\"><span class=\"keyword\">true</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"享元模式的优缺点\"><a href=\"#享元模式的优缺点\" class=\"headerlink\" title=\"享元模式的优缺点\"></a>享元模式的优缺点</h3><ul>\n<li>优点 ： 降低内存中对象的数量</li>\n<li>缺点 ： 使其程序逻辑异常复杂</li>\n</ul>\n<h3 id=\"享元模式在JDK中的应用\"><a href=\"#享元模式在JDK中的应用\" class=\"headerlink\" title=\"享元模式在JDK中的应用\"></a>享元模式在JDK中的应用</h3><p>JDK中的String类就很好的使用了享元模式，下面看一下实例<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.flyweight;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringDemo</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tString s1 = <span class=\"string\">\"abc\"</span>;</div><div class=\"line\">\t\tString s2 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"abc\"</span>); </div><div class=\"line\">\t\tSystem.out.println(s1 == s2);   <span class=\"comment\">//false</span></div><div class=\"line\">\t\tSystem.out.println(s1.intern() == s2.intern()); <span class=\"comment\">//true</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>String中每使用一个字符串都会创建一个String对象，而intern()方法则是通过对象引用去找到那个对象</p>\n","excerpt":"<p>在实际开发中，大量的对象存在，有可能会产生内存溢出，有时候，相同的业务，我们只需要调用内存中已有的对象完成，而不需要创建新的对象，这时候，我们就可以使用享元模式。所谓享元模式就是运行共享技术有效地支持大量细粒度对象的复用。在说到享元模式之前，我们先来了解两个概念</p>\n<ul>\n<li>内部状态 ： 不受外部环境改变而改变的共享部分</li>\n<li>外部状态 ： 由客户端控制不共享部分</li>\n</ul>","more":"<h3 id=\"享元模式的UML和角色\"><a href=\"#享元模式的UML和角色\" class=\"headerlink\" title=\"享元模式的UML和角色\"></a>享元模式的UML和角色</h3><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/pattern/flyweight/p1.jpg\">\n<ul>\n<li>Flyweight : 抽象享元类。规定出所有具体享元角色需要实现的方法</li>\n<li>ConcreteFlyweight : 具体享元类。指定内部状态，为内部状态增加存储空间 </li>\n<li>UnsharedConcreteFlyweight : 非共享具体享元类。指出那些不需要共享的Flyweight子类（一般不怎么用）</li>\n<li>FlyweightFactory : 享元工厂类。用来创建并管理Flyweight对象，它主要用来确保合理地共享Flyweight，当用户请求一个Flyweight时，若存在则返回对象，反之则创建新对象并返回</li>\n</ul>\n<h3 id=\"享元模式的实现\"><a href=\"#享元模式的实现\" class=\"headerlink\" title=\"享元模式的实现\"></a>享元模式的实现</h3><h4 id=\"Flyweight\"><a href=\"#Flyweight\" class=\"headerlink\" title=\"Flyweight\"></a>Flyweight</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.flyweight;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Flyweight</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"ConcreteFlyweight\"><a href=\"#ConcreteFlyweight\" class=\"headerlink\" title=\"ConcreteFlyweight\"></a>ConcreteFlyweight</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.flyweight;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这里以画方块为例</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteFlyweight</span> <span class=\"keyword\">implements</span> <span class=\"title\">Flyweight</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> width;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> hight;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Color color;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ConcreteFlyweight</span><span class=\"params\">(<span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> hight)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.width = width;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.hight = hight;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//构造时，客户端只能控制颜色</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConcreteFlyweight</span><span class=\"params\">(Color color)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>(<span class=\"number\">1</span>,<span class=\"number\">3</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.color = color;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getWidth</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> width;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getHight</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> hight;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Color <span class=\"title\">getColor</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> color;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setColor</span><span class=\"params\">(Color color)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.color = color;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//打印方块属性</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"color =\"</span> + color + <span class=\"string\">\" width=\"</span> + width + <span class=\"string\">\" hight=\"</span> + hight);</div><div class=\"line\">\t&#125;\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"枚举型的颜色，当然，也可以用String代替\"><a href=\"#枚举型的颜色，当然，也可以用String代替\" class=\"headerlink\" title=\"枚举型的颜色，当然，也可以用String代替\"></a>枚举型的颜色，当然，也可以用String代替</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.flyweight;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Color &#123;</div><div class=\"line\">\tYELLOW,BLUE,GREEN,RED</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"ConcreteFlyweight-1\"><a href=\"#ConcreteFlyweight-1\" class=\"headerlink\" title=\"ConcreteFlyweight\"></a>ConcreteFlyweight</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.flyweight;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlyweightFactory</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> HashMap&lt;Color,Flyweight&gt; flyweights = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Flyweight <span class=\"title\">getFlyweight</span><span class=\"params\">(Color color)</span> </span>&#123;</div><div class=\"line\">\t\tFlyweight fw = flyweights.get(color);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (fw == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\tfw = <span class=\"keyword\">new</span> ConcreteFlyweight(color);</div><div class=\"line\">\t\t\tflyweights.put(color, fw);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> fw;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Client\"><a href=\"#Client\" class=\"headerlink\" title=\"Client\"></a>Client</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.flyweight;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tFlyweightFactory ff = <span class=\"keyword\">new</span> FlyweightFactory();</div><div class=\"line\">\t\tFlyweight bf = ff.getFlyweight(Color.BLUE);</div><div class=\"line\">\t\tFlyweight bf1 = ff.getFlyweight(Color.BLUE);</div><div class=\"line\">\t\tFlyweight rf = ff.getFlyweight(Color.RED);</div><div class=\"line\">\t\tbf.draw();</div><div class=\"line\">\t\tbf1.draw();</div><div class=\"line\">\t\trf.draw();</div><div class=\"line\">\t\tSystem.out.println(bf == bf1);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">color =BLUE width=<span class=\"number\">1</span> hight=<span class=\"number\">3</span></div><div class=\"line\">color =BLUE width=<span class=\"number\">1</span> hight=<span class=\"number\">3</span></div><div class=\"line\">color =RED width=<span class=\"number\">1</span> hight=<span class=\"number\">3</span></div><div class=\"line\"><span class=\"keyword\">true</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"享元模式的优缺点\"><a href=\"#享元模式的优缺点\" class=\"headerlink\" title=\"享元模式的优缺点\"></a>享元模式的优缺点</h3><ul>\n<li>优点 ： 降低内存中对象的数量</li>\n<li>缺点 ： 使其程序逻辑异常复杂</li>\n</ul>\n<h3 id=\"享元模式在JDK中的应用\"><a href=\"#享元模式在JDK中的应用\" class=\"headerlink\" title=\"享元模式在JDK中的应用\"></a>享元模式在JDK中的应用</h3><p>JDK中的String类就很好的使用了享元模式，下面看一下实例<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.flyweight;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringDemo</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tString s1 = <span class=\"string\">\"abc\"</span>;</div><div class=\"line\">\t\tString s2 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"abc\"</span>); </div><div class=\"line\">\t\tSystem.out.println(s1 == s2);   <span class=\"comment\">//false</span></div><div class=\"line\">\t\tSystem.out.println(s1.intern() == s2.intern()); <span class=\"comment\">//true</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>String中每使用一个字符串都会创建一个String对象，而intern()方法则是通过对象引用去找到那个对象</p>"},{"title":"工厂模式(Simple Factory + Factory Method + Abstract Factory)","date":"2016-11-29T11:06:13.000Z","_content":"Java有一个很重要的特性就是多态，简单来说多态就是引用变量所指向的引用对象在编译期时无法确定，只用在运行期才能动态绑定。而工厂模式与其有着相似的特征，只是工厂模式更加复杂化。一般来说工厂模式一般有三部分组成，分别为简单工厂，工厂方法，抽象工厂，其抽象程度也依次递增\n\n<!-- more -->\n\n### 简单工厂(Simple Factory)\n\n#### 简单工厂涉及的角色\n- 工厂类角色：这是本模式的核心，含有一定的判断逻辑\n- 抽象产品角色：它一般是具体产品继承的父类或者实现的接口\n- 具体产品角色：工厂类所创建的对象就是此角色的实例\n\n#### 简单工厂代码实现\n业务逻辑 ： 小米和努比亚的手机都实现打电话的功能\n##### 抽象产品\n``` java\npackage cn.sakuraffy.factory;\n\npublic interface Callable {\n\tpublic void call();\n}\n```\n\n##### 具体产品--Nubia的实现\n``` java\npackage cn.sakuraffy.factory;\n\npublic class Nubia implements Callable {\n\n\t@Override\n\tpublic void call() {\n\t\tSystem.out.println(\"Nubia call\");\n\t}\n}\n```\n\n##### 具体产品--Mi的实现\n``` java\npackage cn.sakuraffy.factory;\n\npublic class Mi implements Callable {\n\n\t@Override\n\tpublic void call() {\n\t\tSystem.out.println(\"Mi call\");\n\t}\n}\n```\n\n##### 工厂\n``` java\npackage cn.sakuraffy.factory;\n\npublic class SimpleFactory {\n\tpublic static Callable getCall(String name) {\n\t\tif(\"Nubia\".equals(name)) {\n\t\t\treturn new Nubia();\n\t\t} else if (\"Mi\".equals(name)) {\n\t\t\treturn new Mi();\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n```\n##### 客户端测试\n``` java\npackage cn.sakuraffy.factory;\n\npublic class SimpleFactoryClient {\n\tpublic static void main(String[] args) {\n\t\tCallable phone = SimpleFactory.getCall(\"Mi\");\n\t\tphone.call();\n\t}\n}\n```\n输出结果 ：\n``` java\n\tMi call\n```\n\n### 工厂方法(Factory Method)\n#### 工厂方法涉及的角色\n在简单工厂的基础上抽象工厂类，增加如下角色 ：\n- 抽象工厂角色：这是工厂方法模式的核心，它与应用程序无关。是具体工厂角色必须实现的接口或者必须继承的父类\n- 具体工厂角色：它含有和具体业务逻辑有关的代码。由应用程序调用以创建对应的具体产品的对象\n\n#### 工厂方法代码实现\n业务逻辑 ： 小米和努比亚都有自己的工厂生产手机\n##### 抽象工厂\n``` java\npackage cn.sakuraffy.factory;\n\npublic interface CallFactory {\n\tpublic Callable product();\n}\n```\n##### 具体工厂--Nubia工厂\n``` java\npackage cn.sakuraffy.factory;\n\npublic class NubiaFactory implements CallFactory {\n\n\t@Override\n\tpublic Callable product() {\n\t\treturn new Nubia();\n\t}\n}\n```\n##### 具体工厂--Mi工厂\n``` java\npackage cn.sakuraffy.factory;\n\npublic class MiFactory implements CallFactory {\n\n\t@Override\n\tpublic Callable product() {\n\t\treturn new Mi();\n\t}\n}\n```\n##### 客户端测试\n``` java\npackage cn.sakuraffy.factory;\n\npublic class FactoryMethodClient {\n\tpublic static void main(String[] args) {\n\t\tFactoryCall factory = new NubiaFactory();\n\t\tCallable phone = factory.product();\n\t\tphone.call();\n\t}\n}\n```\n输出结果 ：\n``` java\n\tNubia call\n```\n\n### 抽象工厂(Abstract Factory)\n在工厂方法的基础再多添加抽象产品角色及其实现。由多个抽象产品自由组合形成一个产品族\n\n#### 抽象工厂代码实现\n业务逻辑 ： \n- 手机由手机本身和其装载的软件组成\n- 软件播放器有爱奇艺和Potplayer\n\n##### 抽象产品\n``` java\npackage cn.sakuraffy.factory;\n\npublic interface Playable {\n\tpublic void play();\n}\n```\n\n##### 具体产品--QiYiPlayer的实现\n``` java\npackage cn.sakuraffy.factory;\n\npublic class QiYiPlayer implements Playable {\n\n\t@Override\n\tpublic void play() {\n\t\tSystem.out.println(\"QiYiplayer play\");\n\t}\n}\n```\n\n##### 具体产品--PotPlayer的实现\n``` java\npackage cn.sakuraffy.factory;\n\npublic class Potplayer implements Playable {\n\n\t@Override\n\tpublic void play() {\n\t\tSystem.out.println(\"potplayer play\");\n\t}\n}\n```\n\n##### PlayFactory\n``` java\npackage cn.sakuraffy.factory;\n\npublic interface PlayFactory {\n\tpublic Playable product();\n}\n```\n\n##### PlayFactory--PotFactory\n``` java\npackage cn.sakuraffy.factory;\n\npublic class PotFactory implements PlayFactory{\n\n\t@Override\n\tpublic Playable product() {\n\t\treturn new Potplayer();\n\t}\n}\n```\n\n##### PlayFactory--QiYiFactory\n``` java\npackage cn.sakuraffy.factory;\n\npublic class QiYiFactory implements PlayFactory{\n\n\t@Override\n\tpublic Playable product() {\n\t\treturn new QiYiPlayer();\n\t}\n}\n```\n\n##### 产品族--Phone\n``` java\npackage cn.sakuraffy.factory;\n\npublic class Phone {\n\tprotected Callable caller;\n\tprotected Playable player;\n\t\n\tpublic void show() {\n\t\tSystem.out.println(\"phone info : \" + this.getClass().getName());\n\t\tcaller.call();\n\t\tplayer.play();\n\t}\n}\n```\n##### 产品族--DailyPhone\n``` java\npackage cn.sakuraffy.factory;\n\npublic class DailyPhone extends Phone {\n\tpublic DailyPhone() {\n\t\tplayer = new QiYiFactory().product();\n\t\tcaller = new MiFactory().product();\n\t}\n}\n```\n##### 产品族-SpecialPhone\n``` java\npackage cn.sakuraffy.factory;\n\npublic class SpecialPhone extends Phone {\n\tpublic SpecialPhone() {\n\t\tcaller = new NubiaFactory().product();\n\t\tplayer = new PotFactory().product();\n\t}\n}\n```\n\n##### 客户端测试\n``` java\npackage cn.sakuraffy.factory;\n\npublic class AbstractFactoryClient {\n\tpublic static void main(String[] args) {\n\t\tPhone phone = new SpecialPhone();\n\t\tphone.show();\n\t}\n}\n```\n输出结果 ：\n``` java\n\tphone info : cn.sakuraffy.factory.SpecialPhone\n\tNubia call\n\tpotplayer play\n\n```\n\n### 工厂模式的优缺点\n至此工厂模式的实现就介绍完了，下面就谈谈工厂模式的适用情景与优缺点\n\n#### 简单工厂优缺点\n##### 优点\n- 工厂类含有必要的判断逻辑，可以决定在什么时候创建哪一个产品类的实例\n- 通过引入配置文件，可以在不修改任何客户端代码的情况下更换和增加新的具体产品类\n\n##### 缺点 \n- 过度依赖工厂类，一旦出问题，整个系统都将受影响\n- 使用了静态工厂方法，造成工厂角色无法形成基于继承的等级结构\n\n#### 工厂方法优缺点\n##### 优点\n- 增加新的产品类时无须修改现有系统\n- 封装了产品对象的创建细节，系统具有良好的灵活性和可扩展性\n\n##### 缺点 \n- 增加新产品的同时需要增加新的工厂，增加系统复杂度\n\n#### 抽象工厂优缺点\n##### 优点\n- 隔离了具体类的生成，\n- 实现高内聚低耦合\n\n##### 缺点 \n- 在添加新的产品对象时，难以扩展抽象工厂来生产新种类的产品\n- 开闭原则的倾斜性（增加新的工厂和产品族容易，增加新的产品等级结构麻烦）\n","source":"_posts/pattern_factory.md","raw":"---\ntitle: 工厂模式(Simple Factory + Factory Method + Abstract Factory)\ndate: 2016-11-29 19:06:13\ntags:\n\t- 设计模式\n---\nJava有一个很重要的特性就是多态，简单来说多态就是引用变量所指向的引用对象在编译期时无法确定，只用在运行期才能动态绑定。而工厂模式与其有着相似的特征，只是工厂模式更加复杂化。一般来说工厂模式一般有三部分组成，分别为简单工厂，工厂方法，抽象工厂，其抽象程度也依次递增\n\n<!-- more -->\n\n### 简单工厂(Simple Factory)\n\n#### 简单工厂涉及的角色\n- 工厂类角色：这是本模式的核心，含有一定的判断逻辑\n- 抽象产品角色：它一般是具体产品继承的父类或者实现的接口\n- 具体产品角色：工厂类所创建的对象就是此角色的实例\n\n#### 简单工厂代码实现\n业务逻辑 ： 小米和努比亚的手机都实现打电话的功能\n##### 抽象产品\n``` java\npackage cn.sakuraffy.factory;\n\npublic interface Callable {\n\tpublic void call();\n}\n```\n\n##### 具体产品--Nubia的实现\n``` java\npackage cn.sakuraffy.factory;\n\npublic class Nubia implements Callable {\n\n\t@Override\n\tpublic void call() {\n\t\tSystem.out.println(\"Nubia call\");\n\t}\n}\n```\n\n##### 具体产品--Mi的实现\n``` java\npackage cn.sakuraffy.factory;\n\npublic class Mi implements Callable {\n\n\t@Override\n\tpublic void call() {\n\t\tSystem.out.println(\"Mi call\");\n\t}\n}\n```\n\n##### 工厂\n``` java\npackage cn.sakuraffy.factory;\n\npublic class SimpleFactory {\n\tpublic static Callable getCall(String name) {\n\t\tif(\"Nubia\".equals(name)) {\n\t\t\treturn new Nubia();\n\t\t} else if (\"Mi\".equals(name)) {\n\t\t\treturn new Mi();\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n```\n##### 客户端测试\n``` java\npackage cn.sakuraffy.factory;\n\npublic class SimpleFactoryClient {\n\tpublic static void main(String[] args) {\n\t\tCallable phone = SimpleFactory.getCall(\"Mi\");\n\t\tphone.call();\n\t}\n}\n```\n输出结果 ：\n``` java\n\tMi call\n```\n\n### 工厂方法(Factory Method)\n#### 工厂方法涉及的角色\n在简单工厂的基础上抽象工厂类，增加如下角色 ：\n- 抽象工厂角色：这是工厂方法模式的核心，它与应用程序无关。是具体工厂角色必须实现的接口或者必须继承的父类\n- 具体工厂角色：它含有和具体业务逻辑有关的代码。由应用程序调用以创建对应的具体产品的对象\n\n#### 工厂方法代码实现\n业务逻辑 ： 小米和努比亚都有自己的工厂生产手机\n##### 抽象工厂\n``` java\npackage cn.sakuraffy.factory;\n\npublic interface CallFactory {\n\tpublic Callable product();\n}\n```\n##### 具体工厂--Nubia工厂\n``` java\npackage cn.sakuraffy.factory;\n\npublic class NubiaFactory implements CallFactory {\n\n\t@Override\n\tpublic Callable product() {\n\t\treturn new Nubia();\n\t}\n}\n```\n##### 具体工厂--Mi工厂\n``` java\npackage cn.sakuraffy.factory;\n\npublic class MiFactory implements CallFactory {\n\n\t@Override\n\tpublic Callable product() {\n\t\treturn new Mi();\n\t}\n}\n```\n##### 客户端测试\n``` java\npackage cn.sakuraffy.factory;\n\npublic class FactoryMethodClient {\n\tpublic static void main(String[] args) {\n\t\tFactoryCall factory = new NubiaFactory();\n\t\tCallable phone = factory.product();\n\t\tphone.call();\n\t}\n}\n```\n输出结果 ：\n``` java\n\tNubia call\n```\n\n### 抽象工厂(Abstract Factory)\n在工厂方法的基础再多添加抽象产品角色及其实现。由多个抽象产品自由组合形成一个产品族\n\n#### 抽象工厂代码实现\n业务逻辑 ： \n- 手机由手机本身和其装载的软件组成\n- 软件播放器有爱奇艺和Potplayer\n\n##### 抽象产品\n``` java\npackage cn.sakuraffy.factory;\n\npublic interface Playable {\n\tpublic void play();\n}\n```\n\n##### 具体产品--QiYiPlayer的实现\n``` java\npackage cn.sakuraffy.factory;\n\npublic class QiYiPlayer implements Playable {\n\n\t@Override\n\tpublic void play() {\n\t\tSystem.out.println(\"QiYiplayer play\");\n\t}\n}\n```\n\n##### 具体产品--PotPlayer的实现\n``` java\npackage cn.sakuraffy.factory;\n\npublic class Potplayer implements Playable {\n\n\t@Override\n\tpublic void play() {\n\t\tSystem.out.println(\"potplayer play\");\n\t}\n}\n```\n\n##### PlayFactory\n``` java\npackage cn.sakuraffy.factory;\n\npublic interface PlayFactory {\n\tpublic Playable product();\n}\n```\n\n##### PlayFactory--PotFactory\n``` java\npackage cn.sakuraffy.factory;\n\npublic class PotFactory implements PlayFactory{\n\n\t@Override\n\tpublic Playable product() {\n\t\treturn new Potplayer();\n\t}\n}\n```\n\n##### PlayFactory--QiYiFactory\n``` java\npackage cn.sakuraffy.factory;\n\npublic class QiYiFactory implements PlayFactory{\n\n\t@Override\n\tpublic Playable product() {\n\t\treturn new QiYiPlayer();\n\t}\n}\n```\n\n##### 产品族--Phone\n``` java\npackage cn.sakuraffy.factory;\n\npublic class Phone {\n\tprotected Callable caller;\n\tprotected Playable player;\n\t\n\tpublic void show() {\n\t\tSystem.out.println(\"phone info : \" + this.getClass().getName());\n\t\tcaller.call();\n\t\tplayer.play();\n\t}\n}\n```\n##### 产品族--DailyPhone\n``` java\npackage cn.sakuraffy.factory;\n\npublic class DailyPhone extends Phone {\n\tpublic DailyPhone() {\n\t\tplayer = new QiYiFactory().product();\n\t\tcaller = new MiFactory().product();\n\t}\n}\n```\n##### 产品族-SpecialPhone\n``` java\npackage cn.sakuraffy.factory;\n\npublic class SpecialPhone extends Phone {\n\tpublic SpecialPhone() {\n\t\tcaller = new NubiaFactory().product();\n\t\tplayer = new PotFactory().product();\n\t}\n}\n```\n\n##### 客户端测试\n``` java\npackage cn.sakuraffy.factory;\n\npublic class AbstractFactoryClient {\n\tpublic static void main(String[] args) {\n\t\tPhone phone = new SpecialPhone();\n\t\tphone.show();\n\t}\n}\n```\n输出结果 ：\n``` java\n\tphone info : cn.sakuraffy.factory.SpecialPhone\n\tNubia call\n\tpotplayer play\n\n```\n\n### 工厂模式的优缺点\n至此工厂模式的实现就介绍完了，下面就谈谈工厂模式的适用情景与优缺点\n\n#### 简单工厂优缺点\n##### 优点\n- 工厂类含有必要的判断逻辑，可以决定在什么时候创建哪一个产品类的实例\n- 通过引入配置文件，可以在不修改任何客户端代码的情况下更换和增加新的具体产品类\n\n##### 缺点 \n- 过度依赖工厂类，一旦出问题，整个系统都将受影响\n- 使用了静态工厂方法，造成工厂角色无法形成基于继承的等级结构\n\n#### 工厂方法优缺点\n##### 优点\n- 增加新的产品类时无须修改现有系统\n- 封装了产品对象的创建细节，系统具有良好的灵活性和可扩展性\n\n##### 缺点 \n- 增加新产品的同时需要增加新的工厂，增加系统复杂度\n\n#### 抽象工厂优缺点\n##### 优点\n- 隔离了具体类的生成，\n- 实现高内聚低耦合\n\n##### 缺点 \n- 在添加新的产品对象时，难以扩展抽象工厂来生产新种类的产品\n- 开闭原则的倾斜性（增加新的工厂和产品族容易，增加新的产品等级结构麻烦）\n","slug":"pattern_factory","published":1,"updated":"2017-03-08T12:36:50.114Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5fe004bqoq1qr6iujf3","content":"<p>Java有一个很重要的特性就是多态，简单来说多态就是引用变量所指向的引用对象在编译期时无法确定，只用在运行期才能动态绑定。而工厂模式与其有着相似的特征，只是工厂模式更加复杂化。一般来说工厂模式一般有三部分组成，分别为简单工厂，工厂方法，抽象工厂，其抽象程度也依次递增</p>\n<a id=\"more\"></a>\n<h3 id=\"简单工厂-Simple-Factory\"><a href=\"#简单工厂-Simple-Factory\" class=\"headerlink\" title=\"简单工厂(Simple Factory)\"></a>简单工厂(Simple Factory)</h3><h4 id=\"简单工厂涉及的角色\"><a href=\"#简单工厂涉及的角色\" class=\"headerlink\" title=\"简单工厂涉及的角色\"></a>简单工厂涉及的角色</h4><ul>\n<li>工厂类角色：这是本模式的核心，含有一定的判断逻辑</li>\n<li>抽象产品角色：它一般是具体产品继承的父类或者实现的接口</li>\n<li>具体产品角色：工厂类所创建的对象就是此角色的实例</li>\n</ul>\n<h4 id=\"简单工厂代码实现\"><a href=\"#简单工厂代码实现\" class=\"headerlink\" title=\"简单工厂代码实现\"></a>简单工厂代码实现</h4><p>业务逻辑 ： 小米和努比亚的手机都实现打电话的功能</p>\n<h5 id=\"抽象产品\"><a href=\"#抽象产品\" class=\"headerlink\" title=\"抽象产品\"></a>抽象产品</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.factory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Callable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"具体产品–Nubia的实现\"><a href=\"#具体产品–Nubia的实现\" class=\"headerlink\" title=\"具体产品–Nubia的实现\"></a>具体产品–Nubia的实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.factory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Nubia</span> <span class=\"keyword\">implements</span> <span class=\"title\">Callable</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Nubia call\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"具体产品–Mi的实现\"><a href=\"#具体产品–Mi的实现\" class=\"headerlink\" title=\"具体产品–Mi的实现\"></a>具体产品–Mi的实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.factory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mi</span> <span class=\"keyword\">implements</span> <span class=\"title\">Callable</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Mi call\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"工厂\"><a href=\"#工厂\" class=\"headerlink\" title=\"工厂\"></a>工厂</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.factory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleFactory</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Callable <span class=\"title\">getCall</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"string\">\"Nubia\"</span>.equals(name)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Nubia();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"Mi\"</span>.equals(name)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Mi();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"客户端测试\"><a href=\"#客户端测试\" class=\"headerlink\" title=\"客户端测试\"></a>客户端测试</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.factory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleFactoryClient</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tCallable phone = SimpleFactory.getCall(<span class=\"string\">\"Mi\"</span>);</div><div class=\"line\">\t\tphone.call();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Mi call</div></pre></td></tr></table></figure></p>\n<h3 id=\"工厂方法-Factory-Method\"><a href=\"#工厂方法-Factory-Method\" class=\"headerlink\" title=\"工厂方法(Factory Method)\"></a>工厂方法(Factory Method)</h3><h4 id=\"工厂方法涉及的角色\"><a href=\"#工厂方法涉及的角色\" class=\"headerlink\" title=\"工厂方法涉及的角色\"></a>工厂方法涉及的角色</h4><p>在简单工厂的基础上抽象工厂类，增加如下角色 ：</p>\n<ul>\n<li>抽象工厂角色：这是工厂方法模式的核心，它与应用程序无关。是具体工厂角色必须实现的接口或者必须继承的父类</li>\n<li>具体工厂角色：它含有和具体业务逻辑有关的代码。由应用程序调用以创建对应的具体产品的对象</li>\n</ul>\n<h4 id=\"工厂方法代码实现\"><a href=\"#工厂方法代码实现\" class=\"headerlink\" title=\"工厂方法代码实现\"></a>工厂方法代码实现</h4><p>业务逻辑 ： 小米和努比亚都有自己的工厂生产手机</p>\n<h5 id=\"抽象工厂\"><a href=\"#抽象工厂\" class=\"headerlink\" title=\"抽象工厂\"></a>抽象工厂</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.factory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CallFactory</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Callable <span class=\"title\">product</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"具体工厂–Nubia工厂\"><a href=\"#具体工厂–Nubia工厂\" class=\"headerlink\" title=\"具体工厂–Nubia工厂\"></a>具体工厂–Nubia工厂</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.factory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NubiaFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">CallFactory</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Callable <span class=\"title\">product</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Nubia();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"具体工厂–Mi工厂\"><a href=\"#具体工厂–Mi工厂\" class=\"headerlink\" title=\"具体工厂–Mi工厂\"></a>具体工厂–Mi工厂</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.factory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MiFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">CallFactory</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Callable <span class=\"title\">product</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Mi();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"客户端测试-1\"><a href=\"#客户端测试-1\" class=\"headerlink\" title=\"客户端测试\"></a>客户端测试</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.factory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FactoryMethodClient</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tFactoryCall factory = <span class=\"keyword\">new</span> NubiaFactory();</div><div class=\"line\">\t\tCallable phone = factory.product();</div><div class=\"line\">\t\tphone.call();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Nubia call</div></pre></td></tr></table></figure></p>\n<h3 id=\"抽象工厂-Abstract-Factory\"><a href=\"#抽象工厂-Abstract-Factory\" class=\"headerlink\" title=\"抽象工厂(Abstract Factory)\"></a>抽象工厂(Abstract Factory)</h3><p>在工厂方法的基础再多添加抽象产品角色及其实现。由多个抽象产品自由组合形成一个产品族</p>\n<h4 id=\"抽象工厂代码实现\"><a href=\"#抽象工厂代码实现\" class=\"headerlink\" title=\"抽象工厂代码实现\"></a>抽象工厂代码实现</h4><p>业务逻辑 ： </p>\n<ul>\n<li>手机由手机本身和其装载的软件组成</li>\n<li>软件播放器有爱奇艺和Potplayer</li>\n</ul>\n<h5 id=\"抽象产品-1\"><a href=\"#抽象产品-1\" class=\"headerlink\" title=\"抽象产品\"></a>抽象产品</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.factory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Playable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"具体产品–QiYiPlayer的实现\"><a href=\"#具体产品–QiYiPlayer的实现\" class=\"headerlink\" title=\"具体产品–QiYiPlayer的实现\"></a>具体产品–QiYiPlayer的实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.factory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QiYiPlayer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Playable</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"QiYiplayer play\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"具体产品–PotPlayer的实现\"><a href=\"#具体产品–PotPlayer的实现\" class=\"headerlink\" title=\"具体产品–PotPlayer的实现\"></a>具体产品–PotPlayer的实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.factory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Potplayer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Playable</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"potplayer play\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"PlayFactory\"><a href=\"#PlayFactory\" class=\"headerlink\" title=\"PlayFactory\"></a>PlayFactory</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.factory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PlayFactory</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Playable <span class=\"title\">product</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"PlayFactory–PotFactory\"><a href=\"#PlayFactory–PotFactory\" class=\"headerlink\" title=\"PlayFactory–PotFactory\"></a>PlayFactory–PotFactory</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.factory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PotFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">PlayFactory</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Playable <span class=\"title\">product</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Potplayer();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"PlayFactory–QiYiFactory\"><a href=\"#PlayFactory–QiYiFactory\" class=\"headerlink\" title=\"PlayFactory–QiYiFactory\"></a>PlayFactory–QiYiFactory</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.factory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QiYiFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">PlayFactory</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Playable <span class=\"title\">product</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> QiYiPlayer();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"产品族–Phone\"><a href=\"#产品族–Phone\" class=\"headerlink\" title=\"产品族–Phone\"></a>产品族–Phone</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.factory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Phone</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">protected</span> Callable caller;</div><div class=\"line\">\t<span class=\"keyword\">protected</span> Playable player;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"phone info : \"</span> + <span class=\"keyword\">this</span>.getClass().getName());</div><div class=\"line\">\t\tcaller.call();</div><div class=\"line\">\t\tplayer.play();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"产品族–DailyPhone\"><a href=\"#产品族–DailyPhone\" class=\"headerlink\" title=\"产品族–DailyPhone\"></a>产品族–DailyPhone</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.factory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DailyPhone</span> <span class=\"keyword\">extends</span> <span class=\"title\">Phone</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DailyPhone</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tplayer = <span class=\"keyword\">new</span> QiYiFactory().product();</div><div class=\"line\">\t\tcaller = <span class=\"keyword\">new</span> MiFactory().product();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"产品族-SpecialPhone\"><a href=\"#产品族-SpecialPhone\" class=\"headerlink\" title=\"产品族-SpecialPhone\"></a>产品族-SpecialPhone</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.factory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpecialPhone</span> <span class=\"keyword\">extends</span> <span class=\"title\">Phone</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SpecialPhone</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tcaller = <span class=\"keyword\">new</span> NubiaFactory().product();</div><div class=\"line\">\t\tplayer = <span class=\"keyword\">new</span> PotFactory().product();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"客户端测试-2\"><a href=\"#客户端测试-2\" class=\"headerlink\" title=\"客户端测试\"></a>客户端测试</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.factory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractFactoryClient</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tPhone phone = <span class=\"keyword\">new</span> SpecialPhone();</div><div class=\"line\">\t\tphone.show();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">phone info : cn.sakuraffy.factory.SpecialPhone</div><div class=\"line\">Nubia call</div><div class=\"line\">potplayer play</div></pre></td></tr></table></figure></p>\n<h3 id=\"工厂模式的优缺点\"><a href=\"#工厂模式的优缺点\" class=\"headerlink\" title=\"工厂模式的优缺点\"></a>工厂模式的优缺点</h3><p>至此工厂模式的实现就介绍完了，下面就谈谈工厂模式的适用情景与优缺点</p>\n<h4 id=\"简单工厂优缺点\"><a href=\"#简单工厂优缺点\" class=\"headerlink\" title=\"简单工厂优缺点\"></a>简单工厂优缺点</h4><h5 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ul>\n<li>工厂类含有必要的判断逻辑，可以决定在什么时候创建哪一个产品类的实例</li>\n<li>通过引入配置文件，可以在不修改任何客户端代码的情况下更换和增加新的具体产品类</li>\n</ul>\n<h5 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ul>\n<li>过度依赖工厂类，一旦出问题，整个系统都将受影响</li>\n<li>使用了静态工厂方法，造成工厂角色无法形成基于继承的等级结构</li>\n</ul>\n<h4 id=\"工厂方法优缺点\"><a href=\"#工厂方法优缺点\" class=\"headerlink\" title=\"工厂方法优缺点\"></a>工厂方法优缺点</h4><h5 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ul>\n<li>增加新的产品类时无须修改现有系统</li>\n<li>封装了产品对象的创建细节，系统具有良好的灵活性和可扩展性</li>\n</ul>\n<h5 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ul>\n<li>增加新产品的同时需要增加新的工厂，增加系统复杂度</li>\n</ul>\n<h4 id=\"抽象工厂优缺点\"><a href=\"#抽象工厂优缺点\" class=\"headerlink\" title=\"抽象工厂优缺点\"></a>抽象工厂优缺点</h4><h5 id=\"优点-2\"><a href=\"#优点-2\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ul>\n<li>隔离了具体类的生成，</li>\n<li>实现高内聚低耦合</li>\n</ul>\n<h5 id=\"缺点-2\"><a href=\"#缺点-2\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ul>\n<li>在添加新的产品对象时，难以扩展抽象工厂来生产新种类的产品</li>\n<li>开闭原则的倾斜性（增加新的工厂和产品族容易，增加新的产品等级结构麻烦）</li>\n</ul>\n","excerpt":"<p>Java有一个很重要的特性就是多态，简单来说多态就是引用变量所指向的引用对象在编译期时无法确定，只用在运行期才能动态绑定。而工厂模式与其有着相似的特征，只是工厂模式更加复杂化。一般来说工厂模式一般有三部分组成，分别为简单工厂，工厂方法，抽象工厂，其抽象程度也依次递增</p>","more":"<h3 id=\"简单工厂-Simple-Factory\"><a href=\"#简单工厂-Simple-Factory\" class=\"headerlink\" title=\"简单工厂(Simple Factory)\"></a>简单工厂(Simple Factory)</h3><h4 id=\"简单工厂涉及的角色\"><a href=\"#简单工厂涉及的角色\" class=\"headerlink\" title=\"简单工厂涉及的角色\"></a>简单工厂涉及的角色</h4><ul>\n<li>工厂类角色：这是本模式的核心，含有一定的判断逻辑</li>\n<li>抽象产品角色：它一般是具体产品继承的父类或者实现的接口</li>\n<li>具体产品角色：工厂类所创建的对象就是此角色的实例</li>\n</ul>\n<h4 id=\"简单工厂代码实现\"><a href=\"#简单工厂代码实现\" class=\"headerlink\" title=\"简单工厂代码实现\"></a>简单工厂代码实现</h4><p>业务逻辑 ： 小米和努比亚的手机都实现打电话的功能</p>\n<h5 id=\"抽象产品\"><a href=\"#抽象产品\" class=\"headerlink\" title=\"抽象产品\"></a>抽象产品</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.factory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Callable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"具体产品–Nubia的实现\"><a href=\"#具体产品–Nubia的实现\" class=\"headerlink\" title=\"具体产品–Nubia的实现\"></a>具体产品–Nubia的实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.factory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Nubia</span> <span class=\"keyword\">implements</span> <span class=\"title\">Callable</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Nubia call\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"具体产品–Mi的实现\"><a href=\"#具体产品–Mi的实现\" class=\"headerlink\" title=\"具体产品–Mi的实现\"></a>具体产品–Mi的实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.factory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mi</span> <span class=\"keyword\">implements</span> <span class=\"title\">Callable</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Mi call\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"工厂\"><a href=\"#工厂\" class=\"headerlink\" title=\"工厂\"></a>工厂</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.factory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleFactory</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Callable <span class=\"title\">getCall</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"string\">\"Nubia\"</span>.equals(name)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Nubia();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"Mi\"</span>.equals(name)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Mi();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"客户端测试\"><a href=\"#客户端测试\" class=\"headerlink\" title=\"客户端测试\"></a>客户端测试</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.factory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleFactoryClient</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tCallable phone = SimpleFactory.getCall(<span class=\"string\">\"Mi\"</span>);</div><div class=\"line\">\t\tphone.call();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Mi call</div></pre></td></tr></table></figure></p>\n<h3 id=\"工厂方法-Factory-Method\"><a href=\"#工厂方法-Factory-Method\" class=\"headerlink\" title=\"工厂方法(Factory Method)\"></a>工厂方法(Factory Method)</h3><h4 id=\"工厂方法涉及的角色\"><a href=\"#工厂方法涉及的角色\" class=\"headerlink\" title=\"工厂方法涉及的角色\"></a>工厂方法涉及的角色</h4><p>在简单工厂的基础上抽象工厂类，增加如下角色 ：</p>\n<ul>\n<li>抽象工厂角色：这是工厂方法模式的核心，它与应用程序无关。是具体工厂角色必须实现的接口或者必须继承的父类</li>\n<li>具体工厂角色：它含有和具体业务逻辑有关的代码。由应用程序调用以创建对应的具体产品的对象</li>\n</ul>\n<h4 id=\"工厂方法代码实现\"><a href=\"#工厂方法代码实现\" class=\"headerlink\" title=\"工厂方法代码实现\"></a>工厂方法代码实现</h4><p>业务逻辑 ： 小米和努比亚都有自己的工厂生产手机</p>\n<h5 id=\"抽象工厂\"><a href=\"#抽象工厂\" class=\"headerlink\" title=\"抽象工厂\"></a>抽象工厂</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.factory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CallFactory</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Callable <span class=\"title\">product</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"具体工厂–Nubia工厂\"><a href=\"#具体工厂–Nubia工厂\" class=\"headerlink\" title=\"具体工厂–Nubia工厂\"></a>具体工厂–Nubia工厂</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.factory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NubiaFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">CallFactory</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Callable <span class=\"title\">product</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Nubia();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"具体工厂–Mi工厂\"><a href=\"#具体工厂–Mi工厂\" class=\"headerlink\" title=\"具体工厂–Mi工厂\"></a>具体工厂–Mi工厂</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.factory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MiFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">CallFactory</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Callable <span class=\"title\">product</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Mi();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"客户端测试-1\"><a href=\"#客户端测试-1\" class=\"headerlink\" title=\"客户端测试\"></a>客户端测试</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.factory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FactoryMethodClient</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tFactoryCall factory = <span class=\"keyword\">new</span> NubiaFactory();</div><div class=\"line\">\t\tCallable phone = factory.product();</div><div class=\"line\">\t\tphone.call();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Nubia call</div></pre></td></tr></table></figure></p>\n<h3 id=\"抽象工厂-Abstract-Factory\"><a href=\"#抽象工厂-Abstract-Factory\" class=\"headerlink\" title=\"抽象工厂(Abstract Factory)\"></a>抽象工厂(Abstract Factory)</h3><p>在工厂方法的基础再多添加抽象产品角色及其实现。由多个抽象产品自由组合形成一个产品族</p>\n<h4 id=\"抽象工厂代码实现\"><a href=\"#抽象工厂代码实现\" class=\"headerlink\" title=\"抽象工厂代码实现\"></a>抽象工厂代码实现</h4><p>业务逻辑 ： </p>\n<ul>\n<li>手机由手机本身和其装载的软件组成</li>\n<li>软件播放器有爱奇艺和Potplayer</li>\n</ul>\n<h5 id=\"抽象产品-1\"><a href=\"#抽象产品-1\" class=\"headerlink\" title=\"抽象产品\"></a>抽象产品</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.factory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Playable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"具体产品–QiYiPlayer的实现\"><a href=\"#具体产品–QiYiPlayer的实现\" class=\"headerlink\" title=\"具体产品–QiYiPlayer的实现\"></a>具体产品–QiYiPlayer的实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.factory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QiYiPlayer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Playable</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"QiYiplayer play\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"具体产品–PotPlayer的实现\"><a href=\"#具体产品–PotPlayer的实现\" class=\"headerlink\" title=\"具体产品–PotPlayer的实现\"></a>具体产品–PotPlayer的实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.factory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Potplayer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Playable</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"potplayer play\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"PlayFactory\"><a href=\"#PlayFactory\" class=\"headerlink\" title=\"PlayFactory\"></a>PlayFactory</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.factory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PlayFactory</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Playable <span class=\"title\">product</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"PlayFactory–PotFactory\"><a href=\"#PlayFactory–PotFactory\" class=\"headerlink\" title=\"PlayFactory–PotFactory\"></a>PlayFactory–PotFactory</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.factory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PotFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">PlayFactory</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Playable <span class=\"title\">product</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Potplayer();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"PlayFactory–QiYiFactory\"><a href=\"#PlayFactory–QiYiFactory\" class=\"headerlink\" title=\"PlayFactory–QiYiFactory\"></a>PlayFactory–QiYiFactory</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.factory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QiYiFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">PlayFactory</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Playable <span class=\"title\">product</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> QiYiPlayer();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"产品族–Phone\"><a href=\"#产品族–Phone\" class=\"headerlink\" title=\"产品族–Phone\"></a>产品族–Phone</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.factory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Phone</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">protected</span> Callable caller;</div><div class=\"line\">\t<span class=\"keyword\">protected</span> Playable player;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"phone info : \"</span> + <span class=\"keyword\">this</span>.getClass().getName());</div><div class=\"line\">\t\tcaller.call();</div><div class=\"line\">\t\tplayer.play();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"产品族–DailyPhone\"><a href=\"#产品族–DailyPhone\" class=\"headerlink\" title=\"产品族–DailyPhone\"></a>产品族–DailyPhone</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.factory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DailyPhone</span> <span class=\"keyword\">extends</span> <span class=\"title\">Phone</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DailyPhone</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tplayer = <span class=\"keyword\">new</span> QiYiFactory().product();</div><div class=\"line\">\t\tcaller = <span class=\"keyword\">new</span> MiFactory().product();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"产品族-SpecialPhone\"><a href=\"#产品族-SpecialPhone\" class=\"headerlink\" title=\"产品族-SpecialPhone\"></a>产品族-SpecialPhone</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.factory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpecialPhone</span> <span class=\"keyword\">extends</span> <span class=\"title\">Phone</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SpecialPhone</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tcaller = <span class=\"keyword\">new</span> NubiaFactory().product();</div><div class=\"line\">\t\tplayer = <span class=\"keyword\">new</span> PotFactory().product();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"客户端测试-2\"><a href=\"#客户端测试-2\" class=\"headerlink\" title=\"客户端测试\"></a>客户端测试</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.factory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractFactoryClient</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tPhone phone = <span class=\"keyword\">new</span> SpecialPhone();</div><div class=\"line\">\t\tphone.show();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">phone info : cn.sakuraffy.factory.SpecialPhone</div><div class=\"line\">Nubia call</div><div class=\"line\">potplayer play</div></pre></td></tr></table></figure></p>\n<h3 id=\"工厂模式的优缺点\"><a href=\"#工厂模式的优缺点\" class=\"headerlink\" title=\"工厂模式的优缺点\"></a>工厂模式的优缺点</h3><p>至此工厂模式的实现就介绍完了，下面就谈谈工厂模式的适用情景与优缺点</p>\n<h4 id=\"简单工厂优缺点\"><a href=\"#简单工厂优缺点\" class=\"headerlink\" title=\"简单工厂优缺点\"></a>简单工厂优缺点</h4><h5 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ul>\n<li>工厂类含有必要的判断逻辑，可以决定在什么时候创建哪一个产品类的实例</li>\n<li>通过引入配置文件，可以在不修改任何客户端代码的情况下更换和增加新的具体产品类</li>\n</ul>\n<h5 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ul>\n<li>过度依赖工厂类，一旦出问题，整个系统都将受影响</li>\n<li>使用了静态工厂方法，造成工厂角色无法形成基于继承的等级结构</li>\n</ul>\n<h4 id=\"工厂方法优缺点\"><a href=\"#工厂方法优缺点\" class=\"headerlink\" title=\"工厂方法优缺点\"></a>工厂方法优缺点</h4><h5 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ul>\n<li>增加新的产品类时无须修改现有系统</li>\n<li>封装了产品对象的创建细节，系统具有良好的灵活性和可扩展性</li>\n</ul>\n<h5 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ul>\n<li>增加新产品的同时需要增加新的工厂，增加系统复杂度</li>\n</ul>\n<h4 id=\"抽象工厂优缺点\"><a href=\"#抽象工厂优缺点\" class=\"headerlink\" title=\"抽象工厂优缺点\"></a>抽象工厂优缺点</h4><h5 id=\"优点-2\"><a href=\"#优点-2\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ul>\n<li>隔离了具体类的生成，</li>\n<li>实现高内聚低耦合</li>\n</ul>\n<h5 id=\"缺点-2\"><a href=\"#缺点-2\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ul>\n<li>在添加新的产品对象时，难以扩展抽象工厂来生产新种类的产品</li>\n<li>开闭原则的倾斜性（增加新的工厂和产品族容易，增加新的产品等级结构麻烦）</li>\n</ul>"},{"title":"迭代器模式(Iterator)","date":"2016-11-08T03:12:46.000Z","_content":"### 什么是Iterator模式\n\n所谓Iterator模式就是提供一种方法顺序访问一个聚合(集合)对象中的各个元素，而不是暴露其内部的表示。在开发中，我们有可能需要以不同的方式来遍历整个整合对象，但是我们不希望在聚合对象的抽象接口层中充斥着各种不同的便利操作。这个时候我们就需要这样一种东西，它应该具备如下三个功能：\n\n- 能够便利一个聚合对象。\n- 我们不需要了解聚合对象的内部结构。\n- 能够提供多种不同的遍历方式。\n\n<!--more-->\n\n这三个功能就是迭代器模式需要解决的问题。作为一个功能强大的模式，迭代器模式把在元素之间游走的责任交给迭代器，而不是聚合对象。这样做就简化了聚合的接口和实现，也可以让聚合更专注在它所应该专注的事情上，这样做就更加符合单一责任原则。\n\n### Iterator所涉及的角色 \n\n抽象容器：一般是一个接口，提供一个iterator()方法，例如java中的Collection接口，List接口，Set接口等\n\n具体容器：就是抽象容器的具体实现类，比如List接口的有序列表实现ArrayList，List接口的链表实现LinkList，Set接口的哈希列表的实现HashSet等\n\n抽象迭代器：定义遍历元素所需要的方法，一般来说会有这么三个方法：取得第一个元素的方法first()，取得下一个元素的方法next()，判断是否遍历结束的方法isDone()（或者叫hasNext()），移出当前对象的方法remove()\n\n迭代器实现：实现迭代器接口中定义的方法，完成集合的迭代\n\n### 代码实现\n\n#### Iterator接口\n``` java\n\tpackage cn.sakuraffy.iterator;\n\n\tpublic interface Iterator<T> {\n\t\tboolean hasNext();\n\t\tT next();\n\t}\n```\n#### 抽象容器接口\n``` java\t\n\tpackage cn.sakuraffy.iterator;\n\n\tpublic interface Aggregate<T> {\n\t\tvoid add(T obj);\n\t\tIterator<T> itreator();\n\t}\n```\n#### 具体容器实现\n``` java\n\tpackage cn.sakuraffy.iterator;\n\n\timport java.util.NoSuchElementException;\n\n\tpublic class ConcreteAggregate<T> implements Aggregate<T>{                                    \n\t\tprivate Object[] data = new Object[10];\n\t\tprivate int size;\n\t\t\n\t\t@Override\n\t\tpublic void add(T obj) {\n\t\t\tif (size < data.length) {\n\t\t\t\tdata[size++] = obj;\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic Iterator<T> itreator() {\n\t\t\treturn new ConcreteIterator();\n\t\t}\n\n\t\tprivate class ConcreteIterator implements Iterator<T>{\n\t\t\tprivate int cursor;\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic boolean hasNext() {\n\t\t\t\treturn cursor < size;\n\t\t\t}\n\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t@Override\n\t\t\tpublic T next() {\n\t\t\t\tif (cursor < size) {\n\t\t\t\t\treturn (T) data[cursor++];\n\t\t\t\t} else {\n\t\t\t\t\tthrow new NoSuchElementException();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n```\n#### Client端测试\n``` java\n\tpackage cn.sakuraffy.iterator;\n\n\tpublic class Client {\n\t\tpublic static void main(String[] args) {\n\t\t\tAggregate<Integer> ag = new ConcreteAggregate<>();\n\t\t\tag.add(1);\n\t\t\tag.add(2);\n\t\t\tag.add(2);\n\t\t\tag.add(2);\n\t\t\tIterator<Integer> it = ag.itreator();\n\t\t\twhile(it.hasNext()){\n\t\t\t\tSystem.out.println(it.next());\n\t\t\t}\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\n\t1\n\t2\n\t2\n\t2\n```\n\n### ArrayList中Iterator的使用\n\n``` java\n\tprivate class Itr implements Iterator<E> {\n        int cursor;       // index of next element to return\n        int lastRet = -1; // index of last element returned; -1 if no such\n        int expectedModCount = modCount;\n\t}\n```\n这就是ArrayList.Itr的三个属性，至于expectedModCount和modCount是干什么用的，我们先看一个小Demo\n``` java \n\tpackage cn.sakuraffy.iterator;\n\n\timport java.util.ArrayList;\n\timport java.util.Iterator;\n\n\tpublic class ALI {\n\t\tpublic static void main(String[] args)  {\n\t\t\tArrayList<Integer> list = new ArrayList<Integer>();\n\t\t\tlist.add(2);\n\t\t\tIterator<Integer> iterator = list.iterator();\n\t\t\twhile(iterator.hasNext()) {\n\t\t\t\tInteger i = iterator.next();\n\t\t\t\tif (i == 2) {\n\t\t\t\t\tlist.remove(i);\n\t\t\t\t\t//iterator.remove();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n```\n运行程序就会抛出java.util.ConcurrentModificationException,但是使用iterator.remove()则会正常运行，这是为什么呢？\n``` java\n\tprivate class Itr implements Iterator<E> {\n\t\tpublic void remove() {\n\t\t\tif (lastRet < 0)\n\t\t\t\tthrow new IllegalStateException();\n\t\t\tcheckForComodification();\n\n\t\t\ttry {\n\t\t\t\tArrayList.this.remove(lastRet);\n\t\t\t\tcursor = lastRet;\n\t\t\t\tlastRet = -1;\n\t\t\t\texpectedModCount = modCount;\n\t\t\t} catch (IndexOutOfBoundsException ex) {\n\t\t\t\tthrow new ConcurrentModificationException();\n\t\t\t}\n\t\t}\n\t\t\n\t\tfinal void checkForComodification() {\n\t\t\tif (modCount != expectedModCount)\n\t\t\t\tthrow new ConcurrentModificationException();\n\t\t}\n\t}\n```\n看到这是不是就有些明白了，expectedModCount和modCount就是为了解决集合遍历时删除的问题(也仅仅只是单线程，至于多线程后面再说)\n","source":"_posts/pattern_iterator.md","raw":"---\ntitle: 迭代器模式(Iterator)\ndate: 2016-11-08 11:12:46\ntags:\t\n\t- 设计模式\n---\n### 什么是Iterator模式\n\n所谓Iterator模式就是提供一种方法顺序访问一个聚合(集合)对象中的各个元素，而不是暴露其内部的表示。在开发中，我们有可能需要以不同的方式来遍历整个整合对象，但是我们不希望在聚合对象的抽象接口层中充斥着各种不同的便利操作。这个时候我们就需要这样一种东西，它应该具备如下三个功能：\n\n- 能够便利一个聚合对象。\n- 我们不需要了解聚合对象的内部结构。\n- 能够提供多种不同的遍历方式。\n\n<!--more-->\n\n这三个功能就是迭代器模式需要解决的问题。作为一个功能强大的模式，迭代器模式把在元素之间游走的责任交给迭代器，而不是聚合对象。这样做就简化了聚合的接口和实现，也可以让聚合更专注在它所应该专注的事情上，这样做就更加符合单一责任原则。\n\n### Iterator所涉及的角色 \n\n抽象容器：一般是一个接口，提供一个iterator()方法，例如java中的Collection接口，List接口，Set接口等\n\n具体容器：就是抽象容器的具体实现类，比如List接口的有序列表实现ArrayList，List接口的链表实现LinkList，Set接口的哈希列表的实现HashSet等\n\n抽象迭代器：定义遍历元素所需要的方法，一般来说会有这么三个方法：取得第一个元素的方法first()，取得下一个元素的方法next()，判断是否遍历结束的方法isDone()（或者叫hasNext()），移出当前对象的方法remove()\n\n迭代器实现：实现迭代器接口中定义的方法，完成集合的迭代\n\n### 代码实现\n\n#### Iterator接口\n``` java\n\tpackage cn.sakuraffy.iterator;\n\n\tpublic interface Iterator<T> {\n\t\tboolean hasNext();\n\t\tT next();\n\t}\n```\n#### 抽象容器接口\n``` java\t\n\tpackage cn.sakuraffy.iterator;\n\n\tpublic interface Aggregate<T> {\n\t\tvoid add(T obj);\n\t\tIterator<T> itreator();\n\t}\n```\n#### 具体容器实现\n``` java\n\tpackage cn.sakuraffy.iterator;\n\n\timport java.util.NoSuchElementException;\n\n\tpublic class ConcreteAggregate<T> implements Aggregate<T>{                                    \n\t\tprivate Object[] data = new Object[10];\n\t\tprivate int size;\n\t\t\n\t\t@Override\n\t\tpublic void add(T obj) {\n\t\t\tif (size < data.length) {\n\t\t\t\tdata[size++] = obj;\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic Iterator<T> itreator() {\n\t\t\treturn new ConcreteIterator();\n\t\t}\n\n\t\tprivate class ConcreteIterator implements Iterator<T>{\n\t\t\tprivate int cursor;\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic boolean hasNext() {\n\t\t\t\treturn cursor < size;\n\t\t\t}\n\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t@Override\n\t\t\tpublic T next() {\n\t\t\t\tif (cursor < size) {\n\t\t\t\t\treturn (T) data[cursor++];\n\t\t\t\t} else {\n\t\t\t\t\tthrow new NoSuchElementException();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n```\n#### Client端测试\n``` java\n\tpackage cn.sakuraffy.iterator;\n\n\tpublic class Client {\n\t\tpublic static void main(String[] args) {\n\t\t\tAggregate<Integer> ag = new ConcreteAggregate<>();\n\t\t\tag.add(1);\n\t\t\tag.add(2);\n\t\t\tag.add(2);\n\t\t\tag.add(2);\n\t\t\tIterator<Integer> it = ag.itreator();\n\t\t\twhile(it.hasNext()){\n\t\t\t\tSystem.out.println(it.next());\n\t\t\t}\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\n\t1\n\t2\n\t2\n\t2\n```\n\n### ArrayList中Iterator的使用\n\n``` java\n\tprivate class Itr implements Iterator<E> {\n        int cursor;       // index of next element to return\n        int lastRet = -1; // index of last element returned; -1 if no such\n        int expectedModCount = modCount;\n\t}\n```\n这就是ArrayList.Itr的三个属性，至于expectedModCount和modCount是干什么用的，我们先看一个小Demo\n``` java \n\tpackage cn.sakuraffy.iterator;\n\n\timport java.util.ArrayList;\n\timport java.util.Iterator;\n\n\tpublic class ALI {\n\t\tpublic static void main(String[] args)  {\n\t\t\tArrayList<Integer> list = new ArrayList<Integer>();\n\t\t\tlist.add(2);\n\t\t\tIterator<Integer> iterator = list.iterator();\n\t\t\twhile(iterator.hasNext()) {\n\t\t\t\tInteger i = iterator.next();\n\t\t\t\tif (i == 2) {\n\t\t\t\t\tlist.remove(i);\n\t\t\t\t\t//iterator.remove();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n```\n运行程序就会抛出java.util.ConcurrentModificationException,但是使用iterator.remove()则会正常运行，这是为什么呢？\n``` java\n\tprivate class Itr implements Iterator<E> {\n\t\tpublic void remove() {\n\t\t\tif (lastRet < 0)\n\t\t\t\tthrow new IllegalStateException();\n\t\t\tcheckForComodification();\n\n\t\t\ttry {\n\t\t\t\tArrayList.this.remove(lastRet);\n\t\t\t\tcursor = lastRet;\n\t\t\t\tlastRet = -1;\n\t\t\t\texpectedModCount = modCount;\n\t\t\t} catch (IndexOutOfBoundsException ex) {\n\t\t\t\tthrow new ConcurrentModificationException();\n\t\t\t}\n\t\t}\n\t\t\n\t\tfinal void checkForComodification() {\n\t\t\tif (modCount != expectedModCount)\n\t\t\t\tthrow new ConcurrentModificationException();\n\t\t}\n\t}\n```\n看到这是不是就有些明白了，expectedModCount和modCount就是为了解决集合遍历时删除的问题(也仅仅只是单线程，至于多线程后面再说)\n","slug":"pattern_iterator","published":1,"updated":"2017-03-08T12:37:52.777Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5fg004dqoq1br3xw93l","content":"<h3 id=\"什么是Iterator模式\"><a href=\"#什么是Iterator模式\" class=\"headerlink\" title=\"什么是Iterator模式\"></a>什么是Iterator模式</h3><p>所谓Iterator模式就是提供一种方法顺序访问一个聚合(集合)对象中的各个元素，而不是暴露其内部的表示。在开发中，我们有可能需要以不同的方式来遍历整个整合对象，但是我们不希望在聚合对象的抽象接口层中充斥着各种不同的便利操作。这个时候我们就需要这样一种东西，它应该具备如下三个功能：</p>\n<ul>\n<li>能够便利一个聚合对象。</li>\n<li>我们不需要了解聚合对象的内部结构。</li>\n<li>能够提供多种不同的遍历方式。</li>\n</ul>\n<a id=\"more\"></a>\n<p>这三个功能就是迭代器模式需要解决的问题。作为一个功能强大的模式，迭代器模式把在元素之间游走的责任交给迭代器，而不是聚合对象。这样做就简化了聚合的接口和实现，也可以让聚合更专注在它所应该专注的事情上，这样做就更加符合单一责任原则。</p>\n<h3 id=\"Iterator所涉及的角色\"><a href=\"#Iterator所涉及的角色\" class=\"headerlink\" title=\"Iterator所涉及的角色\"></a>Iterator所涉及的角色</h3><p>抽象容器：一般是一个接口，提供一个iterator()方法，例如java中的Collection接口，List接口，Set接口等</p>\n<p>具体容器：就是抽象容器的具体实现类，比如List接口的有序列表实现ArrayList，List接口的链表实现LinkList，Set接口的哈希列表的实现HashSet等</p>\n<p>抽象迭代器：定义遍历元素所需要的方法，一般来说会有这么三个方法：取得第一个元素的方法first()，取得下一个元素的方法next()，判断是否遍历结束的方法isDone()（或者叫hasNext()），移出当前对象的方法remove()</p>\n<p>迭代器实现：实现迭代器接口中定义的方法，完成集合的迭代</p>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><h4 id=\"Iterator接口\"><a href=\"#Iterator接口\" class=\"headerlink\" title=\"Iterator接口\"></a>Iterator接口</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.iterator;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\">T <span class=\"title\">next</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"抽象容器接口\"><a href=\"#抽象容器接口\" class=\"headerlink\" title=\"抽象容器接口\"></a>抽象容器接口</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.iterator;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Aggregate</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(T obj)</span></span>;</div><div class=\"line\">\t<span class=\"function\">Iterator&lt;T&gt; <span class=\"title\">itreator</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"具体容器实现\"><a href=\"#具体容器实现\" class=\"headerlink\" title=\"具体容器实现\"></a>具体容器实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.iterator;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.NoSuchElementException;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteAggregate</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Aggregate</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;                                    </div><div class=\"line\">\t<span class=\"keyword\">private</span> Object[] data = <span class=\"keyword\">new</span> Object[<span class=\"number\">10</span>];</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(T obj)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (size &lt; data.length) &#123;</div><div class=\"line\">\t\t\tdata[size++] = obj;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterator&lt;T&gt; <span class=\"title\">itreator</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ConcreteIterator();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> cursor;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> cursor &lt; size;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (cursor &lt; size) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> (T) data[cursor++];</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Client端测试\"><a href=\"#Client端测试\" class=\"headerlink\" title=\"Client端测试\"></a>Client端测试</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.iterator;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tAggregate&lt;Integer&gt; ag = <span class=\"keyword\">new</span> ConcreteAggregate&lt;&gt;();</div><div class=\"line\">\t\tag.add(<span class=\"number\">1</span>);</div><div class=\"line\">\t\tag.add(<span class=\"number\">2</span>);</div><div class=\"line\">\t\tag.add(<span class=\"number\">2</span>);</div><div class=\"line\">\t\tag.add(<span class=\"number\">2</span>);</div><div class=\"line\">\t\tIterator&lt;Integer&gt; it = ag.itreator();</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(it.hasNext())&#123;</div><div class=\"line\">\t\t\tSystem.out.println(it.next());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">2</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"ArrayList中Iterator的使用\"><a href=\"#ArrayList中Iterator的使用\" class=\"headerlink\" title=\"ArrayList中Iterator的使用\"></a>ArrayList中Iterator的使用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Itr</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">int</span> cursor;       <span class=\"comment\">// index of next element to return</span></div><div class=\"line\">       <span class=\"keyword\">int</span> lastRet = -<span class=\"number\">1</span>; <span class=\"comment\">// index of last element returned; -1 if no such</span></div><div class=\"line\">       <span class=\"keyword\">int</span> expectedModCount = modCount;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这就是ArrayList.Itr的三个属性，至于expectedModCount和modCount是干什么用的，我们先看一个小Demo<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.iterator;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ALI</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span>  </span>&#123;</div><div class=\"line\">\t\tArrayList&lt;Integer&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</div><div class=\"line\">\t\tlist.add(<span class=\"number\">2</span>);</div><div class=\"line\">\t\tIterator&lt;Integer&gt; iterator = list.iterator();</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(iterator.hasNext()) &#123;</div><div class=\"line\">\t\t\tInteger i = iterator.next();</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i == <span class=\"number\">2</span>) &#123;</div><div class=\"line\">\t\t\t\tlist.remove(i);</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//iterator.remove();</span></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行程序就会抛出java.util.ConcurrentModificationException,但是使用iterator.remove()则会正常运行，这是为什么呢？<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Itr</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (lastRet &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException();</div><div class=\"line\">\t\tcheckForComodification();</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tArrayList.<span class=\"keyword\">this</span>.remove(lastRet);</div><div class=\"line\">\t\t\tcursor = lastRet;</div><div class=\"line\">\t\t\tlastRet = -<span class=\"number\">1</span>;</div><div class=\"line\">\t\t\texpectedModCount = modCount;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IndexOutOfBoundsException ex) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">checkForComodification</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (modCount != expectedModCount)</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>看到这是不是就有些明白了，expectedModCount和modCount就是为了解决集合遍历时删除的问题(也仅仅只是单线程，至于多线程后面再说)</p>\n","excerpt":"<h3 id=\"什么是Iterator模式\"><a href=\"#什么是Iterator模式\" class=\"headerlink\" title=\"什么是Iterator模式\"></a>什么是Iterator模式</h3><p>所谓Iterator模式就是提供一种方法顺序访问一个聚合(集合)对象中的各个元素，而不是暴露其内部的表示。在开发中，我们有可能需要以不同的方式来遍历整个整合对象，但是我们不希望在聚合对象的抽象接口层中充斥着各种不同的便利操作。这个时候我们就需要这样一种东西，它应该具备如下三个功能：</p>\n<ul>\n<li>能够便利一个聚合对象。</li>\n<li>我们不需要了解聚合对象的内部结构。</li>\n<li>能够提供多种不同的遍历方式。</li>\n</ul>","more":"<p>这三个功能就是迭代器模式需要解决的问题。作为一个功能强大的模式，迭代器模式把在元素之间游走的责任交给迭代器，而不是聚合对象。这样做就简化了聚合的接口和实现，也可以让聚合更专注在它所应该专注的事情上，这样做就更加符合单一责任原则。</p>\n<h3 id=\"Iterator所涉及的角色\"><a href=\"#Iterator所涉及的角色\" class=\"headerlink\" title=\"Iterator所涉及的角色\"></a>Iterator所涉及的角色</h3><p>抽象容器：一般是一个接口，提供一个iterator()方法，例如java中的Collection接口，List接口，Set接口等</p>\n<p>具体容器：就是抽象容器的具体实现类，比如List接口的有序列表实现ArrayList，List接口的链表实现LinkList，Set接口的哈希列表的实现HashSet等</p>\n<p>抽象迭代器：定义遍历元素所需要的方法，一般来说会有这么三个方法：取得第一个元素的方法first()，取得下一个元素的方法next()，判断是否遍历结束的方法isDone()（或者叫hasNext()），移出当前对象的方法remove()</p>\n<p>迭代器实现：实现迭代器接口中定义的方法，完成集合的迭代</p>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><h4 id=\"Iterator接口\"><a href=\"#Iterator接口\" class=\"headerlink\" title=\"Iterator接口\"></a>Iterator接口</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.iterator;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\">T <span class=\"title\">next</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"抽象容器接口\"><a href=\"#抽象容器接口\" class=\"headerlink\" title=\"抽象容器接口\"></a>抽象容器接口</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.iterator;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Aggregate</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(T obj)</span></span>;</div><div class=\"line\">\t<span class=\"function\">Iterator&lt;T&gt; <span class=\"title\">itreator</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"具体容器实现\"><a href=\"#具体容器实现\" class=\"headerlink\" title=\"具体容器实现\"></a>具体容器实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.iterator;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.NoSuchElementException;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteAggregate</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Aggregate</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;                                    </div><div class=\"line\">\t<span class=\"keyword\">private</span> Object[] data = <span class=\"keyword\">new</span> Object[<span class=\"number\">10</span>];</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(T obj)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (size &lt; data.length) &#123;</div><div class=\"line\">\t\t\tdata[size++] = obj;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterator&lt;T&gt; <span class=\"title\">itreator</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ConcreteIterator();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> cursor;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> cursor &lt; size;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (cursor &lt; size) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> (T) data[cursor++];</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Client端测试\"><a href=\"#Client端测试\" class=\"headerlink\" title=\"Client端测试\"></a>Client端测试</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.iterator;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tAggregate&lt;Integer&gt; ag = <span class=\"keyword\">new</span> ConcreteAggregate&lt;&gt;();</div><div class=\"line\">\t\tag.add(<span class=\"number\">1</span>);</div><div class=\"line\">\t\tag.add(<span class=\"number\">2</span>);</div><div class=\"line\">\t\tag.add(<span class=\"number\">2</span>);</div><div class=\"line\">\t\tag.add(<span class=\"number\">2</span>);</div><div class=\"line\">\t\tIterator&lt;Integer&gt; it = ag.itreator();</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(it.hasNext())&#123;</div><div class=\"line\">\t\t\tSystem.out.println(it.next());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">2</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"ArrayList中Iterator的使用\"><a href=\"#ArrayList中Iterator的使用\" class=\"headerlink\" title=\"ArrayList中Iterator的使用\"></a>ArrayList中Iterator的使用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Itr</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">int</span> cursor;       <span class=\"comment\">// index of next element to return</span></div><div class=\"line\">       <span class=\"keyword\">int</span> lastRet = -<span class=\"number\">1</span>; <span class=\"comment\">// index of last element returned; -1 if no such</span></div><div class=\"line\">       <span class=\"keyword\">int</span> expectedModCount = modCount;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这就是ArrayList.Itr的三个属性，至于expectedModCount和modCount是干什么用的，我们先看一个小Demo<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.iterator;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ALI</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span>  </span>&#123;</div><div class=\"line\">\t\tArrayList&lt;Integer&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</div><div class=\"line\">\t\tlist.add(<span class=\"number\">2</span>);</div><div class=\"line\">\t\tIterator&lt;Integer&gt; iterator = list.iterator();</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(iterator.hasNext()) &#123;</div><div class=\"line\">\t\t\tInteger i = iterator.next();</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i == <span class=\"number\">2</span>) &#123;</div><div class=\"line\">\t\t\t\tlist.remove(i);</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//iterator.remove();</span></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行程序就会抛出java.util.ConcurrentModificationException,但是使用iterator.remove()则会正常运行，这是为什么呢？<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Itr</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (lastRet &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException();</div><div class=\"line\">\t\tcheckForComodification();</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tArrayList.<span class=\"keyword\">this</span>.remove(lastRet);</div><div class=\"line\">\t\t\tcursor = lastRet;</div><div class=\"line\">\t\t\tlastRet = -<span class=\"number\">1</span>;</div><div class=\"line\">\t\t\texpectedModCount = modCount;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IndexOutOfBoundsException ex) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">checkForComodification</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (modCount != expectedModCount)</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>看到这是不是就有些明白了，expectedModCount和modCount就是为了解决集合遍历时删除的问题(也仅仅只是单线程，至于多线程后面再说)</p>"},{"title":"原型模式(Prototype)","date":"2016-11-17T14:42:20.000Z","_content":"在日常开发中，有些类的结构异常复杂，但恰巧我们需要频繁地创建与使用它们。我们知道创建对象会占用大量的CPU资源，这时候我们就可以使用原型模式将该类的对象进行复制，从而减少因对象创建而消耗的资源和时间\n\n### 原型模式的UML图和角色\n\n{% qnimg pattern/prototype/p1.jpg 'class:class1 class2' normal:yes %}\n\nPrototype：抽象原型类。声明克隆自身的接口(这里直接借用Java的Cloneable接口)。 \nConcretePrototype：具体原型类。实现克隆的具体操作。 \n\n<!--more-->\n\n### 源码实现 \n``` java\n\tpackage cn.sakuraffy.prototype;\n\n\tpublic class ConcretePrototype implements Cloneable {                                       \n\n\t\tprivate String name;\n\t\tprivate int id;\n\t\t\n\t\tpublic ConcretePrototype(String name, int id) {                                       \n\t\t\tsuper();\n\t\t\tthis.name = name;\n\t\t\tthis.id = id;\n\t\t}\n\n\t\tpublic final String getName() {\n\t\t\treturn name;\n\t\t}\n\n\t\tpublic final void setName(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\n\t\tpublic final int getId() {\n\t\t\treturn id;\n\t\t}\n\n\t\tpublic final void setId(int id) {\n\t\t\tthis.id = id;\n\t\t}\n\n\t\t@Override\n\t\tprotected Object clone() {\n\t\t\tConcretePrototype cp = null;\n\t\t\ttry {\n\t\t\t\tcp = (ConcretePrototype) super.clone();\n\t\t\t} catch (CloneNotSupportedException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\treturn cp;\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn \"ConcretePrototype [name=\" + name + \", id=\" + id + \"]\";\n\t\t}\n\t\t\n\t}\n```\n#### 测试类 ：\n``` java\n\tpackage cn.sakuraffy.prototype;\n\n\tpublic class Client {\n\t\tpublic static void main(String[] args) {\n\t\t\tConcretePrototype cp = new ConcretePrototype(\"sakuraffy\",8);\n\t\t\tConcretePrototype cp1 = (ConcretePrototype) cp.clone();\n\t\t\tSystem.out.println(cp);\n\t\t\tSystem.out.println(cp1);\n\t\t\tSystem.out.println(cp.getClass() == cp1.getClass());\n\t\t\tSystem.out.println(cp == cp1);\n\t\t}\n\t}\n```\n#### 输出结果 ：\n``` java\nConcretePrototype [name=sakuraffy, id=8]\nConcretePrototype [name=sakuraffy, id=8]\ntrue\nfalse\n```\n\n### 原型模式优缺点及应用场景\n\n#### 优点 \n- 提高对象创建效率\n- 逃避构造函数的约束\n#### 缺点 \n- 逃避构造函数的约束\n- 需要为每一个类装配一个克隆方法。对已有类进行改造，需要修改其源码，违背开关原则\n#### 应用场景\n- 创建对象成本较大的时候\n\n### 原型模式在Java中的应用\n\n#### 浅复制\n浅复制(浅克隆) 简单来说 ： 浅复制仅仅考虑要复制的对象，而不考虑该对象所引用的对象\n``` java\n\tpackage cn.sakuraffy.prototype;\n\n\tpublic class ShallowClone implements Cloneable {                                              \n\t\tprivate int id;\n\t\tprivate String name;\n\t\tprivate Book book;\n\t\t\n\t\tprivate static class Book {\n\t\t\tprivate String name;\n\n\t\t\tpublic Book(String name) {\n\t\t\t\tsuper();\n\t\t\t\tthis.name = name;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String toString() {\n\t\t\t\treturn \"Book [name=\" + name + \"]\";\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\tpublic ShallowClone(int id, String name, Book book) {\n\t\t\tsuper();\n\t\t\tthis.id = id;\n\t\t\tthis.name = name;\n\t\t\tthis.book = book;\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn \"ShallowClone [id=\" + id + \", name=\" + name + \", book=\" + book\n\t\t\t\t\t+ \"]\";\n\t\t}\n\n\t\t@Override\n\t\tprotected Object clone() {\n\t\t\tShallowClone sc = null;\n\t\t\ttry {\n\t\t\t\tsc = (ShallowClone) super.clone();\n\t\t\t} catch (CloneNotSupportedException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\treturn sc;\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) throws InterruptedException {\n\t\t\tBook book = new Book(\"Goodbye\");\n\t\t\tShallowClone sc = new ShallowClone(1, \"sakuraffy\", book);\n\t\t\tDeepClone sc1 = (DeepClone) sc.clone();\n\t\t\tThread.sleep(1000);\n\t\t\t//这里简单使用，用getter和setter更合理\n\t\t\tsc1.name = \"sakura\";\n\t\t\tsc1.book.name = \"Hello\";\n\t\t\tsc1.id = 2;\n\t\t\tSystem.out.println(sc);\n\t\t\tSystem.out.println(sc1);\n\t\t\tSystem.out.println(sc.book == sc1.book);\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\nShallowClone [id=1, name=sakuraffy, book=Book [name=Hello]]\nShallowClone [id=2, name=sakura, book=Book [name=Hello]]\ntrue\n```\n\n通过对比输出可以看出 ：两个ShallowClone对象所引用的Book是同一对象，String和Date都是实行深复制的\n\n#### 深复制\n深复制(深克隆) 简单来说 ： 深复制不仅仅考虑要复制的对象，而且还考虑该对象所引用的对象\n\n``` java\n\tpackage cn.sakuraffy.prototype;\n\n\tpublic class DeepClone implements Cloneable {\n\t\tprivate int id;\n\t\tprivate String name;\n\t\tprivate Book book;\n\t\t\n\t\t//要实现对象引用的深复制，其所引用的对象必须实现实现Cloneable接口                          \n\t\tprivate static class Book implements Cloneable {\n\t\t\tprivate String name;\n\n\t\t\tpublic Book(String name) {\n\t\t\t\tsuper();\n\t\t\t\tthis.name = name;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tprotected Object clone() throws CloneNotSupportedException {                  \n\t\t\t\treturn super.clone();\n\t\t\t}\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic String toString() {\n\t\t\t\treturn \"Book [name=\" + name + \"]\";\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\tpublic DeepClone(int id, String name, Book book) {\n\t\t\tsuper();\n\t\t\tthis.id = id;\n\t\t\tthis.name = name;\n\t\t\tthis.book = book;\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn \"DeepClone [id=\" + id + \", name=\" + name + \", book=\" + book\n\t\t\t\t\t+ \"]\";\n\t\t}\n\n\t\t@Override\n\t\tprotected Object clone() {\n\t\t\tDeepClone dc = null;\n\t\t\ttry {\n\t\t\t\tdc = (DeepClone) super.clone();\n\t\t\t\t//重点\n\t\t\t\tdc.book = (Book) this.book.clone();\n\t\t\t} catch (CloneNotSupportedException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\treturn dc;\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) throws InterruptedException {\n\t\t\tBook book = new Book(\"Goodbye\");\n\t\t\tDeepClone dc = new DeepClone(1, \"sakuraffy\", book);\n\t\t\tDeepClone dc1 = (DeepClone) dc.clone();\n\t\t\t//这里简单使用，用getter和setter更合理\n\t\t\tdc1.name = \"sakura\";\n\t\t\tdc1.id = 2;\n\t\t\tdc1.book.name = \"Hello\";\n\t\t\tSystem.out.println(dc);\n\t\t\tSystem.out.println(dc1);\n\t\t\tSystem.out.println(dc.book == dc1.book);\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\nDeepClone [id=1, name=sakuraffy, book=Book [name=Goodbye]]\nDeepClone [id=2, name=sakura, book=Book [name=Hello]]\nfalse\n```\n\n通过对比输出可以看出 ：两个DeepClone对象所引用的Book不是同一对象，它的实现就是再将Book都克隆一份给克隆对象","source":"_posts/pattern_prototype.md","raw":"---\ntitle: 原型模式(Prototype)\ndate: 2016-11-17 22:42:20\ntags:\n\t- 设计模式\n---\n在日常开发中，有些类的结构异常复杂，但恰巧我们需要频繁地创建与使用它们。我们知道创建对象会占用大量的CPU资源，这时候我们就可以使用原型模式将该类的对象进行复制，从而减少因对象创建而消耗的资源和时间\n\n### 原型模式的UML图和角色\n\n{% qnimg pattern/prototype/p1.jpg 'class:class1 class2' normal:yes %}\n\nPrototype：抽象原型类。声明克隆自身的接口(这里直接借用Java的Cloneable接口)。 \nConcretePrototype：具体原型类。实现克隆的具体操作。 \n\n<!--more-->\n\n### 源码实现 \n``` java\n\tpackage cn.sakuraffy.prototype;\n\n\tpublic class ConcretePrototype implements Cloneable {                                       \n\n\t\tprivate String name;\n\t\tprivate int id;\n\t\t\n\t\tpublic ConcretePrototype(String name, int id) {                                       \n\t\t\tsuper();\n\t\t\tthis.name = name;\n\t\t\tthis.id = id;\n\t\t}\n\n\t\tpublic final String getName() {\n\t\t\treturn name;\n\t\t}\n\n\t\tpublic final void setName(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\n\t\tpublic final int getId() {\n\t\t\treturn id;\n\t\t}\n\n\t\tpublic final void setId(int id) {\n\t\t\tthis.id = id;\n\t\t}\n\n\t\t@Override\n\t\tprotected Object clone() {\n\t\t\tConcretePrototype cp = null;\n\t\t\ttry {\n\t\t\t\tcp = (ConcretePrototype) super.clone();\n\t\t\t} catch (CloneNotSupportedException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\treturn cp;\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn \"ConcretePrototype [name=\" + name + \", id=\" + id + \"]\";\n\t\t}\n\t\t\n\t}\n```\n#### 测试类 ：\n``` java\n\tpackage cn.sakuraffy.prototype;\n\n\tpublic class Client {\n\t\tpublic static void main(String[] args) {\n\t\t\tConcretePrototype cp = new ConcretePrototype(\"sakuraffy\",8);\n\t\t\tConcretePrototype cp1 = (ConcretePrototype) cp.clone();\n\t\t\tSystem.out.println(cp);\n\t\t\tSystem.out.println(cp1);\n\t\t\tSystem.out.println(cp.getClass() == cp1.getClass());\n\t\t\tSystem.out.println(cp == cp1);\n\t\t}\n\t}\n```\n#### 输出结果 ：\n``` java\nConcretePrototype [name=sakuraffy, id=8]\nConcretePrototype [name=sakuraffy, id=8]\ntrue\nfalse\n```\n\n### 原型模式优缺点及应用场景\n\n#### 优点 \n- 提高对象创建效率\n- 逃避构造函数的约束\n#### 缺点 \n- 逃避构造函数的约束\n- 需要为每一个类装配一个克隆方法。对已有类进行改造，需要修改其源码，违背开关原则\n#### 应用场景\n- 创建对象成本较大的时候\n\n### 原型模式在Java中的应用\n\n#### 浅复制\n浅复制(浅克隆) 简单来说 ： 浅复制仅仅考虑要复制的对象，而不考虑该对象所引用的对象\n``` java\n\tpackage cn.sakuraffy.prototype;\n\n\tpublic class ShallowClone implements Cloneable {                                              \n\t\tprivate int id;\n\t\tprivate String name;\n\t\tprivate Book book;\n\t\t\n\t\tprivate static class Book {\n\t\t\tprivate String name;\n\n\t\t\tpublic Book(String name) {\n\t\t\t\tsuper();\n\t\t\t\tthis.name = name;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String toString() {\n\t\t\t\treturn \"Book [name=\" + name + \"]\";\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\tpublic ShallowClone(int id, String name, Book book) {\n\t\t\tsuper();\n\t\t\tthis.id = id;\n\t\t\tthis.name = name;\n\t\t\tthis.book = book;\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn \"ShallowClone [id=\" + id + \", name=\" + name + \", book=\" + book\n\t\t\t\t\t+ \"]\";\n\t\t}\n\n\t\t@Override\n\t\tprotected Object clone() {\n\t\t\tShallowClone sc = null;\n\t\t\ttry {\n\t\t\t\tsc = (ShallowClone) super.clone();\n\t\t\t} catch (CloneNotSupportedException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\treturn sc;\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) throws InterruptedException {\n\t\t\tBook book = new Book(\"Goodbye\");\n\t\t\tShallowClone sc = new ShallowClone(1, \"sakuraffy\", book);\n\t\t\tDeepClone sc1 = (DeepClone) sc.clone();\n\t\t\tThread.sleep(1000);\n\t\t\t//这里简单使用，用getter和setter更合理\n\t\t\tsc1.name = \"sakura\";\n\t\t\tsc1.book.name = \"Hello\";\n\t\t\tsc1.id = 2;\n\t\t\tSystem.out.println(sc);\n\t\t\tSystem.out.println(sc1);\n\t\t\tSystem.out.println(sc.book == sc1.book);\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\nShallowClone [id=1, name=sakuraffy, book=Book [name=Hello]]\nShallowClone [id=2, name=sakura, book=Book [name=Hello]]\ntrue\n```\n\n通过对比输出可以看出 ：两个ShallowClone对象所引用的Book是同一对象，String和Date都是实行深复制的\n\n#### 深复制\n深复制(深克隆) 简单来说 ： 深复制不仅仅考虑要复制的对象，而且还考虑该对象所引用的对象\n\n``` java\n\tpackage cn.sakuraffy.prototype;\n\n\tpublic class DeepClone implements Cloneable {\n\t\tprivate int id;\n\t\tprivate String name;\n\t\tprivate Book book;\n\t\t\n\t\t//要实现对象引用的深复制，其所引用的对象必须实现实现Cloneable接口                          \n\t\tprivate static class Book implements Cloneable {\n\t\t\tprivate String name;\n\n\t\t\tpublic Book(String name) {\n\t\t\t\tsuper();\n\t\t\t\tthis.name = name;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tprotected Object clone() throws CloneNotSupportedException {                  \n\t\t\t\treturn super.clone();\n\t\t\t}\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic String toString() {\n\t\t\t\treturn \"Book [name=\" + name + \"]\";\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\tpublic DeepClone(int id, String name, Book book) {\n\t\t\tsuper();\n\t\t\tthis.id = id;\n\t\t\tthis.name = name;\n\t\t\tthis.book = book;\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn \"DeepClone [id=\" + id + \", name=\" + name + \", book=\" + book\n\t\t\t\t\t+ \"]\";\n\t\t}\n\n\t\t@Override\n\t\tprotected Object clone() {\n\t\t\tDeepClone dc = null;\n\t\t\ttry {\n\t\t\t\tdc = (DeepClone) super.clone();\n\t\t\t\t//重点\n\t\t\t\tdc.book = (Book) this.book.clone();\n\t\t\t} catch (CloneNotSupportedException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\treturn dc;\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) throws InterruptedException {\n\t\t\tBook book = new Book(\"Goodbye\");\n\t\t\tDeepClone dc = new DeepClone(1, \"sakuraffy\", book);\n\t\t\tDeepClone dc1 = (DeepClone) dc.clone();\n\t\t\t//这里简单使用，用getter和setter更合理\n\t\t\tdc1.name = \"sakura\";\n\t\t\tdc1.id = 2;\n\t\t\tdc1.book.name = \"Hello\";\n\t\t\tSystem.out.println(dc);\n\t\t\tSystem.out.println(dc1);\n\t\t\tSystem.out.println(dc.book == dc1.book);\n\t\t}\n\t}\n```\n输出结果 ：\n``` java\nDeepClone [id=1, name=sakuraffy, book=Book [name=Goodbye]]\nDeepClone [id=2, name=sakura, book=Book [name=Hello]]\nfalse\n```\n\n通过对比输出可以看出 ：两个DeepClone对象所引用的Book不是同一对象，它的实现就是再将Book都克隆一份给克隆对象","slug":"pattern_prototype","published":1,"updated":"2017-03-08T12:36:23.770Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5fh004fqoq1bv20cntl","content":"<p>在日常开发中，有些类的结构异常复杂，但恰巧我们需要频繁地创建与使用它们。我们知道创建对象会占用大量的CPU资源，这时候我们就可以使用原型模式将该类的对象进行复制，从而减少因对象创建而消耗的资源和时间</p>\n<h3 id=\"原型模式的UML图和角色\"><a href=\"#原型模式的UML图和角色\" class=\"headerlink\" title=\"原型模式的UML图和角色\"></a>原型模式的UML图和角色</h3><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/pattern/prototype/p1.jpg\">\n<p>Prototype：抽象原型类。声明克隆自身的接口(这里直接借用Java的Cloneable接口)。<br>ConcretePrototype：具体原型类。实现克隆的具体操作。 </p>\n<a id=\"more\"></a>\n<h3 id=\"源码实现\"><a href=\"#源码实现\" class=\"headerlink\" title=\"源码实现\"></a>源码实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.prototype;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcretePrototype</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span> </span>&#123;                                       </div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> String name;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConcretePrototype</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> id)</span> </span>&#123;                                       </div><div class=\"line\">\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> name;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> id;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tConcretePrototype cp = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tcp = (ConcretePrototype) <span class=\"keyword\">super</span>.clone();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> cp;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"ConcretePrototype [name=\"</span> + name + <span class=\"string\">\", id=\"</span> + id + <span class=\"string\">\"]\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"测试类-：\"><a href=\"#测试类-：\" class=\"headerlink\" title=\"测试类 ：\"></a>测试类 ：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.prototype;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tConcretePrototype cp = <span class=\"keyword\">new</span> ConcretePrototype(<span class=\"string\">\"sakuraffy\"</span>,<span class=\"number\">8</span>);</div><div class=\"line\">\t\tConcretePrototype cp1 = (ConcretePrototype) cp.clone();</div><div class=\"line\">\t\tSystem.out.println(cp);</div><div class=\"line\">\t\tSystem.out.println(cp1);</div><div class=\"line\">\t\tSystem.out.println(cp.getClass() == cp1.getClass());</div><div class=\"line\">\t\tSystem.out.println(cp == cp1);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"输出结果-：\"><a href=\"#输出结果-：\" class=\"headerlink\" title=\"输出结果 ：\"></a>输出结果 ：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">ConcretePrototype [name=sakuraffy, id=<span class=\"number\">8</span>]</div><div class=\"line\">ConcretePrototype [name=sakuraffy, id=<span class=\"number\">8</span>]</div><div class=\"line\"><span class=\"keyword\">true</span></div><div class=\"line\"><span class=\"keyword\">false</span></div></pre></td></tr></table></figure>\n<h3 id=\"原型模式优缺点及应用场景\"><a href=\"#原型模式优缺点及应用场景\" class=\"headerlink\" title=\"原型模式优缺点及应用场景\"></a>原型模式优缺点及应用场景</h3><h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>提高对象创建效率</li>\n<li>逃避构造函数的约束<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4></li>\n<li>逃避构造函数的约束</li>\n<li>需要为每一个类装配一个克隆方法。对已有类进行改造，需要修改其源码，违背开关原则<h4 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h4></li>\n<li>创建对象成本较大的时候</li>\n</ul>\n<h3 id=\"原型模式在Java中的应用\"><a href=\"#原型模式在Java中的应用\" class=\"headerlink\" title=\"原型模式在Java中的应用\"></a>原型模式在Java中的应用</h3><h4 id=\"浅复制\"><a href=\"#浅复制\" class=\"headerlink\" title=\"浅复制\"></a>浅复制</h4><p>浅复制(浅克隆) 简单来说 ： 浅复制仅仅考虑要复制的对象，而不考虑该对象所引用的对象<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.prototype;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShallowClone</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span> </span>&#123;                                              </div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String name;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Book book;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> String name;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Book</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"Book [name=\"</span> + name + <span class=\"string\">\"]\"</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ShallowClone</span><span class=\"params\">(<span class=\"keyword\">int</span> id, String name, Book book)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.book = book;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"ShallowClone [id=\"</span> + id + <span class=\"string\">\", name=\"</span> + name + <span class=\"string\">\", book=\"</span> + book</div><div class=\"line\">\t\t\t\t+ <span class=\"string\">\"]\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tShallowClone sc = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tsc = (ShallowClone) <span class=\"keyword\">super</span>.clone();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> sc;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">\t\tBook book = <span class=\"keyword\">new</span> Book(<span class=\"string\">\"Goodbye\"</span>);</div><div class=\"line\">\t\tShallowClone sc = <span class=\"keyword\">new</span> ShallowClone(<span class=\"number\">1</span>, <span class=\"string\">\"sakuraffy\"</span>, book);</div><div class=\"line\">\t\tDeepClone sc1 = (DeepClone) sc.clone();</div><div class=\"line\">\t\tThread.sleep(<span class=\"number\">1000</span>);</div><div class=\"line\">\t\t<span class=\"comment\">//这里简单使用，用getter和setter更合理</span></div><div class=\"line\">\t\tsc1.name = <span class=\"string\">\"sakura\"</span>;</div><div class=\"line\">\t\tsc1.book.name = <span class=\"string\">\"Hello\"</span>;</div><div class=\"line\">\t\tsc1.id = <span class=\"number\">2</span>;</div><div class=\"line\">\t\tSystem.out.println(sc);</div><div class=\"line\">\t\tSystem.out.println(sc1);</div><div class=\"line\">\t\tSystem.out.println(sc.book == sc1.book);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ShallowClone [id=<span class=\"number\">1</span>, name=sakuraffy, book=Book [name=Hello]]</div><div class=\"line\">ShallowClone [id=<span class=\"number\">2</span>, name=sakura, book=Book [name=Hello]]</div><div class=\"line\"><span class=\"keyword\">true</span></div></pre></td></tr></table></figure></p>\n<p>通过对比输出可以看出 ：两个ShallowClone对象所引用的Book是同一对象，String和Date都是实行深复制的</p>\n<h4 id=\"深复制\"><a href=\"#深复制\" class=\"headerlink\" title=\"深复制\"></a>深复制</h4><p>深复制(深克隆) 简单来说 ： 深复制不仅仅考虑要复制的对象，而且还考虑该对象所引用的对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.prototype;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DeepClone</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String name;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Book book;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//要实现对象引用的深复制，其所引用的对象必须实现实现Cloneable接口                          </span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> String name;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Book</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>&#123;                  </div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.clone();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"Book [name=\"</span> + name + <span class=\"string\">\"]\"</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DeepClone</span><span class=\"params\">(<span class=\"keyword\">int</span> id, String name, Book book)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.book = book;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"DeepClone [id=\"</span> + id + <span class=\"string\">\", name=\"</span> + name + <span class=\"string\">\", book=\"</span> + book</div><div class=\"line\">\t\t\t\t+ <span class=\"string\">\"]\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tDeepClone dc = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tdc = (DeepClone) <span class=\"keyword\">super</span>.clone();</div><div class=\"line\">\t\t\t<span class=\"comment\">//重点</span></div><div class=\"line\">\t\t\tdc.book = (Book) <span class=\"keyword\">this</span>.book.clone();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> dc;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">\t\tBook book = <span class=\"keyword\">new</span> Book(<span class=\"string\">\"Goodbye\"</span>);</div><div class=\"line\">\t\tDeepClone dc = <span class=\"keyword\">new</span> DeepClone(<span class=\"number\">1</span>, <span class=\"string\">\"sakuraffy\"</span>, book);</div><div class=\"line\">\t\tDeepClone dc1 = (DeepClone) dc.clone();</div><div class=\"line\">\t\t<span class=\"comment\">//这里简单使用，用getter和setter更合理</span></div><div class=\"line\">\t\tdc1.name = <span class=\"string\">\"sakura\"</span>;</div><div class=\"line\">\t\tdc1.id = <span class=\"number\">2</span>;</div><div class=\"line\">\t\tdc1.book.name = <span class=\"string\">\"Hello\"</span>;</div><div class=\"line\">\t\tSystem.out.println(dc);</div><div class=\"line\">\t\tSystem.out.println(dc1);</div><div class=\"line\">\t\tSystem.out.println(dc.book == dc1.book);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">DeepClone [id=<span class=\"number\">1</span>, name=sakuraffy, book=Book [name=Goodbye]]</div><div class=\"line\">DeepClone [id=<span class=\"number\">2</span>, name=sakura, book=Book [name=Hello]]</div><div class=\"line\"><span class=\"keyword\">false</span></div></pre></td></tr></table></figure></p>\n<p>通过对比输出可以看出 ：两个DeepClone对象所引用的Book不是同一对象，它的实现就是再将Book都克隆一份给克隆对象</p>\n","excerpt":"<p>在日常开发中，有些类的结构异常复杂，但恰巧我们需要频繁地创建与使用它们。我们知道创建对象会占用大量的CPU资源，这时候我们就可以使用原型模式将该类的对象进行复制，从而减少因对象创建而消耗的资源和时间</p>\n<h3 id=\"原型模式的UML图和角色\"><a href=\"#原型模式的UML图和角色\" class=\"headerlink\" title=\"原型模式的UML图和角色\"></a>原型模式的UML图和角色</h3><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/pattern/prototype/p1.jpg\">\n<p>Prototype：抽象原型类。声明克隆自身的接口(这里直接借用Java的Cloneable接口)。<br>ConcretePrototype：具体原型类。实现克隆的具体操作。 </p>","more":"<h3 id=\"源码实现\"><a href=\"#源码实现\" class=\"headerlink\" title=\"源码实现\"></a>源码实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.prototype;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcretePrototype</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span> </span>&#123;                                       </div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> String name;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConcretePrototype</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> id)</span> </span>&#123;                                       </div><div class=\"line\">\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> name;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> id;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tConcretePrototype cp = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tcp = (ConcretePrototype) <span class=\"keyword\">super</span>.clone();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> cp;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"ConcretePrototype [name=\"</span> + name + <span class=\"string\">\", id=\"</span> + id + <span class=\"string\">\"]\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"测试类-：\"><a href=\"#测试类-：\" class=\"headerlink\" title=\"测试类 ：\"></a>测试类 ：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.prototype;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tConcretePrototype cp = <span class=\"keyword\">new</span> ConcretePrototype(<span class=\"string\">\"sakuraffy\"</span>,<span class=\"number\">8</span>);</div><div class=\"line\">\t\tConcretePrototype cp1 = (ConcretePrototype) cp.clone();</div><div class=\"line\">\t\tSystem.out.println(cp);</div><div class=\"line\">\t\tSystem.out.println(cp1);</div><div class=\"line\">\t\tSystem.out.println(cp.getClass() == cp1.getClass());</div><div class=\"line\">\t\tSystem.out.println(cp == cp1);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"输出结果-：\"><a href=\"#输出结果-：\" class=\"headerlink\" title=\"输出结果 ：\"></a>输出结果 ：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">ConcretePrototype [name=sakuraffy, id=<span class=\"number\">8</span>]</div><div class=\"line\">ConcretePrototype [name=sakuraffy, id=<span class=\"number\">8</span>]</div><div class=\"line\"><span class=\"keyword\">true</span></div><div class=\"line\"><span class=\"keyword\">false</span></div></pre></td></tr></table></figure>\n<h3 id=\"原型模式优缺点及应用场景\"><a href=\"#原型模式优缺点及应用场景\" class=\"headerlink\" title=\"原型模式优缺点及应用场景\"></a>原型模式优缺点及应用场景</h3><h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>提高对象创建效率</li>\n<li>逃避构造函数的约束<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4></li>\n<li>逃避构造函数的约束</li>\n<li>需要为每一个类装配一个克隆方法。对已有类进行改造，需要修改其源码，违背开关原则<h4 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h4></li>\n<li>创建对象成本较大的时候</li>\n</ul>\n<h3 id=\"原型模式在Java中的应用\"><a href=\"#原型模式在Java中的应用\" class=\"headerlink\" title=\"原型模式在Java中的应用\"></a>原型模式在Java中的应用</h3><h4 id=\"浅复制\"><a href=\"#浅复制\" class=\"headerlink\" title=\"浅复制\"></a>浅复制</h4><p>浅复制(浅克隆) 简单来说 ： 浅复制仅仅考虑要复制的对象，而不考虑该对象所引用的对象<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.prototype;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShallowClone</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span> </span>&#123;                                              </div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String name;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Book book;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> String name;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Book</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"Book [name=\"</span> + name + <span class=\"string\">\"]\"</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ShallowClone</span><span class=\"params\">(<span class=\"keyword\">int</span> id, String name, Book book)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.book = book;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"ShallowClone [id=\"</span> + id + <span class=\"string\">\", name=\"</span> + name + <span class=\"string\">\", book=\"</span> + book</div><div class=\"line\">\t\t\t\t+ <span class=\"string\">\"]\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tShallowClone sc = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tsc = (ShallowClone) <span class=\"keyword\">super</span>.clone();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> sc;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">\t\tBook book = <span class=\"keyword\">new</span> Book(<span class=\"string\">\"Goodbye\"</span>);</div><div class=\"line\">\t\tShallowClone sc = <span class=\"keyword\">new</span> ShallowClone(<span class=\"number\">1</span>, <span class=\"string\">\"sakuraffy\"</span>, book);</div><div class=\"line\">\t\tDeepClone sc1 = (DeepClone) sc.clone();</div><div class=\"line\">\t\tThread.sleep(<span class=\"number\">1000</span>);</div><div class=\"line\">\t\t<span class=\"comment\">//这里简单使用，用getter和setter更合理</span></div><div class=\"line\">\t\tsc1.name = <span class=\"string\">\"sakura\"</span>;</div><div class=\"line\">\t\tsc1.book.name = <span class=\"string\">\"Hello\"</span>;</div><div class=\"line\">\t\tsc1.id = <span class=\"number\">2</span>;</div><div class=\"line\">\t\tSystem.out.println(sc);</div><div class=\"line\">\t\tSystem.out.println(sc1);</div><div class=\"line\">\t\tSystem.out.println(sc.book == sc1.book);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ShallowClone [id=<span class=\"number\">1</span>, name=sakuraffy, book=Book [name=Hello]]</div><div class=\"line\">ShallowClone [id=<span class=\"number\">2</span>, name=sakura, book=Book [name=Hello]]</div><div class=\"line\"><span class=\"keyword\">true</span></div></pre></td></tr></table></figure></p>\n<p>通过对比输出可以看出 ：两个ShallowClone对象所引用的Book是同一对象，String和Date都是实行深复制的</p>\n<h4 id=\"深复制\"><a href=\"#深复制\" class=\"headerlink\" title=\"深复制\"></a>深复制</h4><p>深复制(深克隆) 简单来说 ： 深复制不仅仅考虑要复制的对象，而且还考虑该对象所引用的对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.prototype;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DeepClone</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String name;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Book book;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//要实现对象引用的深复制，其所引用的对象必须实现实现Cloneable接口                          </span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> String name;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Book</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>&#123;                  </div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.clone();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"Book [name=\"</span> + name + <span class=\"string\">\"]\"</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DeepClone</span><span class=\"params\">(<span class=\"keyword\">int</span> id, String name, Book book)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.book = book;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"DeepClone [id=\"</span> + id + <span class=\"string\">\", name=\"</span> + name + <span class=\"string\">\", book=\"</span> + book</div><div class=\"line\">\t\t\t\t+ <span class=\"string\">\"]\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tDeepClone dc = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tdc = (DeepClone) <span class=\"keyword\">super</span>.clone();</div><div class=\"line\">\t\t\t<span class=\"comment\">//重点</span></div><div class=\"line\">\t\t\tdc.book = (Book) <span class=\"keyword\">this</span>.book.clone();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> dc;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">\t\tBook book = <span class=\"keyword\">new</span> Book(<span class=\"string\">\"Goodbye\"</span>);</div><div class=\"line\">\t\tDeepClone dc = <span class=\"keyword\">new</span> DeepClone(<span class=\"number\">1</span>, <span class=\"string\">\"sakuraffy\"</span>, book);</div><div class=\"line\">\t\tDeepClone dc1 = (DeepClone) dc.clone();</div><div class=\"line\">\t\t<span class=\"comment\">//这里简单使用，用getter和setter更合理</span></div><div class=\"line\">\t\tdc1.name = <span class=\"string\">\"sakura\"</span>;</div><div class=\"line\">\t\tdc1.id = <span class=\"number\">2</span>;</div><div class=\"line\">\t\tdc1.book.name = <span class=\"string\">\"Hello\"</span>;</div><div class=\"line\">\t\tSystem.out.println(dc);</div><div class=\"line\">\t\tSystem.out.println(dc1);</div><div class=\"line\">\t\tSystem.out.println(dc.book == dc1.book);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">DeepClone [id=<span class=\"number\">1</span>, name=sakuraffy, book=Book [name=Goodbye]]</div><div class=\"line\">DeepClone [id=<span class=\"number\">2</span>, name=sakura, book=Book [name=Hello]]</div><div class=\"line\"><span class=\"keyword\">false</span></div></pre></td></tr></table></figure></p>\n<p>通过对比输出可以看出 ：两个DeepClone对象所引用的Book不是同一对象，它的实现就是再将Book都克隆一份给克隆对象</p>"},{"title":"观察者模式(Observer)","date":"2017-03-08T10:43:49.000Z","_content":"","source":"_posts/pattern_observer.md","raw":"---\ntitle: 观察者模式(Observer)\ndate: 2017-03-08 18:43:49\ntags:\n\t- 设计模式\n---\n","slug":"pattern_observer","published":1,"updated":"2017-03-08T10:44:51.506Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5fj004hqoq1ygeq5dwn","content":"","excerpt":"","more":""},{"title":"代理模式(Proxy)","date":"2016-12-14T13:50:05.000Z","_content":"在生活中，我们经常会需要别人代替我们做一些事情，其可能的原因：没有时间，亦或不方便。而程序中也有这种可能存在，我们不直接使用引用对象，而是用其一个“替身”去完成所需要的工作，这就是代理模式\n\n<!-- more -->\n\n代理模式一般分为两种，静态代理和动态代理\n\n### 代理模式的角色和UML类图\nSubject: 抽象角色，声明真实对象和代理对象的共同接口\nProxy: 代理角色，用来代理和封装真实主题\nRealSubject: 真实角色，实现真正的业务逻辑\nClient： 客户端，实现调用与测试\n{% qnimg pattern/proxy/p1.jpg 'class:class1 class2' normal:yes %}\n\n### 静态代理\n这里先说下业务，房东将房委托中介出租，中介为租房者提供看房机会和收取中介费\n\n#### 抽象角色 Rentable\n``` java\npackage cn.sakuraffy.proxy;\n\npublic interface Rentable {\n\tpublic void rent();\n}\n```\n\n#### 真实角色 Host\n``` java\npackage cn.sakuraffy.proxy;\n\npublic class Host implements Rentable {\n\n\t@Override\n\tpublic void rent() {\n\t\tSystem.out.println(\"---house rent---\");\n\t}\n\n}\n```\n\n#### 代理角色 StaticProxy\n``` java\npackage cn.sakuraffy.proxy;\n\npublic class StaticProxy implements Rentable {\n\n\tprivate Host host;\n\t\n\tpublic StaticProxy(Host host) {\n\t\tsuper();\n\t\tthis.host = host;\n\t}\n\n\n\n\t@Override\n\tpublic void rent() {\n\t\tSystem.out.println(\"---visit house----\");\n\t\thost.rent();\n\t\tSystem.out.println(\"---get cost----\");\n\t}\n\t\n}\n```\n\n#### Client角色 StaticProxyClient\n``` java\npackage cn.sakuraffy.proxy;\n\npublic class StaticProxyClient {\n\tpublic static void main(String[] args) {\n\t\tHost host = new Host();\n\t\tStaticProxy proxy = new StaticProxy(host);\n\t\tproxy.rent();\n\t}\n}\n```\n输出结果 ：\n``` java\n---visit house----\n---house rent---\n---get cost----\n```\n\n### 动态代理\n在给出相应代码之前，先来说一下动态代理是基于jdk proxy代理，那么就需要实现相对应的接口InvocationHandler，并重写invoke()方法，这里的代理是针对接口来说，只要获取了相对应的接口，就可以相对应的内容，而不仅仅局限于Rentable接口\n\n#### 动态代理类  DynamicProxy\n``` java\npackage cn.sakuraffy.proxy;\n\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\n\npublic class DynamicProxy implements InvocationHandler{\n\t\n\tprivate Object targe;\n\t\n\tpublic DynamicProxy(Object targe) {\n\t\tsuper();\n\t\tthis.targe = targe;\n\t}\n\n\t/**\n\t * \t@param proxy 代理类对象\n\t * \t@param method 代理类的调用处理程序的方法对象\n\t * \t@param args 代理类的调用处理程序的方法的参数\n\t */\n\t@Override\n\tpublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable {   \n\t\tSystem.out.println(\"---dynamic proxy start---\");\n\t\tObject result = method.invoke(targe, args);\n\t\tSystem.out.println(\"---dynamic proxy end---\");\n\t\treturn result;\n\t}\n\t\n\tpublic Object getProxy(){\n\t\treturn Proxy.newProxyInstance(this.getClass().getClassLoader(),\n\t\t\t\ttarge.getClass().getInterfaces(), this);\n\t}\n}\n```\n#### 动态代理测试  DynamicProxyClient\n``` java\npackage cn.sakuraffy.proxy;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\n\npublic class DynamicProxyClient {\n\t@SuppressWarnings(\"unchecked\")\n\tpublic static void main(String[] args) {\n\t\tHost host = new Host();\n\t\tDynamicProxy dp = new DynamicProxy(host);\n\t\tRentable proxy = (Rentable) dp.getProxy();\n\t\tproxy.rent();\n\t\t\n\t\tCollection<String> c = new ArrayList<>();\n\t\tdp = new DynamicProxy(c);\n\t\tCollection<String> proxy2 = (Collection<String>) dp.getProxy();       \n\t\tproxy2.add(\"Hello\");\n\t}\n}\n```\n输出结果 ：\n``` java\n---dynamic proxy start---\n---house rent---\n---dynamic proxy end---\n---dynamic proxy start---\n---dynamic proxy end---\n```\n\n### 代理模式适用场景与优缺点\n#### 适用场景\n- 远程代理：为一个对象在不同的地址空间提供局部代表。这样可以隐藏一个对象存在于不同地址空间的事实\n- 虚拟代理：通过使用过一个小的对象代理一个大对象。这样就可以减少系统的开销\n- 保护代理：用来控制对真实对象的访问权限\n\n#### 优缺点\n- 能够协调调用者和被调用者，在一定程度上降低了系统的耦合度\n- 在客户端和真实对象之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢","source":"_posts/pattern_proxy.md","raw":"---\ntitle: 代理模式(Proxy)\ndate: 2016-12-14 21:50:05\ntags:\n\t- 设计模式\n---\n在生活中，我们经常会需要别人代替我们做一些事情，其可能的原因：没有时间，亦或不方便。而程序中也有这种可能存在，我们不直接使用引用对象，而是用其一个“替身”去完成所需要的工作，这就是代理模式\n\n<!-- more -->\n\n代理模式一般分为两种，静态代理和动态代理\n\n### 代理模式的角色和UML类图\nSubject: 抽象角色，声明真实对象和代理对象的共同接口\nProxy: 代理角色，用来代理和封装真实主题\nRealSubject: 真实角色，实现真正的业务逻辑\nClient： 客户端，实现调用与测试\n{% qnimg pattern/proxy/p1.jpg 'class:class1 class2' normal:yes %}\n\n### 静态代理\n这里先说下业务，房东将房委托中介出租，中介为租房者提供看房机会和收取中介费\n\n#### 抽象角色 Rentable\n``` java\npackage cn.sakuraffy.proxy;\n\npublic interface Rentable {\n\tpublic void rent();\n}\n```\n\n#### 真实角色 Host\n``` java\npackage cn.sakuraffy.proxy;\n\npublic class Host implements Rentable {\n\n\t@Override\n\tpublic void rent() {\n\t\tSystem.out.println(\"---house rent---\");\n\t}\n\n}\n```\n\n#### 代理角色 StaticProxy\n``` java\npackage cn.sakuraffy.proxy;\n\npublic class StaticProxy implements Rentable {\n\n\tprivate Host host;\n\t\n\tpublic StaticProxy(Host host) {\n\t\tsuper();\n\t\tthis.host = host;\n\t}\n\n\n\n\t@Override\n\tpublic void rent() {\n\t\tSystem.out.println(\"---visit house----\");\n\t\thost.rent();\n\t\tSystem.out.println(\"---get cost----\");\n\t}\n\t\n}\n```\n\n#### Client角色 StaticProxyClient\n``` java\npackage cn.sakuraffy.proxy;\n\npublic class StaticProxyClient {\n\tpublic static void main(String[] args) {\n\t\tHost host = new Host();\n\t\tStaticProxy proxy = new StaticProxy(host);\n\t\tproxy.rent();\n\t}\n}\n```\n输出结果 ：\n``` java\n---visit house----\n---house rent---\n---get cost----\n```\n\n### 动态代理\n在给出相应代码之前，先来说一下动态代理是基于jdk proxy代理，那么就需要实现相对应的接口InvocationHandler，并重写invoke()方法，这里的代理是针对接口来说，只要获取了相对应的接口，就可以相对应的内容，而不仅仅局限于Rentable接口\n\n#### 动态代理类  DynamicProxy\n``` java\npackage cn.sakuraffy.proxy;\n\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\n\npublic class DynamicProxy implements InvocationHandler{\n\t\n\tprivate Object targe;\n\t\n\tpublic DynamicProxy(Object targe) {\n\t\tsuper();\n\t\tthis.targe = targe;\n\t}\n\n\t/**\n\t * \t@param proxy 代理类对象\n\t * \t@param method 代理类的调用处理程序的方法对象\n\t * \t@param args 代理类的调用处理程序的方法的参数\n\t */\n\t@Override\n\tpublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable {   \n\t\tSystem.out.println(\"---dynamic proxy start---\");\n\t\tObject result = method.invoke(targe, args);\n\t\tSystem.out.println(\"---dynamic proxy end---\");\n\t\treturn result;\n\t}\n\t\n\tpublic Object getProxy(){\n\t\treturn Proxy.newProxyInstance(this.getClass().getClassLoader(),\n\t\t\t\ttarge.getClass().getInterfaces(), this);\n\t}\n}\n```\n#### 动态代理测试  DynamicProxyClient\n``` java\npackage cn.sakuraffy.proxy;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\n\npublic class DynamicProxyClient {\n\t@SuppressWarnings(\"unchecked\")\n\tpublic static void main(String[] args) {\n\t\tHost host = new Host();\n\t\tDynamicProxy dp = new DynamicProxy(host);\n\t\tRentable proxy = (Rentable) dp.getProxy();\n\t\tproxy.rent();\n\t\t\n\t\tCollection<String> c = new ArrayList<>();\n\t\tdp = new DynamicProxy(c);\n\t\tCollection<String> proxy2 = (Collection<String>) dp.getProxy();       \n\t\tproxy2.add(\"Hello\");\n\t}\n}\n```\n输出结果 ：\n``` java\n---dynamic proxy start---\n---house rent---\n---dynamic proxy end---\n---dynamic proxy start---\n---dynamic proxy end---\n```\n\n### 代理模式适用场景与优缺点\n#### 适用场景\n- 远程代理：为一个对象在不同的地址空间提供局部代表。这样可以隐藏一个对象存在于不同地址空间的事实\n- 虚拟代理：通过使用过一个小的对象代理一个大对象。这样就可以减少系统的开销\n- 保护代理：用来控制对真实对象的访问权限\n\n#### 优缺点\n- 能够协调调用者和被调用者，在一定程度上降低了系统的耦合度\n- 在客户端和真实对象之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢","slug":"pattern_proxy","published":1,"updated":"2016-12-27T22:13:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5fk004jqoq1jc04bsya","content":"<p>在生活中，我们经常会需要别人代替我们做一些事情，其可能的原因：没有时间，亦或不方便。而程序中也有这种可能存在，我们不直接使用引用对象，而是用其一个“替身”去完成所需要的工作，这就是代理模式</p>\n<a id=\"more\"></a>\n<p>代理模式一般分为两种，静态代理和动态代理</p>\n<h3 id=\"代理模式的角色和UML类图\"><a href=\"#代理模式的角色和UML类图\" class=\"headerlink\" title=\"代理模式的角色和UML类图\"></a>代理模式的角色和UML类图</h3><p>Subject: 抽象角色，声明真实对象和代理对象的共同接口<br>Proxy: 代理角色，用来代理和封装真实主题<br>RealSubject: 真实角色，实现真正的业务逻辑<br>Client： 客户端，实现调用与测试<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/pattern/proxy/p1.jpg\"></p>\n<h3 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h3><p>这里先说下业务，房东将房委托中介出租，中介为租房者提供看房机会和收取中介费</p>\n<h4 id=\"抽象角色-Rentable\"><a href=\"#抽象角色-Rentable\" class=\"headerlink\" title=\"抽象角色 Rentable\"></a>抽象角色 Rentable</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.proxy;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Rentable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rent</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"真实角色-Host\"><a href=\"#真实角色-Host\" class=\"headerlink\" title=\"真实角色 Host\"></a>真实角色 Host</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.proxy;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Host</span> <span class=\"keyword\">implements</span> <span class=\"title\">Rentable</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rent</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"---house rent---\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"代理角色-StaticProxy\"><a href=\"#代理角色-StaticProxy\" class=\"headerlink\" title=\"代理角色 StaticProxy\"></a>代理角色 StaticProxy</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.proxy;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaticProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Rentable</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> Host host;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StaticProxy</span><span class=\"params\">(Host host)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.host = host;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rent</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"---visit house----\"</span>);</div><div class=\"line\">\t\thost.rent();</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"---get cost----\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Client角色-StaticProxyClient\"><a href=\"#Client角色-StaticProxyClient\" class=\"headerlink\" title=\"Client角色 StaticProxyClient\"></a>Client角色 StaticProxyClient</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.proxy;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaticProxyClient</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tHost host = <span class=\"keyword\">new</span> Host();</div><div class=\"line\">\t\tStaticProxy proxy = <span class=\"keyword\">new</span> StaticProxy(host);</div><div class=\"line\">\t\tproxy.rent();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">---visit house----</div><div class=\"line\">---house rent---</div><div class=\"line\">---get cost----</div></pre></td></tr></table></figure></p>\n<h3 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h3><p>在给出相应代码之前，先来说一下动态代理是基于jdk proxy代理，那么就需要实现相对应的接口InvocationHandler，并重写invoke()方法，这里的代理是针对接口来说，只要获取了相对应的接口，就可以相对应的内容，而不仅仅局限于Rentable接口</p>\n<h4 id=\"动态代理类-DynamicProxy\"><a href=\"#动态代理类-DynamicProxy\" class=\"headerlink\" title=\"动态代理类  DynamicProxy\"></a>动态代理类  DynamicProxy</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.proxy;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DynamicProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span></span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> Object targe;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DynamicProxy</span><span class=\"params\">(Object targe)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.targe = targe;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * \t<span class=\"doctag\">@param</span> proxy 代理类对象</div><div class=\"line\">\t * \t<span class=\"doctag\">@param</span> method 代理类的调用处理程序的方法对象</div><div class=\"line\">\t * \t<span class=\"doctag\">@param</span> args 代理类的调用处理程序的方法的参数</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;   </div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"---dynamic proxy start---\"</span>);</div><div class=\"line\">\t\tObject result = method.invoke(targe, args);</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"---dynamic proxy end---\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getProxy</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> Proxy.newProxyInstance(<span class=\"keyword\">this</span>.getClass().getClassLoader(),</div><div class=\"line\">\t\t\t\ttarge.getClass().getInterfaces(), <span class=\"keyword\">this</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"动态代理测试-DynamicProxyClient\"><a href=\"#动态代理测试-DynamicProxyClient\" class=\"headerlink\" title=\"动态代理测试  DynamicProxyClient\"></a>动态代理测试  DynamicProxyClient</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.proxy;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Collection;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DynamicProxyClient</span> </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tHost host = <span class=\"keyword\">new</span> Host();</div><div class=\"line\">\t\tDynamicProxy dp = <span class=\"keyword\">new</span> DynamicProxy(host);</div><div class=\"line\">\t\tRentable proxy = (Rentable) dp.getProxy();</div><div class=\"line\">\t\tproxy.rent();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tCollection&lt;String&gt; c = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">\t\tdp = <span class=\"keyword\">new</span> DynamicProxy(c);</div><div class=\"line\">\t\tCollection&lt;String&gt; proxy2 = (Collection&lt;String&gt;) dp.getProxy();       </div><div class=\"line\">\t\tproxy2.add(<span class=\"string\">\"Hello\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">---dynamic proxy start---</div><div class=\"line\">---house rent---</div><div class=\"line\">---dynamic proxy end---</div><div class=\"line\">---dynamic proxy start---</div><div class=\"line\">---dynamic proxy end---</div></pre></td></tr></table></figure></p>\n<h3 id=\"代理模式适用场景与优缺点\"><a href=\"#代理模式适用场景与优缺点\" class=\"headerlink\" title=\"代理模式适用场景与优缺点\"></a>代理模式适用场景与优缺点</h3><h4 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h4><ul>\n<li>远程代理：为一个对象在不同的地址空间提供局部代表。这样可以隐藏一个对象存在于不同地址空间的事实</li>\n<li>虚拟代理：通过使用过一个小的对象代理一个大对象。这样就可以减少系统的开销</li>\n<li>保护代理：用来控制对真实对象的访问权限</li>\n</ul>\n<h4 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h4><ul>\n<li>能够协调调用者和被调用者，在一定程度上降低了系统的耦合度</li>\n<li>在客户端和真实对象之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢</li>\n</ul>\n","excerpt":"<p>在生活中，我们经常会需要别人代替我们做一些事情，其可能的原因：没有时间，亦或不方便。而程序中也有这种可能存在，我们不直接使用引用对象，而是用其一个“替身”去完成所需要的工作，这就是代理模式</p>","more":"<p>代理模式一般分为两种，静态代理和动态代理</p>\n<h3 id=\"代理模式的角色和UML类图\"><a href=\"#代理模式的角色和UML类图\" class=\"headerlink\" title=\"代理模式的角色和UML类图\"></a>代理模式的角色和UML类图</h3><p>Subject: 抽象角色，声明真实对象和代理对象的共同接口<br>Proxy: 代理角色，用来代理和封装真实主题<br>RealSubject: 真实角色，实现真正的业务逻辑<br>Client： 客户端，实现调用与测试<br><img class=\"class1 class2\" src=\"http://oezif1gi7.bkt.clouddn.com/static/img/pattern/proxy/p1.jpg\"></p>\n<h3 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h3><p>这里先说下业务，房东将房委托中介出租，中介为租房者提供看房机会和收取中介费</p>\n<h4 id=\"抽象角色-Rentable\"><a href=\"#抽象角色-Rentable\" class=\"headerlink\" title=\"抽象角色 Rentable\"></a>抽象角色 Rentable</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.proxy;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Rentable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rent</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"真实角色-Host\"><a href=\"#真实角色-Host\" class=\"headerlink\" title=\"真实角色 Host\"></a>真实角色 Host</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.proxy;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Host</span> <span class=\"keyword\">implements</span> <span class=\"title\">Rentable</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rent</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"---house rent---\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"代理角色-StaticProxy\"><a href=\"#代理角色-StaticProxy\" class=\"headerlink\" title=\"代理角色 StaticProxy\"></a>代理角色 StaticProxy</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.proxy;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaticProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Rentable</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> Host host;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StaticProxy</span><span class=\"params\">(Host host)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.host = host;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rent</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"---visit house----\"</span>);</div><div class=\"line\">\t\thost.rent();</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"---get cost----\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Client角色-StaticProxyClient\"><a href=\"#Client角色-StaticProxyClient\" class=\"headerlink\" title=\"Client角色 StaticProxyClient\"></a>Client角色 StaticProxyClient</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.proxy;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaticProxyClient</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tHost host = <span class=\"keyword\">new</span> Host();</div><div class=\"line\">\t\tStaticProxy proxy = <span class=\"keyword\">new</span> StaticProxy(host);</div><div class=\"line\">\t\tproxy.rent();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">---visit house----</div><div class=\"line\">---house rent---</div><div class=\"line\">---get cost----</div></pre></td></tr></table></figure></p>\n<h3 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h3><p>在给出相应代码之前，先来说一下动态代理是基于jdk proxy代理，那么就需要实现相对应的接口InvocationHandler，并重写invoke()方法，这里的代理是针对接口来说，只要获取了相对应的接口，就可以相对应的内容，而不仅仅局限于Rentable接口</p>\n<h4 id=\"动态代理类-DynamicProxy\"><a href=\"#动态代理类-DynamicProxy\" class=\"headerlink\" title=\"动态代理类  DynamicProxy\"></a>动态代理类  DynamicProxy</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.proxy;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DynamicProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span></span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> Object targe;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DynamicProxy</span><span class=\"params\">(Object targe)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.targe = targe;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * \t<span class=\"doctag\">@param</span> proxy 代理类对象</div><div class=\"line\">\t * \t<span class=\"doctag\">@param</span> method 代理类的调用处理程序的方法对象</div><div class=\"line\">\t * \t<span class=\"doctag\">@param</span> args 代理类的调用处理程序的方法的参数</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;   </div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"---dynamic proxy start---\"</span>);</div><div class=\"line\">\t\tObject result = method.invoke(targe, args);</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"---dynamic proxy end---\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getProxy</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> Proxy.newProxyInstance(<span class=\"keyword\">this</span>.getClass().getClassLoader(),</div><div class=\"line\">\t\t\t\ttarge.getClass().getInterfaces(), <span class=\"keyword\">this</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"动态代理测试-DynamicProxyClient\"><a href=\"#动态代理测试-DynamicProxyClient\" class=\"headerlink\" title=\"动态代理测试  DynamicProxyClient\"></a>动态代理测试  DynamicProxyClient</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.proxy;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Collection;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DynamicProxyClient</span> </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tHost host = <span class=\"keyword\">new</span> Host();</div><div class=\"line\">\t\tDynamicProxy dp = <span class=\"keyword\">new</span> DynamicProxy(host);</div><div class=\"line\">\t\tRentable proxy = (Rentable) dp.getProxy();</div><div class=\"line\">\t\tproxy.rent();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tCollection&lt;String&gt; c = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">\t\tdp = <span class=\"keyword\">new</span> DynamicProxy(c);</div><div class=\"line\">\t\tCollection&lt;String&gt; proxy2 = (Collection&lt;String&gt;) dp.getProxy();       </div><div class=\"line\">\t\tproxy2.add(<span class=\"string\">\"Hello\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">---dynamic proxy start---</div><div class=\"line\">---house rent---</div><div class=\"line\">---dynamic proxy end---</div><div class=\"line\">---dynamic proxy start---</div><div class=\"line\">---dynamic proxy end---</div></pre></td></tr></table></figure></p>\n<h3 id=\"代理模式适用场景与优缺点\"><a href=\"#代理模式适用场景与优缺点\" class=\"headerlink\" title=\"代理模式适用场景与优缺点\"></a>代理模式适用场景与优缺点</h3><h4 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h4><ul>\n<li>远程代理：为一个对象在不同的地址空间提供局部代表。这样可以隐藏一个对象存在于不同地址空间的事实</li>\n<li>虚拟代理：通过使用过一个小的对象代理一个大对象。这样就可以减少系统的开销</li>\n<li>保护代理：用来控制对真实对象的访问权限</li>\n</ul>\n<h4 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h4><ul>\n<li>能够协调调用者和被调用者，在一定程度上降低了系统的耦合度</li>\n<li>在客户端和真实对象之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢</li>\n</ul>"},{"title":"单例模式(Singleton)","date":"2016-10-18T10:43:49.000Z","top":999,"_content":"\n\n\n### 什么是单例模式\n\n在程序和项目中，我们经常会创建并使用对象，但我们知道频繁地创建对象会消耗大量的时间，也会降低程序的效率，而单例这种设计模式就是这种问题的，单例顾名思义就是一个类只有一个对象\n\n### 单例模式的几种方式\n\n<!--more-->\n\n#### 懒汉式\n``` java\n\tpackage cn.sakuraffy.singleton;\n\n\tpublic class LazySingleton {\n\t\tprivate final static LazySingleton instance = new LazySingleton();\n\t\t\n\t\tprivate LazySingleton() {}\n\t\t\n\t\tpublic static LazySingleton newInstance() {\n\t\t\treturn instance;\n\t\t}\n\t}\n```\n- 优点 ： 简单\n- 缺点 ： 无论这个类是否被用到，都需要创建instance对象\n\n#### 饿汉式\n``` java\n\tpackage cn.sakuraffy.singleton;\n\n\tpublic class HungrySingleton {\n\t\tprivate static HungrySingleton instance;\n\t\t\n\t\tprivate HungrySingleton() {}\n\n\t\tpublic static HungrySingleton newInstance() {\n\t\t\tif (instance == null) {\n\t\t\t\tinstance = new HungrySingleton();\n\t\t\t} \n\t\t\treturn instance;\n\t\t}\n\t}\n```\n\n- 优点 ： 迟缓，用到的时候才加载。\n- 缺点 ： 在多线程下会出现问题。\n\n#### 双重检验式\n``` java \n\tpackage cn.sakuraffy.singleton;\n\n\tpublic class DoubleCheckSingleton {\n\t\tprivate static DoubleCheckSingleton instance = null;\n\t\t\n\t\tprivate DoubleCheckSingleton() {}\n\t\t\n\t\tpublic static DoubleCheckSingleton newInstance() {\n\t\t\tif (instance == null){\n\t\t\t\tsynchronized (DoubleCheckSingleton.class) {\n\t\t\t\t\t// 避免判断了instance==null的等待线程重复创建instance\n\t\t\t\t\tif (instance == null){  \n\t\t\t\t\t\tinstance = new DoubleCheckSingleton();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn instance;\n\t\t}\n\t}\n```\n\n- 优点 ： 可以同步，性能较高\n- 缺点 ： 在JVM的编译器优化时无法确定先创建栈中的内存还是堆中的内存\n\t下面我们来考虑这么一种情况：线程A开始创建SingletonClass的实例，此时线程B调用了getInstance()方法，\n\t首先判断instance是否为null。按照我们上面所说的内存模型，A已经把instance指向了那块内存，\n\t只是还没有调用构造方法，因此B检测到instance不为null，于是直接把instance返回了——问题出现了，\t尽管instance不为null，但它并没有构造完成，就像一套房子已经给了你钥匙，但你并不能住进去，因为里面还没有收拾。此时，如果B在A将instance构造完成之前就是用了这个实例，程序就会出现错误了！\n\n#### 解决了内存分配的问题了两种方式\n\n使用 volatile 关键词\n``` java\n\tpackage cn.sakuraffy.singleton;\n\n\tpublic class VolatileSingleton {\n\t\tprivate static volatile VolatileSingleton instance = null;\n\t\t\n\t\tprivate VolatileSingleton(){}\n\t\t\n\t\tpublic static VolatileSingleton newInstance() {\n\t\t\tif (instance == null){\n\t\t\t\tsynchronized (VolatileSingleton.class) {\n\t\t\t\t\t// 避免判断了instance==null的等待线程重复创建instance\n\t\t\t\t\tif (instance == null){  \n\t\t\t\t\t\tinstance = new VolatileSingleton();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn instance;\n\t\t}\n\t}\n```\n\n使用内部类\n``` java\n\tpackage cn.sakuraffy.singleton;\n\n\tpublic class InnerClassSingleton {\n\t\tprivate static class SingletonInstance {\n\t\t\tprivate static final InnerClassSingleton instance = new InnerClassSingleton(); \n\t\t}\n\t\t\n\t\tprivate InnerClassSingleton() {}\n\t\t\n\t\tpublic static InnerClassSingleton newInstance() {\n\t\t\treturn SingletonInstance.instance;\n\t\t}\n\t}\n```\n\n### enum  就是天然的单例 (推荐)\n``` java\n\tpackage cn.sakuraffy.singleton;\n\n\tpublic enum EnumSingleton {\n\t\tinstance\n\t}\n\n```\n\n### 单例模式的补充\n\n#### 通过反射破坏单例怎么解决\n``` java\n\tpackage cn.sakuraffy.singleton;\n\n\timport java.lang.reflect.Constructor;\n\n\tpublic class RefectSingletonBug {\n\t\tpublic static void main(String[] args) throws Exception {\n\t\t\tHungrySingleton hs = HungrySingleton.newInstance();\n\t\t\tClass<HungrySingleton> clazz = HungrySingleton.class;\n\t\t\tConstructor<HungrySingleton> c = clazz.getDeclaredConstructor();\n\t\t\tc.setAccessible(true);\n\t\t\tHungrySingleton hs1 = c.newInstance();\n\t\t\t\n\t\t\tSystem.out.println(hs);\n\t\t\tSystem.out.println(hs1);\n\t\t\tSystem.out.println(hs == hs1);\n\t\t}\n\t}\n```\n\n- 输出结果：\n``` java\ncn.sakuraffy.singleton.HungrySingleton@2a139a55\ncn.sakuraffy.singleton.HungrySingleton@15db9742\nfalse\n```\n显然获取的不是同一个对象\n\n- 解决方案：\n\n对构造函数做以下处理\n``` java\n\tprivate Singleton(){\n\t\tif (instance != null) {\n\t\t\tthrow new RuntimeException();\n\t\t}\n\t}\n```\n\n#### 通过反序列化破坏单例\n``` java\n\tpackage cn.sakuraffy.singleton;\n\n\timport java.io.ByteArrayInputStream;\n\timport java.io.ByteArrayOutputStream;\n\timport java.io.ObjectInputStream;\n\timport java.io.ObjectOutputStream;\n\timport java.io.Serializable;\n\n\tpublic class SerSingletonBug {\n\t\t\n\t\tprivate static class Singleton implements Serializable {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\n\t\t\tprivate static final Singleton instance = new Singleton();                    \n\t\t\t\n\t\t\tprivate Singleton() {}\n\t\t\t\n\t\t\tpublic static Singleton newInstance() {\n\t\t\t\treturn instance;\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) throws Exception {\n\t\t\tSingleton s = Singleton.newInstance();\n\t\t\t\n\t\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\t\tObjectOutputStream oos = new ObjectOutputStream(baos);\n\t\t\toos.writeObject(s);\n\t\t\tbyte[] bytes = baos.toByteArray();\n\t\t\toos.close();\n\t\t\t\n\t\t\tByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n\t\t\tObjectInputStream ois = new ObjectInputStream(bais);\n\t\t\tSingleton s1 = (Singleton) ois.readObject();\n\t\t\tois.close();\n\t\t\t\n\t\t\tSystem.out.println(s);\n\t\t\tSystem.out.println(s1);\n\t\t\tSystem.out.println(s1 == s);\n\t\t}\n\t}\n```\n\n- 输出结果： \n``` java\ncn.sakuraffy.singleton.SerSingletonBug$Singleton@33909752\ncn.sakuraffy.singleton.SerSingletonBug$Singleton@55f96302\nfalse\n```\n显然获取的不是同一个对象，这里要注意的Singleton一定要实现序列化接口，关于序列化的问题，请参考[序列化机制](https://sakuraffy.github.io/java_serializable/)\n\n- 解决方案：\n\n对Singleton添加以下方法\n``` java\n\tprivate Object readResolve() throws ObjectStreamException {\n\t\treturn instance;\n\t}\n```","source":"_posts/pattern_singleton.md","raw":"---\ntitle: 单例模式(Singleton)\ndate: 2016-10-18 18:43:49\ntags: 设计模式\ntop: 999\n---\n\n\n\n### 什么是单例模式\n\n在程序和项目中，我们经常会创建并使用对象，但我们知道频繁地创建对象会消耗大量的时间，也会降低程序的效率，而单例这种设计模式就是这种问题的，单例顾名思义就是一个类只有一个对象\n\n### 单例模式的几种方式\n\n<!--more-->\n\n#### 懒汉式\n``` java\n\tpackage cn.sakuraffy.singleton;\n\n\tpublic class LazySingleton {\n\t\tprivate final static LazySingleton instance = new LazySingleton();\n\t\t\n\t\tprivate LazySingleton() {}\n\t\t\n\t\tpublic static LazySingleton newInstance() {\n\t\t\treturn instance;\n\t\t}\n\t}\n```\n- 优点 ： 简单\n- 缺点 ： 无论这个类是否被用到，都需要创建instance对象\n\n#### 饿汉式\n``` java\n\tpackage cn.sakuraffy.singleton;\n\n\tpublic class HungrySingleton {\n\t\tprivate static HungrySingleton instance;\n\t\t\n\t\tprivate HungrySingleton() {}\n\n\t\tpublic static HungrySingleton newInstance() {\n\t\t\tif (instance == null) {\n\t\t\t\tinstance = new HungrySingleton();\n\t\t\t} \n\t\t\treturn instance;\n\t\t}\n\t}\n```\n\n- 优点 ： 迟缓，用到的时候才加载。\n- 缺点 ： 在多线程下会出现问题。\n\n#### 双重检验式\n``` java \n\tpackage cn.sakuraffy.singleton;\n\n\tpublic class DoubleCheckSingleton {\n\t\tprivate static DoubleCheckSingleton instance = null;\n\t\t\n\t\tprivate DoubleCheckSingleton() {}\n\t\t\n\t\tpublic static DoubleCheckSingleton newInstance() {\n\t\t\tif (instance == null){\n\t\t\t\tsynchronized (DoubleCheckSingleton.class) {\n\t\t\t\t\t// 避免判断了instance==null的等待线程重复创建instance\n\t\t\t\t\tif (instance == null){  \n\t\t\t\t\t\tinstance = new DoubleCheckSingleton();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn instance;\n\t\t}\n\t}\n```\n\n- 优点 ： 可以同步，性能较高\n- 缺点 ： 在JVM的编译器优化时无法确定先创建栈中的内存还是堆中的内存\n\t下面我们来考虑这么一种情况：线程A开始创建SingletonClass的实例，此时线程B调用了getInstance()方法，\n\t首先判断instance是否为null。按照我们上面所说的内存模型，A已经把instance指向了那块内存，\n\t只是还没有调用构造方法，因此B检测到instance不为null，于是直接把instance返回了——问题出现了，\t尽管instance不为null，但它并没有构造完成，就像一套房子已经给了你钥匙，但你并不能住进去，因为里面还没有收拾。此时，如果B在A将instance构造完成之前就是用了这个实例，程序就会出现错误了！\n\n#### 解决了内存分配的问题了两种方式\n\n使用 volatile 关键词\n``` java\n\tpackage cn.sakuraffy.singleton;\n\n\tpublic class VolatileSingleton {\n\t\tprivate static volatile VolatileSingleton instance = null;\n\t\t\n\t\tprivate VolatileSingleton(){}\n\t\t\n\t\tpublic static VolatileSingleton newInstance() {\n\t\t\tif (instance == null){\n\t\t\t\tsynchronized (VolatileSingleton.class) {\n\t\t\t\t\t// 避免判断了instance==null的等待线程重复创建instance\n\t\t\t\t\tif (instance == null){  \n\t\t\t\t\t\tinstance = new VolatileSingleton();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn instance;\n\t\t}\n\t}\n```\n\n使用内部类\n``` java\n\tpackage cn.sakuraffy.singleton;\n\n\tpublic class InnerClassSingleton {\n\t\tprivate static class SingletonInstance {\n\t\t\tprivate static final InnerClassSingleton instance = new InnerClassSingleton(); \n\t\t}\n\t\t\n\t\tprivate InnerClassSingleton() {}\n\t\t\n\t\tpublic static InnerClassSingleton newInstance() {\n\t\t\treturn SingletonInstance.instance;\n\t\t}\n\t}\n```\n\n### enum  就是天然的单例 (推荐)\n``` java\n\tpackage cn.sakuraffy.singleton;\n\n\tpublic enum EnumSingleton {\n\t\tinstance\n\t}\n\n```\n\n### 单例模式的补充\n\n#### 通过反射破坏单例怎么解决\n``` java\n\tpackage cn.sakuraffy.singleton;\n\n\timport java.lang.reflect.Constructor;\n\n\tpublic class RefectSingletonBug {\n\t\tpublic static void main(String[] args) throws Exception {\n\t\t\tHungrySingleton hs = HungrySingleton.newInstance();\n\t\t\tClass<HungrySingleton> clazz = HungrySingleton.class;\n\t\t\tConstructor<HungrySingleton> c = clazz.getDeclaredConstructor();\n\t\t\tc.setAccessible(true);\n\t\t\tHungrySingleton hs1 = c.newInstance();\n\t\t\t\n\t\t\tSystem.out.println(hs);\n\t\t\tSystem.out.println(hs1);\n\t\t\tSystem.out.println(hs == hs1);\n\t\t}\n\t}\n```\n\n- 输出结果：\n``` java\ncn.sakuraffy.singleton.HungrySingleton@2a139a55\ncn.sakuraffy.singleton.HungrySingleton@15db9742\nfalse\n```\n显然获取的不是同一个对象\n\n- 解决方案：\n\n对构造函数做以下处理\n``` java\n\tprivate Singleton(){\n\t\tif (instance != null) {\n\t\t\tthrow new RuntimeException();\n\t\t}\n\t}\n```\n\n#### 通过反序列化破坏单例\n``` java\n\tpackage cn.sakuraffy.singleton;\n\n\timport java.io.ByteArrayInputStream;\n\timport java.io.ByteArrayOutputStream;\n\timport java.io.ObjectInputStream;\n\timport java.io.ObjectOutputStream;\n\timport java.io.Serializable;\n\n\tpublic class SerSingletonBug {\n\t\t\n\t\tprivate static class Singleton implements Serializable {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\n\t\t\tprivate static final Singleton instance = new Singleton();                    \n\t\t\t\n\t\t\tprivate Singleton() {}\n\t\t\t\n\t\t\tpublic static Singleton newInstance() {\n\t\t\t\treturn instance;\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) throws Exception {\n\t\t\tSingleton s = Singleton.newInstance();\n\t\t\t\n\t\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\t\tObjectOutputStream oos = new ObjectOutputStream(baos);\n\t\t\toos.writeObject(s);\n\t\t\tbyte[] bytes = baos.toByteArray();\n\t\t\toos.close();\n\t\t\t\n\t\t\tByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n\t\t\tObjectInputStream ois = new ObjectInputStream(bais);\n\t\t\tSingleton s1 = (Singleton) ois.readObject();\n\t\t\tois.close();\n\t\t\t\n\t\t\tSystem.out.println(s);\n\t\t\tSystem.out.println(s1);\n\t\t\tSystem.out.println(s1 == s);\n\t\t}\n\t}\n```\n\n- 输出结果： \n``` java\ncn.sakuraffy.singleton.SerSingletonBug$Singleton@33909752\ncn.sakuraffy.singleton.SerSingletonBug$Singleton@55f96302\nfalse\n```\n显然获取的不是同一个对象，这里要注意的Singleton一定要实现序列化接口，关于序列化的问题，请参考[序列化机制](https://sakuraffy.github.io/java_serializable/)\n\n- 解决方案：\n\n对Singleton添加以下方法\n``` java\n\tprivate Object readResolve() throws ObjectStreamException {\n\t\treturn instance;\n\t}\n```","slug":"pattern_singleton","published":1,"updated":"2017-03-08T12:38:01.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00ye5fn004lqoq1ytd7mmtb","content":"<h3 id=\"什么是单例模式\"><a href=\"#什么是单例模式\" class=\"headerlink\" title=\"什么是单例模式\"></a>什么是单例模式</h3><p>在程序和项目中，我们经常会创建并使用对象，但我们知道频繁地创建对象会消耗大量的时间，也会降低程序的效率，而单例这种设计模式就是这种问题的，单例顾名思义就是一个类只有一个对象</p>\n<h3 id=\"单例模式的几种方式\"><a href=\"#单例模式的几种方式\" class=\"headerlink\" title=\"单例模式的几种方式\"></a>单例模式的几种方式</h3><a id=\"more\"></a>\n<h4 id=\"懒汉式\"><a href=\"#懒汉式\" class=\"headerlink\" title=\"懒汉式\"></a>懒汉式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.singleton;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LazySingleton</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> LazySingleton instance = <span class=\"keyword\">new</span> LazySingleton();</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">LazySingleton</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LazySingleton <span class=\"title\">newInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> instance;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>优点 ： 简单</li>\n<li>缺点 ： 无论这个类是否被用到，都需要创建instance对象</li>\n</ul>\n<h4 id=\"饿汉式\"><a href=\"#饿汉式\" class=\"headerlink\" title=\"饿汉式\"></a>饿汉式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.singleton;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HungrySingleton</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> HungrySingleton instance;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">HungrySingleton</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> HungrySingleton <span class=\"title\">newInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\tinstance = <span class=\"keyword\">new</span> HungrySingleton();</div><div class=\"line\">\t\t&#125; </div><div class=\"line\">\t\t<span class=\"keyword\">return</span> instance;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>优点 ： 迟缓，用到的时候才加载。</li>\n<li>缺点 ： 在多线程下会出现问题。</li>\n</ul>\n<h4 id=\"双重检验式\"><a href=\"#双重检验式\" class=\"headerlink\" title=\"双重检验式\"></a>双重检验式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.singleton;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DoubleCheckSingleton</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> DoubleCheckSingleton instance = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">DoubleCheckSingleton</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DoubleCheckSingleton <span class=\"title\">newInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span> (DoubleCheckSingleton.class) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 避免判断了instance==null的等待线程重复创建instance</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>)&#123;  </div><div class=\"line\">\t\t\t\t\tinstance = <span class=\"keyword\">new</span> DoubleCheckSingleton();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> instance;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>优点 ： 可以同步，性能较高</li>\n<li>缺点 ： 在JVM的编译器优化时无法确定先创建栈中的内存还是堆中的内存<br>  下面我们来考虑这么一种情况：线程A开始创建SingletonClass的实例，此时线程B调用了getInstance()方法，<br>  首先判断instance是否为null。按照我们上面所说的内存模型，A已经把instance指向了那块内存，<br>  只是还没有调用构造方法，因此B检测到instance不为null，于是直接把instance返回了——问题出现了，    尽管instance不为null，但它并没有构造完成，就像一套房子已经给了你钥匙，但你并不能住进去，因为里面还没有收拾。此时，如果B在A将instance构造完成之前就是用了这个实例，程序就会出现错误了！</li>\n</ul>\n<h4 id=\"解决了内存分配的问题了两种方式\"><a href=\"#解决了内存分配的问题了两种方式\" class=\"headerlink\" title=\"解决了内存分配的问题了两种方式\"></a>解决了内存分配的问题了两种方式</h4><p>使用 volatile 关键词<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.singleton;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VolatileSingleton</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> VolatileSingleton instance = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">VolatileSingleton</span><span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> VolatileSingleton <span class=\"title\">newInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span> (VolatileSingleton.class) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 避免判断了instance==null的等待线程重复创建instance</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>)&#123;  </div><div class=\"line\">\t\t\t\t\tinstance = <span class=\"keyword\">new</span> VolatileSingleton();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> instance;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>使用内部类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.singleton;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClassSingleton</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonInstance</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> InnerClassSingleton instance = <span class=\"keyword\">new</span> InnerClassSingleton(); </div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">InnerClassSingleton</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> InnerClassSingleton <span class=\"title\">newInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> SingletonInstance.instance;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"enum-就是天然的单例-推荐\"><a href=\"#enum-就是天然的单例-推荐\" class=\"headerlink\" title=\"enum  就是天然的单例 (推荐)\"></a>enum  就是天然的单例 (推荐)</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.singleton;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> EnumSingleton &#123;</div><div class=\"line\">\tinstance</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"单例模式的补充\"><a href=\"#单例模式的补充\" class=\"headerlink\" title=\"单例模式的补充\"></a>单例模式的补充</h3><h4 id=\"通过反射破坏单例怎么解决\"><a href=\"#通过反射破坏单例怎么解决\" class=\"headerlink\" title=\"通过反射破坏单例怎么解决\"></a>通过反射破坏单例怎么解决</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.singleton;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RefectSingletonBug</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tHungrySingleton hs = HungrySingleton.newInstance();</div><div class=\"line\">\t\tClass&lt;HungrySingleton&gt; clazz = HungrySingleton.class;</div><div class=\"line\">\t\tConstructor&lt;HungrySingleton&gt; c = clazz.getDeclaredConstructor();</div><div class=\"line\">\t\tc.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">\t\tHungrySingleton hs1 = c.newInstance();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(hs);</div><div class=\"line\">\t\tSystem.out.println(hs1);</div><div class=\"line\">\t\tSystem.out.println(hs == hs1);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>输出结果：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cn.sakuraffy.singleton.HungrySingleton@<span class=\"number\">2</span>a139a55</div><div class=\"line\">cn.sakuraffy.singleton.HungrySingleton@<span class=\"number\">15</span>db9742</div><div class=\"line\"><span class=\"keyword\">false</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>显然获取的不是同一个对象</p>\n<ul>\n<li>解决方案：</li>\n</ul>\n<p>对构造函数做以下处理<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (instance != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"通过反序列化破坏单例\"><a href=\"#通过反序列化破坏单例\" class=\"headerlink\" title=\"通过反序列化破坏单例\"></a>通过反序列化破坏单例</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.singleton;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayInputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayOutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectInputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectOutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SerSingletonBug</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton instance = <span class=\"keyword\">new</span> Singleton();                    </div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">newInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> instance;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tSingleton s = Singleton.newInstance();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tByteArrayOutputStream baos = <span class=\"keyword\">new</span> ByteArrayOutputStream();</div><div class=\"line\">\t\tObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(baos);</div><div class=\"line\">\t\toos.writeObject(s);</div><div class=\"line\">\t\t<span class=\"keyword\">byte</span>[] bytes = baos.toByteArray();</div><div class=\"line\">\t\toos.close();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tByteArrayInputStream bais = <span class=\"keyword\">new</span> ByteArrayInputStream(bytes);</div><div class=\"line\">\t\tObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(bais);</div><div class=\"line\">\t\tSingleton s1 = (Singleton) ois.readObject();</div><div class=\"line\">\t\tois.close();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(s);</div><div class=\"line\">\t\tSystem.out.println(s1);</div><div class=\"line\">\t\tSystem.out.println(s1 == s);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>输出结果： <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cn.sakuraffy.singleton.SerSingletonBug$Singleton@<span class=\"number\">33909752</span></div><div class=\"line\">cn.sakuraffy.singleton.SerSingletonBug$Singleton@<span class=\"number\">55f</span>96302</div><div class=\"line\"><span class=\"keyword\">false</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>显然获取的不是同一个对象，这里要注意的Singleton一定要实现序列化接口，关于序列化的问题，请参考<a href=\"https://sakuraffy.github.io/java_serializable/\">序列化机制</a></p>\n<ul>\n<li>解决方案：</li>\n</ul>\n<p>对Singleton添加以下方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Object <span class=\"title\">readResolve</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ObjectStreamException </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> instance;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<h3 id=\"什么是单例模式\"><a href=\"#什么是单例模式\" class=\"headerlink\" title=\"什么是单例模式\"></a>什么是单例模式</h3><p>在程序和项目中，我们经常会创建并使用对象，但我们知道频繁地创建对象会消耗大量的时间，也会降低程序的效率，而单例这种设计模式就是这种问题的，单例顾名思义就是一个类只有一个对象</p>\n<h3 id=\"单例模式的几种方式\"><a href=\"#单例模式的几种方式\" class=\"headerlink\" title=\"单例模式的几种方式\"></a>单例模式的几种方式</h3>","more":"<h4 id=\"懒汉式\"><a href=\"#懒汉式\" class=\"headerlink\" title=\"懒汉式\"></a>懒汉式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.singleton;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LazySingleton</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> LazySingleton instance = <span class=\"keyword\">new</span> LazySingleton();</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">LazySingleton</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LazySingleton <span class=\"title\">newInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> instance;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>优点 ： 简单</li>\n<li>缺点 ： 无论这个类是否被用到，都需要创建instance对象</li>\n</ul>\n<h4 id=\"饿汉式\"><a href=\"#饿汉式\" class=\"headerlink\" title=\"饿汉式\"></a>饿汉式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.singleton;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HungrySingleton</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> HungrySingleton instance;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">HungrySingleton</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> HungrySingleton <span class=\"title\">newInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\tinstance = <span class=\"keyword\">new</span> HungrySingleton();</div><div class=\"line\">\t\t&#125; </div><div class=\"line\">\t\t<span class=\"keyword\">return</span> instance;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>优点 ： 迟缓，用到的时候才加载。</li>\n<li>缺点 ： 在多线程下会出现问题。</li>\n</ul>\n<h4 id=\"双重检验式\"><a href=\"#双重检验式\" class=\"headerlink\" title=\"双重检验式\"></a>双重检验式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.singleton;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DoubleCheckSingleton</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> DoubleCheckSingleton instance = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">DoubleCheckSingleton</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DoubleCheckSingleton <span class=\"title\">newInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span> (DoubleCheckSingleton.class) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 避免判断了instance==null的等待线程重复创建instance</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>)&#123;  </div><div class=\"line\">\t\t\t\t\tinstance = <span class=\"keyword\">new</span> DoubleCheckSingleton();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> instance;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>优点 ： 可以同步，性能较高</li>\n<li>缺点 ： 在JVM的编译器优化时无法确定先创建栈中的内存还是堆中的内存<br>  下面我们来考虑这么一种情况：线程A开始创建SingletonClass的实例，此时线程B调用了getInstance()方法，<br>  首先判断instance是否为null。按照我们上面所说的内存模型，A已经把instance指向了那块内存，<br>  只是还没有调用构造方法，因此B检测到instance不为null，于是直接把instance返回了——问题出现了，    尽管instance不为null，但它并没有构造完成，就像一套房子已经给了你钥匙，但你并不能住进去，因为里面还没有收拾。此时，如果B在A将instance构造完成之前就是用了这个实例，程序就会出现错误了！</li>\n</ul>\n<h4 id=\"解决了内存分配的问题了两种方式\"><a href=\"#解决了内存分配的问题了两种方式\" class=\"headerlink\" title=\"解决了内存分配的问题了两种方式\"></a>解决了内存分配的问题了两种方式</h4><p>使用 volatile 关键词<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.singleton;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VolatileSingleton</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> VolatileSingleton instance = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">VolatileSingleton</span><span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> VolatileSingleton <span class=\"title\">newInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span> (VolatileSingleton.class) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 避免判断了instance==null的等待线程重复创建instance</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>)&#123;  </div><div class=\"line\">\t\t\t\t\tinstance = <span class=\"keyword\">new</span> VolatileSingleton();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> instance;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>使用内部类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.singleton;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClassSingleton</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonInstance</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> InnerClassSingleton instance = <span class=\"keyword\">new</span> InnerClassSingleton(); </div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">InnerClassSingleton</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> InnerClassSingleton <span class=\"title\">newInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> SingletonInstance.instance;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"enum-就是天然的单例-推荐\"><a href=\"#enum-就是天然的单例-推荐\" class=\"headerlink\" title=\"enum  就是天然的单例 (推荐)\"></a>enum  就是天然的单例 (推荐)</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.singleton;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> EnumSingleton &#123;</div><div class=\"line\">\tinstance</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"单例模式的补充\"><a href=\"#单例模式的补充\" class=\"headerlink\" title=\"单例模式的补充\"></a>单例模式的补充</h3><h4 id=\"通过反射破坏单例怎么解决\"><a href=\"#通过反射破坏单例怎么解决\" class=\"headerlink\" title=\"通过反射破坏单例怎么解决\"></a>通过反射破坏单例怎么解决</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.singleton;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RefectSingletonBug</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tHungrySingleton hs = HungrySingleton.newInstance();</div><div class=\"line\">\t\tClass&lt;HungrySingleton&gt; clazz = HungrySingleton.class;</div><div class=\"line\">\t\tConstructor&lt;HungrySingleton&gt; c = clazz.getDeclaredConstructor();</div><div class=\"line\">\t\tc.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">\t\tHungrySingleton hs1 = c.newInstance();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(hs);</div><div class=\"line\">\t\tSystem.out.println(hs1);</div><div class=\"line\">\t\tSystem.out.println(hs == hs1);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>输出结果：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cn.sakuraffy.singleton.HungrySingleton@<span class=\"number\">2</span>a139a55</div><div class=\"line\">cn.sakuraffy.singleton.HungrySingleton@<span class=\"number\">15</span>db9742</div><div class=\"line\"><span class=\"keyword\">false</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>显然获取的不是同一个对象</p>\n<ul>\n<li>解决方案：</li>\n</ul>\n<p>对构造函数做以下处理<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (instance != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"通过反序列化破坏单例\"><a href=\"#通过反序列化破坏单例\" class=\"headerlink\" title=\"通过反序列化破坏单例\"></a>通过反序列化破坏单例</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.sakuraffy.singleton;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayInputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayOutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectInputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectOutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SerSingletonBug</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton instance = <span class=\"keyword\">new</span> Singleton();                    </div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">newInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> instance;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tSingleton s = Singleton.newInstance();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tByteArrayOutputStream baos = <span class=\"keyword\">new</span> ByteArrayOutputStream();</div><div class=\"line\">\t\tObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(baos);</div><div class=\"line\">\t\toos.writeObject(s);</div><div class=\"line\">\t\t<span class=\"keyword\">byte</span>[] bytes = baos.toByteArray();</div><div class=\"line\">\t\toos.close();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tByteArrayInputStream bais = <span class=\"keyword\">new</span> ByteArrayInputStream(bytes);</div><div class=\"line\">\t\tObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(bais);</div><div class=\"line\">\t\tSingleton s1 = (Singleton) ois.readObject();</div><div class=\"line\">\t\tois.close();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(s);</div><div class=\"line\">\t\tSystem.out.println(s1);</div><div class=\"line\">\t\tSystem.out.println(s1 == s);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>输出结果： <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cn.sakuraffy.singleton.SerSingletonBug$Singleton@<span class=\"number\">33909752</span></div><div class=\"line\">cn.sakuraffy.singleton.SerSingletonBug$Singleton@<span class=\"number\">55f</span>96302</div><div class=\"line\"><span class=\"keyword\">false</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>显然获取的不是同一个对象，这里要注意的Singleton一定要实现序列化接口，关于序列化的问题，请参考<a href=\"https://sakuraffy.github.io/java_serializable/\">序列化机制</a></p>\n<ul>\n<li>解决方案：</li>\n</ul>\n<p>对Singleton添加以下方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Object <span class=\"title\">readResolve</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ObjectStreamException </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> instance;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj00ye5b50000qoq1hqcydsal","tag_id":"cj00ye5be0003qoq11mutehno","_id":"cj00ye5bq0008qoq1iqk2qf0f"},{"post_id":"cj00ye5bq0009qoq1z61ztixh","tag_id":"cj00ye5bp0007qoq1221286vj","_id":"cj00ye5bv000cqoq1gt4kewkm"},{"post_id":"cj00ye5bc0002qoq1mwgnlzib","tag_id":"cj00ye5bp0007qoq1221286vj","_id":"cj00ye5bw000eqoq1o0wfjsen"},{"post_id":"cj00ye5bs000aqoq127tli7hz","tag_id":"cj00ye5bp0007qoq1221286vj","_id":"cj00ye5bz000hqoq1rh7n6odx"},{"post_id":"cj00ye5bv000dqoq1uhn4didf","tag_id":"cj00ye5bp0007qoq1221286vj","_id":"cj00ye5c1000jqoq1xq143pzx"},{"post_id":"cj00ye5bh0004qoq15g6945vd","tag_id":"cj00ye5be0003qoq11mutehno","_id":"cj00ye5c3000mqoq1kt3e4h3s"},{"post_id":"cj00ye5bx000fqoq1h6gn28fi","tag_id":"cj00ye5bp0007qoq1221286vj","_id":"cj00ye5c5000oqoq1a88zg8si"},{"post_id":"cj00ye5bz000iqoq12gp0t33h","tag_id":"cj00ye5bp0007qoq1221286vj","_id":"cj00ye5ca000rqoq1fi9zjc76"},{"post_id":"cj00ye5bl0005qoq1xghtl4b2","tag_id":"cj00ye5bp0007qoq1221286vj","_id":"cj00ye5cc000tqoq15w1jk888"},{"post_id":"cj00ye5c2000kqoq1wfbs92jq","tag_id":"cj00ye5bp0007qoq1221286vj","_id":"cj00ye5ce000vqoq15lttpeqv"},{"post_id":"cj00ye5bn0006qoq1j7yls6v9","tag_id":"cj00ye5bp0007qoq1221286vj","_id":"cj00ye5ci000yqoq1of5buwtv"},{"post_id":"cj00ye5cc000uqoq1s99xhokz","tag_id":"cj00ye5ca000qqoq1igwyr09y","_id":"cj00ye5cj0010qoq1qetxcbbr"},{"post_id":"cj00ye5c3000nqoq1863ltuse","tag_id":"cj00ye5ca000qqoq1igwyr09y","_id":"cj00ye5cm0013qoq1uv2ijzsh"},{"post_id":"cj00ye5cf000wqoq1j55bmw6d","tag_id":"cj00ye5ca000qqoq1igwyr09y","_id":"cj00ye5cn0015qoq1gewi5j1s"},{"post_id":"cj00ye5c5000pqoq1y86kj3og","tag_id":"cj00ye5ca000qqoq1igwyr09y","_id":"cj00ye5cp0018qoq1fezisscj"},{"post_id":"cj00ye5cb000sqoq1250rd4di","tag_id":"cj00ye5ca000qqoq1igwyr09y","_id":"cj00ye5cq001aqoq197p79vwy"},{"post_id":"cj00ye5ci000zqoq1dnfguo10","tag_id":"cj00ye5cp0017qoq124eu76rd","_id":"cj00ye5ct001eqoq1r9e1supd"},{"post_id":"cj00ye5ck0011qoq1rqk3hc2t","tag_id":"cj00ye5cp0017qoq124eu76rd","_id":"cj00ye5cz001iqoq1x85jslyb"},{"post_id":"cj00ye5cy001hqoq1ajo7r4pj","tag_id":"cj00ye5cw001gqoq1z5qvonva","_id":"cj00ye5d2001lqoq1u7xyky2w"},{"post_id":"cj00ye5cm0014qoq1zyx0kf4s","tag_id":"cj00ye5cw001gqoq1z5qvonva","_id":"cj00ye5d5001nqoq1chyhqtko"},{"post_id":"cj00ye5cz001jqoq1z754zop8","tag_id":"cj00ye5cw001gqoq1z5qvonva","_id":"cj00ye5d8001qqoq14s5ek9iz"},{"post_id":"cj00ye5d2001mqoq107iyfmk9","tag_id":"cj00ye5cw001gqoq1z5qvonva","_id":"cj00ye5da001sqoq1e5gncbfc"},{"post_id":"cj00ye5co0016qoq1j8cv9250","tag_id":"cj00ye5cw001gqoq1z5qvonva","_id":"cj00ye5de001vqoq1o6ci06vw"},{"post_id":"cj00ye5d6001oqoq19kl0xfpo","tag_id":"cj00ye5cw001gqoq1z5qvonva","_id":"cj00ye5di001xqoq15v8t63xi"},{"post_id":"cj00ye5d9001rqoq1qdam2as6","tag_id":"cj00ye5cw001gqoq1z5qvonva","_id":"cj00ye5dk0020qoq1z3irssn9"},{"post_id":"cj00ye5cq0019qoq1ajnnj6xp","tag_id":"cj00ye5cw001gqoq1z5qvonva","_id":"cj00ye5dm0022qoq1iusc92fd"},{"post_id":"cj00ye5db001tqoq1vlc36roh","tag_id":"cj00ye5cw001gqoq1z5qvonva","_id":"cj00ye5do0025qoq1sic8njbh"},{"post_id":"cj00ye5de001wqoq1ym0xu4ri","tag_id":"cj00ye5cw001gqoq1z5qvonva","_id":"cj00ye5ds0027qoq15djf00n2"},{"post_id":"cj00ye5cr001bqoq14dqs41tw","tag_id":"cj00ye5cw001gqoq1z5qvonva","_id":"cj00ye5dv0029qoq1te1toeen"},{"post_id":"cj00ye5dj001yqoq1nb27n47i","tag_id":"cj00ye5cw001gqoq1z5qvonva","_id":"cj00ye5dy002bqoq15qy2a19j"},{"post_id":"cj00ye5dl0021qoq1cwh52293","tag_id":"cj00ye5cw001gqoq1z5qvonva","_id":"cj00ye5e0002dqoq1h95qpm0m"},{"post_id":"cj00ye5cs001dqoq19fkeg88j","tag_id":"cj00ye5cw001gqoq1z5qvonva","_id":"cj00ye5e2002fqoq1a0ht6bd5"},{"post_id":"cj00ye5dm0023qoq14vgvab3f","tag_id":"cj00ye5cw001gqoq1z5qvonva","_id":"cj00ye5e3002hqoq1kux9qi6w"},{"post_id":"cj00ye5dp0026qoq1l812bwm1","tag_id":"cj00ye5cw001gqoq1z5qvonva","_id":"cj00ye5e4002jqoq1165ql0qm"},{"post_id":"cj00ye5cv001fqoq1cycgw3oh","tag_id":"cj00ye5cw001gqoq1z5qvonva","_id":"cj00ye5e5002lqoq1f42wn9wy"},{"post_id":"cj00ye5ds0028qoq1mxpxwuk6","tag_id":"cj00ye5cw001gqoq1z5qvonva","_id":"cj00ye5e7002oqoq1pq2a58x2"},{"post_id":"cj00ye5dx002aqoq1uhg0zzut","tag_id":"cj00ye5cw001gqoq1z5qvonva","_id":"cj00ye5e9002qqoq14xpn4nvp"},{"post_id":"cj00ye5dz002cqoq12ltzkytp","tag_id":"cj00ye5cw001gqoq1z5qvonva","_id":"cj00ye5eb002sqoq1ppx8bqcb"},{"post_id":"cj00ye5e1002eqoq1j9tyhy5m","tag_id":"cj00ye5cw001gqoq1z5qvonva","_id":"cj00ye5ec002vqoq19kytvxvd"},{"post_id":"cj00ye5e2002gqoq16x0e25uy","tag_id":"cj00ye5cw001gqoq1z5qvonva","_id":"cj00ye5ee002xqoq1w6jdeigb"},{"post_id":"cj00ye5e4002iqoq1m2sb04l1","tag_id":"cj00ye5cw001gqoq1z5qvonva","_id":"cj00ye5ef0030qoq13pykgh11"},{"post_id":"cj00ye5e9002rqoq1uqu4wu8d","tag_id":"cj00ye5e6002nqoq173yli791","_id":"cj00ye5eg0032qoq13wrezc5c"},{"post_id":"cj00ye5e5002kqoq1ywtxmwk4","tag_id":"cj00ye5e6002nqoq173yli791","_id":"cj00ye5eh0035qoq1bvpu3dwf"},{"post_id":"cj00ye5eb002tqoq1b4o3ve8i","tag_id":"cj00ye5e6002nqoq173yli791","_id":"cj00ye5ej0037qoq1xggooeid"},{"post_id":"cj00ye5e6002mqoq1atwjhi8r","tag_id":"cj00ye5e6002nqoq173yli791","_id":"cj00ye5em0039qoq1udt9uxyn"},{"post_id":"cj00ye5ee002yqoq1hoo24ers","tag_id":"cj00ye5e6002nqoq173yli791","_id":"cj00ye5eo003cqoq1ca0f65vx"},{"post_id":"cj00ye5ef0031qoq1qpx919d3","tag_id":"cj00ye5e6002nqoq173yli791","_id":"cj00ye5ep003eqoq1uzo8k6yc"},{"post_id":"cj00ye5e7002pqoq1901c67tv","tag_id":"cj00ye5e6002nqoq173yli791","_id":"cj00ye5eq003gqoq1nmlpewhe"},{"post_id":"cj00ye5eg0033qoq1mwz8jfqm","tag_id":"cj00ye5e6002nqoq173yli791","_id":"cj00ye5es003jqoq1vbsbbqm8"},{"post_id":"cj00ye5ei0036qoq1w14hnt2j","tag_id":"cj00ye5e6002nqoq173yli791","_id":"cj00ye5et003lqoq1utnyuccm"},{"post_id":"cj00ye5ed002wqoq1fz959z2g","tag_id":"cj00ye5eh0034qoq1oxfpu70k","_id":"cj00ye5ex003oqoq18xkmaama"},{"post_id":"cj00ye5ek0038qoq1raqr5svd","tag_id":"cj00ye5eo003bqoq1x60yk658","_id":"cj00ye5ez003qqoq18imf9nre"},{"post_id":"cj00ye5en003aqoq12471yvhu","tag_id":"cj00ye5eo003bqoq1x60yk658","_id":"cj00ye5f1003tqoq1c17frfaf"},{"post_id":"cj00ye5eo003dqoq176rvgwmd","tag_id":"cj00ye5eo003bqoq1x60yk658","_id":"cj00ye5f2003vqoq1co8lhde8"},{"post_id":"cj00ye5f1003uqoq19x7xg1mi","tag_id":"cj00ye5f1003sqoq1ewnysmvw","_id":"cj00ye5f4003yqoq12fo175g6"},{"post_id":"cj00ye5ep003fqoq17f566vua","tag_id":"cj00ye5f1003sqoq1ewnysmvw","_id":"cj00ye5f60040qoq1ui2e8yxv"},{"post_id":"cj00ye5f2003wqoq1f5hp991i","tag_id":"cj00ye5f1003sqoq1ewnysmvw","_id":"cj00ye5f90043qoq19gdaqweg"},{"post_id":"cj00ye5f5003zqoq1c020g9gu","tag_id":"cj00ye5f1003sqoq1ewnysmvw","_id":"cj00ye5fa0045qoq1yqzsl8ac"},{"post_id":"cj00ye5er003hqoq1c6yk498k","tag_id":"cj00ye5f1003sqoq1ewnysmvw","_id":"cj00ye5fc0048qoq1wwtptb90"},{"post_id":"cj00ye5es003kqoq1ez6afdox","tag_id":"cj00ye5f1003sqoq1ewnysmvw","_id":"cj00ye5fd004aqoq1ohl8bjno"},{"post_id":"cj00ye5eu003mqoq12kyi43vm","tag_id":"cj00ye5f1003sqoq1ewnysmvw","_id":"cj00ye5fh004eqoq1rr8t0fov"},{"post_id":"cj00ye5ex003pqoq1251ao9j8","tag_id":"cj00ye5f1003sqoq1ewnysmvw","_id":"cj00ye5fj004iqoq11utak1fl"},{"post_id":"cj00ye5f0003rqoq14kmcvrxt","tag_id":"cj00ye5f1003sqoq1ewnysmvw","_id":"cj00ye5fo004mqoq1p6ar8xtb"},{"post_id":"cj00ye5fn004lqoq1ytd7mmtb","tag_id":"cj00ye5fl004kqoq1s9o260hu","_id":"cj00ye5fq004oqoq1zqwhtnaa"},{"post_id":"cj00ye5f60041qoq1ysqyuhup","tag_id":"cj00ye5fl004kqoq1s9o260hu","_id":"cj00ye5fs004pqoq1b6qcyw73"},{"post_id":"cj00ye5f90044qoq1iuyc1nua","tag_id":"cj00ye5fl004kqoq1s9o260hu","_id":"cj00ye5fu004rqoq1izxjxzdw"},{"post_id":"cj00ye5fa0046qoq1lvzpbjl6","tag_id":"cj00ye5fl004kqoq1s9o260hu","_id":"cj00ye5fw004tqoq10zq1whn3"},{"post_id":"cj00ye5fc0049qoq1xcukb5gn","tag_id":"cj00ye5fl004kqoq1s9o260hu","_id":"cj00ye5fy004vqoq19ewna9v7"},{"post_id":"cj00ye5fe004bqoq1qr6iujf3","tag_id":"cj00ye5fl004kqoq1s9o260hu","_id":"cj00ye5fz004xqoq1nb12tfs2"},{"post_id":"cj00ye5fg004dqoq1br3xw93l","tag_id":"cj00ye5fl004kqoq1s9o260hu","_id":"cj00ye5g0004zqoq1ml7n20r7"},{"post_id":"cj00ye5fh004fqoq1bv20cntl","tag_id":"cj00ye5fl004kqoq1s9o260hu","_id":"cj00ye5g10051qoq16oihblyt"},{"post_id":"cj00ye5fj004hqoq1ygeq5dwn","tag_id":"cj00ye5fl004kqoq1s9o260hu","_id":"cj00ye5g10053qoq1dx3ojks7"},{"post_id":"cj00ye5fk004jqoq1jc04bsya","tag_id":"cj00ye5fl004kqoq1s9o260hu","_id":"cj00ye5g20054qoq1kyr4koa3"}],"Tag":[{"name":"算法","_id":"cj00ye5be0003qoq11mutehno"},{"name":"Collection","_id":"cj00ye5bp0007qoq1221286vj"},{"name":"随笔","_id":"cj00ye5ca000qqoq1igwyr09y"},{"name":"freamwork","_id":"cj00ye5cp0017qoq124eu76rd"},{"name":"并发编程","_id":"cj00ye5cw001gqoq1z5qvonva"},{"name":"Java","_id":"cj00ye5e6002nqoq173yli791"},{"name":"java","_id":"cj00ye5eh0034qoq1oxfpu70k"},{"name":"JVM","_id":"cj00ye5eo003bqoq1x60yk658"},{"name":"Oracle","_id":"cj00ye5f1003sqoq1ewnysmvw"},{"name":"设计模式","_id":"cj00ye5fl004kqoq1s9o260hu"}]}}